<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2024-11-20T15:14:47+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Meta-Prompt for Better API Integration</title><link href="https://ib.bsb.br/meta-prompt-for-better-api-integration/" rel="alternate" type="text/html" title="Meta-Prompt for Better API Integration" /><published>2024-11-20T00:00:00+00:00</published><updated>2024-11-20T15:13:57+00:00</updated><id>https://ib.bsb.br/meta-prompt-for-better-api-integration</id><content type="html" xml:base="https://ib.bsb.br/meta-prompt-for-better-api-integration/"><![CDATA[<p>URL Source: <code class="language-plaintext highlighter-rouge">https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/</code></p>

<p>We recently published <a href="https://docs.jina.ai/">Meta-Prompt</a>, a single text file that outlines all of our API specifications. You can think of it as documentation for LLMs, and use it to automatically generate integrations of our APIs including Reader, Embeddings, Reranker, and more.</p>

<p>0:00</p>

<p>/1:44</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/meta-prompt-square-VEED_thumb.jpg" alt="Image 1" /></p>

<p>It‚Äôs as simple as copying and pasting our prompt into ChatGPT/Claude, or piping it into the <a href="https://github.com/simonw/llm"><code class="language-plaintext highlighter-rouge">llm</code></a> command as a system prompt, then adding your own prompt to specify what you want to build (which we do below). It‚Äôs great if you want to use LLMs to quickly build apps that scrape the web, work with embeddings, or even full-blown RAG systems. All that with minimal hallucinations.</p>

<p>Let‚Äôs say you want to use an LLM to generate code that uses Jina‚Äôs APIs. Let‚Äôs ask GPT-4o to do just that:</p>

<p>0:00</p>

<p>/0:27</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/output_thumb.jpg" alt="Image 2" /></p>

<p>Looks good, right? It‚Äôs got the <code class="language-plaintext highlighter-rouge">from jina import Client</code> and everything.</p>

<p>One small problem: The Jina package is in maintenance mode, and it is <em>not</em> the way to access our APIs. Even if you <em>do</em> install the Jina package, the generated program will crash when you try to run it:</p>

<p>0:00</p>

<p>/0:21</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/Screencast-from-2024-11-11-14-43-51_thumb.jpg" alt="Image 3" /></p>

<p>So what? We can just ask GPT to search the web for Jina‚Äôs APIs, right? Here‚Äôs what we get:</p>

<p>0:00</p>

<p>/1:14</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/Screencast-from-2024-11-11-14-45-33_thumb.jpg" alt="Image 4" /></p>

<p>However, if you look at the code it <em>doesn‚Äôt</em> use all of the relevant Jina APIs. It very clearly didn‚Äôt find out that Reader is a thing, instead making us install <a href="https://pypi.org/project/beautifulsoup4/">BeautifulSoup</a> to do the scraping. And, even when it <em>could</em> (supposedly) do the scraping with BeautifulSoup, it didn‚Äôt accurately parse the response format for Jina Embeddings, leading to a crash:</p>

<p>0:00</p>

<p>/0:16</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/Screencast-from-2024-11-11-14-50-35--1-_thumb.jpg" alt="Image 5" /></p>

<p>Yet, even if ChatGPT <em>could</em> do it properly by searching, many other LLMs (like Claude) don‚Äôt currently support web search, severely limiting your options.</p>

<p>This is where Meta-Prompt shines. With Meta-Prompt, you can load all the context and specifications of Jina‚Äôs APIs into the LLM. This means the LLM can generate code that leverages Jina‚Äôs APIs directly, without hallucinations or unnecessary workarounds, giving you code that works <em>the first time</em>.</p>

<p>üí°</p>

<p>Okay, <strong>usually</strong> the first time. LLMs can be unpredictable, but as you can see below, things went well in our experiments.</p>

<p>To put the Meta-Prompt through its paces, we ran a few experiments and evaluated the results. Unless otherwise specified, we used <a href="https://www.anthropic.com/news/claude-3-5-sonnet">Claude-3.5-Sonnet</a> as the LLM.</p>

<p>For all experiments, we specified relevant API keys (like <code class="language-plaintext highlighter-rouge">JINA_API_KEY</code> and <code class="language-plaintext highlighter-rouge">ANTHROPIC_API_KEY</code>) as environment variables before running the generated code.</p>

<h3 id="experiment-1-verifying-statements-using-meta-prompt-in-chatgpt"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#experiment-1-verifying-statements-using-meta-prompt-in-chatgpt" title="Experiment 1: Verifying Statements Using Meta-Prompt in ChatGPT"></a>Experiment 1: Verifying Statements Using Meta-Prompt in ChatGPT</h3>

<p>We‚Äôre writing this just after the US elections, where more disinformation than ever was flying around. How can we separate the signal from the noise in our feeds, and get just the good stuff with none of the lies?</p>

<p>Let‚Äôs say we want to check whether a new UK law is accurately reported on <a href="http://bbc.com/">BBC.com</a>, specifically the claim:</p>

<blockquote>
  <p>‚ÄúThe UK government has announced a new law that will require social media companies to verify the age of their users.‚Äù</p>
</blockquote>

<p>We can copy-paste the Meta-Prompt into ChatGPT, then type our own prompt to generate the code to do that, like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Write the JavaScript code to check the validity
of the following statement on bbc.com: 

"The UK government has announced a new law 
that will require social media companies to 
verify the age of their users."
</code></pre></div></div>

<p>0:00</p>

<p>/0:35</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/grounding-chatgpt_thumb.jpg" alt="Image 6" /></p>

<p>We can then run that with <code class="language-plaintext highlighter-rouge">node grounding.js</code> (after installing any prerequisite packages like <a href="https://www.npmjs.com/package/axios">axios</a>). We get output like this, showing that the claim is true, along with sources:</p>

<p>0:00</p>

<p>/0:04</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/grounding-run-1_thumb.jpg" alt="Image 7" /></p>

<h3 id="experiment-2-visualizing-hacker-news-from-the-cli"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#experiment-2-visualizing-hacker-news-from-the-cli" title="Experiment 2: Visualizing Hacker News from the CLI"></a>Experiment 2: Visualizing Hacker News from the CLI</h3>

<p>If you‚Äôre more of a command line warrior, you can use Meta-Prompt from the CLI via cURL. First, you‚Äôll need to install the <code class="language-plaintext highlighter-rouge">llm</code> Python package:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install llm
</code></pre></div></div>

<p>And then the Claude-3 plugin:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>llm install llm-claude-3
</code></pre></div></div>

<p>For the last stage of setup, specify your Anthropic API key:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export ANTHROPIC_API_KEY=&lt;your key&gt;
</code></pre></div></div>

<p>Now, let‚Äôs write a prompt to visualize every sentence from the Hacker News front page:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grab every sentence from hackernews frontpage and 
visualize them in a 2d umap using matplotlib
</code></pre></div></div>

<p>We can <a href="https://wizardzines.com/comics/bash-pipes/">pipe</a> this into the <code class="language-plaintext highlighter-rouge">llm</code> command with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl docs.jina.ai | llm -s "grab every sentence from hackernews frontpage and visualize them in a 2d umap using matplotlib" -m claude-3.5-sonnet
</code></pre></div></div>

<p>0:00</p>

<p>/0:24</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/Screencast-from-2024-11-11-11-23-03_thumb.jpg" alt="Image 8" /></p>

<p>If we extract and and run the generated code, we get something like this:</p>

<p>0:00</p>

<p>/0:38</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/Screencast-from-2024-11-11-11-28-43_thumb.jpg" alt="Image 9" /></p>

<p>üí°</p>

<p>One current limitation (though I‚Äôm sure with some extra coding from the user there‚Äôs a way around it) is that you‚Äôll need to install requirements manually. No <code class="language-plaintext highlighter-rouge">requirements.txt</code> is generated. In this case we needed <a href="https://umap-learn.readthedocs.io/en/latest/">UMAP</a> and <a href="https://matplotlib.org/">Matplotlib</a>, though your mileage may vary.</p>

<h3 id="experiment-3-building-a-simple-rag-system-with-json-storage"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#experiment-3-building-a-simple-rag-system-with-json-storage" title="Experiment 3: Building a Simple RAG System with JSON Storage"></a>Experiment 3: Building a Simple RAG System with JSON Storage</h3>

<p>To push things even farther, let‚Äôs create a simple RAG system. In my spare time I‚Äôm learning <a href="https://github.com/jeff-dh/SolidPython">SolidPython</a> so we‚Äôll use the repo and wiki as a knowledge base. To keep things simple, we won‚Äôt use a database, but rather just store the data in a JSON file.</p>

<p>Here‚Äôs the prompt, stored in the file <code class="language-plaintext highlighter-rouge">prompt.txt</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Create a simple RAG system using pages from these sources:

- repo: &lt;https://github.com/jeff-dh/SolidPython&gt;
- wiki: &lt;https://github.com/jeff-dh/SolidPython/wiki&gt; (and all the subpages)

Scrape no other pages.

Instead of using vector database, use JSON file

You can access an LLM with the CLI command: llm 'your prompt' -m claude-3.5-sonnet

After segmenting and indexing all the pages, present a prompt for the user to ask a
question. To answer the question, find the top three segments and pass them to the LLM
with the prompt:

--- prompt start ---
Based on these segments:

- {segment 1}
- {segment 2}
- {segment 3}

Answer the question: {question}
--- prompt end ---
</code></pre></div></div>

<p>As you can see, we can give the LLM additional tools by specifying them in the prompt. Without this, Claude often hallucinates a less optimal (or even broken) way to add the LLM to the RAG system.</p>

<p>Since this is a very long prompt (with plenty of punctuation that may break any pipe we run it in), we‚Äôll use the text <code class="language-plaintext highlighter-rouge">$(cat prompt.txt)</code> rather than the prompt itself when we run our command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl docs.jina.ai/v4 | llm -s "$(cat prompt.txt)" -m claude-3.5-sonnet
</code></pre></div></div>

<p>0:00</p>

<p>/0:34</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/docsqa-claude_thumb.jpg" alt="Image 10" /></p>

<p>Phew! That‚Äôs a lot of output. But (like with the Hacker News example) it‚Äôs a pain in the neck to extract and run the code from that big blob of text. Of course, there‚Äôs no problem that can‚Äôt be solved by just throwing more LLM at it, right? So let‚Äôs add another prompt to ‚Äúde-blob‚Äù the original output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>leave just the code in this file, remove all surrounding explanatory text. 
do not wrap code in backticks, just return "pure code"
</code></pre></div></div>

<p>Now we add that to our command pipeline and run it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl docs.jina.ai/v4 | llm -s "$(cat prompt.txt)" -m claude-3.5-sonnet | llm -s 'leave just the code in this file, remove all surrounding explanatory text. do not wrap code in backticks, just return "pure code"' -m claude-3.5-sonnet &gt; app.py
</code></pre></div></div>

<p>üí°</p>

<p>Since we‚Äôre using <code class="language-plaintext highlighter-rouge">&gt; app.py</code> at the end of our command to direct all output into a file, there‚Äôs nothing to show in a video.</p>

<p>We can then run that app with <code class="language-plaintext highlighter-rouge">python app.py</code> and we get our RAG program. As you can see, it can answer questions and maintain a working memory:</p>

<p>0:00</p>

<p>/0:34</p>

<p><img src="https://jina-ai-gmbh.ghost.io/content/media/2024/11/docsqa-run_thumb.jpg" alt="Image 11" /></p>

<p>üí°</p>

<p>The first run of this took a little longer, since it had to segment and encode all the data. For subsequent runs it loaded that from a JSON file to save time and cost.</p>

<h3 id="experiment-4-building-an-app-factory-with-meta-prompt"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#experiment-4-building-an-app-factory-with-meta-prompt" title="Experiment 4: Building an App Factory with Meta-Prompt"></a>Experiment 4: Building an App Factory with Meta-Prompt</h3>

<p>Now that we can generate scripts and apps non-interactively, we can easily automate an ‚Äúapp factory‚Äù - a script that iterates over prompts and produces Python scripts as output. You can get the app factory script in a <a href="https://gist.github.com/alexcg1/4150f2e7dfe0d635260c71d59324172b">GitHub gist</a> for now:</p>

<p><a href="https://gist.github.com/alexcg1/4150f2e7dfe0d635260c71d59324172b">App Factory with Jina AI Meta-Prompt App Factory with Jina AI Meta-Prompt. GitHub Gist: instantly share code, notes, and snippets. <img src="https://jina-ai-gmbh.ghost.io/content/images/icon/pinned-octocat-093da3e6fa40.svg" alt="Image 12" />262588213843476 <img src="https://jina-ai-gmbh.ghost.io/content/images/thumbnail/gist-og-image-54fd7dc0713e.png" alt="Image 13" /></a></p>

<p>What it does, in short, is:</p>

<ul>
  <li>Iterate through the <code class="language-plaintext highlighter-rouge">prompts</code> directory which contains (you guessed it) prompt files.</li>
  <li>Pass the Meta-Prompt and each prompt text to Claude-3.5-Sonnet (via <code class="language-plaintext highlighter-rouge">llm</code>).</li>
  <li>Take the output and pass that to Claude <em>again</em>, this time with the prompt telling it to just leave the code.</li>
  <li>Write that to a file in the <code class="language-plaintext highlighter-rouge">apps</code> directory.</li>
</ul>

<p>We‚Äôd show a demo, but there‚Äôs not much to see. It just logs which prompt filename it‚Äôs working on, and otherwise operates silently with no interesting output to the screen.</p>

<p>üí°</p>

<p><strong>Testing</strong> the apps it generates is another matter, one that I can‚Äôt solve off the top of my head. In our experience, we often specify the data we want to use in our prompts, usually by passing an external URL to download with Reader. Yet sometimes the LLM hallucinates mock data, and the script runs without obvious issues ‚Äî it just ‚Äúlies‚Äù about what it‚Äôs doing.</p>

<p>To take the app factory to the next level, you could go full <a href="https://www.notion.so/Meta-Prompt-LLM-Generated-Code-without-The-Hallucinations-333ad1ddc735470e83f987d7dd6a644f?pvs=21">Factorio</a> and write <em>another</em> script to generate app ideas and from there generate prompts to feed into the factory. We haven‚Äôt done that yet, but we leave it as an exercise for you, the reader.</p>

<p>We learned a lot from using Meta-Prompt, both about what to put in our own prompts and how different LLMs generate different output.</p>

<h3 id="general-observations"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#general-observations" title="General Observations"></a>General Observations</h3>

<ul>
  <li><strong>API Specialization</strong>: Using task-specific APIs (e.g., <a href="https://developers.google.com/books">Google Books</a> for book-related queries) ensures more consistent results than general-purpose search APIs, which can reduce token usage and improve reliability.</li>
  <li><strong>Custom Prompts for Reusability</strong>: For non-interactive setups, saving prompts as <code class="language-plaintext highlighter-rouge">.txt</code> files and piping them into the CLI enables efficient code-only outputs without extra explanatory text cluttering things up.</li>
  <li><strong>Structured Output</strong>: Storing outputs (usually in JSON format) and reloading them as needed saves tokens and streamlines tasks like generating embeddings, where token usage can be expensive.</li>
</ul>

<h3 id="insights-from-using-different-llms"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#insights-from-using-different-llms" title="Insights from Using Different LLMs"></a>Insights from Using Different LLMs</h3>

<p><strong>GPT</strong></p>

<ul>
  <li><strong>Prompt Retention Issues</strong>: GPT-4o sometimes loses details with lengthy instructions, leading to issues when it ‚Äúforgets‚Äù key elements mid-discussion. This leads to a <em>lot</em> of frustration when you have to remind it of simple things.</li>
  <li><strong>API Integration Challenges</strong>: In cases like integrating <a href="https://milvus.io/docs/milvus_lite.md">Milvus Lite</a> with <code class="language-plaintext highlighter-rouge">jina-embeddings-v3</code>, even when we provide the Milvus Lite API instructions, GPT-4o fails completely and repeatedly, generating code that creates databases that lack the embeddings that the code just generated, making semantic search applications impossible.</li>
</ul>

<p><strong>Claude</strong></p>

<ul>
  <li><strong>Code Output Limitations</strong>: Claude-3.5 often produces scripts that appear complete but contain silent issues, like missing error handling or failing to account for missing API keys. Additionally, it sometimes falls back on pre-set examples rather than generating responses tailored to specific instructions.</li>
  <li><strong>Silent Output</strong>: With LLM-generated code it <em>really</em> helps to have some logging of what‚Äôs happening behind the scenes when you run the program, just to make sure the model didn‚Äôt mess things up. Unless you directly specify to do so, apps created with Claude will often run silently, leaving you with no clue what‚Äôs happening.</li>
  <li><strong>Interaction with CLI</strong>: You need to clearly specify that CLI commands are <em>CLI</em> commands. If you tell Claude it can use the <code class="language-plaintext highlighter-rouge">llm</code> command, often it will try to call a Python <code class="language-plaintext highlighter-rouge">llm()</code> function which doesn‚Äôt exist.</li>
  <li><strong>Claude 3.5-Sonnet Is the Way to Go:</strong> Claude-3.5-Haiku also seemed to work okay in initial tests, but Opus and Sonnet-3 just summarize the Jina API instructions, without taking into account the user prompt.</li>
</ul>

<h2 id="conclusion"><a href="https://jina.ai/news/meta-prompt-for-better-jina-api-integration-and-codegen/#conclusion" title="Conclusion"></a>Conclusion</h2>

<p>Using Meta-Prompt provides new ways to integrate Jina‚Äôs APIs with LLMs, allowing you to run experiments and build apps that work on the first try. No more crashes, missed API connections, or hallucinated functions ‚Äî Meta-Prompt ensures the code generated is accurate and functional right out of the gate. Whether you‚Äôre verifying statements, generating embeddings, building a lightweight RAG system, or automating app creation, Meta-Prompt transforms natural language instructions into actionable, correct code, bypassing the typical back and forth with an LLM to get things that actually work.</p>

<p>Whether you‚Äôre copying Meta-Prompt into ChatGPT or using it with a custom LLM command, it offers a straightforward, reliable way to leverage Jina‚Äôs capabilities. Our experiments and insights show Meta-Prompt as a solid tool for robust integration into your projects.</p>

<p>If you‚Äôre ready to explore what Meta-Prompt can do, head to <a href="http://docs.jina.ai/">docs.jina.ai</a> for the latest documentation and resources.</p>]]></content><author><name></name></author><category term="AI&gt;LLM" /></entry><entry><title type="html">Troubleshooting Debian 11</title><link href="https://ib.bsb.br/troubleshooting-debian-11/" rel="alternate" type="text/html" title="Troubleshooting Debian 11" /><published>2024-11-16T00:00:00+00:00</published><updated>2024-11-16T18:58:43+00:00</updated><id>https://ib.bsb.br/troubleshooting-debian-11</id><content type="html" xml:base="https://ib.bsb.br/troubleshooting-debian-11/"><![CDATA[<p>Systematic approach to troubleshoot and resolve slow performance issues on a Debian 11</p>

<h3 id="1-immediate-actions">1. Immediate Actions</h3>

<p>If your system is extremely slow, try these first:</p>

<ul>
  <li><strong>Recovery Mode:</strong> Boot into recovery mode (usually by pressing Esc, Shift, or F2 during boot). This starts the system with minimal services, potentially bypassing the performance issue.</li>
  <li><strong>Kill Resource-Intensive Processes:</strong> If you can access a terminal, use <code class="language-plaintext highlighter-rouge">top</code> to identify and stop processes consuming excessive resources: <code class="language-plaintext highlighter-rouge">sudo pkill -STOP &lt;process_name&gt;</code>.</li>
  <li><strong>Clear System Cache:</strong>  <code class="language-plaintext highlighter-rouge">sudo sync &amp;&amp; sudo echo 3 &gt; /proc/sys/vm/drop_caches</code></li>
</ul>

<h3 id="2-basic-diagnostics">2. Basic Diagnostics</h3>

<ul>
  <li><strong>CPU Usage:</strong> <code class="language-plaintext highlighter-rouge">top</code> (or <code class="language-plaintext highlighter-rouge">htop</code> if installed) - Look for processes consistently using a high percentage of CPU.</li>
  <li><strong>Memory Usage:</strong> <code class="language-plaintext highlighter-rouge">free -h</code> - Check for low available memory, which could indicate excessive swapping.</li>
  <li><strong>Disk I/O:</strong> <code class="language-plaintext highlighter-rouge">iostat</code> - High <code class="language-plaintext highlighter-rouge">%util</code> values suggest disk bottlenecks.</li>
</ul>

<h3 id="3--rockchiparm64-specific-checks">3.  Rockchip/ARM64 Specific Checks</h3>

<ul>
  <li><strong>CPU Governor:</strong> <code class="language-plaintext highlighter-rouge">cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor</code> -  Should be <code class="language-plaintext highlighter-rouge">performance</code>. If not: <code class="language-plaintext highlighter-rouge">echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor</code></li>
  <li><strong>Thermal Throttling:</strong> <code class="language-plaintext highlighter-rouge">cat /sys/class/thermal/thermal_zone*/temp</code> - Check for overheating.</li>
</ul>

<h3 id="4-software-and-configuration-diagnostics">4. Software and Configuration Diagnostics</h3>

<ul>
  <li><strong>Boot Logs:</strong> <code class="language-plaintext highlighter-rouge">dmesg | less</code> - Look for errors or warnings during boot.</li>
  <li><strong>System Logs:</strong> <code class="language-plaintext highlighter-rouge">journalctl -p err -b</code> - Check for recent errors.  For specific services: <code class="language-plaintext highlighter-rouge">journalctl -u &lt;service_name&gt;</code>.</li>
  <li><strong>Package Management Logs:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">less /var/log/apt/history.log</code> - Review recent installations or updates.</li>
      <li><code class="language-plaintext highlighter-rouge">less /var/log/dpkg.log</code> - Check for package installation errors.</li>
    </ul>
  </li>
  <li><strong>Recently Modified Files:</strong> <code class="language-plaintext highlighter-rouge">sudo find /etc -type f -mtime -7 -ls</code> (lists files modified in the last 7 days).</li>
</ul>

<h3 id="5-advanced-troubleshooting">5. Advanced Troubleshooting</h3>

<ul>
  <li><strong>Hardware Checks:</strong>  <code class="language-plaintext highlighter-rouge">sensors</code> (if installed) to monitor hardware temperatures and voltages.  Consider running <code class="language-plaintext highlighter-rouge">memtester</code> to check for memory issues.</li>
  <li><strong>Detailed System Information:</strong> Install <code class="language-plaintext highlighter-rouge">sysstat</code>: <code class="language-plaintext highlighter-rouge">sudo apt install sysstat</code>.  Use <code class="language-plaintext highlighter-rouge">sar</code> to collect detailed system performance data.</li>
  <li><strong>Live Boot Environment:</strong> Boot from a Debian Live USB/SD card to test if the slowdown persists, which could indicate a hardware problem.</li>
</ul>

<h3 id="6-prevention">6. Prevention</h3>

<ul>
  <li><strong>Regular Backups:</strong> Use <code class="language-plaintext highlighter-rouge">timeshift</code> (or similar tools) to create system snapshots: <code class="language-plaintext highlighter-rouge">sudo timeshift --create --comments "Before making changes"</code>.</li>
  <li><strong>System Updates:</strong> Keep your system updated: <code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt upgrade -y</code>.</li>
  <li><strong>Configuration Management:</strong> Use version control (e.g., Git) or dedicated tools like <code class="language-plaintext highlighter-rouge">etckeeper</code> to track changes to configuration files.</li>
</ul>

<h3 id="7-reconstructing-changes-if-necessary">7. Reconstructing Changes (If Necessary)</h3>

<p>If the above steps don‚Äôt pinpoint the cause, you can try to reconstruct your recent changes:</p>

<ul>
  <li><strong>Command History:</strong> <code class="language-plaintext highlighter-rouge">history</code></li>
  <li><strong>Audit Logs (if configured):</strong> <code class="language-plaintext highlighter-rouge">ausearch -k &lt;event_key&gt;</code></li>
</ul>]]></content><author><name></name></author><category term="software&gt;linux" /></entry><entry><title type="html">Procedimento de Libera√ß√£o Condicionada de Ve√≠culo Retido</title><link href="https://ib.bsb.br/procedimento-de-liberao-condicionada-de-veculo-retido/" rel="alternate" type="text/html" title="Procedimento de Libera√ß√£o Condicionada de Ve√≠culo Retido" /><published>2024-11-13T00:00:00+00:00</published><updated>2024-11-13T14:15:48+00:00</updated><id>https://ib.bsb.br/procedimento-de-liberao-condicionada-de-veculo-retido</id><content type="html" xml:base="https://ib.bsb.br/procedimento-de-liberao-condicionada-de-veculo-retido/"><![CDATA[<p><strong>Procedimento de Libera√ß√£o Condicionada de Ve√≠culo Retido</strong></p>

<p><strong>1 - Documentos Necess√°rios:</strong></p>

<p>Para solicitar a libera√ß√£o condicionada, √© necess√°rio apresentar a seguinte documenta√ß√£o:</p>

<p>1.1 CNH do condutor ou CPF do propriet√°rio do ve√≠culo.
1.2 Comprovante de agendamento da vistoria veicular ou dos reparos necess√°rios.
1.3 Placa do ve√≠culo que far√° o transporte do autom√≥vel.
1.4 CNH do condutor respons√°vel pelo transporte do ve√≠culo.
1.5 Requerimento de libera√ß√£o condicionada preenchido.
1.6 Procura√ß√£o, caso um representante esteja solicitando a libera√ß√£o em nome do propriet√°rio.</p>

<p><strong>2 - Modelo de Requerimento de Libera√ß√£o Condicionada (DLC):</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POL√çCIA RODOVI√ÅRIA FEDERAL
DOCUMENTO DE LIBERA√á√ÉO CONDICIONADA - DLC

DRV N¬∞: __________

**1. DADOS DA LIBERA√á√ÉO CONDICIONADA**
- Regional: ___________
- Delegacia: __________
- Munic√≠pio: __________
- Hora: _______________
- Agente Respons√°vel: ______________

**2. DADOS DO AUTORIZADO**
- Nome: ______________
- Endere√ßo/Munic√≠pio/UF: ______________
- Telefone: ______________

**3. DADOS DO VE√çCULO**
- Placa: ______________
- Marca/Modelo: ______________
- Chassi (caso n√£o registrado): ______________
- RENAVAM: ______________

**4. IRREGULARIDADE(S) A SANAR FORA DO P√ÅTIO**
4.1. ____________________________________
4.2. ____________________________________

- Data limite para apresenta√ß√£o do ve√≠culo regularizado: ______________

**5. TERMO DE RESPONSABILIDADE**
Declaro para todos os efeitos legais que assumo total responsabilidade pela circula√ß√£o do ve√≠culo em vias p√∫blicas, estando ciente de que, se flagrado em situa√ß√£o irregular, o ve√≠culo ser√° novamente removido ao dep√≥sito. Declaro, ainda, estar ciente de que o ve√≠culo dever√° ser apresentado √† PRF devidamente regularizado at√© a data limite, sob pena de inser√ß√£o de restri√ß√£o administrativa no cadastro do ve√≠culo.

- Assinatura do Autorizado: ______________

**6. VE√çCULO UTILIZADO NO TRANSPORTE**
- Placa: ______________
- CNH do condutor: ______________

</code></pre></div></div>]]></content><author><name></name></author><category term="trabalho" /></entry><entry><title type="html">Converting cURL to iOS Shortcut</title><link href="https://ib.bsb.br/converting-curl-to-ios-shortcut/" rel="alternate" type="text/html" title="Converting cURL to iOS Shortcut" /><published>2024-11-12T00:00:00+00:00</published><updated>2024-11-12T12:32:33+00:00</updated><id>https://ib.bsb.br/converting-curl-to-ios-shortcut</id><content type="html" xml:base="https://ib.bsb.br/converting-curl-to-ios-shortcut/"><![CDATA[<h2 id="converting-curl-to-ios-shortcut">Converting cURL to iOS Shortcut</h2>

<p>This guide provides a step-by-step approach to converting your <code class="language-plaintext highlighter-rouge">cURL</code> command into an iOS Shortcut, focusing on clarity and security.</p>

<h3 id="step-1-open-shortcuts-and-create-a-new-shortcut">Step 1: Open Shortcuts and Create a New Shortcut</h3>

<p>Launch the Shortcuts app and tap the <strong>‚Äù+‚Äù</strong> button to create a new shortcut.  Tap <strong>‚ÄùAdd Action‚Äù</strong>.</p>

<h3 id="step-2-add-get-contents-of-url">Step 2: Add ‚ÄúGet Contents of URL‚Äù</h3>

<p>Search for and add the <strong>‚ÄùGet Contents of URL‚Äù</strong> action.</p>

<h3 id="step-3-configure-url-and-method">Step 3: Configure URL and Method</h3>

<ol>
  <li><strong>URL:</strong>  Enter the following URL:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://app.khoj.dev/api/chat/history?client=web&amp;conversation_id=b24b3a6b-0915-41a9-b540-643ed42b60ef
</code></pre></div>    </div>
  </li>
  <li><strong>Method:</strong> Select <strong>‚ÄùGET‚Äù</strong>.</li>
</ol>

<h3 id="step-4-add-headers">Step 4: Add Headers</h3>

<p>Tap on <strong>‚ÄùHeaders‚Äù</strong> and add the following key-value pairs.  See the image below for a visual guide on adding headers:</p>

<p><img src="https://i.imgur.com/7F1t5bD.png" alt="Adding Headers in Shortcuts" /></p>

<table>
  <tbody>
    <tr>
      <td>Key</td>
      <td>Value</td>
    </tr>
    <tr>
      <td>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</td>
      <td>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</td>
    </tr>
    <tr>
      <td>Host</td>
      <td><code class="language-plaintext highlighter-rouge">app.khoj.dev</code></td>
    </tr>
    <tr>
      <td>Sec-Fetch-Dest</td>
      <td><code class="language-plaintext highlighter-rouge">empty</code></td>
    </tr>
    <tr>
      <td>User-Agent</td>
      <td><code class="language-plaintext highlighter-rouge">Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Mobile/15E148 Safari/604.1</code></td>
    </tr>
    <tr>
      <td>Accept</td>
      <td><code class="language-plaintext highlighter-rouge">*/*</code></td>
    </tr>
    <tr>
      <td>Referer</td>
      <td><code class="language-plaintext highlighter-rouge">https://app.khoj.dev/chat?conversationId=b24b3a6b-0915-41a9-b540-643ed42b60ef</code></td>
    </tr>
    <tr>
      <td>Sec-Fetch-Site</td>
      <td><code class="language-plaintext highlighter-rouge">same-origin</code></td>
    </tr>
    <tr>
      <td>Sec-Fetch-Mode</td>
      <td><code class="language-plaintext highlighter-rouge">cors</code></td>
    </tr>
    <tr>
      <td>Accept-Language</td>
      <td><code class="language-plaintext highlighter-rouge">en-GB,en-US;q=0.9,en;q=0.8</code></td>
    </tr>
    <tr>
      <td>Priority</td>
      <td><code class="language-plaintext highlighter-rouge">u=3, i</code></td>
    </tr>
    <tr>
      <td>Accept-Encoding</td>
      <td><code class="language-plaintext highlighter-rouge">gzip, deflate, br</code></td>
    </tr>
    <tr>
      <td>Connection</td>
      <td><code class="language-plaintext highlighter-rouge">keep-alive</code></td>
    </tr>
    <tr>
      <td>Cookie</td>
      <td><em>(See Security Considerations below)</em>  Instead of directly embedding the cookie here, use a ‚ÄúGet Variable‚Äù action to retrieve it from a secure location (e.g., another shortcut dedicated to storing and refreshing it).</td>
    </tr>
  </tbody>
</table>

<h3 id="step-5-handling-the-response-json">Step 5: Handling the Response (JSON)</h3>

<ol>
  <li>Add a <strong>‚ÄùGet Dictionary Value‚Äù</strong> action.</li>
  <li>Connect it to the ‚ÄúGet Contents of URL‚Äù action.</li>
  <li>In the ‚ÄúKey‚Äù field of ‚ÄúGet Dictionary Value‚Äù, enter the key you want to extract from the JSON response.  For example, if the JSON response is <code class="language-plaintext highlighter-rouge">{‚Äúmessage‚Äù: ‚ÄúHello‚Äù}</code>, enter ‚Äúmessage‚Äù to extract the value ‚ÄúHello‚Äù.</li>
</ol>

<p><strong>Example JSON Output and Parsing:</strong></p>

<p>Let‚Äôs say the API returns:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="err">‚Äústatus‚Äù:</span><span class="w"> </span><span class="err">‚Äúsuccess‚Äù</span><span class="p">,</span><span class="w"> </span><span class="err">‚Äúdata‚Äù:</span><span class="w"> </span><span class="p">[{</span><span class="err">‚Äúid‚Äù:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="err">‚Äúname‚Äù:</span><span class="w"> </span><span class="err">‚ÄúJohn‚Äù</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="err">‚Äúid‚Äù:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="err">‚Äúname‚Äù:</span><span class="w"> </span><span class="err">‚ÄúJane‚Äù</span><span class="p">}]}</span><span class="w">
</span></code></pre></div></div>

<p>To get the name of the first user, you would set the ‚ÄúKey‚Äù in ‚ÄúGet Dictionary Value‚Äù to ‚Äúdata‚Äù, then use another ‚ÄúGet Item from List‚Äù action to get the first item, and finally another ‚ÄúGet Dictionary Value‚Äù action with the key ‚Äúname‚Äù.</p>

<h3 id="step-6-displaying-the-result">Step 6: Displaying the Result</h3>

<p>Add a <strong>‚ÄùShow Result‚Äù</strong> action and connect it to the output of the ‚ÄúGet Dictionary Value‚Äù action (or any other action processing the response).</p>

<h3 id="step-7-security-considerations">Step 7: Security Considerations</h3>

<p><strong>Important:</strong> Directly embedding the <code class="language-plaintext highlighter-rouge">session</code> cookie in your shortcut is not recommended due to security risks and session expiration.  Instead, store the cookie securely and retrieve it dynamically.  Consider using a dedicated secrets management shortcut or iCloud Keychain.  This allows you to refresh the cookie periodically without modifying the main shortcut.</p>

<h3 id="step-8-save-and-run">Step 8: Save and Run</h3>

<p>Save your shortcut with a descriptive name (e.g., ‚ÄúGet Chat History‚Äù).  Run the shortcut to test its functionality.</p>]]></content><author><name></name></author><category term="scratchpad&gt;gemini" /></entry><entry><title type="html">/etc/init.d/performance_governors.sh</title><link href="https://ib.bsb.br/etcinitdperformance-governorssh/" rel="alternate" type="text/html" title="/etc/init.d/performance_governors.sh" /><published>2024-11-05T00:00:00+00:00</published><updated>2024-11-05T19:30:41+00:00</updated><id>https://ib.bsb.br/etcinitdperformance_governorssh</id><content type="html" xml:base="https://ib.bsb.br/etcinitdperformance-governorssh/"><![CDATA[<p>First, remove the init.d script registration: <code class="language-plaintext highlighter-rouge">sudo update-rc.d performance_governors.sh remove</code></p>

<p>Create a systemd service file: <code class="language-plaintext highlighter-rouge">sudo nano /etc/systemd/system/performance_governors.service</code></p>

<p>Add this content:</p>

<section data-filename="_code-block.txt" data-code="[Unit]
Description=Set CPU and GPU governor to performance
After=multi-user.target
[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/etc/init.d/performance_governors.sh start
ExecStop=/etc/init.d/performance_governors.sh stop
[Install]
WantedBy=multi-user.target
Reload systemd to recognize the new service:
sudo systemctl daemon-reload" data-download-link="" data-download-link-label="Download "><code class="language-">[Unit]
Description=Set CPU and GPU governor to performance
After=multi-user.target
[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/etc/init.d/performance_governors.sh start
ExecStop=/etc/init.d/performance_governors.sh stop
[Install]
WantedBy=multi-user.target
Reload systemd to recognize the new service:
sudo systemctl daemon-reload</code></section>

<p>Reload systemd to recognize the new service: <code class="language-plaintext highlighter-rouge">sudo systemctl daemon-reload</code></p>

<p>Enable and start the service:
<code class="language-plaintext highlighter-rouge">sudo systemctl enable performance_governors</code>
<code class="language-plaintext highlighter-rouge">sudo systemctl start performance_governors</code></p>

<p>Check the status: <code class="language-plaintext highlighter-rouge">sudo systemctl status performance_governors</code></p>

<section data-filename="bash_code-block.sh" data-code="#!/bin/bash
### BEGIN INIT INFO
# Provides:          performance_governors
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: CPU Performance Governors
# Description:       Script to manage CPU performance governor settings for RK3588
### END INIT INFO
# Source function library
. /lib/lsb/init-functions
# Path to the log file
LOG=&quot;/var/log/performance_governors.log&quot;
# Function to write to log
log_message() {
echo &quot;$(date '+%Y-%m-%d %H:%M:%S') $1&quot; &gt;&gt; &quot;$LOG&quot;
}
# Function to set governor
set_governor() {
local path=&quot;$1&quot;
if [ -f &quot;$path&quot; ]; then
echo performance &gt; &quot;$path&quot; 2&gt;/dev/null
if [ $? -eq 0 ]; then
log_message &quot;Successfully set performance governor for $path&quot;
return 0
else
log_message &quot;Failed to set performance governor for $path&quot;
return 1
fi
else
log_message &quot;Path does not exist: $path&quot;
return 1
fi
}
# Function to start the service
do_start() {
log_message &quot;Starting performance governors&quot;
local governors=(
&quot;/sys/class/devfreq/fb000000.gpu/governor&quot;
&quot;/sys/devices/system/cpu/cpufreq/policy0/scaling_governor&quot;
&quot;/sys/devices/system/cpu/cpufreq/policy4/scaling_governor&quot;
&quot;/sys/devices/system/cpu/cpufreq/policy6/scaling_governor&quot;
&quot;/sys/class/devfreq/dmc/governor&quot;
&quot;/sys/class/devfreq/fdab0000.npu/governor&quot;
)
local failed=0
for governor in &quot;${governors[@]}&quot;; do
set_governor &quot;$governor&quot; || failed=1
done
if [ $failed -eq 0 ]; then
log_message &quot;All performance governors set successfully&quot;
return 0
else
log_message &quot;Some governors failed to set&quot;
return 1
fi
}
# Function to stop the service (reset to default)
do_stop() {
log_message &quot;Stopping performance governors (resetting to default)&quot;
return 0
}
# Function to check status
do_status() {
local failed=0
for governor in /sys/devices/system/cpu/cpufreq/policy*/scaling_governor; do
if [ -f &quot;$governor&quot; ]; then
current=$(cat &quot;$governor&quot;)
echo &quot;Current governor for $governor: $current&quot;
[ &quot;$current&quot; != &quot;performance&quot; ] &amp;&amp; failed=1
fi
done
return $failed
}
# Main script logic
case &quot;$1&quot; in
start)
do_start
;;
stop)
do_stop
;;
restart)
do_stop
do_start
;;
status)
do_status
;;
*)
echo &quot;Usage: $0 {start|stop|restart|status}&quot;
exit 1
;;
esac
exit $?" data-download-link="" data-download-link-label="Download Bash"><code class="language-bash">#!/bin/bash
### BEGIN INIT INFO
# Provides:          performance_governors
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: CPU Performance Governors
# Description:       Script to manage CPU performance governor settings for RK3588
### END INIT INFO
# Source function library
. /lib/lsb/init-functions
# Path to the log file
LOG="/var/log/performance_governors.log"
# Function to write to log
log_message() {
echo "$(date '+%Y-%m-%d %H:%M:%S') $1" &gt;&gt; "$LOG"
}
# Function to set governor
set_governor() {
local path="$1"
if [ -f "$path" ]; then
echo performance &gt; "$path" 2&gt;/dev/null
if [ $? -eq 0 ]; then
log_message "Successfully set performance governor for $path"
return 0
else
log_message "Failed to set performance governor for $path"
return 1
fi
else
log_message "Path does not exist: $path"
return 1
fi
}
# Function to start the service
do_start() {
log_message "Starting performance governors"
local governors=(
"/sys/class/devfreq/fb000000.gpu/governor"
"/sys/devices/system/cpu/cpufreq/policy0/scaling_governor"
"/sys/devices/system/cpu/cpufreq/policy4/scaling_governor"
"/sys/devices/system/cpu/cpufreq/policy6/scaling_governor"
"/sys/class/devfreq/dmc/governor"
"/sys/class/devfreq/fdab0000.npu/governor"
)
local failed=0
for governor in "${governors[@]}"; do
set_governor "$governor" || failed=1
done
if [ $failed -eq 0 ]; then
log_message "All performance governors set successfully"
return 0
else
log_message "Some governors failed to set"
return 1
fi
}
# Function to stop the service (reset to default)
do_stop() {
log_message "Stopping performance governors (resetting to default)"
return 0
}
# Function to check status
do_status() {
local failed=0
for governor in /sys/devices/system/cpu/cpufreq/policy*/scaling_governor; do
if [ -f "$governor" ]; then
current=$(cat "$governor")
echo "Current governor for $governor: $current"
[ "$current" != "performance" ] &amp;&amp; failed=1
fi
done
return $failed
}
# Main script logic
case "$1" in
start)
do_start
;;
stop)
do_stop
;;
restart)
do_stop
do_start
;;
status)
do_status
;;
*)
echo "Usage: $0 {start|stop|restart|status}"
exit 1
;;
esac
exit $?</code></section>]]></content><author><name></name></author><category term="linux&gt;dotfile" /></entry><entry><title type="html">Gingko Python WebSocket script</title><link href="https://ib.bsb.br/gingko-python-websocket-script/" rel="alternate" type="text/html" title="Gingko Python WebSocket script" /><published>2024-11-03T00:00:00+00:00</published><updated>2024-11-04T10:05:37+00:00</updated><id>https://ib.bsb.br/gingko-python-websocket-script</id><content type="html" xml:base="https://ib.bsb.br/gingko-python-websocket-script/"><![CDATA[<p>A Python WebSocket client script was successfully developed to enable programmatic interaction with the Gingko Writer application. The project began with the goal of establishing a stable connection to <code class="language-plaintext highlighter-rouge">wss://app.gingkowriter.com/ws</code>, managing authentication through cookies, and handling various message types such as <code class="language-plaintext highlighter-rouge">'rt:join'</code>, <code class="language-plaintext highlighter-rouge">'trees'</code>, and <code class="language-plaintext highlighter-rouge">'user'</code>.  An initial script provided basic connection logic, logging, and message exchange capabilities.
The development process then encountered challenges related to using the established connection for specific tasks, like creating cards. This practical application focus required deeper investigation into message formatting, asynchronous handling of user input alongside incoming messages, and the implementation of a structured request mechanism.  The project required guidance on adding an interactive command interface, concurrent processing, improved logging, and robust error handling to ensure maintainability and extensibility.
A revised Python script was subsequently developed. This version incorporated credentials and authentication details from browser Developer Tools, ensuring proper formatting of the <code class="language-plaintext highlighter-rouge">'rt:join'</code> message with the correct <code class="language-plaintext highlighter-rouge">tr</code>, <code class="language-plaintext highlighter-rouge">uid</code>, and <code class="language-plaintext highlighter-rouge">m</code> parameters.  The script‚Äôs message handling was enhanced to process messages like <code class="language-plaintext highlighter-rouge">'rt:joinOk'</code> (join confirmation) and <code class="language-plaintext highlighter-rouge">'pushOk'</code> (push acknowledgment).  Securing credentials through environment variables and using valid, up-to-date system cookies was emphasized.
Initial testing revealed, via execution logs, that the <code class="language-plaintext highlighter-rouge">'rt:joinOk'</code> message was not being received, indicating a potential authentication problem.  Diagnostic steps and instructions for correctly extracting authentication details from Developer Tools were provided, prompting a script update.  This led to a successful connection and correct card creation within Gingko Writer, confirmed by subsequent logs showing push messages, <code class="language-plaintext highlighter-rouge">'pushOk'</code> acknowledgments, and seamless card hierarchy creation.
Throughout the project, issues with authentication parameter accuracy, session checkpoints, and real-time message exchange were addressed. Key milestones included accurate formatting of the <code class="language-plaintext highlighter-rouge">'rt:join'</code> message and correct interpretation of server acknowledgments. These achievements transformed the initial script into a functional tool for interacting with the Gingko Writer service.
The collaborative effort resulted in a robust Python WebSocket client capable of securely connecting to the Gingko Writer server and performing operations like creating structured card hierarchies. This was accomplished by meticulously resolving authentication problems, improving message handling, and ensuring adaptability through enhanced logging and error management. This foundation supports future extensions, such as adding interactive features or integrating more message types, increasing the script‚Äôs utility for programmatically managing Gingko Writer documents.</p>

<p>{% codeblock python %}
import asyncio
import json
import logging
import random
import string
import time
import websockets
from websockets.exceptions import ConnectionClosedError, WebSocketException</p>

<h1 id="configure-logging-for-detailed-debugging">Configure logging for detailed debugging</h1>
<p>logging.basicConfig(
    level=logging.DEBUG,  # Set to DEBUG for comprehensive logs
    format=‚Äô%(asctime)s - %(levelname)s - %(message)s‚Äô
)
logger = logging.getLogger(<strong>name</strong>)</p>

<p>class GingkoWebsocketClient:
    ‚Äú‚Äù‚Äù
    A client to interact with the Gingko Writer application via WebSocket.
    ‚Äú‚Äù‚Äù</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def __init__(self, url: str, cookies: str, tree_id: str, user_id: str, auth_token: str):
    """
    Initializes the GingkoWebsocketClient with the necessary credentials and parameters.

    Args:
        url (str): The WebSocket URL for the Gingko Writer application.
        cookies (str): The authentication cookies.
        tree_id (str): The ID of the tree (document) to interact with.
        user_id (str): The user's Gingko Writer user ID.
        auth_token (str): The authentication token from the 'rt:join' message.
    """
    self.url = url
    self.cookies = cookies
    self.tree_id = tree_id
    self.user_id = user_id
    self.auth_token = auth_token
    self.session_id = None
    self.checkpoint = None
    self.push_ok_event = asyncio.Event()
    self.ws = None
    self.reconnect_attempts = 0
    self.max_reconnect_attempts = 5

async def generate_timestamp(self) -&gt; str:
    """
    Generates a unique timestamp for operations.

    Returns:
        str: A timestamp string in the format 'milliseconds:sequence:session_fragment'
    """
    millis = int(time.time() * 1000)
    sequence = random.randint(0, 9)
    session_fragment = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    return f"{millis}:{sequence}:{session_fragment}"

async def generate_card_id(self) -&gt; str:
    """
    Generates a unique card ID.

    Returns:
        str: A 24-character alphanumeric string.
    """
    return ''.join(random.choices(string.ascii_letters + string.digits, k=24))

async def send_message(self, message_type: str, data: dict):
    """
    Sends a formatted message over the WebSocket connection.

    Args:
        message_type (str): The type of the message (e.g., 'push', 'rt:join').
        data (dict): The message data payload.
    """
    if self.ws is None:
        logger.error("WebSocket connection is not established.")
        return
    message = {"t": message_type, "d": data}
    try:
        await self.ws.send(json.dumps(message))
        logger.debug(f"Sent {message_type} message: {json.dumps(data)}")
    except Exception as e:
        logger.error(f"Failed to send message '{message_type}': {e}")

async def handle_user_message(self, data: dict):
    logger.info(f"Received user data: {json.dumps(data, indent=2)}")

async def handle_trees_message(self, data: list):
    trees = data
    logger.info(f"Received trees data: {json.dumps(trees, indent=2)}")
    tree_ids = [tree['id'] for tree in trees]
    if self.tree_id in tree_ids:
        self.session_id = "SessionNotProvided"
        self.push_ok_event.set()
        logger.info(f"Tree '{self.tree_id}' is available. Proceeding with operations.")
    else:
        logger.error(f"Tree '{self.tree_id}' not found in your account.")

async def handle_rt_users_message(self, data: list):
    logger.info(f"Received rt:users data: {json.dumps(data, indent=2)}")

async def handle_push_ok_message(self, data: list):
    checkpoint_list = data
    if checkpoint_list:
        self.checkpoint = checkpoint_list[0]
        logger.debug(f"Updated checkpoint to: {self.checkpoint}")
        self.push_ok_event.set()
    else:
        logger.warning("Received pushOk without checkpoint data.")

async def handle_rt_join_ok_message(self, data: dict):
    self.session_id = data.get("sid")
    initial_checkpoint = data.get("chk")
    if initial_checkpoint:
        self.checkpoint = initial_checkpoint
    logger.info(f"Joined session: {self.session_id}, initial checkpoint: {self.checkpoint}")
    self.push_ok_event.set()

async def handle_error_message(self, data: dict):
    logger.error(f"Received error from server: {json.dumps(data, indent=2)}")

async def handle_message(self, message_data: dict):
    """
    Handles incoming messages from the WebSocket.

    Args:
        message_data (dict): The received message data.
    """
    logger.debug(f"Received message: {json.dumps(message_data, indent=2)}")
    message_type = message_data.get("t")
    data = message_data.get("d", {})

    handler = {
        "user": self.handle_user_message,
        "trees": self.handle_trees_message,
        "rt:users": self.handle_rt_users_message,
        "pushOk": self.handle_push_ok_message,
        "rt:joinOk": self.handle_rt_join_ok_message,
        "error": self.handle_error_message,
        "ping": lambda _: self.send_message("pong", {})
    }.get(message_type)

    if handler:
        await handler(data)
    else:
        logger.debug(f"Unhandled message type: {message_type}, data: {json.dumps(data, indent=2)}")

async def message_handler(self):
    """
    Continuously handles incoming messages from the WebSocket.
    """
    try:
        async for message in self.ws:
            try:
                message_data = json.loads(message)
                await self.handle_message(message_data)
            except json.JSONDecodeError as e:
                logger.error(f"Failed to decode JSON message: {e}")
    except (ConnectionClosedError, WebSocketException) as e:
        logger.error(f"Connection closed: {e}")
        await self.reconnect()
    except Exception as e:
        logger.error(f"Unexpected error in message handler: {e}")
        await self.reconnect()

def get_join_message(self) -&gt; dict:
    """
    Constructs the 'rt:join' message to join the Gingko session.

    Returns:
        dict: The 'rt:join' message data.
    """
    return {
        "tr": self.tree_id,
        "uid": self.user_id,
        "m": ["a", self.auth_token]
    }

async def create_card(self, content: str, parent_id: str = None, position: int = 0) -&gt; str:
    """
    Creates a new card in the Gingko tree.

    Args:
        content (str): The content of the card.
        parent_id (str, optional): The ID of the parent card. Defaults to None.
        position (int, optional): The position among siblings. Defaults to 0.

    Returns:
        str: The ID of the created card.
    """
    card_id = await self.generate_card_id()
    insert_ts = await self.generate_timestamp()
    update_ts = await self.generate_timestamp()

    # Insert operation
    insert_delta = {
        "id": card_id,
        "ts": insert_ts,
        "ops": [
            {"t": "i", "c": "", "p": parent_id, "pos": position}
        ]
    }

    # Update operation
    update_delta = {
        "id": card_id,
        "ts": update_ts,
        "ops": [
            {"t": "u", "c": content, "e": insert_ts}
        ]
    }

    push_data = {
        "dlts": [insert_delta, update_delta],
        "tr": self.tree_id,
        "chk": self.checkpoint or insert_ts
    }

    self.push_ok_event.clear()
    await self.send_message("push", push_data)
    logger.info(f"Sent push for card '{content}' with ID {card_id}")

    try:
        await asyncio.wait_for(self.push_ok_event.wait(), timeout=10)
        logger.info(f"Push acknowledgment received for card '{content}'")
    except asyncio.TimeoutError:
        logger.error("Did not receive pushOk acknowledgment in time.")
        raise Exception("pushOk timeout")

    return card_id

async def create_tree_structure(self, structure: list, parent_id: str = None):
    """
    Recursively creates a tree structure based on the provided data.

    Args:
        structure (list): A list of dicts representing the tree structure.
        parent_id (str, optional): The ID of the parent card. Defaults to None.
    """
    for position, node in enumerate(structure):
        content = node.get("content", "").strip()
        children = node.get("children", [])

        if not content:
            logger.warning("Encountered node without content. Skipping.")
            continue

        try:
            card_id = await self.create_card(content, parent_id, position)
            logger.info(f"Created card '{content}' with ID {card_id}")

            if children:
                await self.create_tree_structure(children, card_id)

            # Small delay to avoid overwhelming the server
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"Failed to create card '{content}': {e}")

async def perform_operations(self):
    """
    Performs desired operations after establishing the WebSocket connection.
    This could be interacting with the tree, creating cards, etc.
    """
    logger.info("Starting operations...")

    # Example: Create a single card.
    example_structure = [
        {
            "content": "Automated Root Card",
            "children": [
                {"content": "Automated Child 1"},
                {"content": "Automated Child 2"}
            ]
        }
    ]

    await self.create_tree_structure(example_structure)
    logger.info("Completed creating example card structure.")

async def connect(self):
    """
    Establishes the WebSocket connection and handles reconnection logic.
    """
    while self.reconnect_attempts &lt; self.max_reconnect_attempts:
        try:
            async with websockets.connect(
                self.url,
                extra_headers={"Cookie": self.cookies}
            ) as ws:
                self.ws = ws
                self.reconnect_attempts = 0
                logger.info(f"Connected to {self.url}")

                # Send 'rt:join' message
                join_message = self.get_join_message()
                await self.send_message("rt:join", join_message)
                logger.debug(f"Sent 'rt:join' message: {json.dumps(join_message)}")
                logger.debug("Waiting for 'rt:joinOk' message...")

                # Start handling incoming messages
                message_task = asyncio.create_task(self.message_handler())

                # Wait until session ID is received
                try:
                    await asyncio.wait_for(self.push_ok_event.wait(), timeout=10)
                except asyncio.TimeoutError:
                    logger.error("Did not receive 'rt:joinOk' acknowledgment in time.")
                    await self.reconnect()
                    continue

                # Proceed with operations
                await self.perform_operations()

                # Keep the connection alive
                await message_task

        except Exception as e:
            logger.exception(f"Connection error: {e}")
            await self.reconnect()

async def reconnect(self):
    """
    Handles reconnection logic with exponential backoff.
    """
    self.reconnect_attempts += 1
    if self.reconnect_attempts &gt;= self.max_reconnect_attempts:
        logger.error("Maximum reconnection attempts reached. Exiting.")
        return
    wait_time = min(2 ** self.reconnect_attempts, 60)
    logger.info(f"Attempting to reconnect in {wait_time} seconds (Attempt {self.reconnect_attempts}/{self.max_reconnect_attempts})...")
    await asyncio.sleep(wait_time)
    logger.info("Reconnecting...")
    # Reset session-specific data
    self.session_id = None
    self.checkpoint = None
    self.push_ok_event.clear()

async def start(self):
    """
    Starts the client, connects to the server, and initiates operations.
    """
    try:
        await self.connect()
    except KeyboardInterrupt:
        logger.info("Interrupted by user.")
        if self.ws:
            await self.ws.close()
    except Exception as e:
        logger.exception(f"An unexpected error occurred: {e}")

@staticmethod
def load_credentials_from_env():
    """
    Loads credentials from environment variables.

    Returns:
        tuple: A tuple containing url, cookies, tree_id, user_id, auth_token
    """
    url = "wss://app.gingkowriter.com/ws"  # Fixed URL
    cookies = (
        "connect.sid=s%3AXkJFI98eqQGZr1RAGBIfYsYBVr-Uut3U.1km8qszBYRbt4y8Pt%2FrfFiJYiJxOanDTVmG5M1neBO8; "
        "_lr_uf_-jtqjrc=75363195-2f23-4367-a280-285f990f7e05; "
        "_BEAMER_USER_ID_mYJLRImY38547=25ddf751-0c59-4586-802b-363c9ae86222; "
        "_BEAMER_FIRST_VISIT_mYJLRImY38547=2024-10-12T23:25:51.320Z; "
        "__stripe_mid=cf6d738b-2f4f-4056-80c1-1c9c71add535b51abb; "
        "_BEAMER_LAST_POST_SHOWN_mYJLRImY38547=null; "
        "_BEAMER_DATE_mYJLRImY38547=2024-11-02T18:12:51.544Z; "
        "_BEAMER_FILTER_BY_URL_mYJLRImY38547=false; "
        "__stripe_sid=ff6a432e-a911-4aec-b705-f4d2ee20b821a790e3; "
        "_lr_tabs_-jtqjrc%2Fgingko-writer-production={%22sessionID%22:4%2C%22recordingID%22:%225-30ccf034-7be8-4a09-818c-d0bb25704c75%22%2C%22lastActivity%22:1730633141817%2C%22hasActivity%22:true}; "
        "_lr_hb_-jtqjrc%2Fgingko-writer-production={%22heartbeat%22:1730633141818}"
    )
    tree_id = "6oj4Rzb"  # As per your 'rt:join' message
    user_id = "h9ogoeh2o2u7"  # As per your 'rt:join' message
    auth_token = "TLOBcFHCOPU6oI6mYHKdpR5F"  # As per your 'rt:join' message
    return url, cookies, tree_id, user_id, auth_token
</code></pre></div></div>

<p>async def main():
    ‚Äú‚Äù‚Äù
    Main function to start the GingkoWebsocketClient.
    ‚Äú‚Äù‚Äù
    # Load credentials directly from provided data
    URL, COOKIES, TREE_ID, USER_ID, AUTH_TOKEN = GingkoWebsocketClient.load_credentials_from_env()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>client = GingkoWebsocketClient(URL, COOKIES, TREE_ID, USER_ID, AUTH_TOKEN)
await client.start()
</code></pre></div></div>

<p>if <strong>name</strong> == ‚Äú<strong>main</strong>‚Äù:
    asyncio.run(main())
{%22sessionID%22:4%2C%22recordingID%22:%225-30ccf034-7be8-4a09-818c-d0bb25704c75%22%2C%22lastActivity%22:1730633141817%2C%22hasActivity%22:true}; ‚Äú
            ‚Äú<em>lr_hb</em>-jtqjrc%2Fgingko-writer-production={%22heartbeat%22:1730633141818}‚Äù
        )
        tree_id = ‚Äú6oj4Rzb‚Äù  # As per your ‚Äòrt:join‚Äô message
        user_id = ‚Äúh9ogoeh2o2u7‚Äù  # As per your ‚Äòrt:join‚Äô message
        auth_token = ‚ÄúTLOBcFHCOPU6oI6mYHKdpR5F‚Äù  # As per your ‚Äòrt:join‚Äô message
        return url, cookies, tree_id, user_id, auth_token</p>

<p>async def main():
    ‚Äú‚Äù‚Äù
    Main function to start the GingkoWebsocketClient.
    ‚Äú‚Äù‚Äù
    # Load credentials directly from provided data
    URL, COOKIES, TREE_ID, USER_ID, AUTH_TOKEN = GingkoWebsocketClient.load_credentials_from_env()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>client = GingkoWebsocketClient(URL, COOKIES, TREE_ID, USER_ID, AUTH_TOKEN)
await client.start()
</code></pre></div></div>

<p>if <strong>name</strong> == ‚Äú<strong>main</strong>‚Äù:
    asyncio.run(main())
{% endcodeblock %}</p>]]></content><author><name></name></author><category term="scripts&gt;cloud" /></entry><entry><title type="html">iOS Shortcut for Linux Thermal Printing</title><link href="https://ib.bsb.br/a-shell-thermal/" rel="alternate" type="text/html" title="iOS Shortcut for Linux Thermal Printing" /><published>2024-10-27T00:00:00+00:00</published><updated>2024-10-27T16:31:00+00:00</updated><id>https://ib.bsb.br/a-shell_thermal</id><content type="html" xml:base="https://ib.bsb.br/a-shell-thermal/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>This solution leverages a-Shell, SSH, and embedded <code class="language-plaintext highlighter-rouge">dash</code> scripts to automate tasks on a remote Debian server. It focuses on efficiency, security, and user feedback through notifications.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>An iPhone with a-Shell installed.</li>
  <li>A Debian server with SSH access enabled.</li>
  <li>Basic familiarity with SSH key management.</li>
  <li>A thermal printer configured on the Debian server.</li>
</ul>

<h2 id="debian-server-setup">Debian Server Setup</h2>

<h3 id="ensure-thermalsh-functionality">Ensure <code class="language-plaintext highlighter-rouge">thermal.sh</code> Functionality</h3>

<p>Since we‚Äôll be embedding the <code class="language-plaintext highlighter-rouge">thermal.sh</code> scripts within the a-Shell script, you don‚Äôt need to have <code class="language-plaintext highlighter-rouge">thermal.sh</code> files on the server. However, ensure that your server has:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">lp</code> command available (usually part of the CUPS system).</li>
  <li>The thermal printer correctly configured and accessible via the <code class="language-plaintext highlighter-rouge">lp</code> command.</li>
  <li>Necessary utilities like <code class="language-plaintext highlighter-rouge">iconv</code> installed.</li>
</ul>

<p>You can install <code class="language-plaintext highlighter-rouge">iconv</code> if it‚Äôs not present:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libc-bin
</code></pre></div></div>

<h2 id="ssh-configuration">SSH Configuration</h2>

<p>Set up SSH key-based authentication to enable passwordless SSH connections from your iPhone to the Debian server.</p>

<h3 id="generating-ssh-keys-on-a-shell">Generating SSH Keys on a-Shell</h3>

<ol>
  <li>Open a-Shell on your iPhone.</li>
  <li>
    <p>Generate an SSH key pair:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048
</code></pre></div>    </div>
  </li>
  <li>Accept the default file location and enter a passphrase if desired (leave empty for no passphrase).</li>
</ol>

<h3 id="copying-your-public-key-to-the-debian-server">Copying Your Public Key to the Debian Server</h3>

<ol>
  <li>
    <p>Copy your public key to the server:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-copy-id yourusername@your_server_ip
</code></pre></div>    </div>

    <p>Replace <code class="language-plaintext highlighter-rouge">yourusername</code> with your actual username on the Debian server and <code class="language-plaintext highlighter-rouge">your_server_ip</code> with the server‚Äôs IP address or hostname.</p>
  </li>
  <li>
    <p>Test the SSH connection:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh yourusername@your_server_ip
</code></pre></div>    </div>

    <p>You should be able to connect without entering a password.</p>
  </li>
</ol>

<h2 id="create-the-a-shell-script">Create the a-Shell Script</h2>

<p>Create the <code class="language-plaintext highlighter-rouge">remote_control.sh</code> script on your iPhone to pass the text directly to the embedded <code class="language-plaintext highlighter-rouge">thermal.sh</code> scripts on the server.</p>

<h3 id="steps-to-create-remote_controlsh">Steps to Create <code class="language-plaintext highlighter-rouge">remote_control.sh</code></h3>

<ol>
  <li>Open a-Shell on your iPhone.</li>
  <li>
    <p>Run the following command to create the script:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> ~/.shortcuts/remote_control.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOL</span><span class="sh">'
#!/bin/dash

# Configuration (Update with your actual credentials)
SSH_USER="yourusername"
SSH_HOST="your_server_ip"

# Function to display notification in a-Shell
show_notification() {
    message="</span><span class="nv">$1</span><span class="sh">"
    echo "</span><span class="nv">$message</span><span class="sh">" &gt;&amp;2  # Print to stderr for visibility in a-Shell and Shortcuts
}

# Function to run command with error handling
run_command() {
    command="</span><span class="nv">$1</span><span class="sh">"
    error_message="</span><span class="nv">$2</span><span class="sh">"
    if ! eval "</span><span class="nv">$command</span><span class="sh">"; then
        show_notification "Error: </span><span class="nv">$error_message</span><span class="sh">"
        exit 1
    fi
}

# Main execution
TEXT_CONTENT="</span><span class="nv">$1</span><span class="sh">"

# Check if text content is provided
if [ -z "</span><span class="nv">$TEXT_CONTENT</span><span class="sh">" ]; then
    show_notification "Error: No text content provided."
    exit 1
fi

# SSH command with error handling and passing the text directly to thermal.sh
SSH_COMMAND="ssh -o BatchMode=yes -o ConnectTimeout=5 </span><span class="nv">$SSH_USER</span><span class="sh">@</span><span class="nv">$SSH_HOST</span><span class="sh">"

# Embedded Normal Thermal Script
NORMAL_THERMAL_SCRIPT='#!/bin/dash

# Check for input
if [ -z "</span><span class="nv">$1</span><span class="sh">" ]; then
  echo "Error: No text input provided."
  exit 1
fi

# Escape % to prevent printf interpretation
escaped_content=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s2">"s/%/%%/g"</span><span class="si">)</span><span class="sh">

# Convert the encoding while suppressing specific iconv errors
converted_text=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$escaped_content</span><span class="s2">"</span> | iconv <span class="nt">-f</span> UTF-8 <span class="nt">-t</span> CP850//TRANSLIT//IGNORE 2&gt;/dev/null<span class="si">)</span><span class="sh">

# Print the formatted text to the thermal printer
if ! printf "</span><span class="se">\0</span><span class="sh">33@%s</span><span class="se">\n\n\n\0</span><span class="sh">33i" "</span><span class="nv">$converted_text</span><span class="sh">" | lp -d thermal -o raw; then
  echo "Failed to print. Please check the printer and its configuration."
  exit 1
fi

echo "Success: Text printed successfully."
'

# Create and execute the normal thermal script on the server
run_command "echo </span><span class="se">\"</span><span class="nv">$NORMAL_THERMAL_SCRIPT</span><span class="se">\"</span><span class="sh"> | </span><span class="nv">$SSH_COMMAND</span><span class="sh"> 'cat &gt; /tmp/normal_thermal.sh &amp;&amp; chmod +x /tmp/normal_thermal.sh'" "Failed to transfer normal thermal script."
run_command "echo </span><span class="se">\"</span><span class="nv">$TEXT_CONTENT</span><span class="se">\"</span><span class="sh"> | </span><span class="nv">$SSH_COMMAND</span><span class="sh"> '/tmp/normal_thermal.sh </span><span class="se">\"\$</span><span class="sh">(cat -)</span><span class="se">\"</span><span class="sh">'" "Failed to execute normal thermal script."

# Optionally, you can comment out the reverse thermal script execution if not needed
# Embedded Reverse White Thermal Script
REVERSE_THERMAL_SCRIPT='#!/bin/dash

# Check for input
if [ -z "</span><span class="nv">$1</span><span class="sh">" ]; then
  echo "Error: No text input provided."
  exit 1
fi

# Escape % to prevent printf interpretation
escaped_content=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s2">"s/%/%%/g"</span><span class="si">)</span><span class="sh">

# Convert the encoding while suppressing specific iconv errors
converted_text=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$escaped_content</span><span class="s2">"</span> | iconv <span class="nt">-f</span> UTF-8 <span class="nt">-t</span> CP850//TRANSLIT//IGNORE 2&gt;/dev/null<span class="si">)</span><span class="sh">

# Print the formatted text to the thermal printer with reverse white printing
if ! printf "</span><span class="se">\0</span><span class="sh">32[</span><span class="se">\0</span><span class="sh">01</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00@</span><span class="se">\0</span><span class="sh">02</span><span class="se">\2</span><span class="sh">60</span><span class="se">\0</span><span class="sh">04</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">32T</span><span class="se">\0</span><span class="sh">01</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">30</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">04</span><span class="se">\0</span><span class="sh">00%s</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">32]</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">32O</span><span class="se">\0</span><span class="sh">00</span><span class="se">\0</span><span class="sh">33i" "</span><span class="nv">$converted_text</span><span class="sh">" | lp -d thermal -o raw; then
  echo "Failed to print. Please check the printer and its configuration."
  exit 1
fi

echo "Success: Reverse white text printed successfully."
'

# Uncomment the following lines to execute the reverse thermal script
# run_command "echo </span><span class="se">\"</span><span class="nv">$REVERSE_THERMAL_SCRIPT</span><span class="se">\"</span><span class="sh"> | </span><span class="nv">$SSH_COMMAND</span><span class="sh"> 'cat &gt; /tmp/reverse_thermal.sh &amp;&amp; chmod +x /tmp/reverse_thermal.sh'" "Failed to transfer reverse thermal script."
# run_command "echo </span><span class="se">\"</span><span class="nv">$TEXT_CONTENT</span><span class="se">\"</span><span class="sh"> | </span><span class="nv">$SSH_COMMAND</span><span class="sh"> '/tmp/reverse_thermal.sh </span><span class="se">\"\$</span><span class="sh">(cat -)</span><span class="se">\"</span><span class="sh">'" "Failed to execute reverse thermal script."

show_notification "Success: Text printed successfully."
</span><span class="no">EOL
</span></code></pre></div>    </div>
  </li>
  <li>Replace <code class="language-plaintext highlighter-rouge">yourusername</code> and <code class="language-plaintext highlighter-rouge">your_server_ip</code> with your actual SSH username and server IP address or hostname.</li>
  <li>
    <p>Make the script executable:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/.shortcuts/remote_control.sh
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="script-explanation">Script Explanation</h3>

<ul>
  <li><strong>SSH Configuration</strong>: The script uses <code class="language-plaintext highlighter-rouge">ssh</code> with options <code class="language-plaintext highlighter-rouge">-o BatchMode=yes</code> and <code class="language-plaintext highlighter-rouge">-o ConnectTimeout=5</code> for non-interactive and timeout settings.</li>
  <li><strong>Notifications</strong>: The <code class="language-plaintext highlighter-rouge">show_notification</code> function sends messages back to the Shortcuts app.</li>
  <li><strong>Error Handling</strong>: The <code class="language-plaintext highlighter-rouge">run_command</code> function checks if each command executes successfully.</li>
  <li><strong>Embedded Scripts</strong>: Both the normal and reverse thermal scripts are embedded as strings within the <code class="language-plaintext highlighter-rouge">remote_control.sh</code> script.</li>
  <li><strong>Execution Flow</strong>:
    <ul>
      <li>The embedded script is sent to the server and saved as a temporary file in <code class="language-plaintext highlighter-rouge">/tmp/</code>.</li>
      <li>The script is made executable.</li>
      <li>The text content is passed to the script for printing.</li>
      <li>Cleanup of temporary scripts can be added if desired.</li>
    </ul>
  </li>
</ul>

<h2 id="ios-shortcut-setup">iOS Shortcut Setup</h2>

<ol>
  <li>Open the <strong>Shortcuts</strong> app on your iPhone.</li>
  <li>Create a new shortcut and give it a descriptive name (e.g., ‚ÄúPrint to Thermal Printer‚Äù).</li>
  <li><strong>Add a Text action</strong>:
    <ul>
      <li>Leave it blank to prompt for input when the shortcut runs.</li>
      <li>Or, enter the text you wish to print.</li>
    </ul>
  </li>
  <li><strong>Add a Run Script Over SSH action</strong> (note that this action is available in the Shortcuts app):
    <ul>
      <li><strong>Host</strong>: Enter <code class="language-plaintext highlighter-rouge">localhost</code> (since we‚Äôre running the script locally on a-Shell).</li>
      <li><strong>User</strong>: Leave blank.</li>
      <li><strong>Password</strong>: Leave blank.</li>
      <li>
        <p><strong>Script</strong>: Enter the following command:</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shortcuts://run-shortcut?name<span class="o">=</span>Run%20a-Shell%20Script&amp;input<span class="o">={</span>Text<span class="o">}</span>
</code></pre></div>        </div>

        <p><em>(Note: Since a-Shell does not support running scripts over SSH directly from Shortcuts, we use the URL scheme to run the script via a-Shell.)</em></p>
      </li>
    </ul>
  </li>
  <li><strong>Add a URL action</strong>:
    <ul>
      <li>
        <p>Set the URL to:</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a-shell://shortcut?text<span class="o">={</span>Text<span class="o">}</span>&amp;command<span class="o">=</span>~/.shortcuts/remote_control.sh%20<span class="s2">"{Text}"</span>
</code></pre></div>        </div>

        <ul>
          <li>Replace <code class="language-plaintext highlighter-rouge">{Text}</code> with the magic variable from the previous Text action.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Add an Open URLs action</strong>:
    <ul>
      <li>Use the URL from the previous step.</li>
      <li>This will open a-Shell and run the <code class="language-plaintext highlighter-rouge">remote_control.sh</code> script with the provided text.</li>
    </ul>
  </li>
  <li><strong>Add a Show Notification action</strong> (optional):
    <ul>
      <li>This will display the output from the script after it completes.</li>
    </ul>
  </li>
</ol>

<h3 id="shortcut-steps-summary">Shortcut Steps Summary</h3>

<ol>
  <li><strong>Text</strong>: Input or specify the text to print.</li>
  <li>
    <p><strong>URL</strong>: Build the URL to run the a-Shell script:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a-shell://shortcut?text<span class="o">={</span>Text<span class="o">}</span>&amp;command<span class="o">=</span>~/.shortcuts/remote_control.sh%20<span class="s2">"{Text}"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Open URLs</strong>: Opens a-Shell and runs the script.</li>
  <li><strong>Wait</strong>: (Optional) Pause to allow the script to execute.</li>
  <li><strong>Show Notification</strong>: Display success or error messages.</li>
</ol>

<h2 id="testing-and-verification">Testing and Verification</h2>

<ol>
  <li>Run the shortcut from the Shortcuts app or add it to your Home Screen for quick access.</li>
  <li>When prompted, enter the text you wish to print or use predefined text.</li>
  <li>The shortcut will open a-Shell, execute the script, and then return to Shortcuts.</li>
  <li>Observe any notifications for success or error messages.</li>
  <li>Verify that the text has been printed correctly by the thermal printer connected to your Debian server.</li>
</ol>]]></content><author><name></name></author><category term="iphone&gt;shortcuts," /><category term="linux" /></entry><entry><title type="html">Zutty Cheatsheet</title><link href="https://ib.bsb.br/zutty-cheatsheet/" rel="alternate" type="text/html" title="Zutty Cheatsheet" /><published>2024-10-27T00:00:00+00:00</published><updated>2024-10-27T12:48:51+00:00</updated><id>https://ib.bsb.br/zutty-cheatsheet</id><content type="html" xml:base="https://ib.bsb.br/zutty-cheatsheet/"><![CDATA[<h2 id="overview">Overview</h2>

<p>Zutty is a fast, lightweight terminal emulator for X Window System, optimized for low-end systems. It uses OpenGL ES 3.1 for rendering, offering high throughput and low latency.</p>

<p><strong>Key Features:</strong></p>

<ul>
  <li>GPU-accelerated rendering using Compute Shaders</li>
  <li>Accurate VT emulation (VT52, VT100, VT102, VT220, VT320, VT420, VT520, xterm)</li>
  <li>Supports bitmap and TrueType fonts, including CJK characters</li>
  <li>True color support (24-bit)</li>
  <li>X clipboard/primary selection/copy-paste, including rectangular selection</li>
</ul>

<h2 id="installation-debianubuntu">Installation (Debian/Ubuntu)</h2>

<ol>
  <li><strong>Dependencies:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>build-essential pkg-config python3 libegl-dev libfreetype-dev libgles-dev libxmu-dev
</code></pre></div>    </div>
  </li>
  <li><strong>Source:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://git.hq.sig7.se/zutty.git
<span class="nb">cd </span>zutty
</code></pre></div>    </div>
  </li>
  <li><strong>Configure:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./waf configure
</code></pre></div>    </div>
  </li>
  <li><strong>Compile:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./waf
</code></pre></div>    </div>
  </li>
  <li><strong>Install:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> ./waf <span class="nb">install</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="usage">Usage</h2>

<h3 id="launching">Launching</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zutty <span class="o">[</span>options] <span class="o">[</span>shell]
zutty <span class="nt">-e</span> <span class="o">[</span><span class="nb">command</span><span class="o">]</span>
</code></pre></div></div>

<h3 id="options">Options</h3>

<table>
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-altScroll</code></td>
      <td>Alternate scroll mode (arrow keys on alt screen)</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-autoCopy</code></td>
      <td>Sync primary selection to clipboard</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-bg &lt;color&gt;</code></td>
      <td>Background color</td>
      <td>#000</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-boldColors</code></td>
      <td>Use bright colors for bold text</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-border &lt;n&gt;</code></td>
      <td>Border width (pixels)</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-cr &lt;color&gt;</code></td>
      <td>Cursor color</td>
      <td>foreground color</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-display</code></td>
      <td>X display</td>
      <td><code class="language-plaintext highlighter-rouge">$DISPLAY</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-dwfont</code></td>
      <td>Double-width font</td>
      <td>18x18ja</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-fg &lt;color&gt;</code></td>
      <td>Foreground color</td>
      <td>#fff</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-font</code></td>
      <td>Font name</td>
      <td>9x18</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-fontsize</code></td>
      <td>Font size (scaled fonts)</td>
      <td>16</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-fontpath</code></td>
      <td>Font search path</td>
      <td>/usr/share/fonts</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-geometry</code></td>
      <td>Terminal size (chars)</td>
      <td>80x24</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-glinfo</code></td>
      <td>Print OpenGL info</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-help</code></td>
      <td>Print usage</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-listres</code></td>
      <td>Print resource listing</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-login</code></td>
      <td>Start shell as login shell</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-name</code></td>
      <td>Instance name for Xrdb and WM_CLASS</td>
      <td>Zutty</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-rv</code></td>
      <td>Reverse video</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-saveLines</code></td>
      <td>Scrollback history (lines)</td>
      <td>500</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-shell</code></td>
      <td>Shell to run</td>
      <td>bash</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-showWraps</code></td>
      <td>Show wrap marks</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-title</code>/<code class="language-plaintext highlighter-rouge">-T</code></td>
      <td>Window title</td>
      <td>Zutty</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-quiet</code></td>
      <td>Silence logging</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-verbose</code></td>
      <td>Verbose logging</td>
      <td>false</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-e</code></td>
      <td>Command to execute</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h3 id="user-actions">User Actions</h3>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Trigger</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Scroll half page</td>
      <td>Shift+PageUp/Down</td>
    </tr>
    <tr>
      <td>Scroll 5 lines / 1 line</td>
      <td>Scroll wheel / (alt screen with <code class="language-plaintext highlighter-rouge">-altScroll</code>)</td>
    </tr>
    <tr>
      <td>Start/Adjust selection</td>
      <td>Left/Right mouse button press &amp; hold</td>
    </tr>
    <tr>
      <td>Cycle selection snapping</td>
      <td>Double-click left/right mouse button</td>
    </tr>
    <tr>
      <td>Toggle rectangular select</td>
      <td>Space (while selecting)</td>
    </tr>
    <tr>
      <td>Paste primary selection</td>
      <td>Middle mouse button, Shift+Insert</td>
    </tr>
    <tr>
      <td>Copy selection to clipboard</td>
      <td>Ctrl+Shift+C</td>
    </tr>
    <tr>
      <td>Paste clipboard</td>
      <td>Ctrl+Shift+V</td>
    </tr>
  </tbody>
</table>

<h2 id="configuration">Configuration</h2>

<p>Zutty can be configured via command-line options, X resources, and environment variables. Command-line options override X resources, which override defaults.</p>

<h3 id="x-resources">X Resources</h3>

<p>Edit <code class="language-plaintext highlighter-rouge">~/.Xresources</code> and add entries like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Zutty.title: My Terminal
Zutty.geometry: 100x30
Zutty.font: LiberationMono
Zutty.fontsize: 14
Zutty.fg: #eee
Zutty.bg: #222
</code></pre></div></div>

<p>Merge changes: <code class="language-plaintext highlighter-rouge">xrdb -merge ~/.Xresources</code></p>

<h3 id="environment-variables">Environment Variables</h3>

<p>Zutty sets/uses:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DISPLAY</code>: X display</li>
  <li><code class="language-plaintext highlighter-rouge">SHELL</code>: Shell path</li>
  <li><code class="language-plaintext highlighter-rouge">TERM</code>: xterm-256color</li>
  <li><code class="language-plaintext highlighter-rouge">COLORTERM</code>: truecolor</li>
  <li><code class="language-plaintext highlighter-rouge">WINDOWID</code>: X window ID</li>
  <li><code class="language-plaintext highlighter-rouge">ZUTTY_VERSION</code>: Zutty version</li>
  <li><code class="language-plaintext highlighter-rouge">RESOURCE_NAME</code>:  Instance name for Xrdb (if <code class="language-plaintext highlighter-rouge">-name</code> option not used)</li>
</ul>

<h2 id="development">Development</h2>

<h3 id="debug-build">Debug Build</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./waf configure <span class="nt">--debug</span>
./waf
</code></pre></div></div>

<p>Run: <code class="language-plaintext highlighter-rouge">build/src/zutty.dbg -v</code></p>

<h3 id="step-debugger">Step Debugger</h3>

<p>Activate with PrintScreen key (in debug build). Cycles through step counts (1, 10, 100, off). Resume with <code class="language-plaintext highlighter-rouge">kill -CONT &lt;pid&gt;</code> or <code class="language-plaintext highlighter-rouge">fg</code>.</p>

<h3 id="testing">Testing</h3>

<p>See the <code class="language-plaintext highlighter-rouge">test/</code> directory for automated tests. Run individual tests (e.g., <code class="language-plaintext highlighter-rouge">test/vttest.sh</code>) or all tests with <code class="language-plaintext highlighter-rouge">test/run_ci.sh</code>.</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><strong>Homepage:</strong> <a href="https://tomscii.sig7.se/zutty">https://tomscii.sig7.se/zutty</a></li>
  <li><strong>Source:</strong> <a href="https://git.hq.sig7.se/zutty.git">https://git.hq.sig7.se/zutty.git</a></li>
  <li><strong>User Guide:</strong> <a href="https://tomscii.sig7.se/zutty/doc/USAGE.html">https://tomscii.sig7.se/zutty/doc/USAGE.html</a></li>
  <li><strong>Developer Guide:</strong> <a href="https://tomscii.sig7.se/zutty/doc/HACKING.html">https://tomscii.sig7.se/zutty/doc/HACKING.html</a></li>
  <li><strong>Key Mapping Sequences:</strong> <a href="https://tomscii.sig7.se/zutty/doc/KEYS.html">https://tomscii.sig7.se/zutty/doc/KEYS.html</a></li>
  <li><strong>Vttest Results:</strong> <a href="https://tomscii.sig7.se/zutty/doc/VTTEST.html">https://tomscii.sig7.se/zutty/doc/VTTEST.html</a></li>
  <li><strong>FAQ:</strong> <a href="https://tomscii.sig7.se/zutty/wiki/FAQ.html">https://tomscii.sig7.se/zutty/wiki/FAQ.html</a></li>
</ul>]]></content><author><name></name></author><category term="software&gt;linux" /></entry><entry><title type="html">Zutty Linux terminal</title><link href="https://ib.bsb.br/zutty-linux-terminal/" rel="alternate" type="text/html" title="Zutty Linux terminal" /><published>2024-10-27T00:00:00+00:00</published><updated>2024-10-27T12:18:26+00:00</updated><id>https://ib.bsb.br/zutty-linux-terminal</id><content type="html" xml:base="https://ib.bsb.br/zutty-linux-terminal/"><![CDATA[<blockquote>
  <p>Homepage: <code class="language-plaintext highlighter-rouge">https://tomscii.sig7.se/zutty/</code></p>
</blockquote>

<h1 id="zutty---zero-cost-unicode-teletype">Zutty - Zero-cost Unicode Teletype</h1>

<p><strong>A high-end terminal for low-end systems</strong></p>

<p>Source: <a href="https://git.hq.sig7.se/zutty.git">https://git.hq.sig7.se/zutty.git</a></p>

<p>Zutty is a terminal emulator for the X Window System, functionally similar to several other X terminal emulators such as <code class="language-plaintext highlighter-rouge">xterm</code>, <code class="language-plaintext highlighter-rouge">rxvt</code> and countless others. It is also similar to other, much more modern, GPU-accelerated terminal emulators such as Alacritty and Kitty. What really sets Zutty apart is its radically simple, yet extremely efficient rendering implementation, coupled with a sufficiently complete feature set to make it useful for a wide range of users. Zutty offers high throughput with low latency, and strives to conform to relevant (published or de-facto) standards.</p>

<p>Zutty is written in straightforward C++ and only relies on OpenGL ES 3.1 for rendering, making it trivially portable to windowing systems other than X and operating systems other than Linux. Zutty provides a clean implementation written from scratch, resulting in a minimal, maintainable, modern codebase unencumbered by historical baggage.</p>

<p>Zutty is released under the GNU General Public License (GPL) v3 or (at your option) any later version. Please refer to the file LICENSE for the full text of the license.</p>

<h2 id="documentation">Documentation</h2>

<p>Core documentation (bundled with the Zutty sources):</p>

<ul>
  <li><a href="https://tomscii.sig7.se/zutty/README.html">README</a>: general overview (this document)</li>
  <li><a href="https://tomscii.sig7.se/zutty/doc/USAGE.html">User guide</a>: guide and reference for all users</li>
  <li><a href="https://tomscii.sig7.se/zutty/doc/HACKING.html">Developer guide</a>: internals, debugging, testing, contributing</li>
  <li><a href="https://tomscii.sig7.se/zutty/doc/KEYS.html">Key mapping sequences</a>: reference on keyboard-induced sequences</li>
  <li><a href="https://tomscii.sig7.se/zutty/doc/VTTEST.html">Vttest results</a>: documents the level of conformance against Vttest</li>
</ul>

<p>More about Zutty:</p>

<ul>
  <li><a href="https://tomscii.sig7.se/zutty/wiki/Screenshots.html">Screenshots</a>: Zutty in action</li>
  <li><a href="https://tomscii.sig7.se/zutty/wiki/FAQ.html">Frequently Asked Questions</a>: What you never thought you‚Äôd need to know about Zutty</li>
  <li><a href="https://tomscii.sig7.se/2020/11/How-Zutty-works">How Zutty works</a>: Rendering a terminal with an OpenGL Compute Shader</li>
  <li><a href="https://tomscii.sig7.se/2020/12/A-totally-biased-comparison-of-Zutty">A totally biased comparison of Zutty</a> (to some better-known X terminal emulators)</li>
  <li><a href="https://tomscii.sig7.se/2021/01/Typing-latency-of-Zutty">Measured: Typing latency of Zutty</a> (compared to others)</li>
</ul>

<h2 id="current-status">Current status</h2>

<p>Zutty started out as a concept to prove the feasibility of using a GLES Compute Shader to render a fixed-width text grid entirely in graphics hardware. From its modest beginnings as a technological proof of concept, Zutty has evolved considerably and is now perfectly capable of serving as the main terminal emulator for heavy users of the command line. In particular, this author employs Zutty to run a workload of <code class="language-plaintext highlighter-rouge">tmux</code>, <code class="language-plaintext highlighter-rouge">emacs</code> (<code class="language-plaintext highlighter-rouge">-nw</code>), <code class="language-plaintext highlighter-rouge">tig</code>, <code class="language-plaintext highlighter-rouge">mutt</code>, <code class="language-plaintext highlighter-rouge">htop</code>, and a bunch of other applications making extensive use of the terminal (including its mouse support), with some Zutty instances running for months at a time, on a very resource-constrained SBC (ab)used as a desktop. The correctness, performance, and stability of Zutty is excellent, as one would rightly expect from something as fundamental as a terminal emulator.</p>

<p>There is, however, a list of ancillary features that Zutty does not presently implement. Completing the ones in scope is more or less a matter of straightforward implementation work within the already existing architecture of Zutty, and time will be spent on these in proportion to popular user demand.</p>

<h2 id="notable-features">Notable features</h2>

<h3 id="radically-simple-uniquely-performant-rendering-technology">Radically simple, uniquely performant rendering technology</h3>

<p>The main idea behind Zutty is the implementation of ‚Äúraw‚Äù character video memory via OpenGL ES 3.1. This video memory is just an array of cells backing all character grid locations, with each cell containing Unicode character codes plus color and other visual attributes. This memory area, allocated on the GPU, is mapped to make it directly writable by the application. This results in a conceptually similar interface as to how one could write to the screen by directly poking at physical video memory starting at 0xB8000 on the IBM PC. Zutty employs an OpenGL Compute Shader running on the GPU to read this video memory and render output pixels. The full name of Zutty (dubbed the <em>Zero-cost Unicode Teletype</em>) stands for the remarkable fact that its image rendering is zero-cost from the host CPU perspective.</p>

<p>Zutty requires OpenGL ES 3.1 because this is precisely the lowest version with support for the Compute Shader, the enabling technology behind Zutty. We have chosen OpenGL ES over OpenGL to widen the range of supported hardware platforms, primarily towards small, low-cost Single Board Computers. These boards are commonly built around an ARM SoC with a graphics core supporting OpenGL ES, but not ‚Äúdesktop‚Äù OpenGL. Zutty is the first GPU-accelerated terminal for such low-cost platforms.</p>

<h3 id="correct-and-fairly-complete-vt-emulation">Correct (and fairly complete) VT emulation</h3>

<p>Zutty substantially emulates the ‚Äúcommonly used‚Äù subsets of the protocols of VT52, VT100, VT102, VT220, VT320, VT420 and VT520 terminals (originally manufactured by DEC) as well as some more modern additions defined by the de-facto standard <code class="language-plaintext highlighter-rouge">xterm</code> implementation.</p>

<p>We take great care to ensure that Zutty passes the subset of VTTEST screens that we care about (this amounts to the overwhelming majority of tests concerned with actual screen rendering, and is subject to further extension). We have an automated regression testing setup to run VTTEST in Zutty and verify that the output is a pixel-perfect match of the pre-approved video output. You can thus expect the terminal output to be <em>correct</em> ‚Äì be it driven by tmux, emacs (with org-mode, helm, magit, etc.) or whatever else. Zutty handles corner cases (escape sequences) which, sadly enough, several popular terminal emulators do not correctly support.</p>

<p>Zutty implements xterm‚Äôs de-facto standard method (<code class="language-plaintext highlighter-rouge">modifyOtherKeys</code>) to expose non-trivial modifier key combinations to programs such as Emacs and Vim. Zutty also boasts mouse support (again, modeled after xterm‚Äôs capabilities) to make the user experience of many terminal applications more interactive.</p>

<p>In a perfect world, these would not be highlighted as such prominent features, but unfortunately, our focus on correctness is rather the exception than the norm among widely used terminal emulators (including more modern ones).</p>

<h3 id="font-handling">Font handling</h3>

<p>Zutty supports both fixed size (bitmap) and scaled (TTF, OTF) fonts. Up to four variants of a font are supported (Regular, Bold, Italic / Oblique, plus BoldItalic) with automatic, sensible fallbacks in case any of them (apart from Regular) is missing. Zutty tries to locate the font files itself under a configured font search path, and loads them on its own, without any support from the windowing system.</p>

<p>Zutty is able to display CJK symbols (ideographs) in double-width cells. This requires a suitable double-width font. This font can be fixed or scaled independent from the main font (for example, you may use a scaled font for CJK along with a fixed main font).</p>

<h3 id="true-color-support">True color support</h3>

<p>Each grid cell in the virtual video memory emulated via OpenGL has three bytes reserved for the foreground color as well as the background color. As such, Zutty naturally supports true color (24 bits / 16 million colors) on each cell‚Äôs foreground and background, completely independent of each other and all other cells.</p>

<h3 id="traditional-x-clipboard--primary-selection--copy-paste-support">Traditional X-clipboard / primary selection / copy-paste support</h3>

<p>Zutty supports the traditional method of ‚Äúcopy-paste‚Äù based on the X Selection API, and is accessible via the same GUI mechanisms that long-time <code class="language-plaintext highlighter-rouge">xterm</code> users are familiar with.</p>

<p>Zutty faithfully replicates what <code class="language-plaintext highlighter-rouge">xterm</code> has provided for a very long time: starting selections with the left button, adjusting them with the right button, and cycling between snap-to-char/word/line with double clicks. This naturally yields the ability to select whole words with a double-click, and complete lines with a triple-click. Compared with <code class="language-plaintext highlighter-rouge">xterm</code>, one notable difference is a built-in, simpler rule for word boundaries (as opposed to user-adjustable definitions of character classes).</p>

<p>It is possible to adjust the selection while navigating scrollback. Thus, the complete content of the screen buffer (page history plus on-screen lines), or any part of it, can be copied as a single selection. No need to switch back and forth between source and destination programs when copying large amounts of terminal output!</p>

<p>Selecting a region with the mouse will set the primary selection, and pressing Control+Shift+C will copy that to the clipboard. This mechanism is useful because it allows holding two separate pieces of selection data at once. Zutty can also be configured to automatically copy the primary to the clipboard each time a selection is done.</p>

<p>Paste the primary selection into the terminal via middle click or Shift+Insert, like in <code class="language-plaintext highlighter-rouge">xterm</code>. Paste the clipboard via Control+Shift+V.</p>

<p>Just as with <code class="language-plaintext highlighter-rouge">xterm</code>, terminal programs might enable one of the supported ‚Äúmouse protocols‚Äù to provide mouse interaction on their user interfaces; in such cases, press and hold the Shift key while performing the clicks and drags of the selection that you want to perform (both while copying and pasting). Holding Shift will cut through to the Zutty mouse handler instead of sending those mouse events to the terminal program via the mouse protocol. So, regardless of the program running in the terminal, you can always access the built-in copy-paste support in Zutty; but you can also use whatever mouse support your program has.</p>

<p>In addition, Zutty adds a unique feature for real power users of the terminal: rectangular selection. This is extremely useful if working with a vertically split terminal (think <code class="language-plaintext highlighter-rouge">emacs</code> or <code class="language-plaintext highlighter-rouge">tmux</code>). Simply toggle between ‚Äúregular‚Äù and ‚Äúrectangular‚Äù selection mode with the Space key while a selection adjustment is in progress (left or right mouse button is held down). For your convenience, this setting persists over individual selections made, throughout the lifetime of a running Zutty terminal.</p>

<h3 id="small-clean-codebase">Small, clean codebase</h3>

<p>The radical simplicity of our rendering technology allows for a straightforward virtual terminal implementation that happens to be extremely performant despite the lack of any fancy optimizations on the source code level. This also allows the codebase of Zutty to be fairly small and understandable. Therefore, Zutty lends itself towards educational use and as a vehicle for hacking on terminals. If you‚Äôve always wanted to learn how a terminal emulator works from the inside out, consider studying the Zutty codebase (and associated developer documentation)!</p>

<h2 id="omissions-and-limitations">Omissions and limitations</h2>

<p>There are things that Zutty does not implement compared to other, more established X terminal emulators (<code class="language-plaintext highlighter-rouge">xterm</code> being the gold standard of completeness here). The below list gives an overview of what might be considered missing. Some of them are clearly out of scope for Zutty, but some will possibly be implemented in the future.</p>

<ul>
  <li>Zutty is opinionated about the primacy of UTF-8, which means that non-UTF-8 interaction is generally not supported, not even via bridges such as <code class="language-plaintext highlighter-rouge">luit</code>. DEC builtin character sets (such as the DEC Special Graphics, DEC Technical Characters, etc.) and the escape sequences to enable them are well implemented though, so users of any modern Linux environment should never run into trouble.</li>
  <li>Zutty is Unicode-based, but it is a terminal emulator, not an all-purpose Unicode program. Therefore it does not aim to implement the whole breadth and depth of glyph and language support that Unicode defines. Currently not supported:
    <ul>
      <li>Characters with a code point above <code class="language-plaintext highlighter-rouge">U+FFFF</code> (that is, outside the Basic Multilingual Plane);</li>
      <li>Bidirectional (right-to-left) text;</li>
      <li>Composing characters (things that can only be represented as a base glyph plus one or more composing glyphs superimposed, even in Unicode NFC representation). Do not confuse this with using the <em>compose key</em> to input accented or special characters missing from your keyboard; that works fine!</li>
      <li>Possibly more esoteric features.</li>
    </ul>
  </li>
  <li>DEC VT100 double-height / double-width (DECDHL, DECDWL) lines are not supported. Do not confuse this with double-width cells for wide characters (e.g. CJK ideographs), which are supported.</li>
  <li>Rectangular area operations (introduced by the DEC VT400 series) are not supported. However, this set of features is optional and the terminal‚Äôs self-identification response clearly states the absence of this support, so conforming client applications should not run into any trouble. No fundamental technical reasons here other than the lack of pressing need.</li>
  <li>The mouse protocol implementation aims to be complete with the exception of highlight tracking mode that is not implemented. Mouse highlight tracking is a mode that requires cooperation from the client application; it is not clear if any software actively used in 2020 needs this feature.</li>
  <li>Blinking in general (blinking text driven by the SGR attribute 5, and blinking cursor mode turned on/off by DEC-private set/reset escape sequences) are not (yet) supported. Certain more esoteric text attributes, such as the ‚Äúconcealed‚Äù bit, are also not implemented. This is purely due to lack of bandwidth, and will most likely be added in the future.</li>
</ul>]]></content><author><name></name></author><category term="software&gt;linux" /></entry><entry><title type="html">Building a File Storage Service with Cloudflare Workers and R2</title><link href="https://ib.bsb.br/building-a-file-storage-service-with-cloudflare-workers-and-r2/" rel="alternate" type="text/html" title="Building a File Storage Service with Cloudflare Workers and R2" /><published>2024-10-26T00:00:00+00:00</published><updated>2024-10-26T04:01:12+00:00</updated><id>https://ib.bsb.br/building-a-file-storage-service-with-cloudflare-workers-and-r2</id><content type="html" xml:base="https://ib.bsb.br/building-a-file-storage-service-with-cloudflare-workers-and-r2/"><![CDATA[<p>How to create a file storage service that handles multiple file types using Cloudflare Workers for the RESTful API and Cloudflare R2 for storage. This implementation allows secure uploading, retrieving, and deleting of files.</p>

<h3 id="introduction">Introduction</h3>

<p>The goal is to build a self-hosted file storage solution (ÂõæÂ∫ä) that leverages Cloudflare Workers and R2, inspired by the tutorials:</p>

<ul>
  <li><a href="https://zhul.in/2024/08/12/new-picbed-based-on-cloudflare-and-upyun/">Ëá™Âª∫ÂõæÂ∫äÂ∞èËÆ∞‰∏Ä‚Äî‚ÄîÂõæÂ∫äÊû∂ÊûÑ‰∏é DNS Ëß£Êûê</a></li>
  <li><a href="https://zhul.in/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/">Ëá™Âª∫ÂõæÂ∫äÂ∞èËÆ∞‰∫å‚Äî‚Äî‰ΩøÁî® Workers ‰∏∫ R2 ÊûÑÂª∫ Restful API</a></li>
</ul>

<p>This service will:</p>

<ul>
  <li>Support multiple file types (images, documents, etc.).</li>
  <li>Use Cloudflare R2 for object storage.</li>
  <li>Provide a RESTful API for file operations.</li>
  <li>Include basic authentication for secure access.</li>
</ul>

<h3 id="implementation">Implementation</h3>

<p>Below is the Cloudflare Worker script with explanations and comments.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Cloudflare Worker Script for File Storage Service</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="k">async</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">env</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nf">handleRequest</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">env</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="cm">/**
 * Handles incoming requests and routes them based on the HTTP method.
 * @param {Request} request - The incoming HTTP request.
 * @param {Object} env - Environment bindings (e.g., R2 bucket).
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">handleRequest</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Parse the URL to get the file path</span>
  <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nf">decodeURIComponent</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// Remove leading '/'</span>

  <span class="c1">// Authentication for write operations</span>
  <span class="kd">const</span> <span class="nx">AUTH_KEY</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">AUTH_KEY_SECRET</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span>
  <span class="k">if </span><span class="p">([</span><span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="nx">method</span><span class="p">))</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">authHeader</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">X-Custom-Auth-Key</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">authHeader</span> <span class="o">!==</span> <span class="nx">AUTH_KEY</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="dl">'</span><span class="s1">Forbidden</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">403</span> <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">switch </span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">:</span>
      <span class="c1">// Handle file upload</span>
      <span class="k">return</span> <span class="k">await</span> <span class="nf">uploadFile</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">env</span><span class="p">,</span> <span class="nx">filePath</span><span class="p">);</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">:</span>
      <span class="c1">// Handle file retrieval</span>
      <span class="k">return</span> <span class="k">await</span> <span class="nf">getFile</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">filePath</span><span class="p">);</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">:</span>
      <span class="c1">// Handle file deletion</span>
      <span class="k">return</span> <span class="k">await</span> <span class="nf">deleteFile</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">filePath</span><span class="p">);</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="dl">'</span><span class="s1">Method Not Allowed</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">status</span><span class="p">:</span> <span class="mi">405</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> <span class="na">Allow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET, PUT, DELETE</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 * Uploads a file to the R2 bucket.
 * @param {Request} request - The incoming HTTP request.
 * @param {Object} env - Environment bindings.
 * @param {string} key - The file path in the bucket.
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">uploadFile</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">env</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Optional: Validate file size, type, etc.</span>

  <span class="c1">// Save the file to R2</span>
  <span class="kd">const</span> <span class="nx">contentType</span> <span class="o">=</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">application/octet-stream</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">await</span> <span class="nx">env</span><span class="p">.</span><span class="nx">MY_BUCKET</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">httpMetadata</span><span class="p">:</span> <span class="p">{</span> <span class="nx">contentType</span> <span class="p">},</span>
    <span class="c1">// Optional: Set cache control</span>
    <span class="na">httpMetadata</span><span class="p">:</span> <span class="p">{</span> <span class="na">cacheControl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public, max-age=31536000</span><span class="dl">'</span> <span class="p">},</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="s2">`File '</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">' uploaded successfully`</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">200</span> <span class="p">});</span>
<span class="p">}</span>

<span class="cm">/**
 * Retrieves a file from the R2 bucket.
 * @param {Object} env - Environment bindings.
 * @param {string} key - The file path in the bucket.
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">getFile</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">env</span><span class="p">.</span><span class="nx">MY_BUCKET</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="dl">'</span><span class="s1">File Not Found</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">404</span> <span class="p">});</span>
  <span class="p">}</span>

  <span class="c1">// Return the file with appropriate headers</span>
  <span class="kd">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Headers</span><span class="p">();</span>
  <span class="nx">object</span><span class="p">.</span><span class="nf">writeHttpMetadata</span><span class="p">(</span><span class="nx">headers</span><span class="p">);</span>
  <span class="nx">headers</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">ETag</span><span class="dl">'</span><span class="p">,</span> <span class="nx">object</span><span class="p">.</span><span class="nx">httpEtag</span><span class="p">);</span>

  <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span> <span class="nx">headers</span> <span class="p">});</span>
<span class="p">}</span>

<span class="cm">/**
 * Deletes a file from the R2 bucket.
 * @param {Object} env - Environment bindings.
 * @param {string} key - The file path in the bucket.
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">deleteFile</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">env</span><span class="p">.</span><span class="nx">MY_BUCKET</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="s2">`File '</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">' deleted successfully`</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">200</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setup-instructions">Setup Instructions</h3>

<h4 id="1-create-an-r2-bucket">1. Create an R2 Bucket</h4>

<ul>
  <li>Log in to your Cloudflare dashboard.</li>
  <li>Navigate to <strong>R2</strong> and create a new bucket (e.g., <code class="language-plaintext highlighter-rouge">my-file-storage</code>).</li>
</ul>

<h4 id="2-write-the-worker-script">2. Write the Worker Script</h4>

<ul>
  <li>Use the script provided above.</li>
  <li>Save it in your Cloudflare Workers dashboard or use the <a href="https://developers.cloudflare.com/workers/wrangler/">Wrangler CLI</a>.</li>
</ul>

<h4 id="3-bind-the-r2-bucket-to-the-worker">3. Bind the R2 Bucket to the Worker</h4>

<ul>
  <li>In your Worker settings, go to <strong>Variables &gt; R2 Buckets</strong>.</li>
  <li>Bind the <code class="language-plaintext highlighter-rouge">MY_BUCKET</code> variable to your R2 bucket (<code class="language-plaintext highlighter-rouge">my-file-storage</code>).</li>
</ul>

<h4 id="4-set-the-authentication-key">4. Set the Authentication Key</h4>

<ul>
  <li>In <strong>Variables &gt; Environment Variables</strong>, add <code class="language-plaintext highlighter-rouge">AUTH_KEY_SECRET</code> with a secure value (your secret key).</li>
</ul>

<h4 id="5-deploy-the-worker">5. Deploy the Worker</h4>

<ul>
  <li>Assign a route or domain to your Worker (e.g., <code class="language-plaintext highlighter-rouge">https://files.example.com</code>).</li>
  <li>Deploy the Worker.</li>
</ul>

<h3 id="usage-examples">Usage Examples</h3>

<h4 id="uploading-a-file">Uploading a File</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT <span class="s1">'https://files.example.com/path/to/file.jpg'</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s1">'Content-Type: image/jpeg'</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s1">'X-Custom-Auth-Key: your_auth_key'</span> <span class="se">\</span>
  <span class="nt">--data-binary</span> <span class="s1">'@local/path/to/file.jpg'</span>
</code></pre></div></div>

<h4 id="retrieving-a-file">Retrieving a File</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> GET <span class="s1">'https://files.example.com/path/to/file.jpg'</span> <span class="nt">--output</span> file.jpg
</code></pre></div></div>

<h4 id="deleting-a-file">Deleting a File</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> DELETE <span class="s1">'https://files.example.com/path/to/file.jpg'</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s1">'X-Custom-Auth-Key: your_auth_key'</span>
</code></pre></div></div>

<h3 id="notes-and-considerations">Notes and Considerations</h3>

<ul>
  <li>
    <p><strong>Supported File Types:</strong></p>

    <ul>
      <li>All file types are supported. Ensure the <code class="language-plaintext highlighter-rouge">Content-Type</code> is correctly set when uploading.</li>
    </ul>
  </li>
  <li>
    <p><strong>Authentication:</strong></p>

    <ul>
      <li>Only <code class="language-plaintext highlighter-rouge">PUT</code> and <code class="language-plaintext highlighter-rouge">DELETE</code> requests require the <code class="language-plaintext highlighter-rouge">X-Custom-Auth-Key</code> header.</li>
      <li><code class="language-plaintext highlighter-rouge">GET</code> requests are public. Implement additional checks if you need to restrict access.</li>
    </ul>
  </li>
  <li>
    <p><strong>Caching:</strong></p>

    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">Cache-Control</code> header is set for one year (<code class="language-plaintext highlighter-rouge">max-age=31536000</code>).</li>
      <li>Adjust caching policies as needed.</li>
    </ul>
  </li>
  <li>
    <p><strong>Error Handling:</strong></p>

    <ul>
      <li>The script provides basic error responses.</li>
      <li>Expand error handling for production use.</li>
    </ul>
  </li>
  <li>
    <p><strong>Limits:</strong></p>

    <ul>
      <li>Cloudflare Workers have <a href="https://developers.cloudflare.com/workers/platform/limits/">limits</a> on request size, CPU time, etc.</li>
      <li>For large files, consider using direct uploads to R2 or multipart uploads.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="scripts&gt;cloud," /><category term="tools" /></entry></feed>