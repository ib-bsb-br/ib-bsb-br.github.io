<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-01-17T15:05:18+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Preparando a Viagem em Família (Caldas Novas)</title><link href="https://ib.bsb.br/preparando-a-viagem-em-famlia-caldas-novas/" rel="alternate" type="text/html" title="Preparando a Viagem em Família (Caldas Novas)" /><published>2025-01-17T00:00:00+00:00</published><updated>2025-01-17T14:45:04+00:00</updated><id>https://ib.bsb.br/preparando-a-viagem-em-famlia-caldas-novas</id><content type="html" xml:base="https://ib.bsb.br/preparando-a-viagem-em-famlia-caldas-novas/"><![CDATA[<p><strong>1. Ações Imediatas (Antes da Partida - 3 Horas Restantes):</strong></p>

<ul>
  <li><strong>Compras Urgentes:</strong>
    <ul>
      <li><strong>Protetor solar:</strong> Adquirir protetor solar para toda a família, especialmente para Teodoro e Maitê. Opte por um protetor solar de amplo espectro, resistente à água, com FPS alto (50+ para crianças), e formulação especial para bebês e crianças.</li>
      <li><strong>Medicação Venvanse:</strong> Caso seja um medicamento de uso contínuo, certifique-se de ter quantidade suficiente para toda a viagem, e um pouco extra para imprevistos. Leve a receita médica.</li>
    </ul>
  </li>
  <li><strong>Itens Obrigatórios (Conforme Regulamentações do Apartamento):</strong>
    <ul>
      <li><strong>Roupa de Cama:</strong> Levar lençóis, fronhas e cobertores para todas as camas (1 cama de casal e 4 colchões de solteiro).</li>
      <li><strong>Travesseiros:</strong> O apartamento não fornece travesseiros; levar quantidade suficiente para todos.</li>
      <li><strong>Roupa de Banho:</strong> Toalhas de banho para cada membro da família, toalhas de rosto e panos para uso pessoal.</li>
      <li><strong>Papel Higiênico e Sabonete:</strong> Levar quantidade suficiente para a estadia.</li>
      <li><strong>Material de Limpeza:</strong> Esponjas não abrasivas, detergente para louças, sacos de lixo (cozinha e banheiro), panos de prato ou toalhas para secar louça.</li>
    </ul>
  </li>
  <li><strong>Medicamentos e Itens Médicos:</strong>
    <ul>
      <li>Reunir e embalar todos os medicamentos necessários: Vitaminas, Clenil (e dispositivos associados), nebulizador ultrassônico, Dipirona, antialérgico, Venvanse, pomada Bepantol para assaduras.</li>
      <li><strong>Kit de Primeiros Socorros:</strong> Incluir itens básicos como curativos adesivos, lenços antissépticos, termômetro, pomada antibiótica, gaze, esparadrapo, pinça, tesoura, analgésicos e antitérmicos (fórmulas para adultos e crianças), repelente de insetos (seguro para crianças) e protetor solar labial com FPS.</li>
    </ul>
  </li>
  <li><strong>Itens Críticos para as Crianças:</strong>
    <ul>
      <li><strong>Fraldas e Lenços Umedecidos:</strong> Para Teodoro e Maitê; levar quantidade extra.</li>
      <li><strong>Berço e Moisés/Cercado para Maitê:</strong> Certificar-se de que ambos estejam embalados com segurança.</li>
      <li><strong>Itens Essenciais de Teodoro:</strong> Touca e roupão de dinossauro.</li>
      <li><strong>Cortador de Unhas:</strong> Conforme mencionado nos lembretes.</li>
    </ul>
  </li>
  <li><strong>Outros Itens:</strong>
    <ul>
      <li><strong>Pequis do Freezer:</strong> Embalar em uma bolsa térmica com gelo para mantê-los frios. <strong>Pequi</strong> é uma fruta típica do cerrado brasileiro, com sabor e aroma marcantes. Pode ser cozido com arroz, frango ou carne, ou usado em conservas. Certifique-se de que esteja bem vedado para evitar vazamentos e odores fortes.</li>
      <li><strong>Água:</strong> Encher garrafas de água reutilizáveis para a viagem de carro.</li>
      <li><strong>Lixo:</strong> Retirar o lixo, conforme lembretes.</li>
      <li><strong>Roupas Sujas:</strong> Reunir as roupas sujas de Teodoro e Maitê.</li>
      <li><strong>Casa:</strong> Trancar portas e janelas, desligar aparelhos, ativar o sistema de segurança, se aplicável, e informar uma pessoa de confiança sobre a viagem.</li>
    </ul>
  </li>
</ul>

<p><strong>2. Preparação do Veículo:</strong></p>

<ul>
  <li><strong>Instalação dos Assentos de Carro:</strong>
    <ul>
      <li><strong>Para Teodoro:</strong> Assento de carro apropriado para sua idade (cadeirinha).</li>
      <li><strong>Para Maitê:</strong> Assento de carro infantil voltado para trás (bebê conforto).</li>
    </ul>
  </li>
  <li><strong>Verificação do Veículo:</strong>
    <ul>
      <li><strong>Combustível:</strong> Abastecer o tanque antes de sair.</li>
      <li><strong>Pressão dos Pneus, Óleo, Líquido de Arrefecimento, Freios:</strong> Verificação rápida de segurança.</li>
      <li><strong>Documentos do Veículo:</strong> CNH, registro do carro, seguro.</li>
    </ul>
  </li>
  <li><strong>Kit de Emergência para o Carro:</strong>
    <ul>
      <li>Kit de primeiros socorros.</li>
      <li>Lanterna com pilhas extras.</li>
      <li>Cabos de ligação para bateria.</li>
      <li>Triângulo de sinalização e colete refletivo (obrigatórios por lei no Brasil).</li>
      <li>Ferramentas básicas.</li>
    </ul>
  </li>
  <li><strong>Itens Obrigatórios por Lei no Brasil:</strong>
    <ul>
      <li><strong>Triângulo de Sinalização, Colete Refletivo, Extintor de Incêndio (verificar validade), Macaco, Chave de Roda e Estepe em boas condições.</strong></li>
    </ul>
  </li>
</ul>

<p><strong>3. Lista de Bagagem Detalhada:</strong></p>

<ul>
  <li><strong>Roupas (Para Todos os Membros da Família):</strong>
    <ul>
      <li><strong>Vestuário Diário:</strong> Roupas suficientes para quatro dias, mais extras para as crianças. Roupas leves e confortáveis são ideais para o clima quente de Caldas Novas.</li>
      <li><strong>Roupas de Banho:</strong> Para piscinas e fontes termais.</li>
      <li><strong>Roupas de Dormir, Roupas Íntimas, Meias.</strong></li>
      <li><strong>Agasalhos leves:</strong> Para noites mais frescas.</li>
    </ul>
  </li>
  <li><strong>Calçados:</strong>
    <ul>
      <li><strong>Sapatos Confortáveis, Sandálias/Chinelos.</strong></li>
    </ul>
  </li>
  <li><strong>Produtos de Higiene Pessoal:</strong>
    <ul>
      <li><strong>Escovas de Dentes e Pasta de Dente:</strong> Para todos.</li>
      <li><strong>Shampoo, Condicionador, Sabonete Líquido/em Barra.</strong></li>
      <li><strong>Hidratante e Produtos para Cabelo.</strong></li>
      <li><strong>Repelente e Protetor Solar.</strong></li>
      <li><strong>Itens de Higiene Pessoal:</strong> Desodorante, produtos de higiene feminina, etc.</li>
      <li><strong>Para as crianças:</strong> Produtos de higiene pessoal infantil, incluindo shampoo, sabonete líquido, hidratante, escova de dentes e pasta de dente infantil.</li>
    </ul>
  </li>
  <li><strong>Itens para Bebês:</strong>
    <ul>
      <li>Fraldas e lenços umedecidos em grande quantidade.</li>
      <li>Pomada para assaduras (Bepantol).</li>
      <li>Fórmula infantil/suprimentos para amamentação (se aplicável).</li>
      <li>Comida para bebê (se Maitê já comer sólidos).</li>
      <li>Mamadeiras/copos de transição (se necessário).</li>
      <li>Babadores.</li>
      <li>Chupetas (se Maitê usar).</li>
    </ul>
  </li>
  <li><strong>Entretenimento:</strong>
    <ul>
      <li><strong>Para Teodoro:</strong> Livros, brinquedos pequenos, tablet com jogos e vídeos baixados (com fones de ouvido), livros de colorir e giz de cera.</li>
      <li><strong>Para Maitê:</strong> Brinquedos macios, chocalhos, mordedores, livros de tabuleiro.</li>
      <li><strong>Para a Família:</strong> Baralho, jogos de tabuleiro de viagem.</li>
    </ul>
  </li>
  <li><strong>Diversos:</strong>
    <ul>
      <li>Carregadores para todos os dispositivos eletrônicos.</li>
      <li>Câmera fotográfica (se desejar).</li>
      <li>Mochila para passeios.</li>
      <li>Guarda-chuva.</li>
      <li>Saco para roupa suja.</li>
      <li>Sacos Ziploc (para lanches, roupas molhadas, etc.).</li>
      <li>Sanitizador para as mãos e máscaras.</li>
    </ul>
  </li>
</ul>

<p><strong>4. Regulamentos e Informações do Apartamento (Thermas II):</strong></p>

<ul>
  <li><strong>Endereço:</strong> Thermas II Private Lazer, localizado no bloco 3 área 1R, R. 3 - Jeriquara, Caldas Novas-GO, 75690-000.</li>
  <li><strong>Telefone:</strong> (64) 3453-3469.</li>
  <li><strong>Check-in:</strong> 14h00 (segunda-feira).</li>
  <li><strong>Check-out:</strong> 11h00 (sexta-feira).</li>
  <li><strong>Senha do Wi-Fi:</strong> Sinprf-GO.</li>
  <li><strong>Ocupação Máxima:</strong> 6 pessoas (incluindo crianças).</li>
  <li><strong>Limpeza:</strong> Os hóspedes são responsáveis pela limpeza do apartamento durante a estadia e antes do check-out, incluindo lavar a louça, limpar as superfícies e retirar o lixo.</li>
  <li><strong>Danos:</strong> Os hóspedes são responsáveis por quaisquer danos causados por eles ou por sua família.</li>
  <li><strong>Proibido:</strong>
    <ul>
      <li>Usar palha de aço ou o lado verde das esponjas em utensílios de plástico, vidro ou aço inoxidável.</li>
      <li>Fumar dentro do apartamento.</li>
      <li>Animais de estimação.</li>
      <li>Remover bens do apartamento.</li>
    </ul>
  </li>
  <li><strong>Penalidades:</strong> Multas e/ou suspensão de reservas futuras podem ser aplicadas em caso de não conformidade.</li>
  <li><strong>Facilidades do Thermas II:</strong> Entre em contato diretamente com o Thermas II ((64) 3453-3469) para obter informações atualizadas sobre as facilidades disponíveis, como lavanderia, restaurantes, lojas de conveniência, piscinas, etc.</li>
</ul>

<p><strong>5. Planejamento de Refeições:</strong></p>

<ul>
  <li><strong>Lanches e Água para a Viagem:</strong>
    <ul>
      <li><strong>Garrafas de Água:</strong> Levar quantidade suficiente para a viagem.</li>
      <li><strong>Lanches:</strong> Especialmente para as crianças, para mantê-las confortáveis durante a viagem (frutas, biscoitos, barras de cereais, etc.).</li>
    </ul>
  </li>
  <li><strong>Mantimentos para a Estadia:</strong>
    <ul>
      <li><strong>Suprimentos para o Primeiro Dia:</strong> Levar ou planejar refeições fáceis para a chegada.</li>
      <li><strong>Cozinhar vs. Comer Fora:</strong> Decidir se irão cozinhar durante a estadia e fazer compras de acordo.</li>
      <li><strong>Itens Básicos:</strong> Pão, leite, ovos, cereais, macarrão, arroz, frutas, vegetais, suco, café, chá (considerar levar alguns itens ou comprar em Caldas Novas).</li>
      <li><strong>Supermercados em Caldas Novas:</strong>
        <ul>
          <li><strong>Bretas:</strong> Av. Orcalino Santos, 287 - Centro, Caldas Novas - GO, 75690-000</li>
          <li><strong>Supermercado Serve Bem:</strong> Av. Santo Amaro, 897 - St. Oeste, Caldas Novas - GO, 75690-000</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><strong>6. Considerações Adicionais:</strong></p>

<ul>
  <li><strong>Segurança e Saúde:</strong>
    <ul>
      <li><strong>Documentos de Saúde:</strong> Cartões e documentos do plano de saúde para todos os membros da família.</li>
      <li><strong>Considerações sobre a COVID-19:</strong> Máscaras e álcool em gel para uso em áreas públicas.</li>
      <li><strong>Contatos de Emergência:</strong> Anotar a localização e o contato do hospital ou clínica mais próxima em Caldas Novas.</li>
    </ul>
  </li>
  <li><strong>Comunicação:</strong>
    <ul>
      <li><strong>Compartilhar Itinerário:</strong> Com um amigo ou familiar de confiança.</li>
    </ul>
  </li>
  <li><strong>Documentos Importantes:</strong>
    <ul>
      <li><strong>Confirmação da Reserva:</strong> Ter uma cópia impressa ou digital.</li>
      <li><strong>Identificação:</strong> Documentos de identidade válidos para todos os membros da família.</li>
    </ul>
  </li>
  <li><strong>Formas de Pagamento:</strong> Levar dinheiro em espécie e cartões.</li>
  <li><strong>Lavanderia:</strong> Verificar se o Thermas II possui lavanderia ou levar uma pequena quantidade de sabão para lavar roupas à mão, se necessário.</li>
</ul>

<p><strong>7. Contingências e Emergências:</strong></p>

<ul>
  <li><strong>Problemas com o Carro:</strong>
    <ul>
      <li><strong>Leve o contato de um serviço de reboque ou assistência na estrada.</strong></li>
      <li><strong>Em caso de pneu furado, utilize o estepe e procure uma borracharia o mais breve possível.</strong></li>
      <li><strong>Se o carro apresentar problemas mecânicos, procure uma oficina mecânica na cidade.</strong></li>
    </ul>
  </li>
  <li><strong>Doenças:</strong>
    <ul>
      <li><strong>Em caso de febre, dor de cabeça ou outros sintomas, utilize os medicamentos do kit de primeiros socorros.</strong></li>
      <li><strong>Se os sintomas persistirem, procure atendimento médico em uma das unidades de saúde de Caldas Novas:</strong>
        <ul>
          <li><strong>Hospital Nossa Senhora Aparecida:</strong> (64) 3453-1555</li>
          <li><strong>UPA Caldas Novas:</strong> (64) 3453-7070</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Itens Perdidos ou Roubados:</strong>
    <ul>
      <li><strong>Mantenha cópias dos documentos importantes em um local separado.</strong></li>
      <li><strong>Anote os números de série de eletrônicos valiosos.</strong></li>
      <li><strong>Em caso de perda ou roubo, registre um boletim de ocorrência na delegacia de polícia mais próxima.</strong></li>
    </ul>
  </li>
</ul>

<p><strong>8. Atrações em Caldas Novas:</strong></p>

<ul>
  <li><strong>Hot Park:</strong> Um dos maiores parques aquáticos da América do Sul, com diversas atrações para todas as idades. (Rodovia GO-507, Km 5, s/n - Zona Rural, Rio Quente - GO, 75695-000)</li>
  <li><strong>Parque Estadual da Serra de Caldas Novas:</strong> Oferece trilhas, cachoeiras e belas paisagens. (Av. Bento de Godoy, s/n - Centro, Caldas Novas - GO, 75690-000)</li>
  <li><strong>Jardim Japonês:</strong> Um belo jardim com lagos, pontes e templos, ideal para relaxar. (Av. Santo Amaro, s/n - Chácara Roma, Caldas Novas - GO, 75690-000)</li>
  <li><strong>Lago Corumbá:</strong> Um grande lago artificial, onde é possível praticar esportes náuticos e fazer passeios de barco.</li>
  <li><strong>Feira do Luar:</strong> Uma feira de artesanato e comidas típicas que acontece à noite na praça central.</li>
</ul>

<p><strong>Contatos de Emergência:</strong></p>

<ul>
  <li><strong>Thermas II:</strong> (64) 3453-3469.</li>
  <li><strong>Polícia Militar:</strong> 190.</li>
  <li><strong>Ambulância (SAMU):</strong> 192.</li>
  <li><strong>Hospital Nossa Senhora Aparecida:</strong> (64) 3453-1555.</li>
  <li><strong>UPA Caldas Novas:</strong> (64) 3453-7070.</li>
  <li><strong>Família/Amigos:</strong> Lista de contatos para emergências.</li>
</ul>

<p><strong>Lembretes Finais:</strong></p>

<ul>
  <li><strong>Horário de Saída:</strong> Planejar sair no horário para chegar no check-in às 14h00.</li>
  <li><strong>Planejamento de Rota:</strong> GPS ou mapa configurado com o destino correto.</li>
  <li><strong>Aproveitem a viagem!</strong></li>
</ul>]]></content><author><name></name></author><category term="fatherhood" /></entry><entry><title type="html">Merge Bookmarks JSON</title><link href="https://ib.bsb.br/merge-bookmarks-json/" rel="alternate" type="text/html" title="Merge Bookmarks JSON" /><published>2025-01-15T00:00:00+00:00</published><updated>2025-01-15T09:22:33+00:00</updated><id>https://ib.bsb.br/merge-bookmarks-json</id><content type="html" xml:base="https://ib.bsb.br/merge-bookmarks-json/"><![CDATA[<p>Install <code class="language-plaintext highlighter-rouge">demjson3</code> using pip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>demjson3
</code></pre></div></div>

<hr />

<p><strong>Script:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">demjson3</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">argparse</span>

<span class="k">def</span> <span class="nf">fix_and_parse_snippets</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Parses and fixes JSON snippets within the provided text.
    Returns a list of valid JSON objects.
    </span><span class="sh">"""</span>
    <span class="c1"># Split the text into potential JSON strings based on curly braces
</span>    <span class="n">snippets</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">brace_level</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">current_snippet</span> <span class="o">=</span> <span class="sh">''</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">text</span><span class="p">:</span>
        <span class="n">current_snippet</span> <span class="o">+=</span> <span class="n">char</span>
        <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">{</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">brace_level</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">}</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">brace_level</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">brace_level</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># Attempt to parse the snippet
</span>                <span class="k">try</span><span class="p">:</span>
                    <span class="n">parsed</span> <span class="o">=</span> <span class="n">demjson3</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">current_snippet</span><span class="p">)</span>
                    <span class="n">snippets</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">parsed</span><span class="p">)</span>
                    <span class="n">current_snippet</span> <span class="o">=</span> <span class="sh">''</span>
                <span class="k">except</span> <span class="n">demjson3</span><span class="p">.</span><span class="n">JSONDecodeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error parsing snippet: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">current_snippet</span> <span class="o">=</span> <span class="sh">''</span>
                <span class="k">continue</span>
    <span class="k">return</span> <span class="n">snippets</span>

<span class="k">def</span> <span class="nf">merge_children</span><span class="p">(</span><span class="n">existing_children</span><span class="p">,</span> <span class="n">new_children</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Merges new children into existing ones, avoiding duplicates based on GUID.
    </span><span class="sh">"""</span>
    <span class="n">existing_guids</span> <span class="o">=</span> <span class="p">{</span><span class="n">child</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">guid</span><span class="sh">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">existing_children</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">new_children</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">guid</span><span class="sh">'</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">existing_guids</span> <span class="ow">and</span> <span class="n">child</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">guid</span><span class="sh">'</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">existing_children</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
            <span class="n">existing_guids</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">child</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">guid</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Handle duplicates or missing GUIDs if necessary
</span>            <span class="n">existing_children</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>  <span class="c1"># Optionally append anyway
</span>    <span class="k">return</span> <span class="n">existing_children</span>

<span class="k">def</span> <span class="nf">consolidate_bookmarks</span><span class="p">(</span><span class="n">json_objects</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Consolidates multiple bookmark objects into a single bookmarks structure.
    </span><span class="sh">"""</span>
    <span class="n">consolidated</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">roots</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">bookmark_bar</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">date_added</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">date_modified</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Bookmarks Bar</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">folder</span><span class="sh">"</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">other</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">date_added</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">date_modified</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Other Bookmarks</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">folder</span><span class="sh">"</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">synced</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">date_added</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">date_modified</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">3</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mobile Bookmarks</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">folder</span><span class="sh">"</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="sh">"</span><span class="s">version</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">json_objects</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">roots</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
            <span class="n">roots</span> <span class="o">=</span> <span class="n">obj</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">root_name</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">bookmark_bar</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">other</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">synced</span><span class="sh">'</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">root_name</span> <span class="ow">in</span> <span class="n">roots</span><span class="p">:</span>
                    <span class="n">existing_children</span> <span class="o">=</span> <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">children</span><span class="sh">'</span><span class="p">]</span>
                    <span class="n">new_children</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="n">root_name</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">children</span><span class="sh">'</span><span class="p">,</span> <span class="p">[])</span>
                    <span class="n">merged_children</span> <span class="o">=</span> <span class="nf">merge_children</span><span class="p">(</span><span class="n">existing_children</span><span class="p">,</span> <span class="n">new_children</span><span class="p">)</span>
                    <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">children</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_children</span>
                    <span class="c1"># Update date_added and date_modified if needed
</span>                    <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">date_added</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span>
                        <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">date_added</span><span class="sh">'</span><span class="p">],</span> <span class="n">roots</span><span class="p">[</span><span class="n">root_name</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">date_added</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">)</span>
                    <span class="p">)</span>
                    <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">date_modified</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span>
                        <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="n">root_name</span><span class="p">][</span><span class="sh">'</span><span class="s">date_modified</span><span class="sh">'</span><span class="p">],</span> <span class="n">roots</span><span class="p">[</span><span class="n">root_name</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">date_modified</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">)</span>
                    <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># If the object is a fragment, add it to 'Other Bookmarks'
</span>            <span class="k">if</span> <span class="n">obj</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">folder</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">url</span><span class="sh">'</span><span class="p">]:</span>
                <span class="n">consolidated</span><span class="p">[</span><span class="sh">'</span><span class="s">roots</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">other</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">children</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">consolidated</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Fix and merge malformed Google Chrome bookmarks JSON snippets.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">input_file</span><span class="sh">'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Path to the input text file containing concatenated JSON snippets.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">output_file</span><span class="sh">'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Path to the output JSON file for the fixed bookmarks.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">input_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">input_file</span>
    <span class="n">output_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">output_file</span>

    <span class="c1"># Read the input file
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">raw_text</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error reading input file: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Parse and fix snippets
</span>    <span class="n">json_objects</span> <span class="o">=</span> <span class="nf">fix_and_parse_snippets</span><span class="p">(</span><span class="n">raw_text</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">json_objects</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No valid JSON snippets found.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Consolidate bookmarks
</span>    <span class="n">consolidated_bookmarks</span> <span class="o">=</span> <span class="nf">consolidate_bookmarks</span><span class="p">(</span><span class="n">json_objects</span><span class="p">)</span>

    <span class="c1"># Write to the output file
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">consolidated_bookmarks</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Fixed bookmarks have been saved to </span><span class="si">{</span><span class="n">output_file</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error writing output file: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<p><strong>Instructions to Use the Script:</strong></p>

<ol>
  <li>
    <p><strong>Install the Required Library:</strong></p>

    <p>Install <code class="language-plaintext highlighter-rouge">demjson3</code> if you haven’t already:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>demjson3
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Prepare Your Input File:</strong></p>

    <ul>
      <li>Create a text file (e.g., <code class="language-plaintext highlighter-rouge">input_snippets.txt</code>) containing your concatenated snippets of Chrome bookmarks JSON data.</li>
      <li>Ensure that the JSON fragments are included as they are, even if they are improperly formatted or concatenated.</li>
    </ul>
  </li>
  <li>
    <p><strong>Save the Script:</strong></p>

    <ul>
      <li>Save the script above into a file named, for example, <code class="language-plaintext highlighter-rouge">fix_bookmarks.py</code>.</li>
    </ul>
  </li>
  <li>
    <p><strong>Run the Script:</strong></p>

    <ul>
      <li>Open a terminal or command prompt and navigate to the directory containing <code class="language-plaintext highlighter-rouge">fix_bookmarks.py</code> and <code class="language-plaintext highlighter-rouge">input_snippets.txt</code>.</li>
      <li>
        <p>Run the script using the following command:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python fix_bookmarks.py input_snippets.txt fixed_bookmarks.json
</code></pre></div>        </div>

        <ul>
          <li>Replace <code class="language-plaintext highlighter-rouge">input_snippets.txt</code> with the path to your input file.</li>
          <li>Replace <code class="language-plaintext highlighter-rouge">fixed_bookmarks.json</code> with your desired output file name.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Verify the Output:</strong></p>

    <ul>
      <li>After running the script, it will generate <code class="language-plaintext highlighter-rouge">fixed_bookmarks.json</code> containing the consolidated bookmarks.</li>
      <li>Review the output file to ensure all bookmarks have been included.</li>
    </ul>
  </li>
  <li>
    <p><strong>Import the Fixed Bookmarks:</strong></p>

    <ul>
      <li>You can now import the <code class="language-plaintext highlighter-rouge">fixed_bookmarks.json</code> file into Google Chrome or use it as needed.</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="scripts&gt;python" /></entry><entry><title type="html">AoT prompt enhancer</title><link href="https://ib.bsb.br/aot-prompt-enhancer/" rel="alternate" type="text/html" title="AoT prompt enhancer" /><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T18:44:39+00:00</updated><id>https://ib.bsb.br/aot-prompt-enhancer</id><content type="html" xml:base="https://ib.bsb.br/aot-prompt-enhancer/"><![CDATA[<section data-filename="_code-block.txt" data-code="**Task Overview:**
You are assigned to enhance and restructure a given user prompt by applying the **Algorithm of Thoughts (AoT)** framework. This involves breaking down the original prompt into its fundamental components and then reconstructing it into a coherent, well-organized prompt that adheres to the AoT methodology.
**Objectives:**
1. **Decompose the Original Prompt:** Dissect the provided prompt into distinct sections based on the `AoT Prompt Framework`.
2. **Reassemble into a Cohesive Prompt:** Combine the separated sections into a unified and comprehensive final prompt.
**Instructions:**
1. **Transform into Disjoint Components:**
Carefully analyze the original prompt and separate it into the following AoT framework sections:
- **Problem Statement:** Clearly define the main issue or topic addressed in the prompt.
- **Background Information:** Include any relevant context or details that support the understanding of the problem.
- **Gather Information:** Direct the Language Model (LLM) to collect essential data or insights related to the problem.
- **Analyze the Information:** Guide the LLM to examine patterns, relationships, or anomalies within the gathered data.
- **Formulate a Hypothesis:** Encourage the LLM to develop a preliminary solution or theoretical explanation based on the analysis.
- **Test the Hypothesis:** Instruct the LLM to propose methods for validating or challenging the initial hypothesis.
- **Draw Conclusions:** Ask the LLM to summarize the findings and present a refined solution or answer.
- **Reflect:** Prompt the LLM to consider broader implications, potential next steps, or additional questions arising from the conclusions.
*Example Transformation:*
```AoT_Prompt_Framework
Problem Statement: [Define the core issue from the original prompt]
Background Information: [Add necessary context or details]
Gather Information: [Instruct the LLM to collect relevant data]
Analyze the Information: [Guide the LLM to examine the collected data]
Formulate a Hypothesis: [Encourage the LLM to propose a preliminary solution]
Test the Hypothesis: [Instruct the LLM to validate or challenge the hypothesis]
Draw Conclusions: [Summarize findings and provide a refined solution]
Reflect: [Consider broader implications and next steps]
Final Prompt: &lt;--! placeholder --&gt;
```
2. **Reconstruct into Final Prompt:**
- **Integrate Sections:** Combine the separated sections into a seamless and logically flowing final prompt.
- **Ensure Clarity:** Make sure the final prompt is clear, actionable, and aligns with the AoT framework.
- **Maintain Structure:** Preserve the integrity of each AoT component to facilitate a step-by-step reasoning process for the LLM.
**Desired Outcome:**
A meticulously structured final prompt that incorporates all elements of the AoT framework, enabling the Language Model to engage in a methodical reasoning process and generate precise, insightful responses.
**Response Specifications:**
- **Format:** Utilize the `AoT_Prompt_Framework` structure with clearly defined sections.
- **Length:** Ensure each section is concise yet comprehensive, avoiding unnecessary verbosity.
- **Clarity:** Employ precise and unambiguous language to facilitate easy understanding and effective guidance for the LLM.
**Example Output 1:**
```AoT_Prompt_Framework_1
Problem Statement: [Define the core issue from the original prompt]
Background Information: [Add necessary context or details]
Gather Information: [Instruct the LLM to collect relevant data]
Analyze the Information: [Guide the LLM to examine the collected data]
Formulate a Hypothesis: [Encourage the LLM to propose a preliminary solution]
Test the Hypothesis: [Instruct the LLM to validate or challenge the hypothesis]
Draw Conclusions: [Summarize findings and provide a refined solution]
Reflect: [Consider broader implications and next steps]
Final Prompt: &lt;--! placeholder --&gt;
```
**Example Output 2:**
&quot;&quot;&quot;
**Original Prompt:**
*&quot;Discuss the benefits of exercise.&quot;*
**Enhanced Prompt Using the AoT Framework:**
```AoT_Prompt_Framework
Problem Statement: Analyze and explain the various benefits of regular physical exercise on human health and well-being.
Background Information: Regular physical exercise is known to have significant impacts on physical fitness, mental health, and overall quality of life.
Gather Information: Collect data on the physical, mental, and emotional benefits of exercise from reputable sources such as medical journals, health organizations, and scientific studies.
Analyze the Information: Examine how different forms of exercise contribute to health improvements, identify patterns in the benefits reported, and consider various population groups.
Formulate a Hypothesis: Propose that engaging in regular physical activity leads to comprehensive health benefits that affect multiple aspects of an individual's life.
Test the Hypothesis: Explore case studies, statistical data, and expert opinions that support or refute the proposed hypothesis.
Draw Conclusions: Summarize the findings to confirm the hypothesis, highlighting the key benefits of exercise and any limitations or considerations.
Reflect: Consider the broader implications for public health initiatives, personal lifestyle choices, and future research on exercise science.
Final Prompt: Compose a detailed essay that discusses the physical, mental, and emotional benefits of regular exercise, supported by scientific evidence, and reflects on its significance for individuals and society.
```
&quot;&quot;&quot;
---
**Input Prompt:**
~~~
*Please insert the original prompt here.*
~~~
**Guidelines:**
- **Step-by-Step Reasoning:** Adopt a systematic approach, ensuring each stage of the AoT framework is thoroughly addressed.
- **Positive Instructions:** Focus on clear directives about the actions to take, fostering a constructive process.
- **Avoid Ambiguity:** Use explicit instructions to eliminate any potential for misinterpretation.
- **Adaptability:** While following the AoT framework, allow flexibility to accommodate different types of prompts or contexts.
**Final Note:**
Ensure that the enhanced prompt aligns seamlessly with the user's initial intention, providing a robust foundation for the Language Model to generate effective and insightful responses.
---" data-download-link="" data-download-link-label="Download "><code class="language-">**Task Overview:**
You are assigned to enhance and restructure a given user prompt by applying the **Algorithm of Thoughts (AoT)** framework. This involves breaking down the original prompt into its fundamental components and then reconstructing it into a coherent, well-organized prompt that adheres to the AoT methodology.
**Objectives:**
1. **Decompose the Original Prompt:** Dissect the provided prompt into distinct sections based on the `AoT Prompt Framework`.
2. **Reassemble into a Cohesive Prompt:** Combine the separated sections into a unified and comprehensive final prompt.
**Instructions:**
1. **Transform into Disjoint Components:**
Carefully analyze the original prompt and separate it into the following AoT framework sections:
- **Problem Statement:** Clearly define the main issue or topic addressed in the prompt.
- **Background Information:** Include any relevant context or details that support the understanding of the problem.
- **Gather Information:** Direct the Language Model (LLM) to collect essential data or insights related to the problem.
- **Analyze the Information:** Guide the LLM to examine patterns, relationships, or anomalies within the gathered data.
- **Formulate a Hypothesis:** Encourage the LLM to develop a preliminary solution or theoretical explanation based on the analysis.
- **Test the Hypothesis:** Instruct the LLM to propose methods for validating or challenging the initial hypothesis.
- **Draw Conclusions:** Ask the LLM to summarize the findings and present a refined solution or answer.
- **Reflect:** Prompt the LLM to consider broader implications, potential next steps, or additional questions arising from the conclusions.
*Example Transformation:*
```AoT_Prompt_Framework
Problem Statement: [Define the core issue from the original prompt]
Background Information: [Add necessary context or details]
Gather Information: [Instruct the LLM to collect relevant data]
Analyze the Information: [Guide the LLM to examine the collected data]
Formulate a Hypothesis: [Encourage the LLM to propose a preliminary solution]
Test the Hypothesis: [Instruct the LLM to validate or challenge the hypothesis]
Draw Conclusions: [Summarize findings and provide a refined solution]
Reflect: [Consider broader implications and next steps]
Final Prompt: &lt;--! placeholder --&gt;
```
2. **Reconstruct into Final Prompt:**
- **Integrate Sections:** Combine the separated sections into a seamless and logically flowing final prompt.
- **Ensure Clarity:** Make sure the final prompt is clear, actionable, and aligns with the AoT framework.
- **Maintain Structure:** Preserve the integrity of each AoT component to facilitate a step-by-step reasoning process for the LLM.
**Desired Outcome:**
A meticulously structured final prompt that incorporates all elements of the AoT framework, enabling the Language Model to engage in a methodical reasoning process and generate precise, insightful responses.
**Response Specifications:**
- **Format:** Utilize the `AoT_Prompt_Framework` structure with clearly defined sections.
- **Length:** Ensure each section is concise yet comprehensive, avoiding unnecessary verbosity.
- **Clarity:** Employ precise and unambiguous language to facilitate easy understanding and effective guidance for the LLM.
**Example Output 1:**
```AoT_Prompt_Framework_1
Problem Statement: [Define the core issue from the original prompt]
Background Information: [Add necessary context or details]
Gather Information: [Instruct the LLM to collect relevant data]
Analyze the Information: [Guide the LLM to examine the collected data]
Formulate a Hypothesis: [Encourage the LLM to propose a preliminary solution]
Test the Hypothesis: [Instruct the LLM to validate or challenge the hypothesis]
Draw Conclusions: [Summarize findings and provide a refined solution]
Reflect: [Consider broader implications and next steps]
Final Prompt: &lt;--! placeholder --&gt;
```
**Example Output 2:**
"""
**Original Prompt:**
*"Discuss the benefits of exercise."*
**Enhanced Prompt Using the AoT Framework:**
```AoT_Prompt_Framework
Problem Statement: Analyze and explain the various benefits of regular physical exercise on human health and well-being.
Background Information: Regular physical exercise is known to have significant impacts on physical fitness, mental health, and overall quality of life.
Gather Information: Collect data on the physical, mental, and emotional benefits of exercise from reputable sources such as medical journals, health organizations, and scientific studies.
Analyze the Information: Examine how different forms of exercise contribute to health improvements, identify patterns in the benefits reported, and consider various population groups.
Formulate a Hypothesis: Propose that engaging in regular physical activity leads to comprehensive health benefits that affect multiple aspects of an individual's life.
Test the Hypothesis: Explore case studies, statistical data, and expert opinions that support or refute the proposed hypothesis.
Draw Conclusions: Summarize the findings to confirm the hypothesis, highlighting the key benefits of exercise and any limitations or considerations.
Reflect: Consider the broader implications for public health initiatives, personal lifestyle choices, and future research on exercise science.
Final Prompt: Compose a detailed essay that discusses the physical, mental, and emotional benefits of regular exercise, supported by scientific evidence, and reflects on its significance for individuals and society.
```
"""
---
**Input Prompt:**
~~~
*Please insert the original prompt here.*
~~~
**Guidelines:**
- **Step-by-Step Reasoning:** Adopt a systematic approach, ensuring each stage of the AoT framework is thoroughly addressed.
- **Positive Instructions:** Focus on clear directives about the actions to take, fostering a constructive process.
- **Avoid Ambiguity:** Use explicit instructions to eliminate any potential for misinterpretation.
- **Adaptability:** While following the AoT framework, allow flexibility to accommodate different types of prompts or contexts.
**Final Note:**
Ensure that the enhanced prompt aligns seamlessly with the user's initial intention, providing a robust foundation for the Language Model to generate effective and insightful responses.
---</code></section>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">Deta Surf documentation</title><link href="https://ib.bsb.br/deta-surf-documentation/" rel="alternate" type="text/html" title="Deta Surf documentation" /><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T03:17:53+00:00</updated><id>https://ib.bsb.br/deta-surf-documentation</id><content type="html" xml:base="https://ib.bsb.br/deta-surf-documentation/"><![CDATA[<h3 id="1-background-information"><strong>1. Background Information</strong></h3>

<p>Welcome to the Deta Surf alpha program. Deta Surf is a browser that aims to enhance your digital life by providing a workspace that integrates notes, tasks, wikis, and databases. Inspired by the need to spend less time “getting in a position to think,” Surf seeks to place you directly in the middle of your ideas.</p>

<hr />

<h3 id="2-current-state-and-progress"><strong>2. Current State and Progress</strong></h3>

<p>Deta Surf is currently in an invite-only alpha phase. We are relying on user feedback to refine the experience and make it great. During this phase:</p>

<ul>
  <li>
    <p><strong>Accessing Alpha Features</strong>: Users can trigger the in-app onboarding by hitting “Help” → “Open Cheat Sheet.”</p>
  </li>
  <li>
    <p><strong>Feedback Requests</strong>: We welcome your thoughts on what feels good, what doesn’t, and what you want to use Surf for.</p>
  </li>
  <li>
    <p><strong>Known Issues</strong>: If you encounter any bugs:</p>

    <ul>
      <li>
        <p>Use <code class="language-plaintext highlighter-rouge">Shift + ⌥ + ⌘ + R</code> to restart the app.</p>
      </li>
      <li>
        <p>On Windows, if you cannot type, open a non-Surf window and then return to Surf.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="3-features"><strong>3. Features</strong></h3>

<h4 id="stuff-overlay"><strong>Stuff Overlay</strong></h4>

<ul>
  <li>
    <p><strong>Adding Stuff</strong>: Add websites, YouTube videos, files, and more into Surf by clicking the “Surf” button or dropping a file from your local system.</p>
  </li>
  <li>
    <p><strong>Accessing Stuff</strong>: Open the Stuff overlay with “Open My Stuff” or <code class="language-plaintext highlighter-rouge">Cmd + O</code>.</p>
  </li>
</ul>

<h4 id="teletype-command-bar"><strong>Teletype Command Bar</strong></h4>

<ul>
  <li><strong>Usage</strong>: Teletype is your universal command bar activated with commands like <code class="language-plaintext highlighter-rouge">⌘ + T</code> for a new tab or <code class="language-plaintext highlighter-rouge">⌘ + E</code> to enter chat.</li>
</ul>

<h4 id="contexts-and-desktops"><strong>Contexts and Desktops</strong></h4>

<ul>
  <li>
    <p><strong>Contexts</strong>: Workspaces that retain your open tabs and arrangements.</p>
  </li>
  <li>
    <p><strong>Desktops</strong>: Each Context has its own spatial desktop where you can organize items and set backgrounds.</p>
  </li>
  <li>
    <p><strong>Navigating Contexts</strong>: Switch between Contexts easily; they maintain the state you left them in.</p>
  </li>
</ul>

<h4 id="ai-chat-integration"><strong>AI Chat Integration</strong></h4>

<ul>
  <li>
    <p><strong>Chat with Content</strong>: Engage in conversations with websites, PDFs, videos, or entire Contexts.</p>
  </li>
  <li>
    <p><strong>Activation</strong>: Use <code class="language-plaintext highlighter-rouge">Cmd + E</code> to enter chat mode.</p>
  </li>
  <li>
    <p><strong>Screen Queries</strong>: Press <code class="language-plaintext highlighter-rouge">Cmd + Shift + 1</code> to select a screen area and ask a question.</p>
  </li>
  <li>
    <p><strong>AI Models</strong>: Supports OpenAI and Anthropic models; configure via Deta’s accounts or input your own API key.</p>
  </li>
</ul>

<h4 id="experimental-features"><strong>Experimental Features</strong></h4>

<ul>
  <li>
    <p><strong>Go Wild</strong>: Personalize or extend any webpage using natural language.</p>

    <ul>
      <li>
        <p><strong>Modify Page</strong>: Change the page inline.</p>
      </li>
      <li>
        <p><strong>Create App</strong>: Extend the page with a sidebar app.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Inline Menu</strong>: Access commands like annotating or chatting by highlighting text.</p>
  </li>
  <li>
    <p><strong>Subscriptions</strong>: Surf can subscribe to and summarize content from your favorite websites.</p>
  </li>
</ul>

<hr />

<h3 id="4-keyboard-shortcuts"><strong>4. Keyboard Shortcuts</strong></h3>

<h4 id="general-navigation"><strong>General Navigation</strong></h4>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + T</code>: Create a new Tab / Open command menu</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + O</code>: Open your Stuff</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + E</code>: Enter Chat</p>
  </li>
</ul>

<h4 id="browsing"><strong>Browsing</strong></h4>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + 1-8</code>: Switch Tabs</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + 9</code>: Open Last Tab</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + W</code>: Close Active Tab</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + ← / →</code>: Navigate backward/forward</p>
  </li>
</ul>

<h4 id="view"><strong>View</strong></h4>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + R</code>: Reload Tab</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Shift + ⌘ + B</code>: Toggle Sidebar</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌥ + X</code>: Toggle Right Sidebar</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌥ + G</code>: Toggle Go Wild</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + Plus/Minus/Equal</code>: Zoom In/Out/Reset Zoom</p>
  </li>
</ul>

<h4 id="my-stuff-interactions"><strong>My Stuff Interactions</strong></h4>

<ul>
  <li>
    <p>Click: Open Item as Tab</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + Click</code>: Open Item as Tab in the background</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Shift + Click</code>: Open Item in Mini Browser</p>
  </li>
</ul>

<h4 id="debug"><strong>Debug</strong></h4>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">⌘ + Ctrl + Shift + D</code>: Debug</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Shift + ⌥ + ⌘ + R</code>: Restart the app</p>
  </li>
</ul>]]></content><author><name></name></author><category term="scratchpad&gt;openai" /></entry><entry><title type="html">Safeguard Windows 11 customization</title><link href="https://ib.bsb.br/safeguard-windows/" rel="alternate" type="text/html" title="Safeguard Windows 11 customization" /><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T03:08:50+00:00</updated><id>https://ib.bsb.br/safeguard-windows</id><content type="html" xml:base="https://ib.bsb.br/safeguard-windows/"><![CDATA[<h3 id="1-creating-a-complete-system-backup"><strong>1. Creating a Complete System Backup</strong></h3>

<p><strong>a) Using Windows Built-in System Image Backup</strong></p>

<p>Windows 11 includes the “Backup and Restore (Windows 7)” feature, which allows you to create a system image.</p>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Access the Backup Tool:</strong></p>

    <ul>
      <li>Open the <strong>Control Panel</strong>.</li>
      <li>Navigate to <strong>“System and Security”</strong> - <strong>“Backup and Restore (Windows 7)”</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a System Image:</strong></p>

    <ul>
      <li>Click on <strong>“Create a system image”</strong> in the left pane.</li>
      <li>Choose a destination to save the backup (external hard drive, DVDs, or network location).</li>
      <li>Select the drives you want to include (ensure your system drive is selected).</li>
      <li>Proceed with the backup process.</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a System Repair Disc (Optional):</strong></p>

    <ul>
      <li>In the same window, select <strong>“Create a system repair disc.”</strong></li>
      <li>Follow the prompts to create a bootable repair disc.</li>
    </ul>
  </li>
</ol>

<p><strong>Considerations:</strong></p>

<ul>
  <li>This method creates a full image of your system, allowing for complete restoration.</li>
  <li>It’s suitable for personal use and doesn’t require additional software.</li>
</ul>

<hr />

<p><strong>b) Using Third-Party Imaging Software</strong></p>

<p>Third-party tools often provide more features and flexibility.</p>

<p><strong>Recommended Tools:</strong></p>

<ul>
  <li><strong>Macrium Reflect Free/Paid</strong></li>
  <li><strong>Acronis Cyber Protect Home Office</strong></li>
  <li><strong>EaseUS Todo Backup</strong></li>
  <li><strong>Clonezilla</strong> (Open-source)</li>
  <li><strong>Veeam Agent for Microsoft Windows</strong></li>
</ul>

<p><strong>Benefits:</strong></p>

<ul>
  <li><strong>Incremental Backups:</strong> Save time and storage by backing up only changes since the last backup.</li>
  <li><strong>Advanced Features:</strong> Options like disk cloning, scheduling, and encryption.</li>
  <li><strong>Hardware Independence:</strong> Some tools support restoration to different hardware.</li>
</ul>

<p><strong>Basic Steps:</strong></p>

<ol>
  <li>
    <p><strong>Install the Software:</strong></p>

    <ul>
      <li>Download and install your chosen backup tool.</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a Bootable Recovery Media:</strong></p>

    <ul>
      <li>Use the software to create a bootable USB or DVD for recovery purposes.</li>
    </ul>
  </li>
  <li>
    <p><strong>Perform a Full System Backup:</strong></p>

    <ul>
      <li>Follow the software’s instructions to create a system image.</li>
      <li>Choose an external drive or network location for storage.</li>
    </ul>
  </li>
  <li>
    <p><strong>Verify the Backup:</strong></p>

    <ul>
      <li>Use the verification feature to ensure the integrity of the backup.</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="2-replicating-your-custom-settings-to-other-machines"><strong>2. Replicating Your Custom Settings to Other Machines</strong></h3>

<p><strong>a) Using Windows Configuration Designer</strong></p>

<p>Create a provisioning package to apply your settings to other devices.</p>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Install Windows Configuration Designer:</strong></p>

    <ul>
      <li>Available from the Microsoft Store or as part of the Windows Assessment and Deployment Kit (ADK).</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a Provisioning Package:</strong></p>

    <ul>
      <li>Launch the app and select <strong>“Provision desktop devices.”</strong></li>
      <li>Configure the settings, policies, and applications you wish to deploy.</li>
    </ul>
  </li>
  <li>
    <p><strong>Export the Package:</strong></p>

    <ul>
      <li>Build and export the provisioning package (.ppkg file).</li>
    </ul>
  </li>
  <li>
    <p><strong>Apply the Package to Target Machines:</strong></p>

    <ul>
      <li>Transfer the .ppkg file to the target machine.</li>
      <li>Run the package by double-clicking it, or apply it during the initial setup process.</li>
    </ul>
  </li>
</ol>

<p><strong>Considerations:</strong></p>

<ul>
  <li>Ideal for users who prefer a graphical interface.</li>
  <li>Suitable for small to medium deployments.</li>
  <li>May not capture all personal customizations or third-party application settings.</li>
</ul>

<hr />

<p><strong>b) Using PowerShell Scripts</strong></p>

<p>Automate the configuration process with scripts.</p>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Identify Configurable Settings:</strong></p>

    <ul>
      <li>Determine which settings can be applied via PowerShell commands or registry edits.</li>
    </ul>
  </li>
  <li>
    <p><strong>Write the PowerShell Script:</strong></p>

    <ul>
      <li>Script the desired changes.</li>
      <li>
        <p>Example to disable the lock screen:</p>

        <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="n">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s2">"NoLockScreen"</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="nx">DWORD</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Test the Script:</strong></p>

    <ul>
      <li>Run the script on a test machine to ensure it works as intended.</li>
    </ul>
  </li>
  <li>
    <p><strong>Deploy the Script:</strong></p>

    <ul>
      <li>Execute the script on target machines with administrative privileges.</li>
    </ul>
  </li>
</ol>

<p><strong>Considerations:</strong></p>

<ul>
  <li>Requires some scripting knowledge.</li>
  <li>Highly customizable and repeatable.</li>
  <li>Good for version control with tools like Git.</li>
</ul>

<hr />

<p><strong>c) Using User State Migration Tool (USMT)</strong></p>

<p>Migrate user accounts, data, and settings.</p>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Install Windows ADK:</strong></p>

    <ul>
      <li>Includes USMT for deployment purposes.</li>
    </ul>
  </li>
  <li>
    <p><strong>Capture User State on Source Machine:</strong></p>

    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">ScanState</code> to collect user profiles and settings.</li>
    </ul>
  </li>
  <li>
    <p><strong>Apply User State on Target Machine:</strong></p>

    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">LoadState</code> to deploy the collected data.</li>
    </ul>
  </li>
</ol>

<p><strong>Considerations:</strong></p>

<ul>
  <li>Geared towards IT professionals.</li>
  <li>Does not migrate applications.</li>
  <li>Best suited for enterprise environments.</li>
</ul>

<hr />

<p><strong>d) Creating a Custom Image with Sysprep and Deployment Tools</strong></p>

<p>For deploying a standardized environment across multiple machines.</p>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Prepare the Reference Machine:</strong></p>

    <ul>
      <li>Install Windows and customize settings.</li>
      <li>Do not connect to the internet after installation to prevent updates that might interfere with Sysprep.</li>
    </ul>
  </li>
  <li>
    <p><strong>Run Sysprep:</strong></p>

    <ul>
      <li>Open Command Prompt as administrator.</li>
      <li>Navigate to <code class="language-plaintext highlighter-rouge">C:\Windows\System32\Sysprep</code>.</li>
      <li>
        <p>Run:</p>

        <pre><code class="language-cmd">sysprep /oobe /generalize /shutdown
</code></pre>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Capture the Image:</strong></p>

    <ul>
      <li>Boot into Windows PE using a bootable USB.</li>
      <li>Use DISM or third-party tools to capture the system image.</li>
    </ul>
  </li>
  <li>
    <p><strong>Deploy the Image to Target Machines:</strong></p>

    <ul>
      <li>Apply the image using deployment tools or bootable media.</li>
    </ul>
  </li>
</ol>

<p><strong>Considerations:</strong></p>

<ul>
  <li>Advanced method requiring technical expertise.</li>
  <li>Ensure hardware compatibility.</li>
  <li>Be aware of licensing implications.</li>
</ul>

<hr />

<h3 id="3-best-practices"><strong>3. Best Practices</strong></h3>

<ul>
  <li>
    <p><strong>Regular Backups:</strong></p>

    <ul>
      <li>Schedule backups to keep your data safe and up-to-date.</li>
    </ul>
  </li>
  <li>
    <p><strong>Testing:</strong></p>

    <ul>
      <li>Verify backup integrity and practice the restoration process.</li>
    </ul>
  </li>
  <li>
    <p><strong>Documentation:</strong></p>

    <ul>
      <li>Keep records of customizations and configurations for reference.</li>
    </ul>
  </li>
  <li>
    <p><strong>Security:</strong></p>

    <ul>
      <li>Encrypt backups and secure storage locations to protect sensitive data.</li>
    </ul>
  </li>
  <li>
    <p><strong>Licensing Compliance:</strong></p>

    <ul>
      <li>Ensure you comply with Microsoft’s licensing terms, especially when cloning systems.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="additional-options"><strong>Additional Options</strong></h3>

<p><strong>Cloud Backup Solutions:</strong></p>

<ul>
  <li>Utilize services like <strong>OneDrive</strong> or third-party cloud storage for backing up personal files and some settings.</li>
</ul>

<p><strong>Virtualization:</strong></p>

<ul>
  <li>
    <p><strong>Virtual Machine Snapshots:</strong></p>

    <ul>
      <li>Use Hyper-V or VirtualBox to create a virtual machine of your customized setup.</li>
      <li>Take snapshots to preserve states at different points in time.</li>
    </ul>
  </li>
</ul>

<p><strong>Note:</strong></p>

<ul>
  <li>These methods may not be suitable for deploying configurations to physical machines but can be useful for testing and backup purposes.</li>
</ul>]]></content><author><name></name></author><category term="scratchpad&gt;openai" /></entry><entry><title type="html">reset windows 11 administrator password</title><link href="https://ib.bsb.br/reset-windows-11-administrator-password/" rel="alternate" type="text/html" title="reset windows 11 administrator password" /><published>2025-01-07T00:00:00+00:00</published><updated>2025-01-07T08:03:50+00:00</updated><id>https://ib.bsb.br/reset-windows-11-administrator-password</id><content type="html" xml:base="https://ib.bsb.br/reset-windows-11-administrator-password/"><![CDATA[<h3 id="method-1-reset-password-using-windows-11-installation-media"><strong>Method 1: Reset Password Using Windows 11 Installation Media</strong></h3>

<p>This method uses the Windows Recovery Environment to reset your password via the Command Prompt.</p>

<p><strong>What You’ll Need:</strong></p>

<ul>
  <li>A USB flash drive with at least <strong>8 GB</strong> of space.</li>
  <li>Access to another Windows computer to create the installation media.</li>
</ul>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Create Windows 11 Installation Media:</strong></p>

    <ul>
      <li>On the other computer, visit the <a href="https://www.microsoft.com/software-download/windows11">Microsoft Windows 11 Download Page</a>.</li>
      <li>Download the <strong>Windows 11 Installation Media Creation Tool</strong>.</li>
      <li>Run the tool and select <strong>“Create installation media (USB flash drive, DVD, or ISO file) for another PC”</strong>.</li>
      <li>Choose your preferred language, edition, and architecture (64-bit).</li>
      <li>Select <strong>USB flash drive</strong> when prompted and choose your USB drive from the list.</li>
      <li>Allow the tool to download and create the installation media.</li>
    </ul>
  </li>
  <li>
    <p><strong>Boot from the USB Drive:</strong></p>

    <ul>
      <li>Insert the USB drive into your locked Windows 11 PC.</li>
      <li>Restart the PC and enter the <strong>BIOS/UEFI settings</strong>. This is usually done by pressing a key during startup, such as <strong>F2</strong>, <strong>F10</strong>, <strong>F12</strong>, <strong>Del</strong>, or <strong>Esc</strong> (check your PC’s documentation).</li>
      <li>In the BIOS/UEFI settings, locate the <strong>Boot</strong> menu and set the USB drive as the first boot device.</li>
      <li>Save changes and exit the BIOS/UEFI settings. The PC should now boot from the USB drive.</li>
    </ul>
  </li>
  <li>
    <p><strong>Access the Command Prompt:</strong></p>

    <ul>
      <li>When the Windows Setup screen appears, select your language and preferences, then click <strong>Next</strong>.</li>
      <li>Click on <strong>“Repair your computer”</strong> at the bottom-left corner.</li>
      <li>Choose <strong>“Troubleshoot”</strong> &gt; <strong>“Advanced options”</strong> &gt; <strong>“Command Prompt”</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>Identify the Windows Installation Drive:</strong></p>

    <ul>
      <li>In the Command Prompt, type <code class="language-plaintext highlighter-rouge">diskpart</code> and press <strong>Enter</strong>.</li>
      <li>Then type <code class="language-plaintext highlighter-rouge">list volume</code> and press <strong>Enter</strong>.</li>
      <li>Identify the drive letter of your Windows installation (it might not be <strong>C:</strong> in this environment).</li>
      <li>Type <code class="language-plaintext highlighter-rouge">exit</code> and press <strong>Enter</strong> to leave DiskPart.</li>
    </ul>
  </li>
  <li>
    <p><strong>Backup and Replace Utility Manager:</strong></p>

    <ul>
      <li>Assuming your Windows installation is on <strong>D:</strong>, adjust accordingly if different.</li>
      <li>
        <p>Type the following commands, pressing <strong>Enter</strong> after each:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:
cd \Windows\System32
ren utilman.exe utilman.exe.bak
copy cmd.exe utilman.exe
</code></pre></div>        </div>
      </li>
      <li>This backs up the Utility Manager executable and replaces it with Command Prompt.</li>
    </ul>
  </li>
  <li>
    <p><strong>Restart Your Computer:</strong></p>

    <ul>
      <li>Type <code class="language-plaintext highlighter-rouge">wpeutil reboot</code> and press <strong>Enter</strong>, or close the Command Prompt and select <strong>“Continue”</strong> to restart.</li>
    </ul>
  </li>
  <li>
    <p><strong>Reset Your Password at the Login Screen:</strong></p>

    <ul>
      <li>At the login screen, click the <strong>Ease of Access</strong> icon (usually at the bottom-right corner). This will open a Command Prompt window.</li>
      <li>
        <p>To list all user accounts, type:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user
</code></pre></div>        </div>
      </li>
      <li>Identify your account name from the list.</li>
      <li>
        <p>To reset your password, type:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user [YourUsername] [NewPassword]
</code></pre></div>        </div>

        <p>Replace <code class="language-plaintext highlighter-rouge">[YourUsername]</code> with your actual username and <code class="language-plaintext highlighter-rouge">[NewPassword]</code> with the password you wish to set.</p>

        <p>For example:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user JohnDoe MyNewPassword123
</code></pre></div>        </div>
      </li>
      <li>Close the Command Prompt window.</li>
    </ul>
  </li>
  <li>
    <p><strong>Log In to Your Account:</strong></p>

    <ul>
      <li>Use your new password to log in.</li>
    </ul>
  </li>
  <li>
    <p><strong>Restore the Original Utility Manager:</strong></p>

    <ul>
      <li>
        <p>After logging in, open <strong>Command Prompt</strong> as an administrator:</p>

        <ul>
          <li>Click on <strong>Start</strong>, type <strong>cmd</strong>, right-click <strong>Command Prompt</strong>, and select <strong>“Run as administrator”</strong>.</li>
        </ul>
      </li>
      <li>
        <p>Navigate to the System32 directory:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd \Windows\System32
</code></pre></div>        </div>
      </li>
      <li>
        <p>Restore the original Utility Manager:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>del utilman.exe
ren utilman.exe.bak utilman.exe
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="method-2-use-a-reputable-password-reset-tool-eg-hirens-bootcd-pe"><strong>Method 2: Use a Reputable Password Reset Tool (e.g., Hiren’s BootCD PE)</strong></h3>

<p><strong>What You’ll Need:</strong></p>

<ul>
  <li>A USB flash drive with at least <strong>2 GB</strong> of space.</li>
  <li>Access to another computer.</li>
</ul>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Download Hiren’s BootCD PE:</strong></p>

    <ul>
      <li>Visit the <a href="https://www.hirensbootcd.org/download/">Hiren’s BootCD PE Official Website</a> and download the ISO file.</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a Bootable USB Drive:</strong></p>

    <ul>
      <li>Download <strong>Rufus</strong> from <a href="https://rufus.ie/">rufus.ie</a> and run it.</li>
      <li>Insert your USB flash drive into the computer.</li>
      <li>
        <p>In Rufus:</p>

        <ul>
          <li>Select your USB drive under <strong>“Device”</strong>.</li>
          <li>Click <strong>“SELECT”</strong> and choose the Hiren’s BootCD PE ISO file.</li>
          <li>Keep the default settings and click <strong>“START”</strong>.</li>
          <li>Confirm any prompts to write in ISO mode.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Boot from the USB Drive:</strong></p>

    <ul>
      <li>Insert the USB drive into your locked PC.</li>
      <li>Restart and boot from the USB drive (refer to Method 1, Step 2 for guidance).</li>
    </ul>
  </li>
  <li>
    <p><strong>Reset the Password Using Hiren’s BootCD PE:</strong></p>

    <ul>
      <li>Once booted, the Hiren’s BootCD PE desktop will appear.</li>
      <li>Navigate to <strong>Start Menu</strong> &gt; <strong>Security</strong> &gt; <strong>Passwords</strong> &gt; <strong>NT Password Edit</strong>.</li>
      <li>
        <p>In <strong>NT Password Edit</strong>:</p>

        <ul>
          <li>Click <strong>(Re)open</strong> to load the SAM file.</li>
          <li>Select your user account from the list.</li>
          <li>Click <strong>“Change Password”</strong>, enter a new password, and confirm it.</li>
          <li>Click <strong>“Save Changes”</strong>.</li>
          <li>Close the program.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Restart Your Computer:</strong></p>

    <ul>
      <li>Remove the USB drive.</li>
      <li>Click <strong>Start</strong> &gt; <strong>Power</strong> &gt; <strong>Restart</strong>.</li>
      <li>Boot into Windows and log in using your new password.</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="method-3-reset-password-using-a-linux-live-usb-and-chntpw"><strong>Method 3: Reset Password Using a Linux Live USB and chntpw</strong></h3>

<p><strong>What You’ll Need:</strong></p>

<ul>
  <li>A USB flash drive with at least <strong>4 GB</strong> of space.</li>
  <li>Access to another computer.</li>
</ul>

<p><strong>Steps:</strong></p>

<ol>
  <li>
    <p><strong>Download a Linux Distribution (e.g., Ubuntu):</strong></p>

    <ul>
      <li>Visit the <a href="https://ubuntu.com/download/desktop">Ubuntu Download Page</a> and download the Ubuntu ISO file.</li>
    </ul>
  </li>
  <li>
    <p><strong>Create a Bootable Linux USB Drive:</strong></p>

    <ul>
      <li>Use <strong>Rufus</strong> to create a bootable USB drive with the Ubuntu ISO (similar to Method 2, Step 2).</li>
    </ul>
  </li>
  <li>
    <p><strong>Boot into Linux Live Environment:</strong></p>

    <ul>
      <li>Insert the USB drive into your locked PC.</li>
      <li>Restart and boot from the USB drive.</li>
    </ul>
  </li>
  <li>
    <p><strong>Run Ubuntu Without Installing:</strong></p>

    <ul>
      <li>Select <strong>“Try Ubuntu”</strong> when prompted.</li>
    </ul>
  </li>
  <li>
    <p><strong>Install chntpw Utility:</strong></p>

    <ul>
      <li>Ensure your PC is connected to the internet.</li>
      <li>Open the <strong>Terminal</strong> application.</li>
      <li>
        <p>Update package lists:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
</code></pre></div>        </div>
      </li>
      <li>
        <p>Install chntpw:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install chntpw
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Identify and Mount Your Windows Partition:</strong></p>

    <ul>
      <li>
        <p>In Terminal, list the disk partitions:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo fdisk -l
</code></pre></div>        </div>
      </li>
      <li>
        <p>Identify the partition where Windows is installed (look for a partition of type <strong>NTFS</strong>).</p>
      </li>
      <li>
        <p>Create a mount point:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mkdir /mnt/windows
</code></pre></div>        </div>
      </li>
      <li>
        <p>Mount the partition (replace <code class="language-plaintext highlighter-rouge">/dev/sda3</code> with your Windows partition identifier):</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount /dev/sda3 /mnt/windows
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Reset the Password:</strong></p>

    <ul>
      <li>
        <p>Navigate to the Windows System32 config directory:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /mnt/windows/Windows/System32/config
</code></pre></div>        </div>
      </li>
      <li>
        <p>List user accounts:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo chntpw -l SAM
</code></pre></div>        </div>
      </li>
      <li>
        <p>Reset your password (replace <code class="language-plaintext highlighter-rouge">YourUsername</code> with your actual username):</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo chntpw -u YourUsername SAM
</code></pre></div>        </div>
      </li>
      <li>
        <p>Follow the prompts to clear the password or set a new one.</p>

        <ul>
          <li>Type <code class="language-plaintext highlighter-rouge">1</code> to <strong>Clear (blank) user password</strong> or <code class="language-plaintext highlighter-rouge">2</code> to <strong>Edit (set new) user password</strong>.</li>
          <li>If setting a new password, enter the new password when prompted.</li>
        </ul>
      </li>
      <li>
        <p>Save changes by typing <code class="language-plaintext highlighter-rouge">y</code> when prompted.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Unmount the Partition and Restart:</strong></p>

    <ul>
      <li>
        <p>Unmount the Windows partition:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo umount /mnt/windows
</code></pre></div>        </div>
      </li>
      <li>
        <p>Restart your computer:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo reboot
</code></pre></div>        </div>
      </li>
      <li>
        <p>Remove the USB drive during the reboot.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Log In to Windows:</strong></p>

    <ul>
      <li>Use the new or cleared password to log into your account.</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="windows" /></entry><entry><title type="html">Windows Run + env vars = custom shortcuts</title><link href="https://ib.bsb.br/windows-run-env-vars-custom-shortcuts/" rel="alternate" type="text/html" title="Windows Run + env vars = custom shortcuts" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T20:34:35+00:00</updated><id>https://ib.bsb.br/windows-run-env-vars-custom-shortcuts</id><content type="html" xml:base="https://ib.bsb.br/windows-run-env-vars-custom-shortcuts/"><![CDATA[<h3 id="how-it-works"><strong>How It Works</strong></h3>

<ol>
  <li><strong>Creating a Quick-Access Folder:</strong>
    <ul>
      <li>Begin by creating a new folder (e.g., <code class="language-plaintext highlighter-rouge">C:\QuickAccess</code>) where you’ll store your custom shortcuts.</li>
    </ul>
  </li>
  <li><strong>Adding the Folder to the Environment Variables:</strong>
    <ul>
      <li><strong>Environment Variables</strong>, like <code class="language-plaintext highlighter-rouge">PATH</code>, tell the operating system where to look for executable files.</li>
      <li>By adding your quick-access folder to the <code class="language-plaintext highlighter-rouge">PATH</code> variable, you instruct Windows to include it when searching for commands entered in the Run dialog.</li>
      <li><strong>Note:</strong> Windows searches for executable files (<code class="language-plaintext highlighter-rouge">.exe</code>, <code class="language-plaintext highlighter-rouge">.bat</code>, <code class="language-plaintext highlighter-rouge">.com</code>, <code class="language-plaintext highlighter-rouge">.cmd</code>), not shortcut files (<code class="language-plaintext highlighter-rouge">.lnk</code>), in the <code class="language-plaintext highlighter-rouge">PATH</code>.</li>
      <li><strong>Steps to Add to PATH (User Variables):</strong>
        <ul>
          <li>Press <strong>Win + X</strong> and select <strong>System</strong> (or right-click <strong>This PC</strong> and select <strong>Properties</strong>).</li>
          <li>Click on <strong>Advanced system settings</strong>.</li>
          <li>In the <strong>System Properties</strong> window, click <strong>Environment Variables</strong>.</li>
          <li>Under <strong>User variables for [Your Username]</strong>, select <strong>Path</strong> and click <strong>Edit</strong>.</li>
          <li>Click <strong>New</strong> and add the path to your quick-access folder (e.g., <code class="language-plaintext highlighter-rouge">C:\QuickAccess</code>).</li>
          <li>Click <strong>OK</strong> to save changes.</li>
          <li><em>Using user variables avoids needing administrative rights and only affects your account.</em></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Creating Executable Shortcuts:</strong>
    <ul>
      <li>Since the Run dialog executes files it finds in the <code class="language-plaintext highlighter-rouge">PATH</code>, you’ll need to create executable files, such as batch files (<code class="language-plaintext highlighter-rouge">.bat</code>), instead of shortcuts (<code class="language-plaintext highlighter-rouge">.lnk</code>).</li>
      <li><strong>Creating Batch Files to Open Drives or Folders:</strong>
        <ul>
          <li>Open <strong>Notepad</strong>.</li>
          <li>To create a shortcut for the D drive:
            <ul>
              <li>Type: <code class="language-plaintext highlighter-rouge">explorer D:\</code></li>
              <li>Save the file as <code class="language-plaintext highlighter-rouge">d.bat</code> in your quick-access folder.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Creating Batch Files to Launch Applications:</strong>
        <ul>
          <li>For applications, type: <code class="language-plaintext highlighter-rouge">start "" "C:\Path\To\Application.exe"</code></li>
          <li>Save the file with a simple name, like <code class="language-plaintext highlighter-rouge">chrome.bat</code>, in your quick-access folder.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Using the Run Dialog:</strong>
    <ul>
      <li>Press <strong>Win + R</strong> to open the Run dialog.</li>
      <li>Type the name of your batch file without the <code class="language-plaintext highlighter-rouge">.bat</code> extension (e.g., <code class="language-plaintext highlighter-rouge">d</code>) and press <strong>Enter</strong>.</li>
      <li>Windows will execute the batch file, opening the target drive, folder, or application.</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="why-it-works"><strong>Why It Works</strong></h3>

<ul>
  <li><strong>Run Dialog Mechanism:</strong>
    <ul>
      <li>When you enter a command in the Run dialog, Windows searches the directories listed in the <code class="language-plaintext highlighter-rouge">PATH</code> environment variable and specific system directories for executable files.</li>
      <li>By adding your quick-access folder to the <code class="language-plaintext highlighter-rouge">PATH</code>, Windows can find and execute your custom batch files when their names are entered in the Run dialog.</li>
    </ul>
  </li>
  <li><strong>Executable Recognition:</strong>
    <ul>
      <li>Windows recognizes batch files (<code class="language-plaintext highlighter-rouge">.bat</code>) as executable scripts.</li>
      <li>Executing a batch file runs the commands it contains, opening applications or folders as specified.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="in-what-ways-it-can-be-utilized"><strong>In What Ways It Can Be Utilized</strong></h3>

<p><strong>1. Quick Access to Drives and Folders:</strong></p>

<ul>
  <li><strong>Access Drives Directly:</strong>
    <ul>
      <li>Create batch files (e.g., <code class="language-plaintext highlighter-rouge">c.bat</code>, <code class="language-plaintext highlighter-rouge">d.bat</code>) that open specific drives.</li>
      <li>Example content for <code class="language-plaintext highlighter-rouge">d.bat</code>: <code class="language-plaintext highlighter-rouge">explorer D:\</code></li>
    </ul>
  </li>
  <li><strong>Open Frequently Used Folders:</strong>
    <ul>
      <li>Create batch files to open folders like Documents, Downloads, or project directories.</li>
      <li>Example content for <code class="language-plaintext highlighter-rouge">docs.bat</code>: <code class="language-plaintext highlighter-rouge">explorer "C:\Users\[Your Username]\Documents"</code></li>
    </ul>
  </li>
</ul>

<p><strong>2. Launch Applications Quickly:</strong></p>

<ul>
  <li><strong>Custom Application Launchers:</strong>
    <ul>
      <li>Create batch files to start applications that don’t have simple Run commands.</li>
      <li>Example content for <code class="language-plaintext highlighter-rouge">word.bat</code>: <code class="language-plaintext highlighter-rouge">start "" "C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE"</code></li>
    </ul>
  </li>
</ul>

<p><strong>3. Run Scripts or Automated Tasks:</strong></p>

<ul>
  <li><strong>Execute Scripts:</strong>
    <ul>
      <li>Use batch files to run scripts or a series of commands.</li>
      <li>Example content for <code class="language-plaintext highlighter-rouge">backup.bat</code>:
        <div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
<span class="nb">xcopy</span> <span class="s2">"C:\ImportantFiles"</span> <span class="s2">"E:\Backup\ImportantFiles"</span> <span class="na">/E /H /C /I
</span><span class="nb">echo</span> <span class="kd">Backup</span> <span class="kd">completed</span>.
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><strong>4. Personalized Commands:</strong></p>

<ul>
  <li><strong>Tailored Shortcuts:</strong>
    <ul>
      <li>Name batch files with easy-to-remember commands that suit your workflow.</li>
      <li>For instance, <code class="language-plaintext highlighter-rouge">meet.bat</code> to open a video conferencing app.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="alternative-methods"><strong>Alternative Methods</strong></h3>

<p><strong>Method 1: Placing Batch Files in the Windows Directory</strong></p>

<ul>
  <li>Copy your batch files to <code class="language-plaintext highlighter-rouge">C:\Windows</code>, which is already included in the <code class="language-plaintext highlighter-rouge">PATH</code>.</li>
  <li>This method eliminates the need to modify environment variables.</li>
  <li><strong>Caution:</strong> Modifying the Windows directory requires administrative privileges and should be done carefully to avoid system issues.</li>
</ul>

<p><strong>Method 2: Using the “App Paths” Registry Key</strong></p>

<ul>
  <li><strong>Overview:</strong>
    <ul>
      <li>Create custom command aliases by adding entries to the Windows registry under <code class="language-plaintext highlighter-rouge">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\App Paths</code>.</li>
    </ul>
  </li>
  <li><strong>Steps:</strong>
    <ul>
      <li>Press <strong>Win + R</strong>, type <code class="language-plaintext highlighter-rouge">regedit</code>, and press <strong>Enter</strong> to open the Registry Editor.</li>
      <li>Navigate to the key: <code class="language-plaintext highlighter-rouge">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\App Paths</code></li>
      <li>Right-click <strong>App Paths</strong>, select <strong>New &gt; Key</strong>, and name it <code class="language-plaintext highlighter-rouge">d.exe</code> (or any command followed by <code class="language-plaintext highlighter-rouge">.exe</code>).</li>
      <li>Select the new key, then double-click the <strong>(Default)</strong> value on the right pane.</li>
      <li>Enter the full path to the executable, batch file, or folder you wish to open (e.g., <code class="language-plaintext highlighter-rouge">D:\</code>).</li>
      <li><strong>Note:</strong> Modifying the registry can impact system stability; proceed with caution and consider backing up the registry first.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="considerations-and-limitations"><strong>Considerations and Limitations</strong></h3>

<ul>
  <li><strong>Permissions:</strong>
    <ul>
      <li>Modifying user environment variables typically doesn’t require administrative rights.</li>
      <li>Editing the registry or system environment variables may require elevated permissions.</li>
    </ul>
  </li>
  <li><strong>Security Risks:</strong>
    <ul>
      <li>Ensure batch files contain safe commands to prevent unintentional system changes.</li>
      <li>Avoid sharing sensitive scripts in shared environments.</li>
    </ul>
  </li>
  <li><strong>Maintenance:</strong>
    <ul>
      <li>Keep your quick-access folder organized.</li>
      <li>Update batch files if application paths or folder locations change.</li>
    </ul>
  </li>
  <li><strong>Name Conflicts:</strong>
    <ul>
      <li>Choose unique names for your batch files to avoid conflicting with existing system commands.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="windows" /></entry><entry><title type="html">doc2plan to jekyll markdown via PowerShell</title><link href="https://ib.bsb.br/doc2plan-to-jekyll-markdown-via-powershell/" rel="alternate" type="text/html" title="doc2plan to jekyll markdown via PowerShell" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T18:37:25+00:00</updated><id>https://ib.bsb.br/doc2plan-to-jekyll-markdown-via-powershell</id><content type="html" xml:base="https://ib.bsb.br/doc2plan-to-jekyll-markdown-via-powershell/"><![CDATA[<section data-filename="powershell_code-block.txt" data-code="Param(
[Parameter(Mandatory = $true)]
[string]$JsonFilePath,
[Parameter(Mandatory = $true)]
[string]$OutputMarkdownPath
)
# Function to adjust heading levels
function Adjust-Headings {
Param(
[string]$content,
[int]$levelOffset
)
if ([string]::IsNullOrEmpty($content)) {
return ''
}
$lines = $content -split &quot;`n&quot;
$adjustedLines = foreach ($line in $lines) {
if ($line -match '^(#{1,6})') {
$hashes = $Matches[1]
$newLevel = [Math]::Min($hashes.Length + $levelOffset, 6)
$restOfLine = $line.Substring($hashes.Length)
('#' * $newLevel) + $restOfLine
} else {
$line
}
}
return ($adjustedLines -join &quot;`n&quot;)
}
# Function to process topics recursively
function Process-Topic {
Param(
[psobject]$topic,
[int]$headingLevel
)
$output = &quot;&quot;
try {
# Sanitize the title to remove markdown formatting
$title = $topic.title -replace '^[#*\-\s]*', ''   # Remove leading #, *, -, spaces
$title = $title.Trim('*').Trim()                  # Remove asterisks and extra spaces
# Create the heading for the topic
$headingHashes = '#' * $headingLevel
$output += &quot;`n$headingHashes $title`n`n&quot;
$content = $topic.content
if ([string]::IsNullOrEmpty($content)) {
$adjustedContent = ''  # Set to empty string if content is null or empty
}
else {
# Adjust content headings
$adjustedContent = Adjust-Headings -content $content -levelOffset ($headingLevel - 1)
}
$output += $adjustedContent + &quot;`n&quot;
# Process children recursively
if ($topic.children -and $topic.children.Count -gt 0) {
foreach ($child in $topic.children) {
$childOutput = Process-Topic -topic $child -headingLevel ($headingLevel + 1)
$output += $childOutput
}
}
}
catch {
Write-Error &quot;Error processing topic '$($topic.title)': $_&quot;
}
return $output
}
# Main script execution
try {
# Read the JSON data
$JsonData = Get-Content -Raw -Path $JsonFilePath | ConvertFrom-Json
# Initialize output content
$markdownContent = &quot;&quot;
# Create front matter
$frontMatter = &quot;---`n&quot;
$frontMatter += &quot;title: '$($JsonData.name)'`n&quot;
$frontMatter += &quot;layout: default`n&quot;
$frontMatter += &quot;---`n`n&quot;
$markdownContent += $frontMatter
# Include keyTopics if available
if ($JsonData.keyTopics) {
$keyTopicsContent = Adjust-Headings -content $JsonData.keyTopics -levelOffset 0
$markdownContent += $keyTopicsContent + &quot;`n&quot;
}
# Process chapters
$chapters = $JsonData.chapters
foreach ($chapter in $chapters) {
# Sanitize chapter name
$chapterName = $chapter.name -replace '^[#*\-\s]*', ''   # Remove leading #, *, -, spaces
$chapterName = $chapterName.Trim('*').Trim()             # Remove asterisks and extra spaces
$markdownContent += &quot;`n## $chapterName`n`n&quot;
# Adjust headings in chapter content if needed (if chapter has content)
if ($chapter.content) {
$adjustedChapterContent = Adjust-Headings -content $chapter.content -levelOffset 1
$markdownContent += $adjustedChapterContent + &quot;`n&quot;
}
# Process topics within the chapter
if ($chapter.topics) {
foreach ($topic in $chapter.topics) {
$topicOutput = Process-Topic -topic $topic -headingLevel 3
$markdownContent += $topicOutput
}
}
}
# Write the combined markdown content to the output file
Set-Content -Path $OutputMarkdownPath -Value $markdownContent -Encoding UTF8
Write-Host &quot;Markdown file has been created at $OutputMarkdownPath&quot;
}
catch {
Write-Error &quot;An error occurred: $_&quot;
}" data-download-link="" data-download-link-label="Download Powershell"><code class="language-powershell">Param(
[Parameter(Mandatory = $true)]
[string]$JsonFilePath,
[Parameter(Mandatory = $true)]
[string]$OutputMarkdownPath
)
# Function to adjust heading levels
function Adjust-Headings {
Param(
[string]$content,
[int]$levelOffset
)
if ([string]::IsNullOrEmpty($content)) {
return ''
}
$lines = $content -split "`n"
$adjustedLines = foreach ($line in $lines) {
if ($line -match '^(#{1,6})') {
$hashes = $Matches[1]
$newLevel = [Math]::Min($hashes.Length + $levelOffset, 6)
$restOfLine = $line.Substring($hashes.Length)
('#' * $newLevel) + $restOfLine
} else {
$line
}
}
return ($adjustedLines -join "`n")
}
# Function to process topics recursively
function Process-Topic {
Param(
[psobject]$topic,
[int]$headingLevel
)
$output = ""
try {
# Sanitize the title to remove markdown formatting
$title = $topic.title -replace '^[#*\-\s]*', ''   # Remove leading #, *, -, spaces
$title = $title.Trim('*').Trim()                  # Remove asterisks and extra spaces
# Create the heading for the topic
$headingHashes = '#' * $headingLevel
$output += "`n$headingHashes $title`n`n"
$content = $topic.content
if ([string]::IsNullOrEmpty($content)) {
$adjustedContent = ''  # Set to empty string if content is null or empty
}
else {
# Adjust content headings
$adjustedContent = Adjust-Headings -content $content -levelOffset ($headingLevel - 1)
}
$output += $adjustedContent + "`n"
# Process children recursively
if ($topic.children -and $topic.children.Count -gt 0) {
foreach ($child in $topic.children) {
$childOutput = Process-Topic -topic $child -headingLevel ($headingLevel + 1)
$output += $childOutput
}
}
}
catch {
Write-Error "Error processing topic '$($topic.title)': $_"
}
return $output
}
# Main script execution
try {
# Read the JSON data
$JsonData = Get-Content -Raw -Path $JsonFilePath | ConvertFrom-Json
# Initialize output content
$markdownContent = ""
# Create front matter
$frontMatter = "---`n"
$frontMatter += "title: '$($JsonData.name)'`n"
$frontMatter += "layout: default`n"
$frontMatter += "---`n`n"
$markdownContent += $frontMatter
# Include keyTopics if available
if ($JsonData.keyTopics) {
$keyTopicsContent = Adjust-Headings -content $JsonData.keyTopics -levelOffset 0
$markdownContent += $keyTopicsContent + "`n"
}
# Process chapters
$chapters = $JsonData.chapters
foreach ($chapter in $chapters) {
# Sanitize chapter name
$chapterName = $chapter.name -replace '^[#*\-\s]*', ''   # Remove leading #, *, -, spaces
$chapterName = $chapterName.Trim('*').Trim()             # Remove asterisks and extra spaces
$markdownContent += "`n## $chapterName`n`n"
# Adjust headings in chapter content if needed (if chapter has content)
if ($chapter.content) {
$adjustedChapterContent = Adjust-Headings -content $chapter.content -levelOffset 1
$markdownContent += $adjustedChapterContent + "`n"
}
# Process topics within the chapter
if ($chapter.topics) {
foreach ($topic in $chapter.topics) {
$topicOutput = Process-Topic -topic $topic -headingLevel 3
$markdownContent += $topicOutput
}
}
}
# Write the combined markdown content to the output file
Set-Content -Path $OutputMarkdownPath -Value $markdownContent -Encoding UTF8
Write-Host "Markdown file has been created at $OutputMarkdownPath"
}
catch {
Write-Error "An error occurred: $_"
}</code></section>]]></content><author><name></name></author><category term="scripts&gt;powershell," /><category term="estudos," /><category term="tools&gt;cloud" /></entry><entry><title type="html">Sequential pasting from a list via PowerShell</title><link href="https://ib.bsb.br/sequential-pasting-from-a-list-via-powershell/" rel="alternate" type="text/html" title="Sequential pasting from a list via PowerShell" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T19:43:34+00:00</updated><id>https://ib.bsb.br/sequential-pasting-from-a-list-via-powershell</id><content type="html" xml:base="https://ib.bsb.br/sequential-pasting-from-a-list-via-powershell/"><![CDATA[<p>This tool is particularly useful for tasks that require repetitive data entry, such as inputting serial numbers, codes, or form data, without the need to manually copy and paste each item individually.</p>

<h3 id="overview"><strong>Overview</strong></h3>

<ul>
  <li><strong>Sequential Pasting:</strong> Enables users to paste items from a list one after another by pressing a designated hotkey.</li>
  <li><strong>Global Hotkeys:</strong> Implements system-wide hotkeys to control the script’s actions, such as pasting the next item, pausing/resuming the process, and quitting the script.</li>
  <li><strong>User Interface:</strong> Runs silently in the background with minimal user interface interaction, displaying messages when necessary to inform the user of important events or errors.</li>
</ul>

<h3 id="key-components"><strong>Key Components</strong></h3>

<ol>
  <li>
    <p><strong>Loading Required Assemblies</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-AssemblyName</span><span class="w"> </span><span class="nx">System.Windows.Forms</span><span class="w">
</span></code></pre></div>    </div>

    <ul>
      <li>Loads the necessary .NET assembly to access Windows Forms classes and methods, enabling features like message boxes and clipboard operations within the script.</li>
    </ul>
  </li>
  <li>
    <p><strong>Configuration Settings</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$Config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
    </span><span class="nx">ListFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Documents\list.txt"</span><span class="w">
    </span><span class="nx">Hotkeys</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
        </span><span class="nx">Paste</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Control+F11'</span><span class="w">
        </span><span class="c"># Pause = 'Control+Shift+F11'    # Updated hotkey to avoid conflicts</span><span class="w">
        </span><span class="nx">Quit</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="s1">'Control+F12'</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="nx">AutoTab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>

    <ul>
      <li><strong>ListFilePath:</strong> Specifies the path to the text file containing the items to be pasted. Users can modify this path to point to their desired file location.</li>
      <li><strong>Hotkeys:</strong> Defines the global hotkeys for controlling the script:
        <ul>
          <li><strong>Paste:</strong> Pressing <code class="language-plaintext highlighter-rouge">Control+F11</code> triggers the script to paste the next item in the list.</li>
          <li><strong>Pause:</strong> (Commented out by default) Can be enabled to toggle pausing and resuming the pasting process.</li>
          <li><strong>Quit:</strong> Pressing <code class="language-plaintext highlighter-rouge">Control+F12</code> exits the script.</li>
        </ul>
      </li>
      <li><strong>AutoTab:</strong> If set to <code class="language-plaintext highlighter-rouge">$true</code>, the script sends a <code class="language-plaintext highlighter-rouge">Tab</code> key after pasting each item, which is useful for moving to the next input field automatically.</li>
    </ul>
  </li>
  <li>
    <p><strong>Function <code class="language-plaintext highlighter-rouge">Show-Message</code></strong></p>

    <ul>
      <li>A utility function that displays message boxes with customizable messages, titles, and icons. It uses Windows Forms to present information to the user, such as notifications or error messages.</li>
    </ul>
  </li>
  <li>
    <p><strong>Function <code class="language-plaintext highlighter-rouge">Load-ListItems</code></strong></p>

    <ul>
      <li>Validates and loads the items from the specified list file. The function checks if the file exists and is not empty. It reads the contents into an array, ignoring any empty lines.</li>
      <li>If the file is not found or is empty, the function displays an error message and exits the script gracefully.</li>
    </ul>
  </li>
  <li>
    <p><strong>Function <code class="language-plaintext highlighter-rouge">Parse-Hotkeys</code></strong></p>

    <ul>
      <li>Parses the hotkey strings defined in the configuration and converts them into modifier keys and virtual key codes that the Windows API can interpret.</li>
      <li>Associates each hotkey with a unique identifier (ID) required for registering the hotkeys with the system.</li>
    </ul>
  </li>
  <li>
    <p><strong>Hotkey Message Filter</strong></p>

    <ul>
      <li>Implements a custom message filter using the <code class="language-plaintext highlighter-rouge">IMessageFilter</code> interface to intercept Windows messages, specifically <code class="language-plaintext highlighter-rouge">WM_HOTKEY</code>.</li>
      <li>This allows the script to detect when the registered global hotkeys are pressed, even if the script’s window is not in focus.</li>
    </ul>
  </li>
  <li>
    <p><strong>Function <code class="language-plaintext highlighter-rouge">Start-Paster</code></strong></p>

    <ul>
      <li>The main function that encapsulates the script’s core logic:
        <ul>
          <li><strong>Initialization:</strong> Loads the list items and initializes variables such as the current index and pause state.</li>
          <li><strong>Hotkey Registration:</strong> Registers the global hotkeys using Windows API functions <code class="language-plaintext highlighter-rouge">RegisterHotKey</code> and <code class="language-plaintext highlighter-rouge">UnregisterHotKey</code>.</li>
          <li><strong>Hidden Form Creation:</strong> Creates an invisible Windows Form to handle message processing and to keep the script running.</li>
          <li><strong>Hotkey Actions:</strong>
            <ul>
              <li><strong>Paste:</strong> When the paste hotkey is pressed, the script checks if it is not paused and pastes the next item:
                <ul>
                  <li>Copies the current item to the clipboard.</li>
                  <li>Simulates a <code class="language-plaintext highlighter-rouge">Ctrl+V</code> key press to paste the item into the active application.</li>
                  <li>Optionally sends a <code class="language-plaintext highlighter-rouge">Tab</code> key if <code class="language-plaintext highlighter-rouge">AutoTab</code> is enabled.</li>
                  <li>Increments the index to move to the next item.</li>
                  <li>If all items have been pasted, the script notifies the user and exits.</li>
                </ul>
              </li>
              <li><strong>Pause:</strong> (If enabled) Toggles the paused state and informs the user.</li>
              <li><strong>Quit:</strong> Exits the script gracefully.</li>
            </ul>
          </li>
          <li><strong>Cleanup:</strong> Unregisters hotkeys and removes message filters when the script is closed.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Starting the Script</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Start-Paster</span><span class="w">
</span></code></pre></div>    </div>

    <ul>
      <li>Invokes the main function to commence the sequential pasting process.</li>
    </ul>
  </li>
</ol>

<h3 id="usage-instructions"><strong>Usage Instructions</strong></h3>

<p><strong>Prerequisites:</strong></p>

<ul>
  <li><strong>PowerShell Version:</strong> Ensure you are running PowerShell 5.0 or higher.</li>
  <li><strong>Execution Policy:</strong> By default, PowerShell restricts script execution. You may need to adjust the execution policy to run this script:
    <ul>
      <li>Open PowerShell as an administrator.</li>
      <li>Run <code class="language-plaintext highlighter-rouge">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code>.</li>
      <li>This allows you to run scripts you have written or downloaded from trusted sources.</li>
    </ul>
  </li>
</ul>

<p><strong>Setup:</strong></p>

<ol>
  <li>
    <p><strong>Prepare the List File:</strong></p>

    <ul>
      <li>Create a text file at the path specified by <code class="language-plaintext highlighter-rouge">ListFilePath</code> (e.g., <code class="language-plaintext highlighter-rouge">C:\Users\YourName\Documents\list.txt</code>).</li>
      <li>Add the items you wish to paste, placing each item on a new line.</li>
    </ul>
  </li>
  <li>
    <p><strong>Configure the Script:</strong></p>

    <ul>
      <li>Modify the <code class="language-plaintext highlighter-rouge">$Config</code> hashtable in the script if you wish to change file paths, hotkeys, or enable features like <code class="language-plaintext highlighter-rouge">AutoTab</code> or <code class="language-plaintext highlighter-rouge">Pause</code>.</li>
    </ul>
  </li>
</ol>

<p><strong>Running the Script:</strong></p>

<ul>
  <li>Open PowerShell and navigate to the directory containing the script.</li>
  <li>Execute the script by typing <code class="language-plaintext highlighter-rouge">.\SequentialPaster.ps1</code> (replace with the script’s actual filename).</li>
  <li>A message box will appear, confirming that the Sequential Paster is running.</li>
</ul>

<p><strong>Using the Hotkeys:</strong></p>

<ul>
  <li><strong>Paste Next Item:</strong> Press <code class="language-plaintext highlighter-rouge">Control+F11</code> to paste the next item in your list.</li>
  <li><strong>Pause/Resume:</strong> If enabled, press the configured hotkey (e.g., <code class="language-plaintext highlighter-rouge">Control+Shift+F11</code>) to pause or resume the pasting process.</li>
  <li><strong>Quit:</strong> Press <code class="language-plaintext highlighter-rouge">Control+F12</code> to stop the script.</li>
</ul>

<p><strong>Notes:</strong></p>

<ul>
  <li>If you reach the end of your list, the script will notify you that all items have been pasted and will exit automatically.</li>
  <li>If you attempt to paste while the script is paused, it will inform you that pasting is currently paused.</li>
</ul>

<h3 id="understanding-how-the-script-works"><strong>Understanding How the Script Works</strong></h3>

<ul>
  <li>
    <p><strong>Sequential Processing:</strong></p>

    <ul>
      <li>The script keeps track of the current item using an index. Each time you press the paste hotkey, it processes the next item in the array.</li>
    </ul>
  </li>
  <li>
    <p><strong>Global Hotkeys:</strong></p>

    <ul>
      <li>Global hotkeys are registered with the Windows operating system, allowing the script to respond to key presses regardless of which application is currently active.</li>
    </ul>
  </li>
  <li>
    <p><strong>Clipboard Management:</strong></p>

    <ul>
      <li>The script uses the Windows clipboard to transfer text. It copies the next item to the clipboard and then simulates a <code class="language-plaintext highlighter-rouge">Ctrl+V</code> key press to paste it.</li>
    </ul>
  </li>
  <li>
    <p><strong>Error Handling:</strong></p>

    <ul>
      <li>The script includes error handling to manage issues such as missing or empty list files, hotkey registration failures, and attempting to paste beyond the end of the list.</li>
    </ul>
  </li>
</ul>

<h3 id="common-issues-and-troubleshooting"><strong>Common Issues and Troubleshooting</strong></h3>

<ul>
  <li>
    <p><strong>Hotkey Conflicts:</strong></p>

    <ul>
      <li>If hotkey registration fails, the script will display an error message with an error code.
        <ul>
          <li><strong>Error Code 1409:</strong> Indicates that the hotkey is already in use by another application.</li>
          <li><strong>Resolution:</strong> Modify the hotkeys in the <code class="language-plaintext highlighter-rouge">$Config.Hotkeys</code> hashtable to use a different combination.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Script Execution Policy Errors:</strong></p>

    <ul>
      <li>If you receive an error about script execution being disabled, adjust your execution policy as outlined in the prerequisites.</li>
    </ul>
  </li>
  <li>
    <p><strong>Permissions:</strong></p>

    <ul>
      <li>Running the script typically does not require administrative privileges. However, ensure that your user account has the necessary permissions to execute scripts and access the specified files.</li>
    </ul>
  </li>
</ul>

<h3 id="customizing-the-script"><strong>Customizing the Script</strong></h3>

<ul>
  <li>
    <p><strong>Changing Hotkeys:</strong></p>

    <ul>
      <li>Update the hotkey combinations in the <code class="language-plaintext highlighter-rouge">$Config.Hotkeys</code> hashtable to suit your preferences.</li>
      <li>Use key names recognized by <code class="language-plaintext highlighter-rouge">[System.Windows.Forms.Keys]</code> for compatibility.</li>
    </ul>
  </li>
  <li>
    <p><strong>Enabling AutoTab:</strong></p>

    <ul>
      <li>Set <code class="language-plaintext highlighter-rouge">$Config.AutoTab</code> to <code class="language-plaintext highlighter-rouge">$true</code> if you want the script to automatically send a <code class="language-plaintext highlighter-rouge">Tab</code> key after pasting each item.</li>
    </ul>
  </li>
  <li>
    <p><strong>Enabling Pause Functionality:</strong></p>

    <ul>
      <li>Uncomment and configure the <code class="language-plaintext highlighter-rouge">Pause</code> hotkey in the configuration to enable pausing and resuming the pasting process.</li>
    </ul>
  </li>
</ul>

<h3 id="code"><strong>code</strong></h3>

<section data-filename="powershell_code-block.txt" data-code="# Sequential Paster.ps1 - Corrected Version with Proper Variable Scoping
# Load necessary assemblies
Add-Type -AssemblyName System.Windows.Forms
# Configuration
$Config = @{ ListFilePath = &quot;$HOME\\Documents\\list.txt&quot; Hotkeys = @{ Paste = 'Control+F11'
# Pause = 'Control+Shift+F11' # Updated hotkey to avoid conflicts
```
Quit  = 'Control+F12'
}
AutoTab = $false
```
}
# Function to display messages
function Show-Message { param( \[string\]$Message, \[string\]$Title = &quot;Sequential Paster&quot;, \[string\]$IconType = &quot;Information&quot; ) $icon = switch ($IconType.ToLower()) { &quot;information&quot; { \[System.Windows.Forms.MessageBoxIcon\]::Information } &quot;error&quot; { \[System.Windows.Forms.MessageBoxIcon\]::Error } &quot;warning&quot; { \[System.Windows.Forms.MessageBoxIcon\]::Warning } default { \[System.Windows.Forms.MessageBoxIcon\]::Information } } \[System.Windows.Forms.MessageBox\]::Show($Message, $Title, \[System.Windows.Forms.MessageBoxButtons\]::OK, $icon) | Out-Null }
# Validate and load items from the list file
function Load-ListItems { try { if (-not (Test-Path -Path $Config.ListFilePath)) { Show-Message &quot;List file not found at:`n$($Config.ListFilePath)`nPlease create it and add items.&quot; &quot;Error&quot; &quot;Error&quot; exit } $ListItems = Get-Content -Path $Config.ListFilePath -Encoding UTF8 | Where-Object { $*.Trim() } if ($ListItems.Count -eq 0) { Show-Message &quot;The list file is empty.&quot; &quot;Error&quot; &quot;Error&quot; exit } return $ListItems } catch { Show-Message &quot;Error reading list file: $*&quot; &quot;Error&quot; &quot;Error&quot; exit } }
# Parse hotkey strings into modifier keys and virtual key codes
function Parse-Hotkeys { param(\[hashtable\]$HotkeyConfig) $hotkeyMappings = @{} foreach ($key in $HotkeyConfig.Keys) { try { $hotkeyString = $HotkeyConfig\[$key\] $modifiers = 0 $keyCode = 0 $parts = $hotkeyString -split '+' foreach ($part in $parts) { switch ($part.ToLower()) { 'control' { $modifiers += 2 } 'shift' { $modifiers += 4 } 'alt' { $modifiers += 1 } default { $keyCode = \[int\]\[System.Windows.Forms.Keys\]::$part } } } $hotkeyMappings\[$key\] = @{ Modifiers = $modifiers KeyCode = $keyCode ID = \[System.Guid\]::NewGuid().GetHashCode() } } catch { Show-Message &quot;Invalid hotkey configuration for '$key': $hotkeyString&quot; &quot;Error&quot; &quot;Error&quot; exit } } return $hotkeyMappings }
# Implement the IMessageFilter interface for handling messages
Add-Type -ReferencedAssemblies &quot;System.Windows.Forms&quot; -TypeDefinition @&quot; using System; using System.Windows.Forms;
public class HotkeyMessageFilter : IMessageFilter { public delegate void HotkeyPressedHandler(int hotkeyId); public event HotkeyPressedHandler HotkeyPressed;
```
public bool PreFilterMessage(ref Message m)
{
const int WM_HOTKEY = 0x0312;
if (m.Msg == WM_HOTKEY)
{
int hotkeyId = m.WParam.ToInt32();
if (HotkeyPressed != null)
{
HotkeyPressed.Invoke(hotkeyId);
}
return true;
}
return false;
}
```
} &quot;@
# Main logic encapsulated in a function
function Start-Paster { $script:ListItems = Load-ListItems $script:CurrentIndex = 0 $script:IsPaused = $false
```
$Hotkeys = Parse-Hotkeys -HotkeyConfig $Config.Hotkeys
Add-Type -MemberDefinition @&quot;
[DllImport(&quot;user32.dll&quot;, SetLastError = true)]
public static extern bool RegisterHotKey(IntPtr hWnd, int id, int fsModifiers, int vk);
[DllImport(&quot;user32.dll&quot;, SetLastError = true)]
public static extern bool UnregisterHotKey(IntPtr hWnd, int id);
```
&quot;@ -Name &quot;NativeMethods&quot; -Namespace &quot;WinAPI&quot;
```
$form = New-Object System.Windows.Forms.Form
$form.WindowState = 'Minimized'
$form.ShowInTaskbar = $false
# Register hotkeys
foreach ($hotkeyName in $Hotkeys.Keys) {
$hotkey = $Hotkeys[$hotkeyName]
$registered = [WinAPI.NativeMethods]::RegisterHotKey($form.Handle, $hotkey.ID, $hotkey.Modifiers, $hotkey.KeyCode)
if (-not $registered) {
$errorCode = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
Show-Message &quot;Failed to register hotkey '$hotkeyName'. Error code: $errorCode&quot; &quot;Error&quot; &quot;Error&quot;
exit
}
}
# Create an instance of the message filter
$filter = New-Object HotkeyMessageFilter
# Add the message filter to the application
[System.Windows.Forms.Application]::AddMessageFilter($filter)
# Define the action when a hotkey is pressed
$filter.add_HotkeyPressed({
param($hotkeyId)
foreach ($hotkeyName in $Hotkeys.Keys) {
if ($Hotkeys[$hotkeyName].ID -eq $hotkeyId) {
switch ($hotkeyName) {
'Paste' {
if (-not $script:IsPaused) {
if ($script:CurrentIndex -lt $script:ListItems.Count) {
$item = $script:ListItems[$script:CurrentIndex]
try {
[System.Windows.Forms.Clipboard]::SetText($item)
[System.Windows.Forms.SendKeys]::SendWait('^v')
if ($Config.AutoTab) {
Start-Sleep -Milliseconds 50
[System.Windows.Forms.SendKeys]::SendWait('{TAB}')
}
$script:CurrentIndex++
} catch {
Show-Message &quot;Error during paste: $_&quot; &quot;Error&quot; &quot;Error&quot;
}
if ($script:CurrentIndex -ge $script:ListItems.Count) {
Show-Message &quot;All items pasted.&quot; &quot;Info&quot; &quot;Information&quot;
$form.Close()
}
}
} else {
Show-Message &quot;Pasting is paused.&quot; &quot;Info&quot; &quot;Information&quot;
}
}
'Pause' {
$script:IsPaused = -not $script:IsPaused
$status = if ($script:IsPaused) { 'Paused' } else { 'Resumed' }
Show-Message &quot;Pasting $status.&quot; &quot;Info&quot; &quot;Information&quot;
}
'Quit' {
Show-Message &quot;Quitting.&quot; &quot;Info&quot; &quot;Information&quot;
$form.Close()
}
}
break
}
}
})
# Form Closed event handler
$form.add_FormClosed({
# Unregister hotkeys
foreach ($hotkey in $Hotkeys.Values) {
[WinAPI.NativeMethods]::UnregisterHotKey($form.Handle, $hotkey.ID) | Out-Null
}
# Remove the message filter
[System.Windows.Forms.Application]::RemoveMessageFilter($filter)
[System.Windows.Forms.Application]::Exit()
})
# Show startup message
Show-Message &quot;Sequential Paster is running.`nUse the configured hotkeys to control it.&quot; &quot;Info&quot; &quot;Information&quot;
# Start the application loop
[System.Windows.Forms.Application]::Run($form)
```
}
# Start the paster
Start-Paster" data-download-link="" data-download-link-label="Download Powershell"><code class="language-powershell"># Sequential Paster.ps1 - Corrected Version with Proper Variable Scoping
# Load necessary assemblies
Add-Type -AssemblyName System.Windows.Forms
# Configuration
$Config = @{ ListFilePath = "$HOME\\Documents\\list.txt" Hotkeys = @{ Paste = 'Control+F11'
# Pause = 'Control+Shift+F11' # Updated hotkey to avoid conflicts
```
Quit  = 'Control+F12'
}
AutoTab = $false
```
}
# Function to display messages
function Show-Message { param( \[string\]$Message, \[string\]$Title = "Sequential Paster", \[string\]$IconType = "Information" ) $icon = switch ($IconType.ToLower()) { "information" { \[System.Windows.Forms.MessageBoxIcon\]::Information } "error" { \[System.Windows.Forms.MessageBoxIcon\]::Error } "warning" { \[System.Windows.Forms.MessageBoxIcon\]::Warning } default { \[System.Windows.Forms.MessageBoxIcon\]::Information } } \[System.Windows.Forms.MessageBox\]::Show($Message, $Title, \[System.Windows.Forms.MessageBoxButtons\]::OK, $icon) | Out-Null }
# Validate and load items from the list file
function Load-ListItems { try { if (-not (Test-Path -Path $Config.ListFilePath)) { Show-Message "List file not found at:`n$($Config.ListFilePath)`nPlease create it and add items." "Error" "Error" exit } $ListItems = Get-Content -Path $Config.ListFilePath -Encoding UTF8 | Where-Object { $*.Trim() } if ($ListItems.Count -eq 0) { Show-Message "The list file is empty." "Error" "Error" exit } return $ListItems } catch { Show-Message "Error reading list file: $*" "Error" "Error" exit } }
# Parse hotkey strings into modifier keys and virtual key codes
function Parse-Hotkeys { param(\[hashtable\]$HotkeyConfig) $hotkeyMappings = @{} foreach ($key in $HotkeyConfig.Keys) { try { $hotkeyString = $HotkeyConfig\[$key\] $modifiers = 0 $keyCode = 0 $parts = $hotkeyString -split '+' foreach ($part in $parts) { switch ($part.ToLower()) { 'control' { $modifiers += 2 } 'shift' { $modifiers += 4 } 'alt' { $modifiers += 1 } default { $keyCode = \[int\]\[System.Windows.Forms.Keys\]::$part } } } $hotkeyMappings\[$key\] = @{ Modifiers = $modifiers KeyCode = $keyCode ID = \[System.Guid\]::NewGuid().GetHashCode() } } catch { Show-Message "Invalid hotkey configuration for '$key': $hotkeyString" "Error" "Error" exit } } return $hotkeyMappings }
# Implement the IMessageFilter interface for handling messages
Add-Type -ReferencedAssemblies "System.Windows.Forms" -TypeDefinition @" using System; using System.Windows.Forms;
public class HotkeyMessageFilter : IMessageFilter { public delegate void HotkeyPressedHandler(int hotkeyId); public event HotkeyPressedHandler HotkeyPressed;
```
public bool PreFilterMessage(ref Message m)
{
const int WM_HOTKEY = 0x0312;
if (m.Msg == WM_HOTKEY)
{
int hotkeyId = m.WParam.ToInt32();
if (HotkeyPressed != null)
{
HotkeyPressed.Invoke(hotkeyId);
}
return true;
}
return false;
}
```
} "@
# Main logic encapsulated in a function
function Start-Paster { $script:ListItems = Load-ListItems $script:CurrentIndex = 0 $script:IsPaused = $false
```
$Hotkeys = Parse-Hotkeys -HotkeyConfig $Config.Hotkeys
Add-Type -MemberDefinition @"
[DllImport("user32.dll", SetLastError = true)]
public static extern bool RegisterHotKey(IntPtr hWnd, int id, int fsModifiers, int vk);
[DllImport("user32.dll", SetLastError = true)]
public static extern bool UnregisterHotKey(IntPtr hWnd, int id);
```
"@ -Name "NativeMethods" -Namespace "WinAPI"
```
$form = New-Object System.Windows.Forms.Form
$form.WindowState = 'Minimized'
$form.ShowInTaskbar = $false
# Register hotkeys
foreach ($hotkeyName in $Hotkeys.Keys) {
$hotkey = $Hotkeys[$hotkeyName]
$registered = [WinAPI.NativeMethods]::RegisterHotKey($form.Handle, $hotkey.ID, $hotkey.Modifiers, $hotkey.KeyCode)
if (-not $registered) {
$errorCode = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
Show-Message "Failed to register hotkey '$hotkeyName'. Error code: $errorCode" "Error" "Error"
exit
}
}
# Create an instance of the message filter
$filter = New-Object HotkeyMessageFilter
# Add the message filter to the application
[System.Windows.Forms.Application]::AddMessageFilter($filter)
# Define the action when a hotkey is pressed
$filter.add_HotkeyPressed({
param($hotkeyId)
foreach ($hotkeyName in $Hotkeys.Keys) {
if ($Hotkeys[$hotkeyName].ID -eq $hotkeyId) {
switch ($hotkeyName) {
'Paste' {
if (-not $script:IsPaused) {
if ($script:CurrentIndex -lt $script:ListItems.Count) {
$item = $script:ListItems[$script:CurrentIndex]
try {
[System.Windows.Forms.Clipboard]::SetText($item)
[System.Windows.Forms.SendKeys]::SendWait('^v')
if ($Config.AutoTab) {
Start-Sleep -Milliseconds 50
[System.Windows.Forms.SendKeys]::SendWait('{TAB}')
}
$script:CurrentIndex++
} catch {
Show-Message "Error during paste: $_" "Error" "Error"
}
if ($script:CurrentIndex -ge $script:ListItems.Count) {
Show-Message "All items pasted." "Info" "Information"
$form.Close()
}
}
} else {
Show-Message "Pasting is paused." "Info" "Information"
}
}
'Pause' {
$script:IsPaused = -not $script:IsPaused
$status = if ($script:IsPaused) { 'Paused' } else { 'Resumed' }
Show-Message "Pasting $status." "Info" "Information"
}
'Quit' {
Show-Message "Quitting." "Info" "Information"
$form.Close()
}
}
break
}
}
})
# Form Closed event handler
$form.add_FormClosed({
# Unregister hotkeys
foreach ($hotkey in $Hotkeys.Values) {
[WinAPI.NativeMethods]::UnregisterHotKey($form.Handle, $hotkey.ID) | Out-Null
}
# Remove the message filter
[System.Windows.Forms.Application]::RemoveMessageFilter($filter)
[System.Windows.Forms.Application]::Exit()
})
# Show startup message
Show-Message "Sequential Paster is running.`nUse the configured hotkeys to control it." "Info" "Information"
# Start the application loop
[System.Windows.Forms.Application]::Run($form)
```
}
# Start the paster
Start-Paster</code></section>]]></content><author><name></name></author><category term="scripts&gt;powershell" /></entry><entry><title type="html">How to write complex software</title><link href="https://ib.bsb.br/how-to-write-complex-software/" rel="alternate" type="text/html" title="How to write complex software" /><published>2025-01-03T00:00:00+00:00</published><updated>2025-01-04T21:22:21+00:00</updated><id>https://ib.bsb.br/how-to-write-complex-software</id><content type="html" xml:base="https://ib.bsb.br/how-to-write-complex-software/"><![CDATA[<p>Suppose you are implementing some complex piece of software — a database, a word processor, a filesystem, a web browser, whatever. How do you get started? How do you actually organize the code?</p>

<p>This post attempts to lay out a general method for approaching this problem with some specific techniques and guiding heuristics.</p>

<h2 id="overview"><a href="#overview">Overview</a></h2>

<p>The 10,000 foot view of what we’ll discuss:</p>

<ul>
  <li>Write some toy driver programs to find out the physical constraints of the solution-space you’re operating in</li>
  <li>Start at the top of the stack, usually this means the user interface or API</li>
  <li>Implement your software in layers, where each layer peels off the minimum amount of logic possible and delegates all remaining complexity to the next layer</li>
  <li>When coding a layer, define the API of the next layer down to be the perfect <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language</a> to implement the current layer in</li>
  <li>Stub out the layer down as you code the current layer</li>
  <li>When the current layer is done, recurse and implement the layer down for real using this same method</li>
  <li>Continue until you are done</li>
  <li>Only implement mockable abstract interfaces for parts of the code that do IO — everything else should be concrete</li>
</ul>

<h2 id="when-this-post-applies"><a href="#when-this-post-applies">When this post applies</a></h2>

<p>Developing complex software is really different than small software. If your whole program can fit in under 5000 lines or so, you’ll often be best served by a single giant file with minimal abstractions.</p>

<p>Minimal abstraction means making changes will often involve mutating a lot of code, the total amount of code in the whole project is small, so this is fine.</p>

<p>When working on a large project, one that is unavoidably tens or hundreds of thousands of lines of code, this strategy does not work, and abstraction and organization is needed.</p>

<h2 id="getting-started"><a href="#getting-started">Getting started</a></h2>

<p>Before actually writing any software, we want to find the boundaries of the space of possible solutions.</p>

<p>If we’re writing a database, let’s create a mock request and test just how many requests per second we can parse in the best case scenario? How many small reads and writes can our disk handle? How many checksums can your CPU compute per second?</p>

<p>You should write little micro-benchmark programs to find the answers to these questions.</p>

<p>While you don’t know what your actual software will look like yet, you know some broad things that must be true. A filesystem must write the data to disk. A webserver must send data over a socket. A word processor must render text.</p>

<p>How those goals are actually accomplished is determined by the software, but you know they must be done, and you can often establish some a priori bounds of your hardware.</p>

<p>I think of this part of the process as carving off large, coarse chunks of the solution space. You might find out something like “well, there is no way I can compute a checksum of every individual file, it uses way too much CPU, so I know whatever design I use must batch files with at least 100 files per batch”.</p>

<p>These are the types of learnings you’ll want to keep in mind while actually implementing the software.</p>

<h2 id="working-top-to-bottom"><a href="#working-top-to-bottom">Working top to bottom</a></h2>

<p>A trap some engineers fall into is to view software development as a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a> (DAG) of components that depend on each other, and the natural place to start developing software is the components with no dependencies.</p>

<p>For example, consider a word processor. The UI depends on the layout engine. The layout engine depends on the text data representation. The text data representation depends on the file format.</p>

<p>So the engineer will start implementing their word processor by coding the file format first! After all, it can be coded, tested, completed without any other components.</p>

<p>Then they’ll move up the stack to the text data representation. Then the layout engine. And finally, the UI.</p>

<p>The advantage of this method is you never have to stub out anything, never have to write mocks, etc.</p>

<p>The disadvantage is <em>huge</em> though. You’re locking yourself into a design before you have written the software! When you’re implementing one layer, you’re guessing at what API the layer up is going to need, and implementing that.</p>

<p>When you go to implement the layer up, you may have to work around a not-quite-perfect API that you are hesitant to change because you already spent all that time implementing it.</p>

<p>The method I propose is the exact opposite. You start coding at the top of the stack, letting each layer define the API of the layer below it. Only once that layer’s implementation is beautiful — because the stubbed out API of the layer down is just what it needs — do you implement the layer down.</p>

<p>Another advantage of this method is you always have semi-working software. You always have a UI to show the boss or an API the other team can start testing against. It may not be functionally complete yet, but partial is better than nothing!</p>

<p>A disadvantage of this method is you will spend a little time implementing dummy placeholder implementations while you work. The mock implementation will probably only take 5% of the time as the real implementation, so your total velocity will only be slowed by 5%. You’ll gain that time back — and more — elsewhere with this method.</p>

<h2 id="implementing-a-layer"><a href="#implementing-a-layer">Implementing a layer</a></h2>

<p>Each layer of your software should ideally be easily readable. If it’s not readable, this means it’s peeling off too much logic. Consider these two toy examples:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Blog:
    def serve(self, request):
        self.rate_limiter.throttle(request)
        article = self.article_store.get(request.article)
        if not article:
            return self.not_found_page
        formatted = article.format(request.locale)
        return formatted
</code></pre></div></div>

<p>versus</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Blog:
    def serve(self, request):
        if request.ip not in self.request_counts:
            self.request_counts[request.ip] = 1
        else:
            self.request_counts[request.ip] += 1

        backoff_duration = 0.5 * (2 ** (self.request_counts[request.ip] - 1))
        time.sleep(backoff_duration)

        file_path = f"/storage/articles/{request.article}.txt"
        if not os.path.isfile(file_path):
            return self.not_found_page
        with open(file_path, 'r') as f:
            article = f.read()

        if request.locale == "en":
            ... etc ...
</code></pre></div></div>

<p>This is obviously just a toy example, and it’s likely a simple blog backend falls in the category of “small software” that should really just be one giant file with no abstraction.</p>

<p>The point of this example is to demonstrate what I mean about peeling off complexity.</p>

<p>Most people do this wrong, though. They start by implementing the complex latter example, and only later <em>refactor</em> it into the abstracted simpler form.</p>

<p>The right way to do it is to <em>code the simple version first</em>. Code it that way <em>before</em> you have implemented the <code class="language-plaintext highlighter-rouge">rate_limiter</code> or the <code class="language-plaintext highlighter-rouge">article_store</code> or whatever. Just imagine they exist. Code as if the perfect API to implement this layer already existed.</p>

<p>Then, once your code looks beautiful, go implement those things.</p>

<h2 id="stubbing-implementations"><a href="#stubbing-implementations">Stubbing implementations</a></h2>

<p>Once you code a layer, you need to implement the APIs you imagined. You should start by simply stubbing them.</p>

<p>A stub can be as simple as returning a fixed value or even throwing an exception or crashing. Just whatever is needed to make the project build or code compile.</p>

<p>For example, a stub of the <code class="language-plaintext highlighter-rouge">rate_limiter</code> above may just do nothing, or sleep for a constant 100 milliseconds. A stub for <code class="language-plaintext highlighter-rouge">article_store</code> might always return <code class="language-plaintext highlighter-rouge">None</code> or always return the string <code class="language-plaintext highlighter-rouge">"dummy article"</code>.</p>

<p>Stubs can also be somewhat more fully-fledged <em>mocks</em>. An example mock article store might be a hash table of a few sample articles, to enable testing something like an article index page. Maybe it even allows creating new articles, but doesn’t persist them to any permanent storage.</p>

<p>You want to minimize the amount of time you spend implementing stubs and mocks, because you’re going to be implementing the real thing soon. Do whatever the minimum needed is. Feel free to use temporary hacks.</p>

<h2 id="when-to-really-mock"><a href="#when-to-really-mock">When to really mock</a></h2>

<p>The only thing you want to consider producing separate “real” mocks for is the IO layer. You want to do this for tests, because you probably want your tests to be fast and deterministic. You don’t want them making network calls or whatever.</p>

<p>So in the case of a database, say, you would mock out the underlying data storage layer, i.e. the hard drive or filesystem.</p>

<p>If your database is something like SQLite that stores the database into a file, you can implement an interface that matches the features of the POSIX file handle interface. The real implementation just wraps a real file handle. The mock just stores data in an in-memory buffer or something.</p>

<p>Now with your mock, you can do things like deterministically inject corruptions, failures, etc to test your software in those scenarios.</p>

<p>Do <em>not</em> mock things that don’t do IO. Why would you? You have the real implementation! Test your real implementation! Only swap out the IO dependencies with your IO mocks.</p>

<h2 id="collaboration"><a href="#collaboration">Collaboration</a></h2>

<p>An advantage of this method is once you get the process started, it becomes natural to have one person implement one API while someone else implements another.</p>

<p>The “layers” analogy isn’t like a cake, where 1 layer sits on 1 other layer. Each layer often has <em>many</em> sub-layers. The blog example above has 3: the rate limiter, the article store, and the formatter.</p>

<p>And in a more complex piece of software, those sub-layers may themselves have sub-layers! Each of these branches represents a point to delegate work to another engineer.</p>

<p>They have a well-defined API to implement. You’ve provided a stub implementation. Your layer that exercises it hopefully comes with unit tests. You have set them up for success!</p>

<p>This does mean most projects will need to <em>start</em> with only 1 developer who codes the very top layer. But this is a good thing! It’s a great responsibility and sets the tone for the whole project.</p>

<h2 id="pitfalls"><a href="#pitfalls">Pitfalls</a></h2>

<p>It’s rare, but you can code a layer in terms of an API that isn’t actually possible to implement.</p>

<p>Maybe you go to implement it and realize there is no way for this sub-layer to have all the information it needs to do its job, or the plumbing is just wacky. It happens.</p>

<p>In this case, rather than trying to force it to work or tweak things into place, I recommend just deleting this code, backtracking up the stack, and re-implementing the layer above with your newfound knowledge with a new API you think will be implementable.</p>

<h2 id="closing-thoughts"><a href="#closing-thoughts">Closing thoughts</a></h2>

<h3 id="no-hard-and-fast-rules"><a href="#no-hard-and-fast-rules">No hard and fast rules</a></h3>

<p>All such heuristics should be applied judiciously. This is a general guide, not a formal algorithm. You will need to deviate from it when appropriate. Becoming a better software engineer is the process of learning when to deviate from paths like this.</p>

<h3 id="ai-devs"><a href="#ai-devs">AI Devs</a></h3>

<p>This general method is particularly well-suited to developing software with LLM agents, since it’s kind of a general flow chart and chunks up work nicely to fit into context windows, etc.</p>]]></content><author><name></name></author><category term="software" /></entry></feed>