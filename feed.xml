<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-05-13T01:26:55+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">backup bash script</title><link href="https://ib.bsb.br/backup-bash-script/" rel="alternate" type="text/html" title="backup bash script" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T18:04:46+00:00</updated><id>https://ib.bsb.br/backup-bash-script</id><content type="html" xml:base="https://ib.bsb.br/backup-bash-script/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# ==============================================================================
# Script Name: comprehensive_backup_v2.sh
# Description: Archives (tar) and compresses (zstd) files from a source
#              directory to a destination file. Offers configuration for
#              compression level, progress view (pv), I/O buffering (mbuffer),
#              and exclusions. Includes pre-checks and basic verification steps.
# Author:      AI Assistant
# Version:     2.0
# Usage:       sudo bash comprehensive_backup_v2.sh
# Requirements: bash, sudo, tar, zstd, pv, mbuffer, coreutils (du, df, awk, numfmt, stat)
# ==============================================================================

# --- Script Setup ---
# Exit immediately if a command exits with a non-zero status.
# set -e
# Treat unset variables as an error when substituting.
# set -u
# Cause pipelines to return the exit status of the last command that exited with a non-zero status,
# or zero if no command exited with a non-zero status.
set -o pipefail

# --- Configuration ---
DEFAULT_SOURCE_DIR="/media/usb0"
DEFAULT_DEST_DIR="/media/usb5"
DEFAULT_FILENAME_BASE="backup_usb0"
DEFAULT_COMPRESSION_LEVEL=9 # Good balance (1-19)
DEFAULT_USE_PV="y"
DEFAULT_USE_MBUFFER="y"
DEFAULT_MBUFFER_SIZE="6G" # e.g., 128M, 256M, 512M, 1G
DEFAULT_EXCLUDE_PATTERNS=() # Add patterns like: ('./cache/*' '*.tmp')

# --- Helper Functions ---
check_command() {
  if ! command -v "$1" &amp;&gt; /dev/null; then
    echo "Error: Required command '$1' not found. Please install it (e.g., using 'sudo apt install $1')." &gt;&amp;2
    exit 1
  fi
}

print_separator() {
  printf -- '-%.0s' {1..70}; printf '\n'
}

# --- Root Check ---
if [[ $EUID -ne 0 ]]; then
   echo "Error: This script must be run with sudo privileges for accurate size checks and potentially writing to protected locations." &gt;&amp;2
   exit 1
fi

# --- Dependency Check ---
print_separator
echo "Checking required commands..."
check_command tar
check_command zstd
check_command pv
check_command mbuffer
check_command du
check_command df
check_command awk
check_command numfmt
check_command stat
echo "All required commands found."

# --- User Input / Configuration Override ---
print_separator
echo "Configure Backup Parameters (Press Enter for defaults):"

read -p "Source directory [${DEFAULT_SOURCE_DIR}]: " SOURCE_DIR
SOURCE_DIR=${SOURCE_DIR:-$DEFAULT_SOURCE_DIR}

read -p "Destination directory [${DEFAULT_DEST_DIR}]: " DEST_DIR
DEST_DIR=${DEST_DIR:-$DEFAULT_DEST_DIR}

read -p "Base filename for archive [${DEFAULT_FILENAME_BASE}]: " FILENAME_BASE
FILENAME_BASE=${FILENAME_BASE:-$DEFAULT_FILENAME_BASE}

read -p "Compression level (1=fastest, 19=best, default=${DEFAULT_COMPRESSION_LEVEL}): " COMPRESSION_LEVEL
COMPRESSION_LEVEL=${COMPRESSION_LEVEL:-$DEFAULT_COMPRESSION_LEVEL}
# Basic validation for compression level
if ! [[ "$COMPRESSION_LEVEL" =~ ^[1-9]$|^1[0-9]$ ]]; then # Regex for 1-19
  echo "Invalid compression level. Using default: ${DEFAULT_COMPRESSION_LEVEL}"
  COMPRESSION_LEVEL=$DEFAULT_COMPRESSION_LEVEL
fi

read -p "Use 'pv' for progress monitoring? (Y/n) [${DEFAULT_USE_PV}]: " USE_PV
USE_PV=${USE_PV:-$DEFAULT_USE_PV}

read -p "Use 'mbuffer' for I/O buffering? (y/N) [${DEFAULT_USE_MBUFFER}]: " USE_MBUFFER
USE_MBUFFER=${USE_MBUFFER:-$DEFAULT_USE_MBUFFER}
MBUFFER_SIZE=$DEFAULT_MBUFFER_SIZE
if [[ "${USE_MBUFFER,,}" == "y" ]]; then
  read -p "mbuffer size (e.g., 256M, 1G) [${DEFAULT_MBUFFER_SIZE}]: " MBUFFER_SIZE_INPUT
  MBUFFER_SIZE=${MBUFFER_SIZE_INPUT:-$DEFAULT_MBUFFER_SIZE}
fi

# Exclude pattern input
echo "Enter exclude patterns one by one (relative to source, e.g., './cache/*', '*.tmp'). Press Enter on empty line to finish."
EXCLUDE_PATTERNS=()
while true; do
    read -p "Exclude pattern (or Enter to finish): " pattern
    if [[ -z "$pattern" ]]; then
        break
    fi
    EXCLUDE_PATTERNS+=("$pattern")
done
if [ ${#EXCLUDE_PATTERNS[@]} -eq 0 ]; then
    EXCLUDE_PATTERNS=("${DEFAULT_EXCLUDE_PATTERNS[@]}") # Use default if none entered
fi


# --- Pre-Checks ---
print_separator
echo "Performing Pre-Checks..."

# Check directories
if [ ! -d "$SOURCE_DIR" ]; then
  echo "Error: Source directory '$SOURCE_DIR' not found or not a directory." &gt;&amp;2
  exit 1
fi
if [ ! -d "$DEST_DIR" ]; then
  echo "Error: Destination directory '$DEST_DIR' not found or not a directory." &gt;&amp;2
  exit 1
fi
# Optional: Check if they are mount points (informational)
if ! mountpoint -q "$SOURCE_DIR"; then
    echo "Info: Source directory '$SOURCE_DIR' does not appear to be a distinct mount point."
fi
if ! mountpoint -q "$DEST_DIR"; then
    echo "Info: Destination directory '$DEST_DIR' does not appear to be a distinct mount point."
fi

# Check source size
echo "Calculating source size (this may take a while)..."
SRC_SIZE_BYTES=$(du -sb "$SOURCE_DIR" 2&gt;/dev/null)
DU_EXIT_CODE=$?
if [ $DU_EXIT_CODE -ne 0 ] || [ -z "$SRC_SIZE_BYTES" ]; then
    echo "Error: Could not determine source size (du exit code: $DU_EXIT_CODE). Check permissions for '$SOURCE_DIR'." &gt;&amp;2
    exit 1
fi
SRC_SIZE_BYTES=$(echo "$SRC_SIZE_BYTES" | awk '{print $1}') # Extract number
SRC_SIZE_HUMAN=$(numfmt --to=iec $SRC_SIZE_BYTES)
echo "Source size: ${SRC_SIZE_HUMAN} (${SRC_SIZE_BYTES} bytes)"

# Check if source seems empty
if [ "$SRC_SIZE_BYTES" -le 4096 ]; then # 4096 is typical size of an empty directory metadata
    echo "Warning: Source directory size is very small. It might be empty or contain only empty subdirectories."
fi

# Check destination space
DEST_AVAIL_BYTES=$(df --output=avail -B1 "$DEST_DIR" 2&gt;/dev/null | awk 'NR==2{print $1}')
DF_EXIT_CODE=$?
if [ $DF_EXIT_CODE -ne 0 ] || [ -z "$DEST_AVAIL_BYTES" ]; then
    echo "Error: Could not determine destination available space (df exit code: $DF_EXIT_CODE). Check path '$DEST_DIR'." &gt;&amp;2
    exit 1
fi
DEST_AVAIL_HUMAN=$(numfmt --to=iec $DEST_AVAIL_BYTES)
echo "Destination available space: ${DEST_AVAIL_HUMAN} (${DEST_AVAIL_BYTES} bytes)"

# Space warning
if [ "$SRC_SIZE_BYTES" -gt "$DEST_AVAIL_BYTES" ]; then
  print_separator
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!! WARNING: Source size (${SRC_SIZE_HUMAN}) is LARGER than available"
  echo "!!!          destination space (${DEST_AVAIL_HUMAN})."
  echo "!!! This operation will ONLY succeed if the data compresses"
  echo "!!! significantly (below ${DEST_AVAIL_HUMAN}). Consider using a higher"
  echo "!!! compression level (current: ${COMPRESSION_LEVEL}) or freeing up space."
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  print_separator
elif [ "$DEST_AVAIL_BYTES" -lt "$((SRC_SIZE_BYTES / 2))" ]; then # Heuristic: Warn if available space is less than half the source size
  echo "Warning: Available destination space (${DEST_AVAIL_HUMAN}) is less than half the source size. Ensure compression is effective."
fi

# Construct final destination path and check for collision
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
DEST_FILENAME="${FILENAME_BASE}_L${COMPRESSION_LEVEL}_${TIMESTAMP}.tar.zst"
DEST_FILE_PATH="${DEST_DIR}/${DEST_FILENAME}"

if [ -e "$DEST_FILE_PATH" ]; then
    echo "Error: Destination file '$DEST_FILE_PATH' already exists." &gt;&amp;2
    read -p "Do you want to overwrite it? (y/N): " OVERWRITE_CONFIRM
    if [[ "${OVERWRITE_CONFIRM,,}" != "y" ]]; then
        echo "Aborted by user."
        exit 0
    fi
    echo "Overwriting existing file."
fi

# Final confirmation
print_separator
echo "Backup Summary:"
echo "  Source:      $SOURCE_DIR ($SRC_SIZE_HUMAN)"
echo "  Destination: $DEST_FILE_PATH"
echo "  Compression: Level $COMPRESSION_LEVEL"
echo "  Progress View: ${USE_PV}"
echo "  IO Buffering: ${USE_MBUFFER} (Size: $MBUFFER_SIZE)"
if [ ${#EXCLUDE_PATTERNS[@]} -gt 0 ]; then
    echo "  Exclusions:  ${EXCLUDE_PATTERNS[*]}"
fi
print_separator

read -p "Do you want to proceed with the backup? (y/N): " CONFIRM_PROCEED
if [[ "${CONFIRM_PROCEED,,}" != "y" ]]; then
  echo "Aborted by user."
  exit 0
fi

# --- Build and Execute the Command Pipeline ---
print_separator
echo "Building and executing the command pipeline..."

# Start with tar command (relative paths within archive)
TAR_CMD=("tar" "-cf" "-")

# Add exclude patterns
for pattern in "${EXCLUDE_PATTERNS[@]}"; do
    TAR_CMD+=("--exclude=${pattern}")
done

# Specify source directory context and content
TAR_CMD+=("-C" "$SOURCE_DIR" ".")

# Build the pipeline string array for clarity and execution
PIPELINE_STAGES=()
PIPELINE_STAGES+=("$(printf '%q ' "${TAR_CMD[@]}")") # Stage 0: tar

# Add pv if requested
if [[ "${USE_PV,,}" == "y" ]]; then
  PIPELINE_STAGES+=("| pv -s $SRC_SIZE_BYTES") # Stage 1: pv
fi

# Add mbuffer if requested
if [[ "${USE_MBUFFER,,}" == "y" ]]; then
  PIPELINE_STAGES+=("| mbuffer -m $MBUFFER_SIZE") # Stage 2 (or 1 if no pv): mbuffer
fi

# Add zstd command
PIPELINE_STAGES+=("| zstd -T0 -${COMPRESSION_LEVEL} -o '${DEST_FILE_PATH}'") # Final Stage: zstd

# Combine stages into a single command string for execution
FULL_PIPELINE_CMD="${PIPELINE_STAGES[*]}"

# Check if running inside screen/tmux
if [[ -z "$STY" &amp;&amp; -z "$TMUX" ]]; then
    echo "Warning: Not running inside screen or tmux."
    echo "For long operations, it's highly recommended to run this script"
    echo "within a 'screen' or 'tmux' session to prevent interruptions."
    read -p "Press Enter to continue anyway, or Ctrl+C to stop and restart in screen/tmux."
fi

echo "Starting backup process... This may take a very long time."
echo "Executing: ${FULL_PIPELINE_CMD}"

# Execute the pipeline using bash -c
# Capture PIPESTATUS immediately after execution
bash -c "$FULL_PIPELINE_CMD"; PIPE_STATUS=("${PIPESTATUS[@]}")
EXECUTION_EXIT_CODE=$? # Overall exit code (affected by pipefail)

# --- Post-Execution ---
print_separator
echo "Backup process finished."

# Check exit codes from the pipeline
FINAL_EXIT_CODE=0
STAGE_NAMES=("tar") # Start with tar
if [[ "${USE_PV,,}" == "y" ]]; then STAGE_NAMES+=("pv"); fi
if [[ "${USE_MBUFFER,,}" == "y" ]]; then STAGE_NAMES+=("mbuffer"); fi
STAGE_NAMES+=("zstd")

echo "Checking pipeline exit codes: ${PIPE_STATUS[*]}"
for i in "${!PIPE_STATUS[@]}"; do
    stage_name=${STAGE_NAMES[$i]:-"unknown_stage_$i"}
    exit_code=${PIPE_STATUS[$i]}
    if [ "$exit_code" -ne 0 ]; then
        echo "Error: Pipeline stage '${stage_name}' failed with exit code $exit_code." &gt;&amp;2
        FINAL_EXIT_CODE=$exit_code # Report the first non-zero exit code
    fi
done

# Double check overall exit code if pipefail was active
if [ "$FINAL_EXIT_CODE" -eq 0 ] &amp;&amp; [ "$EXECUTION_EXIT_CODE" -ne 0 ]; then
     echo "Warning: Overall pipeline check reported failure (exit code $EXECUTION_EXIT_CODE), but individual stages seemed okay. Check results carefully." &gt;&amp;2
     # Use the overall code if it indicates failure and individual checks didn't
     FINAL_EXIT_CODE=$EXECUTION_EXIT_CODE
fi


if [ "$FINAL_EXIT_CODE" -eq 0 ]; then
    echo "Pipeline completed successfully (basic check)."
    COMPRESSED_SIZE_BYTES=$(stat -c%s "$DEST_FILE_PATH" 2&gt;/dev/null)
    COMPRESSED_SIZE_HUMAN=$(numfmt --to=iec $COMPRESSED_SIZE_BYTES 2&gt;/dev/null || echo "N/A")
    echo "Archive saved to: ${DEST_FILE_PATH}"
    echo "Compressed size:  ${COMPRESSED_SIZE_HUMAN} (${COMPRESSED_SIZE_BYTES:-N/A} bytes)"
    print_separator
    echo "IMPORTANT: Please verify the integrity of the archive:"
    echo "1. Test compression: zstd -t '${DEST_FILE_PATH}'"
    echo "2. List contents (optional, takes time/CPU): tar --list -I zstd -f '${DEST_FILE_PATH}' | less"
    print_separator
else
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" &gt;&amp;2
    echo "!!! ERRORS DETECTED during the backup process (Exit Code: ${FINAL_EXIT_CODE})." &gt;&amp;2
    echo "!!! The archive file '${DEST_FILE_PATH}' may be incomplete or corrupt." &gt;&amp;2
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" &gt;&amp;2
    exit $FINAL_EXIT_CODE
fi

exit 0
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Fixing rk3588 Init Scripts</title><link href="https://ib.bsb.br/fixing-rk3588-init-scripts/" rel="alternate" type="text/html" title="Fixing rk3588 Init Scripts" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T21:01:34+00:00</updated><id>https://ib.bsb.br/fixing-rk3588-init-scripts</id><content type="html" xml:base="https://ib.bsb.br/fixing-rk3588-init-scripts/"><![CDATA[<h2 id="whats-happening">What’s Happening</h2>

<p>You encountered warnings about two scripts in your <code class="language-plaintext highlighter-rouge">/etc/init.d/</code> directory:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">mount_usb.sh</code></li>
  <li><code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code></li>
</ul>

<p>These warnings occurred because:</p>

<ol>
  <li>When enabling a service, Debian uses a tool called <code class="language-plaintext highlighter-rouge">insserv</code> to analyze all init scripts and determine their proper boot order.</li>
  <li>This tool requires LSB (Linux Standard Base) headers in each script to understand dependencies and run order.</li>
  <li>Your scripts lack these headers, causing the warnings.</li>
</ol>

<p><strong>Understanding the Core Problem</strong></p>

<ul>
  <li><strong>LSB Tags:</strong> SysV init scripts (those in <code class="language-plaintext highlighter-rouge">/etc/init.d/</code>) use special comment blocks (<code class="language-plaintext highlighter-rouge">### BEGIN INIT INFO ... ### END INIT INFO</code>) called LSB headers. These headers tell the system (via tools like <code class="language-plaintext highlighter-rouge">insserv</code> or <code class="language-plaintext highlighter-rouge">systemd</code>’s compatibility layer) about the service’s dependencies, what runlevels it should start/stop in, and provide descriptions. The warnings you saw mean these headers are missing or incomplete.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">mount_usb.sh</code>:</strong> This script’s logic (<code class="language-plaintext highlighter-rouge">if [ $ACTION == "add" ]</code>) indicates it’s designed to react to dynamic hardware events (USB stick plugged in/out). This is the job of <code class="language-plaintext highlighter-rouge">udev</code>, not the static boot sequence managed by init scripts.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code>:</strong> This script, which runs <code class="language-plaintext highlighter-rouge">quectel-CM</code> after a delay, is a more traditional candidate for a boot service, but it needs the proper LSB structure.</li>
</ul>

<hr />

<p><strong>Part 1: Refactoring <code class="language-plaintext highlighter-rouge">mount_usb.sh</code> (The <code class="language-plaintext highlighter-rouge">udev</code> Approach)</strong></p>

<p>This script should not be in <code class="language-plaintext highlighter-rouge">/etc/init.d/</code>. We’ll move its logic to a helper script called by a <code class="language-plaintext highlighter-rouge">udev</code> rule.</p>

<p><strong>Step 1.1: Create/Move the Helper Script</strong></p>

<p>Let’s place the helper script in <code class="language-plaintext highlighter-rouge">/usr/local/sbin/</code>, a standard location for locally installed system administration scripts.</p>

<p>Original script location: <code class="language-plaintext highlighter-rouge">/etc/init.d/mount_usb.sh</code>
New helper script location: <code class="language-plaintext highlighter-rouge">/usr/local/sbin/mount_usb_helper.sh</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> /etc/init.d/mount_usb.sh /usr/local/sbin/mount_usb_helper.sh
<span class="nb">sudo chmod</span> +x /usr/local/sbin/mount_usb_helper.sh
</code></pre></div></div>

<p>Now, replace the content of <code class="language-plaintext highlighter-rouge">/usr/local/sbin/mount_usb_helper.sh</code> with this improved version:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># Helper script to auto-mount/unmount USB VFAT drives, intended to be called by udev.</span>
<span class="c"># $1 (DEVNAME): Device name (e.g., sdb1) passed by the udev rule via %k.</span>
<span class="c"># $ACTION:      Environment variable (add/remove) set by udev.</span>

<span class="nv">DEVNAME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">1</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">MOUNT_BASE</span><span class="o">=</span><span class="s2">"/mnt/media"</span> <span class="c"># Or your preferred base path</span>
<span class="nv">MOUNT_POINT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_BASE</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">LOG_TAG</span><span class="o">=</span><span class="s2">"usb-mount-helper"</span> <span class="c"># For syslog</span>

<span class="c"># Function for logging to syslog (and optionally a dedicated file)</span>
log_message<span class="o">()</span> <span class="o">{</span>
    logger <span class="nt">-t</span> <span class="s2">"</span><span class="k">${</span><span class="nv">LOG_TAG</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="c"># -- ensures message isn't mistaken for options</span>
    <span class="c"># Optional: echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" &gt;&gt; "/var/log/${LOG_TAG}.log"</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$DEVNAME</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>log_message <span class="s2">"Error: Device name not provided. Exiting."</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Create the base mount directory if it doesn't exist</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_BASE</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_BASE</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"Error: Could not create base mount directory </span><span class="k">${</span><span class="nv">MOUNT_BASE</span><span class="k">}</span><span class="s2">. Exiting."</span>
        <span class="nb">exit </span>1
    <span class="k">fi
fi

if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"add"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>log_message <span class="s2">"Add event for /dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">."</span>

    <span class="c"># Check if already mounted using findmnt for reliability</span>
    <span class="k">if </span>findmnt <span class="nt">--source</span> <span class="s2">"/dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--target</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"/dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2"> already mounted at </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">. Skipping."</span>
        <span class="nb">exit </span>0
    <span class="k">fi

    if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_message <span class="s2">"Error: Could not create mount point </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">. Exiting."</span>
            <span class="nb">exit </span>1
        <span class="k">fi
    fi</span>

    <span class="c"># Give the system a moment if needed (sometimes helpful for newly appeared devices)</span>
    <span class="nb">sleep </span>1

    <span class="c"># Mount options:</span>
    <span class="c"># - iocharset=utf8: For correct filename encoding.</span>
    <span class="c"># - uid=$(id -u linaro), gid=$(id -g linaro): Mounts as user 'linaro'.</span>
    <span class="c">#   Replace 'linaro' with your desired username or a system user.</span>
    <span class="c">#   Alternatively, use gid=plugdev (if users are in plugdev group) and appropriate fmask/dmask.</span>
    <span class="c"># - fmask=0137, dmask=0027: File/Dir permissions.</span>
    <span class="c">#   fmask=0137 -&gt; owner=rw, group=r, other= --- (640)</span>
    <span class="c">#   dmask=0027 -&gt; owner=rwx, group=rx, other= --- (750)</span>
    <span class="c">#   Adjust as needed. E.g., fmask=0117, dmask=0007 for rwx for owner, rwx for group.</span>
    <span class="c"># - nofail: Prevents boot errors if USB device is problematic or not mountable.</span>
    <span class="c"># - flush: Mounts VFAT with frequent flushing, good for removable media.</span>
    <span class="c"># - sync: Can be used, but 'flush' is often preferred for VFAT on removable media.</span>
    <span class="c">#         Using 'sync' for all I/O can slow things down significantly.</span>
    <span class="c">#         The original script used 'sync' *after* mount, which is less effective.</span>
    <span class="nv">USER_NAME</span><span class="o">=</span><span class="s2">"linaro"</span> <span class="c"># CHANGE THIS to your target user if needed</span>
    <span class="nv">USER_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$USER_NAME</span><span class="s2">"</span><span class="si">)</span>
    <span class="nv">GROUP_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="s2">"</span><span class="nv">$USER_NAME</span><span class="s2">"</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$USER_ID</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$GROUP_ID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"Error: Could not determine UID/GID for user '</span><span class="nv">$USER_NAME</span><span class="s2">'. Mounting with defaults."</span>
        mount <span class="nt">-t</span> vfat <span class="nt">-o</span> <span class="s2">"iocharset=utf8,nofail,flush"</span> <span class="s2">"/dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">else
        </span>mount <span class="nt">-t</span> vfat <span class="nt">-o</span> <span class="s2">"iocharset=utf8,uid=</span><span class="k">${</span><span class="nv">USER_ID</span><span class="k">}</span><span class="s2">,gid=</span><span class="k">${</span><span class="nv">GROUP_ID</span><span class="k">}</span><span class="s2">,fmask=0137,dmask=0027,nofail,flush"</span> <span class="s2">"/dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi

    if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"Successfully mounted /dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2"> to </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">."</span>
    <span class="k">else
        </span>log_message <span class="s2">"Error: Failed to mount /dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2"> to </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">. Cleaning up directory."</span>
        <span class="nb">rmdir</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> 2&gt;/dev/null <span class="c"># Attempt to remove if empty</span>
        <span class="nb">exit </span>1
    <span class="k">fi

elif</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"remove"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>log_message <span class="s2">"Remove event for device that might be mounted at </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2"> (was /dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">)."</span>

    <span class="c"># Check if the specific device is mounted at the expected point</span>
    <span class="k">if </span>findmnt <span class="nt">--source</span> <span class="s2">"/dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--target</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then
        </span>umount <span class="nt">-f</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="c"># Force unmount</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_message <span class="s2">"Successfully unmounted </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">."</span>
        <span class="k">else
            </span>log_message <span class="s2">"Warning: Failed to unmount </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">. Attempting lazy unmount."</span>
            umount <span class="nt">-l</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="c"># Lazy unmount as a fallback</span>
            <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span>log_message <span class="s2">"Successfully lazy unmounted </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">."</span>
            <span class="k">else
                </span>log_message <span class="s2">"Error: Failed to lazy unmount </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">."</span>
            <span class="k">fi
        fi
    elif </span>findmnt <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then</span>
        <span class="c"># The mount point exists but isn't our device, or our device was already unmounted.</span>
        log_message <span class="s2">"Mount point </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2"> is in use by another device or /dev/</span><span class="k">${</span><span class="nv">DEVNAME</span><span class="k">}</span><span class="s2"> already unmounted. Won't force unmount other devices."</span>
    <span class="k">else
        </span>log_message <span class="s2">"Mount point </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2"> not found or not mounted. Skipping unmount logic."</span>
    <span class="k">fi</span>

    <span class="c"># Remove the directory if it exists and is empty</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">-A</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># Check if directory is empty</span>
            <span class="nb">rmdir</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">"</span>
            <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span>log_message <span class="s2">"Successfully removed directory </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2">."</span>
            <span class="k">else
                </span>log_message <span class="s2">"Note: Directory </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2"> not empty after unmount or error removing."</span>
            <span class="k">fi
        else
            </span>log_message <span class="s2">"Note: Directory </span><span class="k">${</span><span class="nv">MOUNT_POINT</span><span class="k">}</span><span class="s2"> is not empty. Not removing."</span>
        <span class="k">fi
    fi
else
    </span>log_message <span class="s2">"Warning: Unknown or no ACTION ('</span><span class="nv">$ACTION</span><span class="s2">') for device /dev/</span><span class="nv">$DEVNAME</span><span class="s2">. Nothing to do."</span>
<span class="k">fi

</span><span class="nb">exit </span>0
</code></pre></div></div>

<p><strong>Step 1.2: Create the <code class="language-plaintext highlighter-rouge">udev</code> Rule</strong></p>

<p>Create a new file named <code class="language-plaintext highlighter-rouge">/etc/udev/rules.d/85-automount-usb-vfat.rules</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Udev rule for automatically mounting/unmounting VFAT USB block devices

# Match USB block devices (e.g., partitions on USB sticks) that are VFAT
# SUBSYSTEMS=="usb": Ensures the device is on the USB bus.
# SUBSYSTEM=="block": Ensures it's a block device.
# DRIVERS=="sd": Further refinement for SCSI-like devices (common for USB storage).
# KERNEL=="sd[a-z]*[0-9]": Matches partitions like sdb1, sdc1. Using sd[a-z]* instead of sd[b-z] for more generality if system disk is nvme.
# ENV{ID_FS_TYPE}=="vfat": Only act on VFAT filesystems.
# ACTION=="add": Trigger on device addition.
# RUN+="/usr/local/sbin/mount_usb_helper.sh %k": Execute helper. %k is kernel name (e.g., sdb1).
ACTION=="add", SUBSYSTEMS=="usb", SUBSYSTEM=="block", DRIVERS=="sd", KERNEL=="sd[a-z]*[0-9]", ENV{ID_FS_TYPE}=="vfat", RUN+="/usr/local/sbin/mount_usb_helper.sh %k"

# Rule for removal. Simpler match as we mainly care about the KERNEL name passed to the script.
ACTION=="remove", SUBSYSTEMS=="usb", SUBSYSTEM=="block", DRIVERS=="sd", KERNEL=="sd[a-z]*[0-9]", RUN+="/usr/local/sbin/mount_usb_helper.sh %k"

</code></pre></div></div>
<p><em>Self-correction:</em> The <code class="language-plaintext highlighter-rouge">KERNEL=="sd[a-z]*[0-9]"</code> combined with <code class="language-plaintext highlighter-rouge">SUBSYSTEMS=="usb"</code> is generally safe. If your main system disk is also USB and named e.g. <code class="language-plaintext highlighter-rouge">sda</code>, you might add <code class="language-plaintext highlighter-rouge">ATTRS{removable}=="1"</code> to only target removable USB block devices, or refine the <code class="language-plaintext highlighter-rouge">KERNEL</code> pattern like <code class="language-plaintext highlighter-rouge">sd[b-z]*[0-9]</code>.</p>

<p><strong>Step 1.3: Apply <code class="language-plaintext highlighter-rouge">udev</code> Changes</strong></p>
<ol>
  <li>Reload <code class="language-plaintext highlighter-rouge">udev</code> rules:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>udevadm control <span class="nt">--reload-rules</span>
</code></pre></div>    </div>
  </li>
  <li>Trigger <code class="language-plaintext highlighter-rouge">udev</code> for existing devices (or just re-plug your USB device):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>udevadm trigger
</code></pre></div>    </div>
    <p>Now, when you plug in a VFAT USB drive, it should be automatically mounted by your user <code class="language-plaintext highlighter-rouge">linaro</code> (or the user you configured) under <code class="language-plaintext highlighter-rouge">/mnt/media/DEVICE_NAME</code>. Logs will go to syslog tagged with <code class="language-plaintext highlighter-rouge">usb-mount-helper</code>.</p>
  </li>
</ol>

<hr />

<p><strong>Part 2: Refactoring <code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code> (SysV init script with LSB)</strong></p>

<p>This script will remain in <code class="language-plaintext highlighter-rouge">/etc/init.d/</code> but will be made LSB-compliant.</p>

<p><strong>Step 2.1: Edit <code class="language-plaintext highlighter-rouge">/etc/init.d/gobinet_boot.sh</code></strong></p>

<p>Replace its content with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="c">### BEGIN INIT INFO</span>
<span class="c"># Provides:          gobinet-boot</span>
<span class="c"># Required-Start:    $remote_fs $syslog</span>
<span class="c"># Required-Stop:     $remote_fs $syslog</span>
<span class="c"># Should-Start:      $network # If quectel-CM *needs* basic networking already up.</span>
<span class="c"># Default-Start:     2 3 4 5</span>
<span class="c"># Default-Stop:      0 1 6</span>
<span class="c"># Short-Description: Initialize Quectel GobiNet device</span>
<span class="c"># Description:       This service waits for a specified time and then runs</span>
<span class="c">#                    the quectel-CM command to initialize GobiNet hardware.</span>
<span class="c">#                    The Quectel module might provide network connectivity.</span>
<span class="c">### END INIT INFO</span>

<span class="c"># PATH should only include /usr/* if it runs after the mountnfs.sh script</span>
<span class="nv">PATH</span><span class="o">=</span>/sbin:/usr/sbin:/bin:/usr/bin
<span class="nv">DESC</span><span class="o">=</span><span class="s2">"Quectel GobiNet initialization"</span>
<span class="nv">NAME</span><span class="o">=</span>gobinet-boot <span class="c"># LSB 'Provides' name</span>
<span class="nv">DAEMON_COMMAND</span><span class="o">=</span>/sbin/quectel-CM <span class="c"># The command to run</span>
<span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/gobinet_boot.sh <span class="c"># Actual script name</span>
<span class="nv">PIDFILE</span><span class="o">=</span>/var/run/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>.pid
<span class="nv">LOGFILE</span><span class="o">=</span>/var/log/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>.log
<span class="nv">SLEEP_DURATION</span><span class="o">=</span>60 <span class="c"># Original sleep duration</span>

<span class="c"># Exit if the command is not installed</span>
<span class="o">[</span> <span class="nt">-x</span> <span class="s2">"</span><span class="nv">$DAEMON_COMMAND</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$DAEMON_COMMAND</span><span class="s2"> not found or not executable."</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

<span class="c"># Read configuration variable file if it is present</span>
<span class="o">[</span> <span class="nt">-r</span> /etc/default/<span class="nv">$NAME</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">.</span> /etc/default/<span class="nv">$NAME</span>

<span class="c"># Load the VERBOSE setting and other rcS variables</span>
<span class="nb">.</span> /lib/init/vars.sh

<span class="c"># Define LSB log_* functions.</span>
<span class="nb">.</span> /lib/lsb/init-functions

<span class="c"># Function to log messages with timestamp</span>
_log_msg<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$LOGFILE</span><span class="s2">"</span>
    log_action_msg <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="c"># For console via LSB</span>
<span class="o">}</span>

<span class="c">#</span>
<span class="c"># Function that starts the service</span>
<span class="c">#</span>
do_start<span class="o">()</span>
<span class="o">{</span>
    <span class="c"># Check if already running based on PID file and process</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> ps <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) is already running (PID </span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$PIDFILE</span><span class="si">)</span><span class="s2">)."</span>
        <span class="k">return </span>1 <span class="c"># LSB code for already running</span>
    <span class="k">fi

    </span>_log_msg <span class="s2">"Starting </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">)..."</span>

    <span class="c"># This subshell runs the sleep and the command in the background.</span>
    <span class="c"># IMPORTANT: This PID management is basic. If quectel-CM is a true daemon,</span>
    <span class="c"># it should create its own PID file. If it does, modify this script to use that.</span>
    <span class="o">(</span>
        _log_msg <span class="s2">"Subshell: Sleeping for </span><span class="nv">$SLEEP_DURATION</span><span class="s2"> seconds before running </span><span class="nv">$DAEMON_COMMAND</span><span class="s2">."</span>
        <span class="nb">sleep</span> <span class="s2">"</span><span class="nv">$SLEEP_DURATION</span><span class="s2">"</span>
        _log_msg <span class="s2">"Subshell: Executing </span><span class="nv">$DAEMON_COMMAND</span><span class="s2">."</span>
        <span class="c"># Redirect quectel-CM's stdout and stderr to the log file</span>
        <span class="s2">"</span><span class="nv">$DAEMON_COMMAND</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$LOGFILE</span><span class="s2">"</span> 2&gt;&amp;1
        _log_msg <span class="s2">"Subshell: </span><span class="nv">$DAEMON_COMMAND</span><span class="s2"> finished or daemonized. Subshell exiting."</span>
        <span class="c"># If quectel-CM daemonizes and creates its own PID, this outer PID is not useful after this point.</span>
    <span class="o">)</span> &amp;
    <span class="c"># Store the PID of the backgrounded subshell</span>
    <span class="nb">echo</span> <span class="nv">$!</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) started (subshell PID </span><span class="nv">$!</span><span class="s2">). Check </span><span class="nv">$LOGFILE</span><span class="s2"> for </span><span class="nv">$DAEMON_COMMAND</span><span class="s2"> output."</span>
        <span class="k">return </span>0 <span class="c"># Success</span>
    <span class="k">else
        </span>_log_msg <span class="s2">"Failed to start </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) subshell."</span>
        <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span> <span class="c"># Clean up PID file on failure</span>
        <span class="k">return </span>2 <span class="c"># LSB code for generic error</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c">#</span>
<span class="c"># Function that stops the service</span>
<span class="c">#</span>
do_stop<span class="o">()</span>
<span class="o">{</span>
    _log_msg <span class="s2">"Stopping </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">)..."</span>

    <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) PID file not found. Assuming not running or already stopped."</span>
        <span class="k">return </span>1 <span class="c"># LSB code for not running</span>
    <span class="k">fi

    </span><span class="nv">PID_TO_KILL</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">!</span> ps <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$PID_TO_KILL</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) (PID </span><span class="nv">$PID_TO_KILL</span><span class="s2"> from PID file) not running. Removing stale PID file."</span>
        <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span>
        <span class="k">return </span>1 <span class="c"># LSB code for not running</span>
    <span class="k">fi</span>

    <span class="c"># Attempt to stop the process found in the PID file.</span>
    <span class="c"># This will kill the subshell. If quectel-CM daemonized and detached,</span>
    <span class="c"># this won't stop the actual quectel-CM daemon unless it's a child of the subshell</span>
    <span class="c"># and gets killed when the subshell (its parent) is terminated.</span>
    <span class="c"># For a true daemon, you'd need to know its actual PID or have it respond to signals.</span>
    <span class="c"># The `start-stop-daemon --stop` utility is more robust if the process behaves like a daemon.</span>
    <span class="c"># However, we are targeting the subshell's PID here.</span>
    <span class="nb">kill</span> <span class="s2">"</span><span class="nv">$PID_TO_KILL</span><span class="s2">"</span>
    <span class="c"># Allow some time for the process to terminate</span>
    <span class="nb">sleep </span>2

    <span class="k">if</span> <span class="o">!</span> ps <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$PID_TO_KILL</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) (PID </span><span class="nv">$PID_TO_KILL</span><span class="s2">) stopped successfully."</span>
        <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span>
        <span class="k">return </span>0 <span class="c"># Success</span>
    <span class="k">else
        </span>_log_msg <span class="s2">"Failed to stop </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) (PID </span><span class="nv">$PID_TO_KILL</span><span class="s2">) with SIGTERM. Sending SIGKILL."</span>
        <span class="nb">kill</span> <span class="nt">-9</span> <span class="s2">"</span><span class="nv">$PID_TO_KILL</span><span class="s2">"</span>
        <span class="nb">sleep </span>1
        <span class="k">if</span> <span class="o">!</span> ps <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$PID_TO_KILL</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
            </span>_log_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) (PID </span><span class="nv">$PID_TO_KILL</span><span class="s2">) killed successfully."</span>
            <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span>
            <span class="k">return </span>0 <span class="c"># Success</span>
        <span class="k">else
            </span>_log_msg <span class="s2">"Error: Failed to kill </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) (PID </span><span class="nv">$PID_TO_KILL</span><span class="s2">) even with SIGKILL."</span>
            <span class="k">return </span>2 <span class="c"># LSB code for generic error</span>
        <span class="k">fi
    fi</span>
<span class="o">}</span>

<span class="c">#</span>
<span class="c"># Function that gets the status of the service</span>
<span class="c">#</span>
do_status<span class="o">()</span>
<span class="o">{</span>
    <span class="c"># status_of_proc -p "$PIDFILE" "$DAEMON_COMMAND" "$NAME"</span>
    <span class="c"># The above LSB function is good if DAEMON_COMMAND is the actual long-running process name.</span>
    <span class="c"># Since we are managing a subshell, we'll check the PID from the file.</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">SERVICE_PID</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span><span class="si">)</span>
        <span class="k">if </span>ps <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$SERVICE_PID</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
            </span>log_success_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) is running with PID </span><span class="nv">$SERVICE_PID</span><span class="s2">."</span>
            <span class="c"># You could add more info here, e.g., check if quectel-CM is also running if it's a child.</span>
            <span class="nb">exit </span>0 <span class="c"># LSB code for running</span>
        <span class="k">else
            </span>log_failure_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) PID file exists, but process </span><span class="nv">$SERVICE_PID</span><span class="s2"> is not running. Stale PID file?"</span>
            <span class="nb">exit </span>1 <span class="c"># LSB code for not running but PID file exists (stale)</span>
        <span class="k">fi
    else
        </span>log_failure_msg <span class="s2">"</span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">) is not running (no PID file)."</span>
        <span class="nb">exit </span>3 <span class="c"># LSB code for not running</span>
    <span class="k">fi</span>
<span class="o">}</span>


<span class="k">case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in
  </span>start<span class="p">)</span>
    do_start
    <span class="nb">exit</span> <span class="nv">$?</span>
    <span class="p">;;</span>
  stop<span class="p">)</span>
    do_stop
    <span class="nb">exit</span> <span class="nv">$?</span>
    <span class="p">;;</span>
  status<span class="p">)</span>
    do_status
    <span class="p">;;</span>
  restart|force-reload<span class="p">)</span>
    _log_msg <span class="s2">"Restarting </span><span class="nv">$DESC</span><span class="s2"> (</span><span class="nv">$NAME</span><span class="s2">)..."</span>
    do_stop
    <span class="c"># Allow some time for graceful shutdown before restarting</span>
    <span class="nb">sleep </span>2
    do_start
    <span class="nb">exit</span> <span class="nv">$?</span>
    <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$SCRIPTNAME</span><span class="s2"> {start|stop|status|restart}"</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">exit </span>3
    <span class="p">;;</span>
<span class="k">esac</span>

<span class="nb">exit </span>0
</code></pre></div></div>

<p><strong>Step 2.2: Make the script executable</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> +x /etc/init.d/gobinet_boot.sh
</code></pre></div></div>

<p><strong>Step 2.3: Test the script</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> /etc/init.d/gobinet_boot.sh start
<span class="nb">sudo</span> /etc/init.d/gobinet_boot.sh status
<span class="c"># Wait for more than SLEEP_DURATION to see if quectel-CM runs</span>
<span class="nb">sudo</span> /etc/init.d/gobinet_boot.sh status
<span class="nb">sudo</span> /etc/init.d/gobinet_boot.sh stop
</code></pre></div></div>
<p>Check <code class="language-plaintext highlighter-rouge">/var/log/gobinet-boot.log</code> for output.</p>

<p><strong>Step 2.4: Update System’s Understanding of the Service</strong>
If you had previously enabled it with <code class="language-plaintext highlighter-rouge">systemd-sysv-install</code> or <code class="language-plaintext highlighter-rouge">update-rc.d</code>, systemd might still have an old version of its generated unit.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="c"># If you want to ensure it's enabled for boot (using systemd's SysV generator):</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>gobinet_boot.sh <span class="c"># Or it might be gobinet-boot based on 'Provides'</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">insserv</code> warnings for <code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code> should now be gone.</p>

<p><strong>Important Notes for <code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code>:</strong></p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">quectel-CM</code> Behavior:</strong> The provided script assumes <code class="language-plaintext highlighter-rouge">quectel-CM</code> is a command that either:
    <ol>
      <li>Initializes hardware and then exits.</li>
      <li>Starts its own daemon process and detaches correctly (in which case the PID in <code class="language-plaintext highlighter-rouge">/var/run/gobinet-boot.pid</code> is only for the initial subshell).
If <code class="language-plaintext highlighter-rouge">quectel-CM</code> is meant to run continuously as a foreground process <em>managed by the init script</em>, the init script would need to be more complex, likely using <code class="language-plaintext highlighter-rouge">start-stop-daemon</code> to manage it directly.</li>
    </ol>
  </li>
  <li><strong>Dependencies (<code class="language-plaintext highlighter-rouge">Required-Start</code>, <code class="language-plaintext highlighter-rouge">Should-Start</code>):</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">$remote_fs $syslog</code>: Standard, almost always needed.</li>
      <li><code class="language-plaintext highlighter-rouge">$network</code>: Added as <code class="language-plaintext highlighter-rouge">Should-Start</code>. If <code class="language-plaintext highlighter-rouge">/sbin/quectel-CM</code> <em>needs</em> the network to be up before it can configure the Quectel modem, this is appropriate. If the Quectel modem <em>provides</em> a primary network interface, then this script should likely start <em>before</em> the generic <code class="language-plaintext highlighter-rouge">$network</code> target, or it might be part of a more specific modem management service. You might need to remove <code class="language-plaintext highlighter-rouge">$network</code> or change it to something like <code class="language-plaintext highlighter-rouge">Before=network.target</code> in a systemd unit.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">sleep 60</code>:</strong> This mimics the original script’s delay. In a production environment, especially with systemd, you’d ideally look for ways to trigger <code class="language-plaintext highlighter-rouge">quectel-CM</code> based on device availability or other events rather than a fixed sleep, if possible.</li>
</ul>

<hr />

<p><strong>Part 3: The Systemd Native Unit Approach (Recommended for Debian Bullseye)</strong></p>

<p>While the above steps fix the LSB warnings for your SysV init scripts, Debian Bullseye uses <code class="language-plaintext highlighter-rouge">systemd</code> as its primary init system. Creating native <code class="language-plaintext highlighter-rouge">systemd</code> unit files is the modern, more robust, and flexible way to manage services.</p>

<p><strong>3.1 For <code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code> functionality -&gt; <code class="language-plaintext highlighter-rouge">gobinet-boot.service</code></strong></p>

<p>Create <code class="language-plaintext highlighter-rouge">/etc/systemd/system/gobinet-boot.service</code>:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">Quectel GobiNet Initialization Service</span>
<span class="py">Documentation</span><span class="p">=</span><span class="s">man:quectel-CM(8) # If a man page exists</span>
<span class="c"># If it needs to run after basic network configuration is attempted:
# After=network.target syslog.target
# If it needs to run before network-online.target is reached:
# Before=network-online.target
# If the GobiNet modem *provides* network, dependencies might be more complex
# or it might be better integrated with ModemManager or netplan/ifupdown.
# For now, let's assume it runs after basic system services are up.
</span><span class="py">After</span><span class="p">=</span><span class="s">syslog.target local-fs.target</span>

<span class="nn">[Service]</span>
<span class="py">Type</span><span class="p">=</span><span class="s">oneshot # Assumes quectel-CM initializes and exits, or is a self-daemonizing script.</span>
<span class="py">RemainAfterExit</span><span class="p">=</span><span class="s">yes # If Type=oneshot, and we consider the 'service' up after the command.</span>
<span class="py">ExecStartPre</span><span class="p">=</span><span class="s">/bin/sleep 60 # The original delay</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/sbin/quectel-CM</span>
<span class="py">StandardOutput</span><span class="p">=</span><span class="s">journal+console # Log to systemd journal and console</span>
<span class="py">StandardError</span><span class="p">=</span><span class="s">journal+console</span>

<span class="c"># If quectel-CM is a true daemon that forks and manages its own PID:
# Type=forking
# PIDFile=/var/run/quectel-cm.pid # Path to the PID file quectel-CM creates
# ExecStart=/sbin/quectel-CM &lt;options_if_any&gt;
# GuessMainPID=no # If PIDFile is accurate
</span>
<span class="c"># If quectel-CM runs in foreground and systemd should manage it:
# Type=simple
# ExecStart=/sbin/quectel-CM
# Restart=on-failure # Optional: restart if it fails
</span>
<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target # Start when multi-user target is reached</span>
</code></pre></div></div>

<p><strong>To use this systemd service:</strong></p>
<ol>
  <li>Create the file <code class="language-plaintext highlighter-rouge">/etc/systemd/system/gobinet-boot.service</code> with the content above.</li>
  <li><strong>Disable the SysV init script if you previously enabled it:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable gobinet_boot.sh <span class="c"># Or update-rc.d gobinet_boot.sh remove</span>
<span class="nb">sudo rm</span> /etc/init.d/gobinet_boot.sh <span class="c"># Optionally remove the old script</span>
</code></pre></div>    </div>
  </li>
  <li>Reload systemd: <code class="language-plaintext highlighter-rouge">sudo systemctl daemon-reload</code></li>
  <li>Enable the new service: <code class="language-plaintext highlighter-rouge">sudo systemctl enable gobinet-boot.service</code></li>
  <li>Start it: <code class="language-plaintext highlighter-rouge">sudo systemctl start gobinet-boot.service</code></li>
  <li>Check status: <code class="language-plaintext highlighter-rouge">sudo systemctl status gobinet-boot.service</code> and <code class="language-plaintext highlighter-rouge">journalctl -u gobinet-boot.service</code></li>
</ol>

<p><strong>Advantages of systemd unit for <code class="language-plaintext highlighter-rouge">gobinet-boot</code>:</strong></p>
<ul>
  <li><strong>Clearer Dependencies:</strong> <code class="language-plaintext highlighter-rouge">After=</code>, <code class="language-plaintext highlighter-rouge">Before=</code>, <code class="language-plaintext highlighter-rouge">Wants=</code>, <code class="language-plaintext highlighter-rouge">Requires=</code> offer fine-grained control.</li>
  <li><strong>Better Process Management:</strong> <code class="language-plaintext highlighter-rouge">Type=</code> (simple, forking, oneshot, etc.) correctly defines how systemd handles the process.</li>
  <li><strong>Resource Control:</strong> Can set CPU/memory limits, etc.</li>
  <li><strong>Integrated Logging:</strong> Output goes directly to the systemd journal.</li>
  <li><strong>Simpler Syntax:</strong> Often more straightforward than complex shell scripting for service management.</li>
</ul>

<p><strong>3.2 For <code class="language-plaintext highlighter-rouge">mount_usb.sh</code> functionality (udev is still key)</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">udev</code> approach for <code class="language-plaintext highlighter-rouge">mount_usb.sh</code> is already good and leverages <code class="language-plaintext highlighter-rouge">systemd-udevd.service</code>. You don’t typically create a separate <code class="language-plaintext highlighter-rouge">.service</code> file for each <code class="language-plaintext highlighter-rouge">udev</code> <code class="language-plaintext highlighter-rouge">RUN+=</code> script unless the script needs to start a long-running service managed by systemd. Your helper script is short-lived, so the current udev method is fine.</p>

<p><em>Advanced Systemd Automount:</em>
For truly on-demand mounting managed by systemd (where the mount only happens when the directory is accessed), you could explore systemd <code class="language-plaintext highlighter-rouge">.automount</code> and <code class="language-plaintext highlighter-rouge">.mount</code> units. This is more complex to set up than the udev script but offers different benefits. For your current VFAT use case, the udev + helper script is a good balance of simplicity and functionality.</p>

<hr />

<p><strong>Summary of Recommendations:</strong></p>

<ol>
  <li><strong>For <code class="language-plaintext highlighter-rouge">mount_usb.sh</code>:</strong>
    <ul>
      <li>Definitely move it out of <code class="language-plaintext highlighter-rouge">/etc/init.d/</code>.</li>
      <li>Use the <code class="language-plaintext highlighter-rouge">udev</code> rule and the improved <code class="language-plaintext highlighter-rouge">/usr/local/sbin/mount_usb_helper.sh</code> script provided above. This addresses the LSB warnings by removing the script from <code class="language-plaintext highlighter-rouge">insserv</code>’s scope and makes it function correctly.</li>
    </ul>
  </li>
  <li><strong>For <code class="language-plaintext highlighter-rouge">gobinet_boot.sh</code>:</strong>
    <ul>
      <li><strong>Option A (Improved SysV):</strong> Use the refactored <code class="language-plaintext highlighter-rouge">/etc/init.d/gobinet_boot.sh</code> provided. This will fix the LSB warnings.</li>
      <li><strong>Option B (Recommended - Systemd Native):</strong> Create the <code class="language-plaintext highlighter-rouge">gobinet-boot.service</code> unit file as described. Disable/remove the old SysV script. This is the more modern and robust solution for Debian Bullseye.</li>
    </ul>
  </li>
</ol>

<p>By implementing these changes, your system will be cleaner, the <code class="language-plaintext highlighter-rouge">insserv</code> warnings will be resolved, and your scripts (or their systemd equivalents) will function more reliably and correctly. Remember to carefully test the behavior of <code class="language-plaintext highlighter-rouge">quectel-CM</code> to choose the best <code class="language-plaintext highlighter-rouge">Type=</code> and PID management strategy if you opt for the systemd unit.</p>]]></content><author><name></name></author><category term="aid&gt;linux&gt;hardware&gt;rockchip" /></entry><entry><title type="html">compare</title><link href="https://ib.bsb.br/compare/" rel="alternate" type="text/html" title="compare" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T17:22:49+00:00</updated><id>https://ib.bsb.br/compare</id><content type="html" xml:base="https://ib.bsb.br/compare/"><![CDATA[<section class="code-block-container" role="group" aria-label="Markdown Code Block" data-filename="markdown_code_block.md" data-code="The task is to compare several scripts for their &quot;robustness&quot; and &quot;featurefullness&quot; and then identify the &quot;best one, the most effective one.&quot;

To perform the requested comparison and identify the most effective script, here it is the content of those scripts:

```script1

```

~~~script2

~~~

```script3

```

~~~script4

~~~

Here it is the outline of the methodology for you, the AI ASSISTANT, to employ to approach that task. Your analysis must focus on the following key criteria and extend to other critical aspects of script quality:

**1. Assessing Robustness:**

Robustness refers to how well a script handles errors, unexpected inputs, and varying operational conditions without failing, producing incorrect results, or causing unintended side effects. The AI ASSITANT must examine:

*   **Error Handling and Propagation:**
    *   Does the script explicitly check for command execution failures (e.g., using `if ! command; then ...` or checking the exit status `$?`)?
    *   Does it utilize options like `set -e` (exit immediately if a command exits with a non-zero status), `set -u` (treat unset variables as an error when performing expansion), and `set -o pipefail` (a pipeline&#39;s return status is the value of the last command to exit with a non-zero status, or zero if all commands exit successfully)?
    *   Are `trap` commands used effectively for cleanup (e.g., removing temporary files) on script exit, interruption, or specific signals?
*   **Input Validation:**
    *   If the script accepts arguments or user input, does it rigorously validate them? This includes checking for the correct number of arguments, expected data types/formats, valid value ranges, and sanitizing inputs to prevent security issues (see Security section).
    *   How does it behave with missing, malformed, excessive, or unexpected inputs? Does it provide clear error messages and exit gracefully?
*   **Edge Case and Boundary Condition Handling:**
    *   Does the script account for potential edge cases, such as empty input files, files with special characters in names, zero-value inputs, or specific environmental conditions that might affect its logic?
*   **Idempotence (if applicable):**
    *   If the script is intended to make system changes (e.g., configuration, file creation), can it be run multiple times with the same initial state and produce the same end state without causing errors or unintended cumulative effects on subsequent runs?
*   **Resource Management:**
    *   If the script handles resources like temporary files, network connections, or background processes, does it manage them correctly, ensuring they are released or cleaned up appropriately to prevent leaks or conflicts?

**2. Assessing Featurefullness:**

Featurefullness relates to the breadth, depth, and relevance of the script&#39;s capabilities in relation to its intended purpose. The AI ASSITANT must evaluate:

*   **Scope and Relevance of Functionality:**
    *   What specific tasks does the script perform? How many distinct operations or functionalities does it offer?
    *   Does the feature set directly support the script&#39;s core purpose, or does it include extraneous features that add complexity without significant value?
    *   Does it comprehensively address the problem it&#39;s designed to solve?
*   **Flexibility and Configurability:**
    *   Does the script offer command-line options or arguments to modify its behavior in meaningful ways?
    *   Can its operation be customized through well-documented configuration files or environment variables?
*   **User Experience (UX):**
    *   If interactive, are prompts clear and unambiguous?
    *   Does it provide helpful output, status messages, and clear usage instructions (e.g., a `--help` or `-h` option)?
*   **Integration Capabilities:**
    *   Can the script easily integrate with other tools or workflows? For example, does it correctly handle standard input (stdin), produce parseable standard output (stdout), and use standard error (stderr) appropriately for diagnostic messages?

**3. Assessing Readability and Maintainability:**

A script that is difficult to understand is also difficult to debug, modify, and verify for correctness, impacting its long-term robustness and utility.

*   **Code Structure and Organization:**
    *   Is the script logically structured, perhaps using functions for modularity and to avoid code duplication?
    *   Is the flow of execution easy to follow?
*   **Clarity of Naming:**
    *   Are variable names, function names, and comments clear, descriptive, and consistent?
*   **Use of Comments:**
    *   Are there sufficient comments to explain complex logic, non-obvious operations, or the purpose of different sections, without cluttering the code?
*   **Consistency in Style:**
    *   Does the script follow a consistent coding style (indentation, spacing, quoting)?
*   **Simplicity:**
    *   Does the script achieve its goals in a straightforward manner, or is it overly complex and convoluted?

**4. Assessing Performance and Efficiency:**

Depending on the script&#39;s purpose (e.g., processing large datasets, running frequently in automated systems), performance can be a critical factor.

*   **Choice of Commands and Techniques:**
    *   Does it use efficient commands and code-native builtins where appropriate (e.g., avoiding unnecessary external process forks by using code-native builtins like `read` or parameter expansions instead of `sed`/`awk` for simple tasks)?
    *   For text processing, are efficient tools like `awk`, `sed`, or `grep` used effectively, rather than less efficient shell loops for large data?
*   **Handling of Large Data/Files:**
    *   If the script processes large files or data volumes, does it do so in a memory-efficient way (e.g., processing line-by-line instead of reading entire files into memory if not needed)?
*   **Resource Consumption:**
    *   Are there any obvious bottlenecks or excessive consumption of CPU, memory, or I/O resources?

**5. Assessing Portability and Dependencies:**

A script&#39;s utility can be enhanced if it can run reliably across different environments.

*   **Dependency Management:**
    *   Does the script clearly state its dependencies on external commands or tools?
    *   Does it check for the existence and (if necessary) the correct version of these dependencies at runtime, providing informative errors if they are not met?
    *   Does it rely on common utilities or more obscure ones that might not be universally available?

**Determining the &quot;Best&quot; or &quot;Most Effective&quot; Script:**

After assessing each script against these criteria, determining the &quot;best&quot; or &quot;most effective&quot; one is not always an absolute judgment. It heavily depends on the **specific requirements, priorities, and context** for which the script is intended.

*   **Criticality:** For a script running in a critical production system, **robustness and security** would likely be the highest priorities, even if it means sacrificing some featurefullness or development speed.
*   **User Expertise &amp; Use Case:** A quick utility script for personal use by an expert might prioritize development speed and featurefullness for a specific task, with less emphasis on exhaustive error handling for every conceivable edge case.
*   **Lifespan and Maintenance:** For a script intended for long-term use and potential modification by multiple people, **readability and maintainability** become crucial.
*   **Performance Needs:** If a script processes large data volumes or runs very frequently, **performance and efficiency** might outweigh other factors, provided core correctness is maintained.

Generally, the &quot;most effective&quot; script is one that:
*   Reliably and securely performs its intended functions.
*   Offers a feature set that is well-aligned with its purpose without unnecessary complexity.
*   Is understandable, maintainable, and performs adequately for its context.
*   Handles errors gracefully and provides useful feedback.

To provide a definitive comparison, the AI ASSITANT might also conceptually involve the use of static analysis tools and a systematic testing strategy, if possible." data-download-link="" data-download-label="Download Markdown">
  <code class="language-markdown">The task is to compare several scripts for their &quot;robustness&quot; and &quot;featurefullness&quot; and then identify the &quot;best one, the most effective one.&quot;

To perform the requested comparison and identify the most effective script, here it is the content of those scripts:

```script1

```

~~~script2

~~~

```script3

```

~~~script4

~~~

Here it is the outline of the methodology for you, the AI ASSISTANT, to employ to approach that task. Your analysis must focus on the following key criteria and extend to other critical aspects of script quality:

**1. Assessing Robustness:**

Robustness refers to how well a script handles errors, unexpected inputs, and varying operational conditions without failing, producing incorrect results, or causing unintended side effects. The AI ASSITANT must examine:

*   **Error Handling and Propagation:**
    *   Does the script explicitly check for command execution failures (e.g., using `if ! command; then ...` or checking the exit status `$?`)?
    *   Does it utilize options like `set -e` (exit immediately if a command exits with a non-zero status), `set -u` (treat unset variables as an error when performing expansion), and `set -o pipefail` (a pipeline&#39;s return status is the value of the last command to exit with a non-zero status, or zero if all commands exit successfully)?
    *   Are `trap` commands used effectively for cleanup (e.g., removing temporary files) on script exit, interruption, or specific signals?
*   **Input Validation:**
    *   If the script accepts arguments or user input, does it rigorously validate them? This includes checking for the correct number of arguments, expected data types/formats, valid value ranges, and sanitizing inputs to prevent security issues (see Security section).
    *   How does it behave with missing, malformed, excessive, or unexpected inputs? Does it provide clear error messages and exit gracefully?
*   **Edge Case and Boundary Condition Handling:**
    *   Does the script account for potential edge cases, such as empty input files, files with special characters in names, zero-value inputs, or specific environmental conditions that might affect its logic?
*   **Idempotence (if applicable):**
    *   If the script is intended to make system changes (e.g., configuration, file creation), can it be run multiple times with the same initial state and produce the same end state without causing errors or unintended cumulative effects on subsequent runs?
*   **Resource Management:**
    *   If the script handles resources like temporary files, network connections, or background processes, does it manage them correctly, ensuring they are released or cleaned up appropriately to prevent leaks or conflicts?

**2. Assessing Featurefullness:**

Featurefullness relates to the breadth, depth, and relevance of the script&#39;s capabilities in relation to its intended purpose. The AI ASSITANT must evaluate:

*   **Scope and Relevance of Functionality:**
    *   What specific tasks does the script perform? How many distinct operations or functionalities does it offer?
    *   Does the feature set directly support the script&#39;s core purpose, or does it include extraneous features that add complexity without significant value?
    *   Does it comprehensively address the problem it&#39;s designed to solve?
*   **Flexibility and Configurability:**
    *   Does the script offer command-line options or arguments to modify its behavior in meaningful ways?
    *   Can its operation be customized through well-documented configuration files or environment variables?
*   **User Experience (UX):**
    *   If interactive, are prompts clear and unambiguous?
    *   Does it provide helpful output, status messages, and clear usage instructions (e.g., a `--help` or `-h` option)?
*   **Integration Capabilities:**
    *   Can the script easily integrate with other tools or workflows? For example, does it correctly handle standard input (stdin), produce parseable standard output (stdout), and use standard error (stderr) appropriately for diagnostic messages?

**3. Assessing Readability and Maintainability:**

A script that is difficult to understand is also difficult to debug, modify, and verify for correctness, impacting its long-term robustness and utility.

*   **Code Structure and Organization:**
    *   Is the script logically structured, perhaps using functions for modularity and to avoid code duplication?
    *   Is the flow of execution easy to follow?
*   **Clarity of Naming:**
    *   Are variable names, function names, and comments clear, descriptive, and consistent?
*   **Use of Comments:**
    *   Are there sufficient comments to explain complex logic, non-obvious operations, or the purpose of different sections, without cluttering the code?
*   **Consistency in Style:**
    *   Does the script follow a consistent coding style (indentation, spacing, quoting)?
*   **Simplicity:**
    *   Does the script achieve its goals in a straightforward manner, or is it overly complex and convoluted?

**4. Assessing Performance and Efficiency:**

Depending on the script&#39;s purpose (e.g., processing large datasets, running frequently in automated systems), performance can be a critical factor.

*   **Choice of Commands and Techniques:**
    *   Does it use efficient commands and code-native builtins where appropriate (e.g., avoiding unnecessary external process forks by using code-native builtins like `read` or parameter expansions instead of `sed`/`awk` for simple tasks)?
    *   For text processing, are efficient tools like `awk`, `sed`, or `grep` used effectively, rather than less efficient shell loops for large data?
*   **Handling of Large Data/Files:**
    *   If the script processes large files or data volumes, does it do so in a memory-efficient way (e.g., processing line-by-line instead of reading entire files into memory if not needed)?
*   **Resource Consumption:**
    *   Are there any obvious bottlenecks or excessive consumption of CPU, memory, or I/O resources?

**5. Assessing Portability and Dependencies:**

A script&#39;s utility can be enhanced if it can run reliably across different environments.

*   **Dependency Management:**
    *   Does the script clearly state its dependencies on external commands or tools?
    *   Does it check for the existence and (if necessary) the correct version of these dependencies at runtime, providing informative errors if they are not met?
    *   Does it rely on common utilities or more obscure ones that might not be universally available?

**Determining the &quot;Best&quot; or &quot;Most Effective&quot; Script:**

After assessing each script against these criteria, determining the &quot;best&quot; or &quot;most effective&quot; one is not always an absolute judgment. It heavily depends on the **specific requirements, priorities, and context** for which the script is intended.

*   **Criticality:** For a script running in a critical production system, **robustness and security** would likely be the highest priorities, even if it means sacrificing some featurefullness or development speed.
*   **User Expertise &amp; Use Case:** A quick utility script for personal use by an expert might prioritize development speed and featurefullness for a specific task, with less emphasis on exhaustive error handling for every conceivable edge case.
*   **Lifespan and Maintenance:** For a script intended for long-term use and potential modification by multiple people, **readability and maintainability** become crucial.
*   **Performance Needs:** If a script processes large data volumes or runs very frequently, **performance and efficiency** might outweigh other factors, provided core correctness is maintained.

Generally, the &quot;most effective&quot; script is one that:
*   Reliably and securely performs its intended functions.
*   Offers a feature set that is well-aligned with its purpose without unnecessary complexity.
*   Is understandable, maintainable, and performs adequately for its context.
*   Handles errors gracefully and provides useful feedback.

To provide a definitive comparison, the AI ASSITANT might also conceptually involve the use of static analysis tools and a systematic testing strategy, if possible.</code>
</section>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">Tailscale for secure external SSH access</title><link href="https://ib.bsb.br/tailscale/" rel="alternate" type="text/html" title="Tailscale for secure external SSH access" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T01:27:40+00:00</updated><id>https://ib.bsb.br/tailscale</id><content type="html" xml:base="https://ib.bsb.br/tailscale/"><![CDATA[<ul>
  <li>Automated Setup &amp; Auth Keys: Tailscale is often installed and brought online automatically in server environments (e.g., during boot as seen in SBNB’s boot-sbnb.sh, or via cloud-init). This is facilitated by Tailscale auth keys (e.g., tailscale up –auth-key=YOUR_KEY), which are treated as secrets and allow non-interactive joining of a machine to your tailnet.</li>
  <li>Tailscale SSH Enabled: The command tailscale up –ssh (or ensuring the node is configured with SSH enabled via tailscale set –ssh=true) is crucial. This allows Tailscale to:
    <ul>
      <li>Advertise that the node accepts SSH connections via Tailscale.</li>
      <li>Manage access control based on your Tailscale network’s users and Access Control Lists (ACLs).</li>
    </ul>
  </li>
  <li>Identity-Based Access (SSO): With Tailscale SSH, users authenticate using their Tailscale identity (often linked to an SSO provider like Google, Microsoft, Okta, etc., as hinted at by SBNB’s mention of “Google Auth”). This centralizes authentication.</li>
  <li>MagicDNS &amp; Machine Names: Tailscale provides a private DNS service (MagicDNS) that allows you to reach your machines using simple, memorable hostnames (e.g., my-debian-server or my-debian-server.your-tailnet-name.ts.net) instead of just IPs.
How This SBNB-Inspired Tailscale Approach Overcomes Prior Gaps:</li>
  <li>No Port Forwarding or Static Public IP Needed (Gap Fully Overcome):
    <ul>
      <li>Tailscale creates an encrypted overlay network. Your Debian machine and your client devices connect to this network and can reach each other using their private Tailscale IPs or MagicDNS names, completely bypassing router configurations for port forwarding or the need for a static public IP on the server’s internet connection.</li>
    </ul>
  </li>
  <li>Simplified Firewall Management (Significantly Simplified &amp; Enhanced):
    <ul>
      <li>Router Firewall: No inbound rules needed on your internet router.</li>
      <li>Debian Machine’s Local Firewall (e.g., ufw):
        <ul>
          <li>While Tailscale handles the encrypted tunnel, the openssh-server daemon on your Debian machine still needs to be able to accept connections. Your local firewall must allow incoming traffic to the SSH port (default 22/tcp). A rule like sudo ufw allow ssh or sudo ufw allow 22/tcp is typically sufficient.</li>
          <li>Tailscale ACLs provide the primary, fine-grained access control layer. Before a connection even reaches your SSH server for local authentication, Tailscale’s ACLs will determine if the source user/device is authorized to attempt an SSH connection to the destination server and as which local user(s).
Impact on the SSH Server and Its Authentication:</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>openssh-server (Still a Core Prerequisite):
    <ul>
      <li>It’s crucial to understand that Tailscale SSH doesn’t typically replace openssh-server on your Debian machine. openssh-server is the software that provides the actual shell, manages user sessions, and enforces OS-level permissions.</li>
      <li>Tailscale SSH authenticates the user via their Tailscale identity and then (in common setups) instructs the local openssh-server (often using ephemeral SSH certificates it generates or by its agent initiating a local connection) that the connection is authorized for a specific local user.</li>
      <li>Therefore, you must have openssh-server installed and running:
sudo apt update
sudo apt install openssh-server
sudo systemctl enable ssh # Ensures sshd starts on boot
sudo systemctl start ssh  # Starts sshd immediately</li>
    </ul>
  </li>
  <li>SSH Authentication (Managed by Tailscale, Simplified on Server):
    <ul>
      <li>Traditional ~/.ssh/authorized_keys: When primarily using Tailscale SSH with its identity-based authentication and ACLs, the need to meticulously manage authorized_keys files on each server for users connecting via Tailscale is greatly diminished. You’re no longer pre-distributing public keys for every user to every server for Tailscale-brokered access.</li>
      <li>Tailscale Controls Access: Your Tailscale Admin Console’s ACLs become the central point for defining:
        <ul>
          <li>Who (which Tailscale users or groups) can initiate SSH.</li>
          <li>To where (which Tailscale machines, often identified by tags).</li>
          <li>As whom (which local Linux user(s) on the target machine).</li>
        </ul>
      </li>
      <li>Your original .bashrc’s fixmyhome alias for securing ~/.ssh is still excellent for general system hygiene and for any non-Tailscale SSH access methods or service accounts.
Implementing the SBNB-Inspired Tailscale SSH Approach:</li>
    </ul>
  </li>
  <li>On your Debian 11 Server:
    <ul>
      <li>Install openssh-server (as detailed above).</li>
      <li>Install Tailscale:
curl -fsSL https://tailscale.com/install.sh | sh
        <h1 id="this-script-usually-detects-debian-and-installs-appropriately">This script usually detects Debian and installs appropriately.</h1>
      </li>
      <li>Obtain a Tailscale Auth Key: Go to your Tailscale Admin Console -&gt; “Settings” -&gt; “Keys”. Generate an auth key (reusable, ephemeral, or pre-authorized). Treat this key like a password; it’s a secret.</li>
      <li>
        <p>Join Tailscale &amp; Enable SSH:
sudo tailscale up <br />
 –auth-key=YOUR_TAILSCALE_AUTH_KEY <br />
 –ssh <br />
 –hostname=my-debian-server # Optional: sets a nice Tailscale hostname
 # –advertise-tags=tag:debian-servers,tag:prod # Optional: for ACLs</p>

        <p>Running tailscale up –ssh tells your Tailscale control plane that this node can be an SSH server. This setting is generally remembered by the node for future connections to the control plane. The SBNB boot-sbnb.sh runs this on boot to ensure it’s active. You can also use sudo tailscale set –ssh after an initial up to manage this setting.</p>
      </li>
    </ul>
  </li>
  <li>In Your Tailscale Admin Console (https://www.google.com/search?q=admin.tailscale.com):
    <ul>
      <li>Verify Machine: Confirm your “my-debian-server” appears in the “Machines” list. You might need to explicitly enable SSH for the machine here if you didn’t use –ssh during up and haven’t used tailscale set –ssh.</li>
      <li>
        <p>Define SSH Access Controls (ACLs): This is critical. Go to “Access Controls”. Example ACL entries for SSH:
{
// … other ACLs …
“ssh”: [
 // Allow members of “dev-group” to SSH to any server tagged “tag:debian-servers”
 // as the “linaro” user, or as themselves if they are not root (autogroup:nonroot).
 {
 “action”: “accept”,
 “src”:    [“autogroup:dev-group”],
 “dst”:    [“tag:debian-servers”],
 “users”:  [“linaro”, “autogroup:nonroot”]
 },
 // Allow a specific user “alice@example.com” to SSH to “my-debian-server”
 // as the “linaro” user.
 {
 “action”: “accept”,
 “src”:    [“alice@example.com”],
 “dst”:    [“my-debian-server”], // Use Tailscale hostname
 “users”:  [“linaro”]
 }
]
}</p>

        <ul>
          <li>autogroup:nonroot: A special group that allows authenticated Tailscale users to log in as their own username on the target machine, provided that username exists and is not root.</li>
          <li>Thoroughly review Tailscale’s documentation on SSH ACLs.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>On Your Client Machine (where you SSH from):
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>Install Tailscale: (e.g., curl -fsSL https://tailscale.com/install.sh</td>
              <td>sh)</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>Log in to Tailscale:
sudo tailscale up
        <h1 id="this-typically-opens-a-browser-for-you-to-authenticate-to-your-tailscale-account">This typically opens a browser for you to authenticate to your Tailscale account.</h1>
      </li>
      <li>
        <p>Connect via SSH:
You can use Tailscale’s CLI, which directly understands Tailscale SSH:
tailscale ssh linaro@my-debian-server</p>

        <p>Or, if your local SSH client is configured (or by default if MagicDNS is working well), standard SSH might also work:
ssh linaro@my-debian-server</p>

        <p>Using tailscale ssh … is often preferred as it explicitly uses Tailscale’s SSH mechanisms.</p>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="aid&gt;linux&gt;software" /></entry><entry><title type="html">dimatura .ratpoisonrc</title><link href="https://ib.bsb.br/dimatura-ratpoisonrc/" rel="alternate" type="text/html" title="dimatura .ratpoisonrc" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-09T19:50:31+00:00</updated><id>https://ib.bsb.br/dimatura-ratpoisonrc</id><content type="html" xml:base="https://ib.bsb.br/dimatura-ratpoisonrc/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># vim: commentstring=#%s

# replacement for this hack: set PATH in .profile
# setenv PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/dmaturan/bin

# start up progs ***********************************************#{{{

## misc daemons
#exec gnome-power-manager
#exec gnome-settings-daemon
#exec cinnamon-settings-daemon
#exec nm-applet
#exec urxvtd -q -o -f

## widgets
# set bg
exec xsetroot -solid gray8 -cursor_name left_ptr
# conky status monitor
#exec conky
# also: alpha 128, monitor
#exec trayer --align left --edge top --distance 0 --expand true --transparent true --SetDockType true --SetPartialStrut true --height 14 --width 50 --widthtype percent
# MIT coords
#exec redshift -l 40.44:-80.0
#exec redshift -l 42.35391379569696:-71.09029769897461

## ui
#exec easystroke
# set up keyboard layout switching (press both shifts)
#exec setxkbmap -option grp:switch,grp:shifts_toggle,grp_led:scroll us,es
# also run xmodmap
#exec xmodmap ~/.Xmodmaprc
# thinkpad button
#exec tpb -d

#unmanage rpbar
#exec rpbar
unmanage panel

#exec ssh-add .ssh/id_rsa
#exec daemon mpdas
#}}}

# appearance/ui ***************************************************#{{{

set startupmessage 0
set border 2
# left top right bottom, leave px for bars
#set padding 0 14 0 13
set padding 0 14 0 0
#set padding 0 28 0 0

# bar at south and middle, fits well with 15 padding at bottom
set bargravity c
set barpadding 4 4
# some colors:
# DarkTurquoise, lightskyblue, Gold, Goldenrod, Lavender,
# LightSlateGray, LightSteelBlue, PowderBlue, SkyBlue, palegreen
# DarkSeaGreen, Navy, MidnightBlue, DarkSlateGray, gray12
set bgcolor #6a9fb5
set fgcolor #151515
# from vim mustang colorthem
# set fwcolor #b1d631
set fwcolor #d28445

#set font -*-snap-*-*-*-*-*-*-*-*-*-*-*-*
#set font -*-terminus-*-*-*-*-20-*-*-*-*-*-*-*
#set font -*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*
set font -*-helvetica-*-r-*-*-*-*-*-*-*-*-*-*
set inputwidth 600
set historysize 1000

set msgwait 1
# don't move mouse cursor around
set warp 0

#}}}

# hooks ********************************************************#{{{

# get rid of mouse cursor
# addhook key banish

# for rpbar
#addhook switchwin exec rpbarsend
#addhook switchframe exec rpbarsend
#addhook switchgroup exec rpbarsend
#addhook deletewindow exec rpbarsend
#addhook titlechanged exec rpbarsend
#addhook newwindow exec rpbarsend

#addhook switchwin exec ratpoison -c "windows %n %t%s" &gt; /tmp/rpbarfifo
#addhook switchframe exec ratpoison -c "windows %n %t%s" &gt; /tmp/rpbarfifo
#addhook switchgroup exec ratpoison -c "windows %n %t%s" &gt; /tmp/rpbarfifo
#addhook deletewindow exec ratpoison -c "windows %n %t%s" &gt; /tmp/rpbarfifo
# TODO use this
# echo -e "`ratpoison -c "windows %n %t%s"`\00"

#addhook switchwin exec echo r &gt; /tmp/rpbarfifo
#addhook switchframe exec echo r &gt; /tmp/rpbarfifo
#addhook switchgroup exec echo r &gt; /tmp/rpbarfifo
#addhook deletewindow exec echo r &gt; /tmp/rpbarfifo

# kill programs there should be only one of
addhook restart exec killall conky
#addhook restart exec killall rpbar
#addhook restart exec killall redshift
addhook quit exec killall conky
#addhook quit exec killall rpbar
#addhook quit exec killall redshift

# verbose group switching
addhook switchgroup groups
#addhook switchwin windows %n %c %t

#}}}

# aliases ******************************************************#{{{
#alias ipython exec urxvt -e ipython
alias ipythonq exec ipython-qtconsole
alias bpython exec urxvt -e bpython
alias firefox exec firefox
#alias chromium exec chromium-browser
alias chrome exec google-chrome
alias mc exec urxvt -e mc
alias mocp exec urxvt -e mocp
alias ncmpc exec urxvt -e ncmpc -c
alias alsamixer exec urxvt -e alsamixer
#alias wicd exec wicd-client -n
alias vimwiki exec gvim ~/repos/notes/vimwiki/index.wiki
alias bash exec urxvt -e bash
alias fmlove exec fmlove.sh
alias shell exec urxvt -e

#}}}

# key bindings *************************************************#{{{

# escape key
escape C-a

bind Return nextscreen
#abort key sequence
bind Escape abort
# TODO interactive group selection with dwm or something like it
bind g groups
bind semicolon colon

# example of creating keymap
#newkmap ctrl-x
#definekey ctrl-x n next

# running apps#{{{

# TODO consider execa, execf
# TODO see archlinux wiki for various dwm-based launchers
bind space exec dmenu_run
bind e colon exec gvim
bind c exec urxvt -e fish
unbind b
bind b exec urxvt -e bash
#bind b exec urxvt -e st
# execute in terminal; "!" used to be for execute,
# but dmenu is better for that
unbind exclam
bind exclam colon exec urxvt -e
# i is 'info' but I don't use it
unbind i
bind i exec urxvt -e ipython
#bind c exec urxvt -is +sb -fg '#51a366' -bg '#111111' -fn 'xft:DejaVu Sans Mono:pixelsize=11:antialias=false:autohinting=true'
#}}}

# window management#{{{

bind W exec dratmenu.py
# a window selector using rpselect
#bind w exec rpselect
# a window selector using ratmen
#bind w exec ratmenwin
bind w exec dratmenu.py
bind C-w exec dratmenu.py

# some vi-like bindings
bind v hsplit
bind s split
bind q remove
bind o only

bind j focusdown
bind h focusleft
bind l focusright
bind k focusup
#bind j exec ratpy focus down
#bind h exec ratpy focus left
#bind l exec ratpy focus right
#bind k exec ratpy focus up

bind J exchangedown
bind K exchangeup
bind H exchangeleft
bind L exchangeright

bind r resize
bind R resize
#bind Q kill
bind Q delete

# workspaces
#definekey top s-F1 rpws1
#definekey top s-F2 rpws2
#definekey top s-F3 rpws3
#definekey top s-F4 rpws4
#definekey top s-F5 rpws5

# just go with raw groups for now
# TODO start with 1?
definekey top s-F1 gselect 0
definekey top s-F2 gselect 1
definekey top s-F3 gselect 2
definekey top s-F4 gselect 3
definekey top s-F5 gselect 4
definekey top s-F6 gselect 5

#definekey top s-F1 sselect 0
#definekey top s-F2 sselect 1
#definekey top s-F3 sselect 2

#definekey top s-Left prevscreen
#definekey top s-Right nextscreen
definekey top s-Return nextscreen

#}}}

# music and audio#{{{

# 'm' is bound to last message by default but I don't use that
unbind m
bind m exec st -e ncmpcpp
#bind greater exec mpc next
#bind less exec mpc prev
#bind slash exec mpc toggle
bind greater exec pytify -n
bind less exec pytify -p
bind slash exec pytify -pp

#volume bindings
# chose these F-keys because they correspond to fn-keys in eee.
#bind F10 exec amixer sset PCM toggle
#bind F11 exec bin/ratpy_audio.py amixer_volume -
#bind F12 exec bin/ratpy_audio.py amixer_volume +
bind F11 exec bin/ratpy_audio.py pamixer_volume -
bind F12 exec bin/ratpy_audio.py pamixer_volume +

#}}}

# links to window key#{{{
# use describekey to find these !!
definekey top s-n link n
definekey top s-p link p
definekey top s-b link b
definekey top s-j link j
definekey top s-k link k
definekey top s-l link l
definekey top s-h link h
definekey top s-o link o
definekey top s-q link q
definekey top s-w link w
definekey top s-x link x
definekey top s-r link r
definekey top s-r link R
definekey top s-s link s
definekey top s-v link v
#definekey top s-u link u
definekey top s-0 link 0
definekey top s-1 link 1
definekey top s-2 link 2
definekey top s-3 link 3
definekey top s-4 link 4
definekey top s-5 link 5
definekey top s-6 link 6
definekey top s-7 link 7
definekey top s-8 link 8
definekey top s-9 link 9
definekey top s-S link S
definekey top s-N link N
definekey top s-P link P
# audio controls
definekey top s-F10 link F10
definekey top s-F11 link F11
definekey top s-F12 link F12
# a couple of important keys
definekey top s-space link space
definekey top s-Return link Return
#}}}

# rat emulation#{{{

definekey top s-Up ratrelwarp 0 -15
definekey top s-Down ratrelwarp 0 15
definekey top s-Left ratrelwarp -15 0
definekey top s-Right ratrelwarp 15 0
definekey top s-Menu ratclick 1

#definekey top Home ratrelwarp 0 -15
#definekey top End ratrelwarp 0 15
#definekey top Delete ratrelwarp -15 0
#definekey top Next ratrelwarp 15 0
# weird menu key. Also possible: Insert, Backslash. KP_Insert, asterisk
#definekey top s-Menu ratclick 1

#}}}

#}}}
</code></pre></div></div>]]></content><author><name></name></author><category term="linux&gt;dotfile" /></entry><entry><title type="html">Performance Governor optimizations Script</title><link href="https://ib.bsb.br/performance-governor-optimizations-script/" rel="alternate" type="text/html" title="Performance Governor optimizations Script" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-12T19:16:40+00:00</updated><id>https://ib.bsb.br/performance-governor-optimizations-script</id><content type="html" xml:base="https://ib.bsb.br/performance-governor-optimizations-script/"><![CDATA[<p>This guide presents a comprehensive, single approach to managing CPU, GPU, NPU, and DMC frequency governors on Linux systems, particularly for devices like the RK3588, by setting them to “performance” mode. This method emphasizes robustness, dynamic discovery of hardware, state persistence for reversibility, and proper integration with systemd. It combines the best practices from various methods into one refined solution.</p>

<p>While the context often mentions RK3588, the script and systemd service are designed to be generally applicable to Linux systems, though specific sysfs paths for governors can vary if not covered by the general patterns.</p>

<p>This solution consists of a powerful Bash script that handles the logic of discovering, setting, and restoring governors, and a systemd service unit to manage this script at boot and allow system-level control.</p>

<p><strong>1. The Bash Script: <code class="language-plaintext highlighter-rouge">/usr/local/bin/performance_governors.sh</code></strong></p>

<p>This script is the core of the solution. Its key features include:</p>
<ul>
  <li><strong>Root Privilege Check:</strong> Ensures it’s run with necessary permissions.</li>
  <li><strong>Robust Scripting:</strong> Uses <code class="language-plaintext highlighter-rouge">set -euo pipefail</code> for strict error handling and <code class="language-plaintext highlighter-rouge">IFS=$’\n\t’</code> for safer processing of paths.</li>
  <li><strong>Variable Protection:</strong> Uses <code class="language-plaintext highlighter-rouge">readonly</code> for global configuration variables (<code class="language-plaintext highlighter-rouge">STATE_DIR</code>, <code class="language-plaintext highlighter-rouge">STATE_FILE</code>, <code class="language-plaintext highlighter-rouge">GOV_PATTERNS</code>) to prevent accidental modification within the script, enhancing robustness.</li>
  <li><strong>Dynamic Governor Discovery:</strong> Automatically finds relevant <code class="language-plaintext highlighter-rouge">cpufreq</code> (CPU) and <code class="language-plaintext highlighter-rouge">devfreq</code> (GPU, NPU, DMC, etc.) governor files using general patterns, making it adaptable to different hardware configurations.</li>
  <li><strong>State Management:</strong> Before setting governors to “performance,” it saves the current (default) governor for each device to a state file (<code class="language-plaintext highlighter-rouge">/var/lib/performance_governors/default_gov.txt</code>). This allows for a clean restoration of previous settings.</li>
  <li><strong>Comprehensive Actions:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">start</code>: Saves current governors and sets all discovered ones to “performance.”</li>
      <li><code class="language-plaintext highlighter-rouge">stop</code>: Restores the saved governors from the state file.</li>
      <li><code class="language-plaintext highlighter-rouge">restart</code>: Performs a <code class="language-plaintext highlighter-rouge">stop</code> then <code class="language-plaintext highlighter-rouge">start</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">status</code>: Displays the current governor and the saved (default) governor for each discovered path.</li>
    </ul>
  </li>
  <li><strong>Systemd-Aware Logging:</strong> Uses <code class="language-plaintext highlighter-rouge">systemd-cat</code> for logging if available, providing integration with the system journal; otherwise, falls back to the standard <code class="language-plaintext highlighter-rouge">logger</code> utility.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="c"># ——————————————————————————</span>
<span class="c"># performance_governors.sh</span>
<span class="c"># Unified script to manage CPU/GPU/NPU/DMC frequency governors.</span>
<span class="c"># Targets devices like RK3588 but designed for general Linux applicability.</span>
<span class="c"># - Requires root (CAP_SYS_ADMIN)</span>
<span class="c"># - Depends on 'util-linux' (for logger) and systemd (for systemd-cat)</span>
<span class="c"># ——————————————————————————</span>

<span class="c"># Exit on error, treat unset variables as error, propagate pipeline errors</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="c"># Set Internal Field Separator to newline and tab for safer loops.</span>
<span class="c"># Ensure standard single quotes are used here.</span>
<span class="nv">IFS</span><span class="o">=</span><span class="s1">$'</span><span class="se">\n\t</span><span class="s1">'</span>

<span class="c">### Verify running as root</span>
<span class="c"># Use standard quotes "" and ensure command substitution is quoted.</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"ERROR: Must be run as root."</span> <span class="o">&gt;</span>&amp;2
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Location to save/restore default governors (use standard quotes)</span>
<span class="nb">readonly </span><span class="nv">STATE_DIR</span><span class="o">=</span><span class="s2">"/var/lib/performance_governors"</span>
<span class="nb">readonly </span><span class="nv">STATE_FILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$STATE_DIR</span><span class="s2">/default_gov.txt"</span>

<span class="c"># General patterns covering cpufreq (CPU) and devfreq (other devices) governors</span>
<span class="c"># Use standard quotes ""</span>
<span class="nb">readonly </span><span class="nv">GOV_PATTERNS</span><span class="o">=(</span>
  <span class="s2">"/sys/devices/system/cpu/cpufreq/policy*/scaling_governor"</span> <span class="c"># For CPU cores</span>
  <span class="s2">"/sys/class/devfreq/*/governor"</span>                             <span class="c"># For GPU, NPU, DMC, etc.</span>
<span class="o">)</span>

<span class="c"># Log function: prefers systemd-cat for journal integration, else falls back to logger.</span>
log<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Use standard quotes ""</span>
  <span class="nb">local </span><span class="nv">level</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="nb">shift
  local </span><span class="nv">msg</span><span class="o">=</span><span class="s2">"</span><span class="nv">$*</span><span class="s2">"</span>
  <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> systemd-cat &amp;&gt;/dev/null<span class="p">;</span> <span class="k">then</span>
    <span class="c"># Pipe to systemd-cat to log with specified level and tag</span>
    <span class="c"># Use standard quotes "" and standard single quotes ''</span>
    <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s2">"</span><span class="nv">$msg</span><span class="s2">"</span> | systemd-cat <span class="nt">-t</span> performance_governors <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$level</span><span class="s2">"</span>
  <span class="k">else</span>
    <span class="c"># Fallback to logger if systemd-cat is not available</span>
    <span class="c"># Use standard quotes "" and standard single quotes ''</span>
    logger <span class="nt">-t</span> performance_governors <span class="nt">-p</span> <span class="s2">"user.</span><span class="nv">$level</span><span class="s2">"</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$msg</span><span class="s2">"</span>
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Discover all existing governor file paths based on GOV_PATTERNS (Enhanced with nullglob).</span>
discover_paths<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Enable nullglob: patterns that match nothing expand to nothing</span>
  <span class="nb">shopt</span> <span class="nt">-s</span> nullglob
  <span class="c"># Ensure nullglob is turned off again when the function exits</span>
  <span class="nb">trap</span> <span class="s1">'shopt -u nullglob'</span> RETURN

  <span class="k">for </span>patt <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">GOV_PATTERNS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do</span>
    <span class="c"># $patt is intentionally unquoted for globbing.</span>
    <span class="c"># With nullglob, if $patt matches no files, this loop won't execute for it.</span>
    <span class="k">for </span>f <span class="k">in</span> <span class="nv">$patt</span><span class="p">;</span> <span class="k">do</span>
      <span class="c"># We know 'f' must be an existing file due to nullglob,</span>
      <span class="c"># but the check is harmless and adds clarity.</span>
      <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span>
    <span class="k">done
  done</span>
  <span class="c"># The trap automatically runs 'shopt -u nullglob' here.</span>
<span class="o">}</span>

<span class="c"># Action: Save current governors and set all to 'performance'.</span>
cmd_start<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Use standard quotes ""</span>
  log info <span class="s2">"START: Saving default governors and forcing 'performance' mode."</span>
  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$STATE_DIR</span><span class="s2">"</span> <span class="c"># Ensure state directory exists</span>
  : <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span>     <span class="c"># Truncate/create state file</span>

  <span class="c"># Read each discovered governor path</span>
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> path<span class="p">;</span> <span class="k">do</span>
    <span class="c"># Use standard quotes "" and standard single quotes ''</span>
    <span class="nv">current_governor</span><span class="o">=</span><span class="si">$(</span>&lt;<span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span><span class="si">)</span> <span class="c"># Read current governor</span>
    <span class="nb">printf</span> <span class="s1">'%s\t%s\n'</span> <span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$current_governor</span><span class="s2">"</span> <span class="o">&gt;&gt;</span><span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="c"># Save path and current governor</span>

    <span class="c"># Attempt to set to 'performance' (use standard quotes)</span>
    <span class="k">if </span><span class="nb">echo</span> <span class="s2">"performance"</span> <span class="o">&gt;</span><span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
      </span>log info <span class="s2">"Successfully set 'performance' for: </span><span class="nv">$path</span><span class="s2">"</span>
    <span class="k">else</span>
      <span class="c"># Use standard quotes ""</span>
      log err <span class="s2">"FAILED to set 'performance' for: </span><span class="nv">$path</span><span class="s2">"</span>
    <span class="k">fi
  done</span> &lt; &lt;<span class="o">(</span>discover_paths<span class="o">)</span> <span class="c"># Process substitution feeds paths from discover_paths</span>

  <span class="c"># Use standard quotes ""</span>
  log info <span class="s2">"START command complete."</span>
<span class="o">}</span>

<span class="c"># Action: Restore governors to their saved default states.</span>
cmd_stop<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Use standard quotes ""</span>
  log info <span class="s2">"STOP: Restoring saved default governors."</span>
  <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-r</span> <span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="c"># Use standard quotes "" and standard parentheses ()</span>
    log warning <span class="s2">"State file (</span><span class="nv">$STATE_FILE</span><span class="s2">) not found or not readable. Skipping restore."</span>
    <span class="k">return </span>1 <span class="c"># Indicate issue if state file is missing</span>
  <span class="k">fi</span>

  <span class="c"># Read path and old governor from state file</span>
  <span class="c"># Use standard single quotes '' for IFS setting specific to read</span>
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">$'</span><span class="se">\t</span><span class="s1">'</span> <span class="nb">read</span> <span class="nt">-r</span> path old_governor<span class="p">;</span> <span class="k">do</span>
    <span class="c"># Use standard quotes ""</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># Check if path still exists</span>
      <span class="c"># Use standard quotes "" and standard single quotes ''</span>
      <span class="k">if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$old_governor</span><span class="s2">"</span> <span class="o">&gt;</span><span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
        </span>log info <span class="s2">"Restored '</span><span class="nv">$old_governor</span><span class="s2">' to: </span><span class="nv">$path</span><span class="s2">"</span>
      <span class="k">else</span>
        <span class="c"># Use standard quotes "" and standard single quotes ''</span>
        log err <span class="s2">"FAILED to restore '</span><span class="nv">$old_governor</span><span class="s2">' to: </span><span class="nv">$path</span><span class="s2">"</span>
      <span class="k">fi
    else</span>
      <span class="c"># Use standard quotes ""</span>
      log warning <span class="s2">"Path no longer exists, cannot restore for: </span><span class="nv">$path</span><span class="s2">"</span>
    <span class="k">fi
  done</span> &lt;<span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="c"># Use standard quotes ""</span>

  <span class="c"># Use standard quotes ""</span>
  log info <span class="s2">"STOP command complete."</span>
<span class="o">}</span>

<span class="c"># Action: Display current and saved governors.</span>
cmd_status<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Use standard quotes ""</span>
  <span class="nb">echo</span> <span class="s2">"Governor Status (Current Governor -&gt; Saved Default Governor):"</span>
  <span class="nb">declare</span> <span class="nt">-A</span> saved_governors <span class="c"># Associative array to hold saved states</span>

  <span class="c"># Populate saved_governors from state file if it exists</span>
  <span class="c"># Use standard quotes ""</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nt">-r</span> <span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="c"># Use standard single quotes '' for IFS setting specific to read</span>
    <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">$'</span><span class="se">\t</span><span class="s1">'</span> <span class="nb">read</span> <span class="nt">-r</span> path old_governor<span class="p">;</span> <span class="k">do</span>
      <span class="c"># Use standard quotes ""</span>
      saved_governors[<span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span><span class="o">]=</span><span class="s2">"</span><span class="nv">$old_governor</span><span class="s2">"</span>
    <span class="k">done</span> &lt;<span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="c"># Use standard quotes ""</span>
  <span class="k">fi</span>

  <span class="c"># Display status for each discovered governor path</span>
  <span class="nb">local </span><span class="nv">found_any</span><span class="o">=</span>0
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> path<span class="p">;</span> <span class="k">do
    </span><span class="nv">found_any</span><span class="o">=</span>1
    <span class="c"># Use standard quotes "" and standard curly braces {}</span>
    <span class="nv">current_governor</span><span class="o">=</span><span class="si">$(</span>&lt;<span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span><span class="si">)</span>
    <span class="nv">default_governor</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">saved_governors</span><span class="p">[</span><span class="nv">$path</span><span class="p">]</span><span class="k">:-</span><span class="p">&lt;not_saved&gt;</span><span class="k">}</span><span class="s2">"</span> <span class="c"># Use &lt;not_saved&gt; if not in state file</span>
    <span class="c"># Use standard quotes "", standard single quotes '', standard parentheses ()</span>
    <span class="nb">printf</span> <span class="s1">'%-65s : %-15s -&gt; %s\n'</span> <span class="s2">"</span><span class="nv">$path</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$current_governor</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$default_governor</span><span class="s2">"</span>
  <span class="k">done</span> &lt; &lt;<span class="o">(</span>discover_paths<span class="o">)</span>

  <span class="c"># Use standard quotes ""</span>
  <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$found_any</span><span class="s2">"</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"No governor paths found."</span>
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Display usage instructions.</span>
usage<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Use standard single quotes ''</span>
  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
Usage: </span><span class="nv">$0</span><span class="sh"> {start|stop|restart|status}
  start      Saves current governor settings and sets all to 'performance'.
  stop       Restores previously saved governor settings.
  restart    Executes 'stop' then 'start'.
  status     Displays current vs. saved governor settings for all discovered paths.
</span><span class="no">EOF
</span>  <span class="nb">exit </span>1
<span class="o">}</span>

<span class="c"># Main command dispatcher.</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># Show usage if no arguments</span>
  usage
<span class="k">fi</span>

<span class="c"># Use standard quotes ""</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in
  </span>start<span class="p">)</span>   cmd_start   <span class="p">;;</span>
  stop<span class="p">)</span>    cmd_stop    <span class="p">;;</span>
  restart<span class="p">)</span> cmd_stop<span class="p">;</span> cmd_start <span class="p">;;</span> <span class="c"># Simple restart: stop then start</span>
  status<span class="p">)</span>  cmd_status  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>       usage       <span class="p">;;</span> <span class="c"># Show usage for unknown commands</span>
<span class="k">esac</span>

</code></pre></div></div>

<p><strong>2. The Systemd Service Unit: <code class="language-plaintext highlighter-rouge">/etc/systemd/system/performance_governors.service</code></strong></p>

<p>This service file allows systemd to manage the script.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Type=oneshot</code>: Indicates the script runs once and exits.</li>
  <li><code class="language-plaintext highlighter-rouge">RemainAfterExit=yes</code>: Tells systemd to consider the service “active” even after the <code class="language-plaintext highlighter-rouge">ExecStart</code> process finishes, as the script’s effects (changed governors) persist.</li>
  <li><code class="language-plaintext highlighter-rouge">ExecStart</code>, <code class="language-plaintext highlighter-rouge">ExecStop</code>, <code class="language-plaintext highlighter-rouge">ExecReload</code>: Map directly to the script’s <code class="language-plaintext highlighter-rouge">start</code>, <code class="language-plaintext highlighter-rouge">stop</code>, and <code class="language-plaintext highlighter-rouge">restart</code> actions.</li>
  <li>Dependencies (<code class="language-plaintext highlighter-rouge">After</code>, <code class="language-plaintext highlighter-rouge">Wants</code>): Ensures the service starts at an appropriate time during boot.</li>
  <li><code class="language-plaintext highlighter-rouge">Restart=no</code>: The <code class="language-plaintext highlighter-rouge">Restart=no</code> directive ensures that if the script fails during startup (e.g., cannot set a governor), systemd will not attempt to restart it automatically. This is generally preferred for configuration services where a failure might indicate a deeper issue requiring manual investigation rather than repeated, potentially problematic, attempts.</li>
</ul>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">Performance Governors Management (CPU/GPU/NPU/DMC)</span>
<span class="py">Documentation</span><span class="p">=</span><span class="s">man:performance_governors.sh</span>
<span class="c"># Start after basic system services are up.
</span><span class="py">After</span><span class="p">=</span><span class="s">multi-user.target</span>
<span class="c"># Removed Wants=network-online.target (usually not needed for governors)
</span>
<span class="nn">[Service]</span>
<span class="py">Type</span><span class="p">=</span><span class="s">oneshot</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh start</span>
<span class="py">ExecStop</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh stop</span>
<span class="py">ExecReload</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh restart</span>
<span class="py">RemainAfterExit</span><span class="p">=</span><span class="s">yes</span>
<span class="c"># On failure, log and stay failed. Use 'systemctl reset-failed performance_governors.service' to clear.
</span><span class="py">Restart</span><span class="p">=</span><span class="s">no</span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target</span>
</code></pre></div></div>

<p><strong>3. Installation and Management Instructions</strong></p>

<ol>
  <li><strong>Install Prerequisites</strong> (if not already present):
The script uses standard utilities. <code class="language-plaintext highlighter-rouge">util-linux</code> (for <code class="language-plaintext highlighter-rouge">logger</code>) and <code class="language-plaintext highlighter-rouge">systemd</code> (for <code class="language-plaintext highlighter-rouge">systemd-cat</code> and service management) are typically core components of modern Linux distributions.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># On Debian/Ubuntu based systems, these are usually pre-installed.</span>
<span class="c"># sudo apt update</span>
<span class="c"># sudo apt install -y util-linux systemd </span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Save the Bash Script:</strong>
Copy the script code above and save it as <code class="language-plaintext highlighter-rouge">performance_governors.sh</code> in a temporary location.</p>
  </li>
  <li><strong>Install the Bash Script:</strong>
Move it to <code class="language-plaintext highlighter-rouge">/usr/local/bin/</code> and make it executable:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp </span>performance_governors.sh /usr/local/bin/performance_governors.sh
<span class="nb">sudo chmod </span>755 /usr/local/bin/performance_governors.sh
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Save the Systemd Service Unit:</strong>
Copy the systemd unit content above and save it as <code class="language-plaintext highlighter-rouge">performance_governors.service</code> in a temporary location.</p>
  </li>
  <li><strong>Install the Systemd Service Unit:</strong>
Move it to <code class="language-plaintext highlighter-rouge">/etc/systemd/system/</code>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp </span>performance_governors.service /etc/systemd/system/performance_governors.service
</code></pre></div>    </div>
  </li>
  <li><strong>Reload Systemd, Enable and Start the Service:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">daemon-reload</code>: Makes systemd aware of the new service file.</li>
      <li><code class="language-plaintext highlighter-rouge">enable</code>: Ensures the service starts automatically on boot.</li>
      <li><code class="language-plaintext highlighter-rouge">start</code>: Starts the service immediately for the current session.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>performance_governors.service
<span class="nb">sudo </span>systemctl start performance_governors.service
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Verify Operation:</strong>
Check the service status and the governor settings:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status performance_governors.service
<span class="nb">sudo</span> /usr/local/bin/performance_governors.sh status
</code></pre></div>    </div>
    <p>You can also check individual governor files, e.g., <code class="language-plaintext highlighter-rouge">cat /sys/devices/system/cpu/cpufreq/policy0/scaling_governor</code>.</p>
  </li>
</ol>

<p><strong>4. Using the Script Manually</strong></p>

<p>Once installed, you can also manage the governors manually using the script:</p>
<ul>
  <li><strong>Set to performance:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh start</code></li>
  <li><strong>Restore defaults:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh stop</code></li>
  <li><strong>Check status:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh status</code></li>
  <li><strong>Restart (stop then start):</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh restart</code></li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">ratpoison documentation</title><link href="https://ib.bsb.br/ratpoison-documentation/" rel="alternate" type="text/html" title="ratpoison documentation" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-13T01:24:06+00:00</updated><id>https://ib.bsb.br/ratpoison-documentation</id><content type="html" xml:base="https://ib.bsb.br/ratpoison-documentation/"><![CDATA[<p>{% codeblock %}
\input texinfo   @c -<em>-texinfo-</em>-
@c %<strong>start of header
@setfilename ratpoison.info
@include version.texi
@settitle Ratpoison @value{VERSION} manual
@c %</strong>end of header</p>

<p>@dircategory X11
@direntry</p>
<ul>
  <li>ratpoison: (ratpoison).       Say good-bye to the rodent
@end direntry</li>
</ul>

<p>@copying
Copyright @copyright{} 2000, 2001, 2002, 2003, 2004, 2005, 2006 Shawn Betts</p>

<p>@quotation
The ratpoison user manual is free documentation; permission is granted to
copy, distribute and/or modify this document under the terms of either:</p>

<p>a) the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option)
any later version, or</p>

<p>b) the GNU Free Documentation License, version 1.2 or any later
version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.</p>

<p>The ratpoison manual is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License or GNU Free Documentation License for more
details.</p>

<p>A copy of the FDL is included in the section entitled
@ref{GNU Free Documentation License}.
You should have received a copy of the GNU General Public License
along with this software; see the file COPYING. If not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
MA 02110-1301, USA.</p>

<p>If you choose to allow use of your version of this content only under the
terms of one of the licenses, indicate your decision by deleting the notice
of the other license. If you do not delete any of those, a recipient may use
your version of this file unter the terms of either the GNU FDL or the GNU GPL.
@end quotation
@end copying</p>

<p>@titlepage
@title The ratpoison user manual
@author Shawn Betts</p>

<p>@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage</p>

<p>@ifnottex
@node Top
@top Ratpoison</p>

<p>This document explains how to use ratpoison @value{VERSION}.</p>

<p>@insertcopying
@end ifnottex</p>

<p>@contents</p>

<p>@menu</p>
<ul>
  <li>About::                       What Is Ratpoison?</li>
  <li>Contacting::                  How Do I Contact The Ratpoison Developers?</li>
  <li>Concepts::                    Window Manipulation Concepts</li>
  <li>General Use::                 How Does This Thing Work??</li>
  <li>Windows::                     Navigating The Windows</li>
  <li>Groups::                      Grouping Windows Together</li>
  <li>Frames::                      Dividing The Screen</li>
  <li>Multiple Screens::            What To Do With All Your Computer Junk</li>
  <li>Keystrokes::                  Key Commands And Functionality</li>
  <li>Hooks::                       Attaching Scripts To Ratpoison Events</li>
  <li>The Status Bar::              Ratpoison’s Input/Output Area</li>
  <li>Using Other Window Managers:: Return To Evil</li>
  <li>Other Commands::              Miscellaneous Commands</li>
  <li>Input::                       Typing Text Into Ratpoison</li>
  <li>Command Line Arguments::      ratpoison Command-Line Actions</li>
  <li>Startup file::                They Threatened Me…With Violence!</li>
  <li>GNU Free Documentation License::</li>
  <li>Command Index::               Index</li>
</ul>

<p>@detailmenu
 — The Detailed Node Listing —</p>

<p>Windows</p>

<ul>
  <li>Manipulating Windows::</li>
  <li>Window Classes::</li>
  <li>Unmanaged Windows::</li>
  <li>Rudeness::</li>
</ul>

<p>Frames</p>

<ul>
  <li>Splitting Frames::</li>
  <li>Resizing Frames::</li>
  <li>Frame Navigation Commands::</li>
  <li>Saving and Restoring Frame Sets::</li>
  <li>Frame Numbering::</li>
  <li>Dedicated Frames::</li>
</ul>

<p>Keystrokes</p>

<ul>
  <li>Key Maps::</li>
  <li>Default Key Bindings::</li>
</ul>

<p>@end detailmenu
@end menu</p>

<p>@node About, Contacting, Top, Top
@chapter About</p>

<p>ratpoison is a simple Window Manager with no fat library dependencies,
no fancy graphics, no window decorations, and no rodent dependence. It
is largely modeled after GNU Screen which has done wonders in the
virtual terminal market.</p>

<p>All interaction with the window manager is done through
keystrokes. ratpoison has a prefix map to minimize the key clobbering
that cripples Emacs and other quality pieces of software.</p>

<p>ratpoison was written by Shawn Betts (@email{sabetts@@gmail.com}).</p>

<p>@node Contacting
@chapter Contacting
ratpoison is hosted on @url{http://savannah.nongnu.org}. To see the latest
developments in ratpoison go to
@url{http://savannah.nongnu.org/projects/ratpoison} or visit the
ratpoison webpage at @url{http://www.nongnu.org/ratpoison}.</p>

<p>There is also a ratpoison mailing list:
@email{ratpoison-devel@@nongnu.org}. For details on subscribing
and for the list archives go to the ratpoison Savannah project.</p>

<p>There is a @url{irc://irc.freenode.net/#ratpoison, #ratpoison} IRC
channel on the @url{http://freenode/, Freenode} network.</p>

<p>@node Concepts
@chapter Concepts</p>

<p>ratpoison uses the concept of @dfn{panes} to place and size
windows. Instead of allowing windows to have arbitary shapes at
arbitary locations on the screen, the display is divided into panes,
the same way a physical window might contain several pieces of glass
seperated by wood. In ratpoison, the panes are called @dfn{frames},
and windows are placed in them, maximised. ratpoison starts with one
frame, which can be split into an arbitary number of smaller
ones. Each frame can be split in half either horizontally or
vertically. You can move among them, making different ones the
current. For more information, see @ref{Splitting Frames}.</p>

<p>Each frame has at most one window associated with it, which is visible
in that frame. If you select a window that is associated with a frame,
the focus will move to its associated frame, rather than moving the
window to the current frame. If you select a window that is not
associated with a frame, that window will be opened in the current
frame and resized to fit that frame.</p>

<p>If the window associated with a frame does not fill the frame
completely, the various gravity commands control how it is placed.</p>

<p>If no window was open in that frame before the current window was
opened, the X root will be visible behind it.</p>

<p>Transient windows (dialog boxes, splash screens, and the like) are
handled specially. In order to understand the contents of a transient
window, the previously focused window is often required. Take a search
window, it is useful to be able to see the document you are searching
as well as the search window. For this reason transient windows appear
overtop (according to their gravity) of the previously focused window.</p>

<p>Every window belongs in a group. A group is simply that: a group of
windows. By default there is only one group (the @dfn{default group})
that all windows exist in. You can create new groups. When a program
creates a window it will be added to the current group. Groups are
generally used to organize windows into different classes such as work
and wasting-time-at-work.</p>

<p>@node General Use
@chapter General Use</p>

<p>When ratpoison starts you should see an empty X server. To open an x
terminal hit @kbd{C-t c}. You can now run shell commands as you would on
any terminal. Notice the terminal maximized full screen. @kbd{C-t !}
will run a single shell command and saves you the effort of opening a
terminal.</p>

<p>Once you have a couple X programs running, you’ll want to navigate
between windows. To see what windows are being managed hit @kbd{C-t
w}. Each window has a number. You can jump to a window by hitting
@kbd{C-t} followed by the window’s number. This assumes the window’s
number is one digit. You can also switch to a window by typing in part
of its name. To do this hit @kbd{C-t ‘}.</p>

<p>ratpoison allows you to cycle through the windows with @kbd{C-t n}
and @kbd{C-t p}.</p>

<p>And that concludes a brief introduction on how to use ratpoison. Notice
how we didn’t have to drag a single window, or click a single maximize
button? Beautiful wasn’t it? Felt fast? Cool? It’s modern computing at
its best.</p>

<p>@node Windows
@chapter Windows</p>

<p>Windows are what ratpoison manages.</p>

<p>@menu</p>
<ul>
  <li>Manipulating Windows::</li>
  <li>Window Classes::</li>
  <li>Unmanaged Windows::</li>
  <li>Rudeness::                  <br />
@end menu</li>
</ul>

<p>@node Manipulating Windows
@section Manipulating Windows</p>

<p>The following are commands used to manipulate windows.</p>

<p>@deffn Command select @var{n}
This jumps you to window @var{n} where @var{n} is the window number as
shown in the Program Bar. You can do the same trick with
@kbd{C-@var{n}} too. To select no window, blanking the current
frame, type @samp{select -}.
@end deffn</p>

<p>@deffn Command select @var{window-name}
Go to a window by name. A shortcut is @kbd{C-t ‘}.
@end deffn</p>

<p>@deffn Command windows @var{fmt}
This displays the Program Bar which displays the windows you currently
have running. The number before each window name is used to jump to
that window. You can do this by typing @kbd{C-t @var{n}} where @var{n}
is the number of the window. Note that only windows with numbers from
0 to 9 can be referenced using this keystroke.  To reach windows with
numbers greater than 9, use @kbd{C-t ‘} and type the number at the
prompt.</p>

<p>After 5 seconds the Program Bar disappears.</p>

<p>This command is bound to @kbd{C-t w} by default.</p>

<p>When invoked from the command-line like this,</p>

<p>@example
$ ratpoison -c windows
@end example</p>

<p>Instead of a message bar, you will get a list of the windows printed
to stdout. This allows you to write more advanced scripts than simple
keyboard macros. This is where @var{fmt} comes into play. If
@command{windows} is given an argument it treats it as the format string as
described in @command{set winfmt}.
@end deffn</p>

<p>@deffn Command title @var{title}
Rename the currently active window. This name will remain for the
duration of the window’s life, unless you change it again. By default,
the @kbd{C-t A} keystroke is bound to this command.
@end deffn</p>

<p>@deffn Command other
This toggles between the current window and the last window. By
default, this is bound to @kbd{C-t C-t}.
@end deffn</p>

<p>@deffn Command prev
This jumps you to the previous window in the window list. By default,
this is bound to @kbd{C-t p}.
@end deffn</p>

<p>@deffn Command next
This jumps you to the next window in the window list. This one is
bound to three keystrokes, namely @kbd{C-t n}, @kbd{C-t space},
and @kbd{C-t enter}.
@end deffn</p>

<p>@deffn Command kill
This destroys the current window. Normally you should only need to
use @command{delete}, but just in case you need to rip the heart out of a
misbehaving window this command should do the trick. Also available as
@kbd{C-t K}.
@end deffn</p>

<p>@deffn Command info @var{fmt}
Display information about the current window. At optional @var{fmt}
argument can be passed to override the default format. @command{info}
accepts the same format options as @command{windows}.</p>

<p>@end deffn</p>

<p>@deffn Command gravity @var{g}
Change the gravity of the current window. A normal window will default
to the top-left corner of the screen, but it can also be placed at the
bottom-right corner of the screen. Valid values for @var{g} are the 8
directions @samp{northwest}, @samp{north}, @samp{northeast},
@samp{east}, @samp{southeast}, @samp{south}, @samp{southwest} and
@samp{west}, clockwise from the top left corner. @samp{center} will
center the window in the frame. @var{g} and can be abbreviated to the
standard compass 1 and 2 letter abbreviations (i.e. @samp{nw},
@samp{s}, etc).</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command delete
This deletes the current window. You can access it with the @kbd{C-t k}
keystroke.
@end deffn</p>

<p>@deffn Command {set infofmt} @var{fmt}
Set the default window format for the @command{info} command. See
@command{set winfmt} for accepted format characters.
@end deffn</p>

<p>@deffn Command {set warp} @var{n}
Set rat warping. By default this variable is set (@code{1}) and
ratpoison saves the position of the rat when leaving a window and when
the user returns to the window the rat’s position is restored. If you
find this counter-intuitive, set this variable to @code{0}.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set winname} @var{name}
There are three resources ratpoison can get a window’s name from: the
WMNAME hint, the res_name from the WMCLASS hint, or the res_class from
the WMCLASS hint. @var{name} can be @samp{title} which is what most
window managers put in the title bar, @samp{name} which is the
res_name, or @samp{class} which is the res_class.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set wingravity} @var{g}
Set the default gravity for normal windows. See the
@command{gravity} command.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set winliststyle} @var{setting}
The window list can be displayed in a row or a column. @var{setting}
can be @samp{row} or @samp{column}.
@end deffn</p>

<p>@deffn Command {set winfmt} @var{fmt}
Set the default window format for the @command{windows} command. By
default it is @samp{%n%s%t}. The following is a list of valid format
characters:</p>

<p>@table @samp
@item %a
Application Name
@item %c
Resource Class
@item %f
The frame number the window is displayed in or a space if it is not in
a frame.
@item %g
The window’s gravity setting
@item %h
The window’s height
@item %H
The window’s height increment hint.
@item %i
X11 Window ID
@item %l
A unique number based on when the window was last accessed. The higher
the number, the more recently it was accessed.
@item %n
The window number
@item %p
Process ID (‘?’ if _NET_WM_PID isn’t set)
@item %s
Window status (current window, last window, etc)
@item %S
The window’s screen
@item %t
Window Name
@item %T
Whether the window is a transient or not.
@item %M
Whether the window is a maxsize window or not.
@item %w
The window’s width
@item %W
The window’s width increment hint
@item %x
the window’s xrandr screen
@end table</p>

<p>Additionally there can be a number between the percent sign and the format
character, denoting a maximum length this value is to truncate to, e.g. @samp{%n%s%20t}.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command number @var{n} @var{target}
Set a window’s number to @var{n}. If another window occupies the
requested number already, then the windows’ numbers are swapped.</p>

<p>The second argument, @var{target}, is optional. It should be the
number of the window whose number will be changed. If @var{target} is
omitted ratpoison defaults to the current window.
@end deffn</p>

<p>@deffn Command {set transgravity} @var{g}
Set the default alignment for transient windows. See the
@command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set maxsizegravity} @var{g}
Set the default alignment for windows with maxsize hints. See the
@command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set border} @var{n}
Set the border width for all windows.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set onlyborder} @var{n}
Allows hiding of borders when only one frame is on the current
screen. The argument @var{n} can be @code{1} (default) which shows
borders or @code{0} which hides them for single frames.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Window Classes
@section Window Classes</p>

<p>Window classes are a way of grouping windows together. Windows that
are part of the same program generally have the same class. Ratpoison
takes advantage of this to help you navigate between windows of the
same class. This is useful if you only want to cycle through Emacs
frames or XTerms.</p>

<p>@deffn Command inext
Go to the next window in the window list that is in the same class as
the current window.
@end deffn</p>

<p>@deffn Command iprev
Go to the previous window in the window list that is in the same class
as the current window.
@end deffn</p>

<p>@deffn Command iother
Go to the last accessed window that is in the same class as the
current window.
@end deffn</p>

<p>@deffn Command cnext
Go to the next window in the window list that is in a different class
from the current window.
@end deffn</p>

<p>@deffn Command cprev
Go to the previous window in the window list that is in a different
class from the current window.
@end deffn</p>

<p>@deffn Command cother
Go to the last accessed window that is in a different class from the
current window.
@end deffn</p>

<p>@node Unmanaged Windows
@section Unmanaged Windows</p>

<p>ratpoison can intentionally not manage windows. ratpoison keeps a list
of strings and if any new window’s name matches a string in the list,
then it will not be picked up and managed by ratpoison.</p>

<p>The following are commands to manipulate this list</p>

<p>@deffn Command clrunmanaged
Clear the unmanaged window list.
@end deffn</p>

<p>@deffn Command unmanage @var{text}
Add @var{text} to the unmanaged window list. Any window whose name
matches any of the strings in the unmanaged window list will not be
handled in any way by ratpoison. This only applies to new windows (not
windows already managed by ratpoison).</p>

<p>When called with no arguments, the list is returned.
@end deffn</p>

<p>@node Rudeness
@section Rudeness</p>

<p>Some programs will attempt to steal the focus without the users
permission. Not only is this a sign of a lame programmers attempt to fix
a window manager problem in the wrong place, it’s just plain rude. By
default ratpoison will honour these rudeness requests, but it doesn’t
have to. Use the rudeness variable to deal with such programs.</p>

<p>@deffn Command {set rudeness} @var{n}
The rudeness variable lets you decide what windows pop-up
automatically and when. This is often useful for those deep hack
sessions when you absolutely can’t be disturbed.</p>

<p>There are two kinds of windows: normal windows (like an xterm) and
transient windows (generally pop-up dialog boxes). When a client
program wants to display a new window it makes a requests to
ratpoison. ratpoison then decides whether to grant the request and
display the window or ignore it. A client program can also request
that one of its windows be raised. You can customize ratpoison to
either honour these requests (the default operation) or ignore them.</p>

<p>@var{n} is a number from 0 to 15. Each of the four bits determine
which requests ratpoison grants.</p>

<p>@table @asis
@item Bit 0
Tells ratpoison to grant raise requests on transient windows</p>

<p>@item Bit 1
Tells ratpoison to grant raise requests on normal windows</p>

<p>@item Bit 2
Tells ratpoison to grant display requests on new transient windows</p>

<p>@item Bit 3
Tells ratpoison to grant display requests on new normal windows
@end table</p>

<p>For example, if you wanted only wanted to grant transient windows
raise requests and display requests you would type @samp{set rudeness
5}.
If a request is not granted ratpoison will tell you about the
request with a message like @samp{Raise request from window 1
(emacs)}.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@node Groups
@chapter Groups
ratpoison provides functionality to group windows together. This
coupled with saving and restoring frames configurations is what most
people would call @dfn{virtual desktops} or @dfn{workspaces}.</p>

<p>While ratpoison doesn’t explicitly provide support for such things, it
does allow you to write scripts to this end. Such a script exists in
@file{contrib/} called @file{rpws}. Consult that file for details on
setting up workspaces inside ratpoison.</p>

<p>Groups are more general purpose than workspaces. windows from one
group can be visible along with windows from another group. If you
switch to a different group nothing changes except the list of windows
you can cycle through. ratpoison allows the user to move a window from
one group to another, merge two groups, create new groups, and delete
existing ones.</p>

<p>The following is a list of of commands used for manipulating groups.</p>

<p>@deffn Command gnew @var{name}
Create a new group with the name @var{name}. @var{name} is
optional. The new group becomes the current group.
@end deffn</p>

<p>@deffn Command gnewbg @var{name}
This is the same as @command{gnew} except that the current group does
not change.
@end deffn</p>

<p>@deffn Command groups
Display a list of groups with a similar format to @command{windows}.
@end deffn</p>

<p>@deffn Command gmove @var{group}
Move the current window to @var{group}.
@end deffn</p>

<p>@deffn Command gnext
Go to the next group in the list.
@end deffn</p>

<p>@deffn Command gother
Go to the last accessed group.
@end deffn</p>

<p>@deffn Command gprev
Go to the previous group in the list.
@end deffn</p>

<p>@deffn Command grename
Rename current group.
@end deffn</p>

<p>@deffn Command gnumber @var{GROUP} @var{target}
Set a group’s number to @var{GROUP}. If another group occupies the
requested number already, then the groups’ numbers are swapped.</p>

<p>The second argument, @var{target}, is optional. It should be the
number of the group whose number will be changed. If @var{target} is
omitted ratpoison defaults to the current group.
@end deffn</p>

<p>@deffn Command gselect @var{group}
Select a particular group by name or number. If @var{group} is not
provided, ratpoison will interactively prompt for the group.
@end deffn</p>

<p>@deffn Command gmerge @var{group}
Merge @var{group} with the current group. All windows in @var{group}
will be moved to the current group. @var{group} is not deleted.
@end deffn</p>

<p>@deffn Command gdelete @var{group}
Delete a group. @var{group} is optional. If it is not specified
ratpoison will attempt to delete the current group. Only empty groups
can be deleted. To empty a group see @command{gmerge}.
@end deffn</p>

<p>@node Frames
@chapter Frames
Sometimes you may want to see two or more windows at the same
time. ratpoison allows you to split the display into frames (see
@ref{Concepts}). Each frame can then contain 1 window.</p>

<p>@menu</p>
<ul>
  <li>Splitting Frames::</li>
  <li>Resizing Frames::</li>
  <li>Frame Navigation Commands::</li>
  <li>Saving and Restoring Frame Sets::</li>
  <li>Frame Numbering::</li>
  <li>Dedicated Frames::          <br />
@end menu</li>
</ul>

<p>@node Splitting Frames
@section Splitting Frames</p>

<p>To split the
current frame horizontally use @kbd{C-t s}. To split the current frame
vertically use @kbd{C-t S}. If you have enough windows, you’ll notice
that the new frame will find a window for itself. You can now use the
normal navigation commands to switch windows in the frame. Note,
however, that if you switch by name or number to a window that is
already in another frame, you’ll switch to that frame.</p>

<p>Before too long, you’ll probably want to switch to another frame. Use
@kbd{C-t tab} to cycle through the frames. If you want to remove a
frame use @kbd{C-t R}. ratpoison automatically adjusts the size of the
other frames to take up the free space. Unfortunately ratpoison may
not always fill it in the way you might like it to.</p>

<p>Finally, when you’ve had enough of the splitting and you just want
good ol’ full screen ratpoison press @kbd{C-t Q} to remove all splits
and leave you with the current window full screen.</p>

<p>@deffn Command remove
Kill the current frame. This is a no-op if there is only one frame.
@end deffn</p>

<p>@deffn Command only
Kill all frames but the current one.
@end deffn</p>

<p>@deffn Command split @var{n}
@deffnx Command vsplit @var{n}
Split the current frame vertically in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@var{n} is either a fraction of the form @code{x/y} or a number. If it
is a fraction then the current frame is resized to that fraction of
its original size and the new frame takes up the remaining space. For
instance, @code{split 1/4} will split the current frame to a quarter
of its original size and the new frame will then be 3/4 of the size of
the original frame.</p>

<p>If it is a pixel, the original frame is resized to that many
pixels. If @var{n} has a minus sign before it, then the new frame will
shrink by that many pixels.
@end deffn</p>

<p>@deffn Command hsplit @var{n}
Split the current frame horizontally in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@var{n} is either a fraction of the form @code{x/y} or a number. If it
is a fraction then the current frame is resized to that fraction of
its original size and the new frame takes up the remaining space. For
instance, @code{split 1/4} will split the current frame to a quarter
of its original size and the new frame will then be 3/4 of the size of
the original frame.</p>

<p>If it is a pixel, the original frame is resized to that many
pixels. If @var{n} has a minus sign before it, then the new frame will
shrink by that many pixels.
@end deffn</p>

<p>@node Resizing Frames
@section Resizing Frames
ratpoison provides a command, @command{resize}, that resizes the
current frame. It is bound to the key @kbd{C-t r} by
default. @command{resize} can be used non-interactively by providing
two arguments: the number of pixels to grow horizontally and the
number to grow vertically. For example, if you wanted to grow the
current window by 10 pixels horizontally and shrink it vertically by
50 you could enter the command:</p>

<p>@example
resize 10 -50
@end example</p>

<p>When resizing interactively, the following keys are used:</p>

<p>@table @kbd
@item C-p
Grow the frame vertically.
@item C-n
Shrink the frame vertically.
@item C-f
Grow the frame horizontally.
@item C-b
Shrink the frame horizontally.
@item return
Accept the new frame size.
@item C-g
Abort and restore the frame to its original size.
@end table</p>

<p>The increment size used to resize the frame interactively is
customized with the command @command{set resizeunit}.</p>

<p>@deffn Command {set resizeunit} @var{pixels}
Set the number of pixels a frame will grow or shrink by when being
dynamically resized.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command resize @var{horizontal} @var{vertical}
Resize the current frame by @var{horizontal} pixels horizontally, and
@var{vertical} pixels vertically. If no arguments are given and the
command is called interactively, ratpoison will let the user
dynamically resize the frame using @kbd{C-p} to shrink vertically,
@kbd{C-n} to grow vertically, @kbd{C-b} to shrink horizontally,
@kbd{C-f} to grow horizontally, and @kbd{s} to shrink the frame to the
size of the window (See the @command{shrink} command). When you have
resized the frame to your liking, press @kbd{Return} to finish.
@end deffn</p>

<p>@deffn Command shrink
If a window has resize increment hints, such as xterms, the window may
not be able to take up the whole frame. In this case, use this command
to suck the frame up to the to window, reclaiming any wasted space.
@end deffn</p>

<p>@node Frame Navigation Commands
@section Frame Navigation Commands</p>

<p>Here are the commands for Navigating frames.</p>

<p>@deffn Command fselect @var{n}
Select a frame by number. If an argument is passed to it then attempt
to select the frame whose number is @var{n}. If not, ratpoison will
print a number at the top left corner of each frame and wait for the
user to type the number they wish to select. Currently there is no way
to select a frame whose number is greater than 9 unless the number is
passed as an argument.
@end deffn</p>

<p>@deffn Command curframe
Indicate which frame is the current frame.
@end deffn</p>

<p>@deffn Command focus
cycle through ratpoison’s frames.
@end deffn</p>

<p>@deffn Command focusprev
cycle through ratpoison’s frames backwards.
@end deffn</p>

<p>@deffn Command focusdown
Move to the frame below the current frame.
@end deffn</p>

<p>@deffn Command focuslast
Switch to the last focused frame.
@end deffn</p>

<p>@deffn Command focusleft
Move to the frame left of the current frame.
@end deffn</p>

<p>@deffn Command focusright
Move to the frame right of the current frame.
@end deffn</p>

<p>@deffn Command focusup
Move to the frame above the current frame.
@end deffn</p>

<p>@node Saving and Restoring Frame Sets
@section Saving and Restoring Frame Sets
ratpoison provides two commands, @command{fdump} and
@command{frestore}, that allow the user to save and restore frame
configurations. Let’s say, for example, you have split your desktop
into several frames with some windows in these frames and now you want
to quickly bring Emacs forward and browse some code (full-screen of
course) then return to your funky frame configuration. You could use
@command{fdump} to dump the frames, hit @kbd{C-t Q} to remove all
frames, and then select your emacs window. When you’ve finished with
emacs you could use @command{frestore} to restore the windows and
frames.</p>

<p>If a frame contained a window when you dumped the frame layout but
that window is not present when you restore the layout, the frame
holding that window will be blank.</p>

<p>Calling @command{fdump} and @command{frestore} and copying and pasting
the layout by hand each time is a bit cumbersome. There are some
simple bindings in @file{doc/sample.ratpoisonrc} that allow you to
save and restore frame layouts with the press of a key.</p>

<p>@deffn Command fdump @var{screen-num}
Dump the current frame layout as text.</p>

<p>Without an argument the current screen’s frames are dumped. With an
argument the @var{screen-num}th screen is dumped. @xref{Multiple Screens}.
@end deffn</p>

<p>@deffn Command frestore @var{frames}
Restore the frame layout based on the list of frames
@var{frames}. @var{frames} should be the text that was printed after
calling @code{fdump}.
@end deffn</p>

<p>@deffn Command undo
Undo the last change of frame layout. This is especially helpful
after a @command{only} command. One can step at most @dfn{maxundos}
steps back in frame layout history.
@end deffn</p>

<p>@deffn Command redo
redo the last change that was undone.
@end deffn</p>

<p>@node Frame Numbering
@section Frame Numbering</p>

<p>Frames are normally numbered starting from 0. But this can be changed
with @command{set framesels} to, for instance, include letters as well.</p>

<p>@example
set framesels abcdefghijklmnopqrstuvwxyz
@end example</p>

<p>The above code will bind letters to frames instead of numbers.</p>

<p>@deffn Command set framesels @var{order}
Tell ratpoison what alphanumeric character to give each frame and in
what order.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Dedicated Frames
@section Dedicated Frames</p>

<p>A dedicated frame is a frame that will not allow new windows to appear
in it. Only the user may switch windows in this frame.</p>

<p>@deffn Command dedicate @var{arg}
Set the current frame as dedicated (@var{arg} = 1) or not (@var{arg} = 0).
If @var{arg} is not supplied, toggle the dedicated state of the
current frame.
@end deffn</p>

<p>@node Multiple Screens
@chapter Multiple Screens</p>

<p>When you’ve finally accumulated enough computer junk, you’ll find
yourself attaching a second screen to your computer. ratpoison has
functionality to help you get around your new and improved desktop
space.</p>

<p>To switch to another screen use the commands @command{nextscreen} and
@command{prevscreen}. Or, @command{sselect} to jump to a specified
screen. ratpoison will tell you which frame has focus by drawing the
current frame indicator in it.</p>

<p>Many commands operate only on the current screen. This becomes
apparent when you have 2 screens each with 1 frame. In each frame you
have an xterm. If you try to switch to the other xterm with the
command @command{other}, for instance, you’ll get a message ``No other
window.’’ ratpoison means there’s no other window to switch to in the
current screen. If you want to switch to the other xterm you can
switch to it by name (use @command{select} or @kbd{C-t ‘}), by number,
or you can use @command{nextscreen}, @command{prevscreen}, and
@command{sselect}.  The commands @command{focusright},
@command{focusleft}, @command{focusup}, and @command{focusdown} also
allow you to navigate across screens.</p>

<p>@deffn Command nextscreen
This jumps you to the next X11 screen. @command{nextscreen} is
used for dual-head displays and multiple screen setups.
@end deffn</p>

<p>@deffn Command prevscreen
This jumps you to the previous X11 screen. @command{prevscreen} is
used for dual-head displays and multiple screen setups.
@end deffn</p>

<p>@deffn Command sselect @var{n}
This jumps you to the @var{n}th X11 screen. Screen numbers start at 0.
@end deffn</p>

<p>@deffn Command sdump
Like fdump, but dump information about each screen instead of each frame.
@end deffn</p>

<p>@deffn Command sfdump
Dump all the screen number and the frames on all screens.
@end deffn</p>

<p>@deffn Command sfrestore
restore a frame configuration created using @command{sfdump}.
@end deffn</p>

<p>@node Keystrokes
@chapter Keystrokes</p>

<p>Interactive control of ratpoison is done entirely through
keystrokes. This chapter explains how keystrokes are stored and
manipulated.</p>

<p>ratpoison uses the Emacs style key notation. A combination of
modifiers and one non-modifier key combine to invoke an action. The
syntax is one or more modifiers seperated with dashes followed by a
dash and the non-modifier key name. For instance, holding down
control, shift, and super then pressing the spacebar would be
described as:</p>

<p>@example
S-C-s-space
@end example</p>

<p>The following is a list of modifiers ratpoison accepts:</p>

<p>@table @asis
@item S
Shift modifier
@item C
Control modifier
@item M
Meta modifier
@item A
Alt modifier
@item H
Hyper modifier
@item s
Super modifier
@end table</p>

<p>ratpoison uses the X11 keysym names for keys. Alphanumeric key names
are exactly what you see on your keyboard. Punctuation and other keys
have longer names which vary from X server to X server. To find the
name of a key, see the @command{describekey} command. Or to find the
name of a key not yet bound to an action, type @kbd{C-t} and then the
key. ratpoison will tell you it isn’t bound and give you the name of
the key.</p>

<p>@menu</p>
<ul>
  <li>Key Maps::</li>
  <li>Default Key Bindings::      <br />
@end menu</li>
</ul>

<p>@node Key Maps
@section Key Maps</p>

<p>All keystrokes exist inside a keymap. When you press the prefix key you
are accessing the @samp{root} keymap. By default all commands reside in
the @samp{root} key map and are accessed by pressing @kbd{C-t}.</p>

<p>There is also a top level key map, @samp{top}. Any keystroke in this key
map can be accessed simply by pressing the key. This is where the prefix
key resides.</p>

<p>The following example adds a @kbd{C-x b} key binding to switch windows,
much like @kbd{C-x b} in Emacs. See the functions below for full
descriptions.</p>

<p>@example</p>
<h1 id="create-the-key-map">Create the key map</h1>
<p>newkmap ctrl-x</p>
<h1 id="bind-b-to-select-on-our-new-key-map">Bind b to ‘select’ on our new key map</h1>
<p>definekey ctrl-x b select</p>
<h1 id="attach-our-keymap-to-the-top-level-key-map-via-c-x">Attach our keymap to the top level key map via C-x.</h1>
<p>definekey top C-x readkey ctrl-x
@end example</p>

<p>The following functions control creating, editing, and deleting key maps.</p>

<p>@deffn Command newkmap @var{kmap}
Create a new keymap named @var{kmap}.</p>

<p>@end deffn</p>

<p>@deffn Command delkmap @var{kmap}
Delete the keymap, @var{kmap}.
@end deffn</p>

<p>@deffn Command bind @var{Key} @var{command}
Bind a key to a ratpoison command on the @samp{root} keymap. This
command takes two arguments: the key to bind and the command to
run. For example, to bind @kbd{C-t R} to restart ratpoison:</p>

<p>@example
bind R restart
@end example
@end deffn</p>

<p>@deffn Command unbind @var{key}
Unbind a keystroke on the @samp{root} keymap.
@end deffn</p>

<p>@deffn Command definekey @var{kmap} @var{key} @var{command}
@command{definekey} works exactly like @command{bind} except that it
can bind keys on any key map (not just @samp{root}).
@end deffn</p>

<p>@deffn Command undefinekey @var{kmap} @var{key}
Like @command{unbind} except that you pass it a key map in @var{kmap}.
@end deffn</p>

<p>@deffn Command readkey @var{kmap}
Read a key from the keyboard and execute the command associated with
it in the keymap, @var{kmap}.
@end deffn</p>

<p>@deffn Command link @var{key}
Call the command that @var{key} is bound to. For instance
@command{link C-t} would call the command @command{other} and switch
to the last window.
@end deffn</p>

<p>@deffn Command describekey @var{keymap}
An interactive way to find the command bound to a given key on the
specified keymap. This command will wait for the user to type a
key. When the user does, the command will display the command bound to
this key.
@end deffn</p>

<p>@deffn Command {set topkmap} @var{kmap}
Set the top level keymap to @var{kmap}. You might use this to swap
between several common keymappings or to implement modes.
@end deffn</p>

<p>@node Default Key Bindings
@section Default Key Bindings</p>

<p>The default keystrokes are listed in this chapter. Not all commands
are accessible by default by keys.</p>

<p>@table @kbd</p>

<p>@item C-t C-t
Switch to the last window.</p>

<p>@item C-t t
Sometimes you need to send a C-t to the current window. This keystroke
does just that.</p>

<p>@item C-t 0-9
Switch to the numbered window.</p>

<p>@item C-t -
Select no window, essentially hiding all windows in the current frame.</p>

<p>@item C-t A
@item C-t C-A
Rename the current window. The window’s new name will prevail for the
rest of its lifetime.</p>

<p>@item C-t K
@item C-t C-K
Send a DestroyClient event to the current window. This will terminate
the application without question.</p>

<p>@item C-t n
@item C-t C-n
@item C-t Return
@item C-t C-Return
@item C-t Space
@item C-t C-Space
Go to next window.</p>

<p>@item C-t p
@item C-t C-p
Go to previous window.</p>

<p>@item C-t ‘
@item C-t C-‘
Go to a window by name.  You will usually only need to type the first
few characters of the window name.</p>

<p>@item C-t a
@item C-t C-a
Display the current time of day.</p>

<p>@item C-t c
@item C-t C-c
Open a new X terminal.</p>

<p>@item C-t :
This allows you to execute a single ratpoison command.</p>

<p>@item C-t !
Run a shell command.</p>

<p>@item C-t C-!
Run a shell command through an X terminal.</p>

<p>@item C-t i
@item C-t C-i
Display information about the current window.</p>

<p>@item C-t k
@item C-t C-k
Close the current window.</p>

<p>@item C-t l
@item C-t C-l
Redisplay the current window. Sometimes windows don’t respond correctly
to the initial maximize event and need some coaxing. This is a fancy way
of saying there are still bugs in ratpoison. @kbd{C-t l} will force the
current window to maximize.</p>

<p>@item C-t m
@item C-t C-m
Display the last message.</p>

<p>@item C-t v
@item C-t C-v
Display the version of ratpoison.</p>

<p>@item C-t V
@item C-t C-V
Display ratpoison’s license.</p>

<p>@item C-t w
@item C-t C-w
Display the list of managed windows. The current window is highlighted.</p>

<p>@item C-t s
@item C-t C-s
Split the current window horizontally in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@item C-t S
@item C-t C-S
Split the current window vertically in two. The last accessed window not
occupying a frame will be the second window.</p>

<p>@item C-t tab
Cycle through ratpoison’s frames.</p>

<p>@item C-t M-tab
Switch to the last focused frame.</p>

<p>@item C-t Q
Kill all frames but the current one.</p>

<p>@item C-t R
Kill the current frame. This is a no-op if there is only one frame.</p>

<p>@item C-t r
@item C-t C-r
Resize the current frame.</p>

<p>@item C-t b
@item C-t C-b
Banish the mouse to the lower right corner of the screen.</p>

<p>@item C-t ?
Display a help screen.</p>

<p>@item C-t f
@item C-t C-f
select a frame by number.</p>

<p>@item C-t F
Indicate which frame is the current frame.</p>

<p>@item C-t Down
Move to the frame below the current frame.</p>

<p>@item C-t Left
Move to the frame left of the current frame.</p>

<p>@item C-t Right
Move to the frame right of the current frame.</p>

<p>@item C-t Up
Move to the frame above the current frame.</p>

<p>@item C-t C-Down
Exchange the window in the current frame with the window in the frame below it.</p>

<p>@item C-t C-Left
Exchange the window in the current frame with the window in the frame to the left of it.</p>

<p>@item C-t C-Right
Exchange the window in the current frame with the window in the frame to the rigth of it.</p>

<p>@item C-t C-Up
Exchange the window in the current frame with the window in the frame above it.</p>

<p>@item C-t x
@item C-t C-x
Choose a frame and exchange the window in the current frame with the
window in the chosen frame.</p>

<p>@end table</p>

<p>@node Hooks
@chapter Hooks</p>

<p>One of the goals of ratpoison is to allow users to create exciting
customization to fit their specific needs. Hooks allow a user to latch
scripts onto certain events.</p>

<p>Each hook contains a list of commands to be executed when the
appropriate event occurs in ratpoison. For example, if you want to warp
the rat to corner of the screen every time you press a top level bound
key, you could add this to you .ratpoisonrc file:</p>

<p>@example
addhook key banish
@end example</p>

<p>That should keep the rat out of your way.</p>

<p>@deffn Command addhook @var{hook} @var{command}
Add a @var{command} to @var{hook}. When the hook is run, @var{command}
will be executed.</p>

<p>The following hooks are available:</p>

<p>@table @asis
@item key
Run when a top level key is pressed (by default the only top level key
is the prefix key).
@item switchwin
Run when the user switches to a different window in the current frame.
@item switchframe
Run when the user switches to another frame. This is also run when the
user switches to a different screen, since a frame switch also occurs.
@item switchgroup
Run when the user switches to a different group.
@item switchscreen
Run when the user switches to a different screen.
@item deletewindow
Run when a window is deleted.
@item newwindow
Run after a new window is mapped.
@item titlechanged
Run when the current window’s title changes.
@item quit
Run when ratpoison exits.
@item restart
Run when ratpoison restarts.
@end table</p>

<p>@end deffn</p>

<p>@deffn Command remhook @var{hook} @var{command}
Remove @var{command} from the hook. See @command{addhook} for a list
of available hooks.
@end deffn</p>

<p>@deffn Command listhook @var{hook}
List the commands that will be run when @var{hook} is fired.
@end deffn</p>

<p>@node The Status Bar
@chapter The Status Bar</p>

<p>ratpoison presents status and output through the status bar. By default
it is located in the top right corner of the screen.</p>

<p>This chapter presents commands for manipulating the status bar.</p>

<p>Since it is the only visible evidence that ratpoison is running (as
opposed to the invisible evidence including the lack of title bars and
your favorite desktop background) there are also copious visual
customizations available for those rainy days.</p>

<p>@deffn Command lastmsg
Display the last message.
@end deffn</p>

<p>@deffn Command echo @var{text}
Display @var{text} as a message.
@end deffn</p>

<p>@deffn Command {set msgwait} @var{n}
Set the bar’s timeout in seconds.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set inputwidth} @var{n}
Set the width of the input window.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set font} @var{font}
Set the font. @var{font} is a font string like @samp{9x15bold}.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set framefmt} @var{fmt}
Set the text that appears when the @command{curframe} command is
called. @var{fmt} is a format string that accepts the same format
characters as @command{set winfmt}.
@end deffn</p>

<p>@deffn Command {set fgcolor} @var{color}
Set the foreground color for all text ratpoison displays. @var{color}
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set bgcolor} @var{color}
Set the background color for all text ratpoison displays. @var{color}
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set fwcolor} @var{color}
Set the border color for the focused window.
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set bwcolor} @var{color}
Set the border color for unfocused windows.
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set framemsgwait} @var{n}
Set the duration the @samp{Current frame} indicator is shown.  If seconds
is zero, wait until the next interactive command.  If seconds is -1,
don’t show any message.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set barpadding} @var{x} @var{y}
Set the horizontal and vertical padding inside the bar.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set bargravity} @var{g}
Set the default alignment for the message bar. See the @command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set barborder} @var{n}
Set the border width for the bar window.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set barinpadding} @var{n}
Set whether the bar window appears at the edge of the screen when there is
padding – that is, within the “padding” area – or whether it appears at the
edge of the window area.  “1” represents the former, “0” the latter.  See the
@command{set padding} and @command{set bargravity} commands.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Using Other Window Managers
@chapter Using Other Window Managers</p>

<p>There are times when a program has been so badly written that it is
virtually impossible to use under ratpoison. Some authors have tailored
their programs to certain window management paradigms so aggressively
that very little can be done. Ratpoison has two commands to help you
through these difficult times: @command{tmpwm} and @command{newwm}.</p>

<p>These commands should be used sparingly. They were created to allow
users to understand how a poorly designed program is intended to
function so they can build a replacement or patch an existing
alternative’s missing functionality.</p>

<p>According to independant studies, @command{tmpwm} has been used almost
exclusively to verify its correct operation – like a vintage sports
car: always kept in prime condition and never used.</p>

<p>@command{tmpwm} and @command{newwm} are provided for boasting and
completeness.</p>

<p>@deffn Command tmpwm @var{WM}
Gives control over to another window manager and regains control once
it has terminated. @var{WM} is the path to the new window
manager. This command is useful when you want to temporarily take a
look at another window manager, or program under a different window
manager, but you want to come back to ratpoison when you’ve finished
your investigation.
@end deffn</p>

<p>@deffn Command newwm @var{window-manager}
This is a bad-bad command. It kills ratpoison and revives that
ugly rodent! Yuck! Avoid!
@end deffn</p>

<p>@node Other Commands
@chapter Other Commands</p>

<p>The following is a list of commands that don’t fit in any existing
chapters.</p>

<p>@deffn Command abort
This is a pretty useless command. By default, it is bound to @kbd{C-t
g} and its purpose is to abort the current chain of keystrokes (just
like @kbd{C-g} in @samp{Emacs}).
@end deffn</p>

<p>@deffn Command alias @var{name} @var{command}
Allows you to name a ratpoison command something else. For
instance, if you frequently open emacs you may want to make an alias
called @samp{emacs} that loads emacs. You would do it like this:</p>

<p>@example
alias emacs exec emacs
@end example</p>

<p>An alias is treated exactly like a colon command in that you can call
it from the colon prompt, bind it to a key, and call it
non-interactively with @command{ratpoison -c}.
@end deffn</p>

<p>@deffn Command banish
Banish the mouse to the lower right corner of the screen.
@end deffn</p>

<p>@deffn Command banishrel
Banish the rat cursor to the lower right corner of the curren window.
If there isn’t a window in the current frame, it banishes the rat cursor
to the lower right corner of the frame.
@end deffn</p>

<p>@deffn Command chdir
Change the current directory for ratpoison.
@end deffn</p>

<p>@deffn Command colon @var{command}
Run a ratpoison command.
@end deffn</p>

<p>@deffn Command {set padding} @var{left} @var{top} @var{right} @var{bottom}
Set the padding around the edge of the screen.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set waitcursor} @var{n}
Set whether the rat cursor should change into a square when waiting
for a key. A non-zero number means change the cursor. Zero means don’t
change the cursor.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historysize} @var{n}
Set how many lines of history should be recorded.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historcompaction} @var{bool}
Set whether to remove multiple equal lines from history,
even if not adjacent.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historexpansion} @var{bool}
Set whether to expand ! using readline’s libhistory in input.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command escape @var{key}
Set the prefix to @var{key}. For example @samp{escape C-b} sets the
prefix key to @key{C-b}.
@end deffn</p>

<p>@deffn Command exchangedown
Exchange the current frame with the one below it.
@end deffn</p>

<p>@deffn Command exchangeleft
Exchange the current frame with the one to the left of it.
@end deffn</p>

<p>@deffn Command exchangeright
Exchange the current frame with the one to the right of it.
@end deffn</p>

<p>@deffn Command exchangeup
Exchange the current frame with the one above it.
@end deffn</p>

<p>@deffn Command exec @var{command}
Execute a shell command. By default, @kbd{C-t !} does this.
@end deffn</p>

<p>@deffn Command execa @var{command}
Execute a shell command but don’t record which frame it was executed
from. The client’s windows will pop up in whatever frame is current.
@end deffn</p>

<p>@deffn Command execf @var{frame} @var{command}
Execute a shell command and choose which frame the client’s first
window will open in. The client must be netwm compliant for this to
work.
@end deffn</p>

<p>@deffn Command getenv @var{env}
Display the value of the environment variable @var{env}.
@end deffn</p>

<p>@deffn Command getsel
Return the contents of the X11 selection.
@end deffn</p>

<p>@deffn Command help
Display a help screen that lists all bound keystrokes.
@end deffn</p>

<p>@deffn Command license
Display ratpoison’s license. By default, this is bound to @kbd{C-t V}.
@end deffn</p>

<p>@deffn Command meta @var{key}
@var{key} is an optional argument. When @var{key} is omitted, send a
@kbd{C-t} to the current window. Otherwise, send the key described by
@var{key} to the current window. Note that some applications by
default ignore the synthetic key that is sent using this command as it
is considered a security hole. xterm is one such application.</p>

<p>For example, if your @samp{Emacs} window is focused,</p>

<p>@example
meta M-x
@end example</p>

<p>Would cause emacs to prompt for an extended command.
@end deffn</p>

<p>@deffn Command prompt @var{prompt}
This command is only useful when called
non-interactively. @command{prompt} prompts the user for input using
@var{prompt} and returns the input.
@end deffn</p>

<p>@deffn Command putsel @var{text}
Make text the X11 selection.
@end deffn</p>

<p>@deffn Command quit
Quit ratpoison.
@end deffn</p>

<p>@deffn Command ratinfo
Display the x y coordinates of the rat cursor relative to the screen.
@end deffn</p>

<p>@deffn Command ratrelinfo
Display the x y coordinates of the rat cursor relative to the current window or current frame if no window is focused.
@end deffn</p>

<p>@deffn Command ratrelwarp @var{x} @var{y}
Warp the rat to the specified location relative to the current rat
position.
@end deffn</p>

<p>@deffn Command ratwarp @var{x} @var{y}
Warp the rat to the specified absolute location.
@end deffn</p>

<p>@deffn Command ratclick @var{button}
click the rat. @var{button} is either 1, 2, or 3. @var{button}
defaults to button 1.
@end deffn</p>

<p>@deffn Command rathold @var{state} @var{button}
click the rat button down if @var{state} is @samp{down} or release the button if @var{state} is @samp{up}.
@end deffn</p>

<p>@deffn Command redisplay
Extend the current window to the whole size of its current frame and
redisplay it. This can be used to:</p>

<p>@itemize @bullet
@item redisplay normal windows or bring transient windows to the full size of the frame as only normal windows are maximized by ratpoison.
@item fix xterms that didn’t catch ratpoison’s initial maximize event.
@end itemize</p>

<p>@end deffn</p>

<p>@deffn Command restart
Restart ratpoison.
@end deffn</p>

<p>@deffn Command set @var{var} @var{value}
Set the value of a ratpoison variable.</p>

<p>Here is a list of variables that can be set:</p>

<p>@itemize @bullet
@item framesels
@item winliststyle
@item barpadding
@item bgcolor
@item fgcolor
@item winname
@item winfmt
@item waitcursor
@item inputwidth
@item barborder
@item border
@item padding
@item font
@item bargravity
@item maxsizegravity
@item transgravity
@item wingravity
@item maxundos
@item resizeunit
@item historysize
@item historycompaction
@item historyexpansion
@item msgwait
@item framemsgwait
@item startupmessage
@item warp
@end itemize</p>

<p>@end deffn</p>

<p>@deffn Command setenv @var{env} @var{value}
Set the environment variable @var{env} to @var{value}
@end deffn</p>

<p>@deffn Command source @var{file}
Read a text file containing ratpoison commands.
@end deffn</p>

<p>@deffn Command swap @var{destination-frame} @var{source-frame}
When called interactively prompt for a frame and swap its window with
the window in the current frame. An optional second argument allows
swapping of windows between arbitrary frames.
@end deffn</p>

<p>@deffn Command time
Show current time in the status bar.
@end deffn</p>

<p>@deffn Command unalias @var{name}
Remove @var{name} from the list of defined aliases.
@end deffn</p>

<p>@deffn Command unsetenv @var{env}
Clear the value of the environment variable, @var{env}.
@end deffn</p>

<p>@deffn Command verbexec @var{command}
Verbosely exec the shell command @var{command}. Raptoison displays a
message saying command was executed.
@end deffn</p>

<p>@deffn Command version
Print ratpoison version.  By default, this is bound to @kbd{C-t v}.
@end deffn</p>

<p>@node Input
@chapter Input
At various times ratpoison will prompt you for input. Ratpoison sports
a fully featured line editor. The following table lists the keystrokes
and actions:</p>

<p>@table @key
@item C-g
@itemx escape
abort the command requesting input.</p>

<p>@item C-f
@itemx right arrow
move forward a character.</p>

<p>@item C-b
@itemx left arrow
move backward a character.</p>

<p>@item M-f
move forward a word.</p>

<p>@item M-b
move backward a word.</p>

<p>@item C-a
@itemx home
move to the beginning of the line.</p>

<p>@item C-e
@itemx end
move to the end of the line.</p>

<p>@item C-d
@itemx delete
delete the character at point.</p>

<p>@item M-d
delete the word at point.
@item backspace
delete the character before the point.</p>

<p>@item M-backspace
delete the word before the point.</p>

<p>@item C-k
delete from the point to the end of the line.</p>

<p>@item C-u
delete from the point to the beginning of the line.</p>

<p>@item C-y
Yank the text from the X11 cut buffer.</p>

<p>@item C-p
@itemx up arrow
Cycle backwards through the history (This command does nothing if
ratpoison was configured with the @code{–disable-history} configure
option).</p>

<p>@item C-n
@itemx down arrow
Cycle forwards through the history (This command does nothing if
ratpoison was configured with the @code{–disable-history} configure
option).</p>

<p>@item return
submit the line of text.</p>

<p>@item tab
complete the text up to the point or if there are several possible
completions, cycle through them. This only works in certain
contexts. Tab completion will complete a shell command, a window name,
a group name, and colon commands in their appropriate context
(i.e. when being asked for a window name).</p>

<p>@item S-iso-lefttab
This is shift + tab by the way. This does the same as tab, but cycles
backwards through the completions.</p>

<p>@end table</p>

<p>All input is stored in the same history list. By default ratpoison has
a history length of 100 entries. This history is saved to the file
@file{~/.ratpoison_history} and is loaded when you start
ratpoison. This means your history sticks between sessions. This
assumes history has not been disabled on compilation.</p>

<p>@node Command Line Arguments
@chapter Command Line Arguments
ratpoison supports command line arguments to request various actions
when invoking ratpoison.</p>

<p>@table @code
@item -h, –help
Display this help screen</p>

<p>@item -v, –version
Display the version</p>

<p>@item -d, –display
Specify the X display to connect to.</p>

<p>@item -s, –screen
Specify the screen to use. By default ratpoison runs on all
screens. You can tell it to use just one with this option.</p>

<p>@item -c, –command
Send ratpoison a colon-command. This allows you to control ratpoison
from the command-line. with the @option{-c} option you can script
ratpoison using any programming language that can spawn a
process. Some commands behave differently when invoked this
way. Currently the only commands that behaves differently are the
@code{windows} and @code{set} commands. For @code{windows}, instead of
displaying the window list in a message window, it is printed to
stdout. The output can then be captured and used in the ratpoison
script. For instance, this could be used to check whether a program is
running and if it is switch to its window otherwise launch it.</p>

<p>It should also be noted that multiple @option{-c} options can be used.</p>

<p>to facilitate writing scripts, the @env{RATPOISON} environment
variable is set to the full path of the ratpoison binary.</p>

<p>@example
$ ratpoison -c split -c split
@end example</p>

<p>Here ratpoison would split the current frame twice.</p>

<p>@item -i, –interactive
Force ratpoison to execute commands in interactive mode. This is used
in conjunction with the @option{-c} option.</p>

<p>@item -f, –file
Specify an alternate configuration file. @xref{Startup file}.</p>

<p>@end table</p>

<p>@node Startup file
@chapter Startup file</p>

<p>Now you’ve probably read the web page, and you’ve no doubt dug up some
old file I forgot about. You’re probably wondering, ``say, didn’t he say
there was no configuration file to customize?’’. Okay, ya got me. But let’s
be honest here: ratpoison is so pure and fast-acting, customization is
barely worth the extra effort. In the off chance that you need to make
ratpoison your own, we now support it.</p>

<p>On startup ratpoison looks for @file{~/.ratpoisonrc} and runs it through
the command parser. If @file{~/.ratpoisonrc} does not exist, ratpoison
tries @file{/etc/ratpoisonrc}. This means any command you can bind a key
to or run at the command prompt (@kbd{C-t :}) you can execute in this rc
file.</p>

<p>You can also use the @option{-f} option to specify another startup
file, allowing you to switch between different configurations
(@pxref{Command Line Arguments}).</p>

<p>@deffn Command {set startupmessage} @var{n}
Turn on or off the startup_message. This is most useful in your
.ratpoisonrc file. @var{n} can be @code{1} (default) or @code{0}.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node GNU Free Documentation License
@chapter GNU Free Documentation License
@include fdl.texi</p>

<p>@node Command Index
@unnumbered Command Index</p>

<p>@printindex fn</p>

<p>@bye
{%n%s%t}. The following is a list of valid format
characters:</p>

<p>@table @samp
@item %a
Application Name
@item %c
Resource Class
@item %f
The frame number the window is displayed in or a space if it is not in
a frame.
@item %g
The window’s gravity setting
@item %h
The window’s height
@item %H
The window’s height increment hint.
@item %i
X11 Window ID
@item %l
A unique number based on when the window was last accessed. The higher
the number, the more recently it was accessed.
@item %n
The window number
@item %p
Process ID (‘?’ if _NET_WM_PID isn’t set)
@item %s
Window status (current window, last window, etc)
@item %S
The window’s screen
@item %t
Window Name
@item %T
Whether the window is a transient or not.
@item %M
Whether the window is a maxsize window or not.
@item %w
The window’s width
@item %W
The window’s width increment hint
@item %x
the window’s xrandr screen
@end table</p>

<p>Additionally there can be a number between the percent sign and the format
character, denoting a maximum length this value is to truncate to, e.g. @samp{%n%s%20t}.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command number @var{n} @var{target}
Set a window’s number to @var{n}. If another window occupies the
requested number already, then the windows’ numbers are swapped.</p>

<p>The second argument, @var{target}, is optional. It should be the
number of the window whose number will be changed. If @var{target} is
omitted ratpoison defaults to the current window.
@end deffn</p>

<p>@deffn Command {set transgravity} @var{g}
Set the default alignment for transient windows. See the
@command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set maxsizegravity} @var{g}
Set the default alignment for windows with maxsize hints. See the
@command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set border} @var{n}
Set the border width for all windows.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set onlyborder} @var{n}
Allows hiding of borders when only one frame is on the current
screen. The argument @var{n} can be @code{1} (default) which shows
borders or @code{0} which hides them for single frames.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Window Classes
@section Window Classes</p>

<p>Window classes are a way of grouping windows together. Windows that
are part of the same program generally have the same class. Ratpoison
takes advantage of this to help you navigate between windows of the
same class. This is useful if you only want to cycle through Emacs
frames or XTerms.</p>

<p>@deffn Command inext
Go to the next window in the window list that is in the same class as
the current window.
@end deffn</p>

<p>@deffn Command iprev
Go to the previous window in the window list that is in the same class
as the current window.
@end deffn</p>

<p>@deffn Command iother
Go to the last accessed window that is in the same class as the
current window.
@end deffn</p>

<p>@deffn Command cnext
Go to the next window in the window list that is in a different class
from the current window.
@end deffn</p>

<p>@deffn Command cprev
Go to the previous window in the window list that is in a different
class from the current window.
@end deffn</p>

<p>@deffn Command cother
Go to the last accessed window that is in a different class from the
current window.
@end deffn</p>

<p>@node Unmanaged Windows
@section Unmanaged Windows</p>

<p>ratpoison can intentionally not manage windows. ratpoison keeps a list
of strings and if any new window’s name matches a string in the list,
then it will not be picked up and managed by ratpoison.</p>

<p>The following are commands to manipulate this list</p>

<p>@deffn Command clrunmanaged
Clear the unmanaged window list.
@end deffn</p>

<p>@deffn Command unmanage @var{text}
Add @var{text} to the unmanaged window list. Any window whose name
matches any of the strings in the unmanaged window list will not be
handled in any way by ratpoison. This only applies to new windows (not
windows already managed by ratpoison).</p>

<p>When called with no arguments, the list is returned.
@end deffn</p>

<p>@node Rudeness
@section Rudeness</p>

<p>Some programs will attempt to steal the focus without the users
permission. Not only is this a sign of a lame programmers attempt to fix
a window manager problem in the wrong place, it’s just plain rude. By
default ratpoison will honour these rudeness requests, but it doesn’t
have to. Use the rudeness variable to deal with such programs.</p>

<p>@deffn Command {set rudeness} @var{n}
The rudeness variable lets you decide what windows pop-up
automatically and when. This is often useful for those deep hack
sessions when you absolutely can’t be disturbed.</p>

<p>There are two kinds of windows: normal windows (like an xterm) and
transient windows (generally pop-up dialog boxes). When a client
program wants to display a new window it makes a requests to
ratpoison. ratpoison then decides whether to grant the request and
display the window or ignore it. A client program can also request
that one of its windows be raised. You can customize ratpoison to
either honour these requests (the default operation) or ignore them.</p>

<p>@var{n} is a number from 0 to 15. Each of the four bits determine
which requests ratpoison grants.</p>

<p>@table @asis
@item Bit 0
Tells ratpoison to grant raise requests on transient windows</p>

<p>@item Bit 1
Tells ratpoison to grant raise requests on normal windows</p>

<p>@item Bit 2
Tells ratpoison to grant display requests on new transient windows</p>

<p>@item Bit 3
Tells ratpoison to grant display requests on new normal windows
@end table</p>

<p>For example, if you wanted only wanted to grant transient windows
raise requests and display requests you would type @samp{set rudeness
5}.
If a request is not granted ratpoison will tell you about the
request with a message like @samp{Raise request from window 1
(emacs)}.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@node Groups
@chapter Groups
ratpoison provides functionality to group windows together. This
coupled with saving and restoring frames configurations is what most
people would call @dfn{virtual desktops} or @dfn{workspaces}.</p>

<p>While ratpoison doesn’t explicitly provide support for such things, it
does allow you to write scripts to this end. Such a script exists in
@file{contrib/} called @file{rpws}. Consult that file for details on
setting up workspaces inside ratpoison.</p>

<p>Groups are more general purpose than workspaces. windows from one
group can be visible along with windows from another group. If you
switch to a different group nothing changes except the list of windows
you can cycle through. ratpoison allows the user to move a window from
one group to another, merge two groups, create new groups, and delete
existing ones.</p>

<p>The following is a list of of commands used for manipulating groups.</p>

<p>@deffn Command gnew @var{name}
Create a new group with the name @var{name}. @var{name} is
optional. The new group becomes the current group.
@end deffn</p>

<p>@deffn Command gnewbg @var{name}
This is the same as @command{gnew} except that the current group does
not change.
@end deffn</p>

<p>@deffn Command groups
Display a list of groups with a similar format to @command{windows}.
@end deffn</p>

<p>@deffn Command gmove @var{group}
Move the current window to @var{group}.
@end deffn</p>

<p>@deffn Command gnext
Go to the next group in the list.
@end deffn</p>

<p>@deffn Command gother
Go to the last accessed group.
@end deffn</p>

<p>@deffn Command gprev
Go to the previous group in the list.
@end deffn</p>

<p>@deffn Command grename
Rename current group.
@end deffn</p>

<p>@deffn Command gnumber @var{GROUP} @var{target}
Set a group’s number to @var{GROUP}. If another group occupies the
requested number already, then the groups’ numbers are swapped.</p>

<p>The second argument, @var{target}, is optional. It should be the
number of the group whose number will be changed. If @var{target} is
omitted ratpoison defaults to the current group.
@end deffn</p>

<p>@deffn Command gselect @var{group}
Select a particular group by name or number. If @var{group} is not
provided, ratpoison will interactively prompt for the group.
@end deffn</p>

<p>@deffn Command gmerge @var{group}
Merge @var{group} with the current group. All windows in @var{group}
will be moved to the current group. @var{group} is not deleted.
@end deffn</p>

<p>@deffn Command gdelete @var{group}
Delete a group. @var{group} is optional. If it is not specified
ratpoison will attempt to delete the current group. Only empty groups
can be deleted. To empty a group see @command{gmerge}.
@end deffn</p>

<p>@node Frames
@chapter Frames
Sometimes you may want to see two or more windows at the same
time. ratpoison allows you to split the display into frames (see
@ref{Concepts}). Each frame can then contain 1 window.</p>

<p>@menu</p>
<ul>
  <li>Splitting Frames::</li>
  <li>Resizing Frames::</li>
  <li>Frame Navigation Commands::</li>
  <li>Saving and Restoring Frame Sets::</li>
  <li>Frame Numbering::</li>
  <li>Dedicated Frames::          <br />
@end menu</li>
</ul>

<p>@node Splitting Frames
@section Splitting Frames</p>

<p>To split the
current frame horizontally use @kbd{C-t s}. To split the current frame
vertically use @kbd{C-t S}. If you have enough windows, you’ll notice
that the new frame will find a window for itself. You can now use the
normal navigation commands to switch windows in the frame. Note,
however, that if you switch by name or number to a window that is
already in another frame, you’ll switch to that frame.</p>

<p>Before too long, you’ll probably want to switch to another frame. Use
@kbd{C-t tab} to cycle through the frames. If you want to remove a
frame use @kbd{C-t R}. ratpoison automatically adjusts the size of the
other frames to take up the free space. Unfortunately ratpoison may
not always fill it in the way you might like it to.</p>

<p>Finally, when you’ve had enough of the splitting and you just want
good ol’ full screen ratpoison press @kbd{C-t Q} to remove all splits
and leave you with the current window full screen.</p>

<p>@deffn Command remove
Kill the current frame. This is a no-op if there is only one frame.
@end deffn</p>

<p>@deffn Command only
Kill all frames but the current one.
@end deffn</p>

<p>@deffn Command split @var{n}
@deffnx Command vsplit @var{n}
Split the current frame vertically in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@var{n} is either a fraction of the form @code{x/y} or a number. If it
is a fraction then the current frame is resized to that fraction of
its original size and the new frame takes up the remaining space. For
instance, @code{split 1/4} will split the current frame to a quarter
of its original size and the new frame will then be 3/4 of the size of
the original frame.</p>

<p>If it is a pixel, the original frame is resized to that many
pixels. If @var{n} has a minus sign before it, then the new frame will
shrink by that many pixels.
@end deffn</p>

<p>@deffn Command hsplit @var{n}
Split the current frame horizontally in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@var{n} is either a fraction of the form @code{x/y} or a number. If it
is a fraction then the current frame is resized to that fraction of
its original size and the new frame takes up the remaining space. For
instance, @code{split 1/4} will split the current frame to a quarter
of its original size and the new frame will then be 3/4 of the size of
the original frame.</p>

<p>If it is a pixel, the original frame is resized to that many
pixels. If @var{n} has a minus sign before it, then the new frame will
shrink by that many pixels.
@end deffn</p>

<p>@node Resizing Frames
@section Resizing Frames
ratpoison provides a command, @command{resize}, that resizes the
current frame. It is bound to the key @kbd{C-t r} by
default. @command{resize} can be used non-interactively by providing
two arguments: the number of pixels to grow horizontally and the
number to grow vertically. For example, if you wanted to grow the
current window by 10 pixels horizontally and shrink it vertically by
50 you could enter the command:</p>

<p>@example
resize 10 -50
@end example</p>

<p>When resizing interactively, the following keys are used:</p>

<p>@table @kbd
@item C-p
Grow the frame vertically.
@item C-n
Shrink the frame vertically.
@item C-f
Grow the frame horizontally.
@item C-b
Shrink the frame horizontally.
@item return
Accept the new frame size.
@item C-g
Abort and restore the frame to its original size.
@end table</p>

<p>The increment size used to resize the frame interactively is
customized with the command @command{set resizeunit}.</p>

<p>@deffn Command {set resizeunit} @var{pixels}
Set the number of pixels a frame will grow or shrink by when being
dynamically resized.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command resize @var{horizontal} @var{vertical}
Resize the current frame by @var{horizontal} pixels horizontally, and
@var{vertical} pixels vertically. If no arguments are given and the
command is called interactively, ratpoison will let the user
dynamically resize the frame using @kbd{C-p} to shrink vertically,
@kbd{C-n} to grow vertically, @kbd{C-b} to shrink horizontally,
@kbd{C-f} to grow horizontally, and @kbd{s} to shrink the frame to the
size of the window (See the @command{shrink} command). When you have
resized the frame to your liking, press @kbd{Return} to finish.
@end deffn</p>

<p>@deffn Command shrink
If a window has resize increment hints, such as xterms, the window may
not be able to take up the whole frame. In this case, use this command
to suck the frame up to the to window, reclaiming any wasted space.
@end deffn</p>

<p>@node Frame Navigation Commands
@section Frame Navigation Commands</p>

<p>Here are the commands for Navigating frames.</p>

<p>@deffn Command fselect @var{n}
Select a frame by number. If an argument is passed to it then attempt
to select the frame whose number is @var{n}. If not, ratpoison will
print a number at the top left corner of each frame and wait for the
user to type the number they wish to select. Currently there is no way
to select a frame whose number is greater than 9 unless the number is
passed as an argument.
@end deffn</p>

<p>@deffn Command curframe
Indicate which frame is the current frame.
@end deffn</p>

<p>@deffn Command focus
cycle through ratpoison’s frames.
@end deffn</p>

<p>@deffn Command focusprev
cycle through ratpoison’s frames backwards.
@end deffn</p>

<p>@deffn Command focusdown
Move to the frame below the current frame.
@end deffn</p>

<p>@deffn Command focuslast
Switch to the last focused frame.
@end deffn</p>

<p>@deffn Command focusleft
Move to the frame left of the current frame.
@end deffn</p>

<p>@deffn Command focusright
Move to the frame right of the current frame.
@end deffn</p>

<p>@deffn Command focusup
Move to the frame above the current frame.
@end deffn</p>

<p>@node Saving and Restoring Frame Sets
@section Saving and Restoring Frame Sets
ratpoison provides two commands, @command{fdump} and
@command{frestore}, that allow the user to save and restore frame
configurations. Let’s say, for example, you have split your desktop
into several frames with some windows in these frames and now you want
to quickly bring Emacs forward and browse some code (full-screen of
course) then return to your funky frame configuration. You could use
@command{fdump} to dump the frames, hit @kbd{C-t Q} to remove all
frames, and then select your emacs window. When you’ve finished with
emacs you could use @command{frestore} to restore the windows and
frames.</p>

<p>If a frame contained a window when you dumped the frame layout but
that window is not present when you restore the layout, the frame
holding that window will be blank.</p>

<p>Calling @command{fdump} and @command{frestore} and copying and pasting
the layout by hand each time is a bit cumbersome. There are some
simple bindings in @file{doc/sample.ratpoisonrc} that allow you to
save and restore frame layouts with the press of a key.</p>

<p>@deffn Command fdump @var{screen-num}
Dump the current frame layout as text.</p>

<p>Without an argument the current screen’s frames are dumped. With an
argument the @var{screen-num}th screen is dumped. @xref{Multiple Screens}.
@end deffn</p>

<p>@deffn Command frestore @var{frames}
Restore the frame layout based on the list of frames
@var{frames}. @var{frames} should be the text that was printed after
calling @code{fdump}.
@end deffn</p>

<p>@deffn Command undo
Undo the last change of frame layout. This is especially helpful
after a @command{only} command. One can step at most @dfn{maxundos}
steps back in frame layout history.
@end deffn</p>

<p>@deffn Command redo
redo the last change that was undone.
@end deffn</p>

<p>@node Frame Numbering
@section Frame Numbering</p>

<p>Frames are normally numbered starting from 0. But this can be changed
with @command{set framesels} to, for instance, include letters as well.</p>

<p>@example
set framesels abcdefghijklmnopqrstuvwxyz
@end example</p>

<p>The above code will bind letters to frames instead of numbers.</p>

<p>@deffn Command set framesels @var{order}
Tell ratpoison what alphanumeric character to give each frame and in
what order.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Dedicated Frames
@section Dedicated Frames</p>

<p>A dedicated frame is a frame that will not allow new windows to appear
in it. Only the user may switch windows in this frame.</p>

<p>@deffn Command dedicate @var{arg}
Set the current frame as dedicated (@var{arg} = 1) or not (@var{arg} = 0).
If @var{arg} is not supplied, toggle the dedicated state of the
current frame.
@end deffn</p>

<p>@node Multiple Screens
@chapter Multiple Screens</p>

<p>When you’ve finally accumulated enough computer junk, you’ll find
yourself attaching a second screen to your computer. ratpoison has
functionality to help you get around your new and improved desktop
space.</p>

<p>To switch to another screen use the commands @command{nextscreen} and
@command{prevscreen}. Or, @command{sselect} to jump to a specified
screen. ratpoison will tell you which frame has focus by drawing the
current frame indicator in it.</p>

<p>Many commands operate only on the current screen. This becomes
apparent when you have 2 screens each with 1 frame. In each frame you
have an xterm. If you try to switch to the other xterm with the
command @command{other}, for instance, you’ll get a message ``No other
window.’’ ratpoison means there’s no other window to switch to in the
current screen. If you want to switch to the other xterm you can
switch to it by name (use @command{select} or @kbd{C-t ‘}), by number,
or you can use @command{nextscreen}, @command{prevscreen}, and
@command{sselect}.  The commands @command{focusright},
@command{focusleft}, @command{focusup}, and @command{focusdown} also
allow you to navigate across screens.</p>

<p>@deffn Command nextscreen
This jumps you to the next X11 screen. @command{nextscreen} is
used for dual-head displays and multiple screen setups.
@end deffn</p>

<p>@deffn Command prevscreen
This jumps you to the previous X11 screen. @command{prevscreen} is
used for dual-head displays and multiple screen setups.
@end deffn</p>

<p>@deffn Command sselect @var{n}
This jumps you to the @var{n}th X11 screen. Screen numbers start at 0.
@end deffn</p>

<p>@deffn Command sdump
Like fdump, but dump information about each screen instead of each frame.
@end deffn</p>

<p>@deffn Command sfdump
Dump all the screen number and the frames on all screens.
@end deffn</p>

<p>@deffn Command sfrestore
restore a frame configuration created using @command{sfdump}.
@end deffn</p>

<p>@node Keystrokes
@chapter Keystrokes</p>

<p>Interactive control of ratpoison is done entirely through
keystrokes. This chapter explains how keystrokes are stored and
manipulated.</p>

<p>ratpoison uses the Emacs style key notation. A combination of
modifiers and one non-modifier key combine to invoke an action. The
syntax is one or more modifiers seperated with dashes followed by a
dash and the non-modifier key name. For instance, holding down
control, shift, and super then pressing the spacebar would be
described as:</p>

<p>@example
S-C-s-space
@end example</p>

<p>The following is a list of modifiers ratpoison accepts:</p>

<p>@table @asis
@item S
Shift modifier
@item C
Control modifier
@item M
Meta modifier
@item A
Alt modifier
@item H
Hyper modifier
@item s
Super modifier
@end table</p>

<p>ratpoison uses the X11 keysym names for keys. Alphanumeric key names
are exactly what you see on your keyboard. Punctuation and other keys
have longer names which vary from X server to X server. To find the
name of a key, see the @command{describekey} command. Or to find the
name of a key not yet bound to an action, type @kbd{C-t} and then the
key. ratpoison will tell you it isn’t bound and give you the name of
the key.</p>

<p>@menu</p>
<ul>
  <li>Key Maps::</li>
  <li>Default Key Bindings::      <br />
@end menu</li>
</ul>

<p>@node Key Maps
@section Key Maps</p>

<p>All keystrokes exist inside a keymap. When you press the prefix key you
are accessing the @samp{root} keymap. By default all commands reside in
the @samp{root} key map and are accessed by pressing @kbd{C-t}.</p>

<p>There is also a top level key map, @samp{top}. Any keystroke in this key
map can be accessed simply by pressing the key. This is where the prefix
key resides.</p>

<p>The following example adds a @kbd{C-x b} key binding to switch windows,
much like @kbd{C-x b} in Emacs. See the functions below for full
descriptions.</p>

<p>@example</p>
<h1 id="create-the-key-map-1">Create the key map</h1>
<p>newkmap ctrl-x</p>
<h1 id="bind-b-to-select-on-our-new-key-map-1">Bind b to ‘select’ on our new key map</h1>
<p>definekey ctrl-x b select</p>
<h1 id="attach-our-keymap-to-the-top-level-key-map-via-c-x-1">Attach our keymap to the top level key map via C-x.</h1>
<p>definekey top C-x readkey ctrl-x
@end example</p>

<p>The following functions control creating, editing, and deleting key maps.</p>

<p>@deffn Command newkmap @var{kmap}
Create a new keymap named @var{kmap}.</p>

<p>@end deffn</p>

<p>@deffn Command delkmap @var{kmap}
Delete the keymap, @var{kmap}.
@end deffn</p>

<p>@deffn Command bind @var{Key} @var{command}
Bind a key to a ratpoison command on the @samp{root} keymap. This
command takes two arguments: the key to bind and the command to
run. For example, to bind @kbd{C-t R} to restart ratpoison:</p>

<p>@example
bind R restart
@end example
@end deffn</p>

<p>@deffn Command unbind @var{key}
Unbind a keystroke on the @samp{root} keymap.
@end deffn</p>

<p>@deffn Command definekey @var{kmap} @var{key} @var{command}
@command{definekey} works exactly like @command{bind} except that it
can bind keys on any key map (not just @samp{root}).
@end deffn</p>

<p>@deffn Command undefinekey @var{kmap} @var{key}
Like @command{unbind} except that you pass it a key map in @var{kmap}.
@end deffn</p>

<p>@deffn Command readkey @var{kmap}
Read a key from the keyboard and execute the command associated with
it in the keymap, @var{kmap}.
@end deffn</p>

<p>@deffn Command link @var{key}
Call the command that @var{key} is bound to. For instance
@command{link C-t} would call the command @command{other} and switch
to the last window.
@end deffn</p>

<p>@deffn Command describekey @var{keymap}
An interactive way to find the command bound to a given key on the
specified keymap. This command will wait for the user to type a
key. When the user does, the command will display the command bound to
this key.
@end deffn</p>

<p>@deffn Command {set topkmap} @var{kmap}
Set the top level keymap to @var{kmap}. You might use this to swap
between several common keymappings or to implement modes.
@end deffn</p>

<p>@node Default Key Bindings
@section Default Key Bindings</p>

<p>The default keystrokes are listed in this chapter. Not all commands
are accessible by default by keys.</p>

<p>@table @kbd</p>

<p>@item C-t C-t
Switch to the last window.</p>

<p>@item C-t t
Sometimes you need to send a C-t to the current window. This keystroke
does just that.</p>

<p>@item C-t 0-9
Switch to the numbered window.</p>

<p>@item C-t -
Select no window, essentially hiding all windows in the current frame.</p>

<p>@item C-t A
@item C-t C-A
Rename the current window. The window’s new name will prevail for the
rest of its lifetime.</p>

<p>@item C-t K
@item C-t C-K
Send a DestroyClient event to the current window. This will terminate
the application without question.</p>

<p>@item C-t n
@item C-t C-n
@item C-t Return
@item C-t C-Return
@item C-t Space
@item C-t C-Space
Go to next window.</p>

<p>@item C-t p
@item C-t C-p
Go to previous window.</p>

<p>@item C-t ‘
@item C-t C-‘
Go to a window by name.  You will usually only need to type the first
few characters of the window name.</p>

<p>@item C-t a
@item C-t C-a
Display the current time of day.</p>

<p>@item C-t c
@item C-t C-c
Open a new X terminal.</p>

<p>@item C-t :
This allows you to execute a single ratpoison command.</p>

<p>@item C-t !
Run a shell command.</p>

<p>@item C-t C-!
Run a shell command through an X terminal.</p>

<p>@item C-t i
@item C-t C-i
Display information about the current window.</p>

<p>@item C-t k
@item C-t C-k
Close the current window.</p>

<p>@item C-t l
@item C-t C-l
Redisplay the current window. Sometimes windows don’t respond correctly
to the initial maximize event and need some coaxing. This is a fancy way
of saying there are still bugs in ratpoison. @kbd{C-t l} will force the
current window to maximize.</p>

<p>@item C-t m
@item C-t C-m
Display the last message.</p>

<p>@item C-t v
@item C-t C-v
Display the version of ratpoison.</p>

<p>@item C-t V
@item C-t C-V
Display ratpoison’s license.</p>

<p>@item C-t w
@item C-t C-w
Display the list of managed windows. The current window is highlighted.</p>

<p>@item C-t s
@item C-t C-s
Split the current window horizontally in two. The last accessed window
not occupying a frame will be the second window.</p>

<p>@item C-t S
@item C-t C-S
Split the current window vertically in two. The last accessed window not
occupying a frame will be the second window.</p>

<p>@item C-t tab
Cycle through ratpoison’s frames.</p>

<p>@item C-t M-tab
Switch to the last focused frame.</p>

<p>@item C-t Q
Kill all frames but the current one.</p>

<p>@item C-t R
Kill the current frame. This is a no-op if there is only one frame.</p>

<p>@item C-t r
@item C-t C-r
Resize the current frame.</p>

<p>@item C-t b
@item C-t C-b
Banish the mouse to the lower right corner of the screen.</p>

<p>@item C-t ?
Display a help screen.</p>

<p>@item C-t f
@item C-t C-f
select a frame by number.</p>

<p>@item C-t F
Indicate which frame is the current frame.</p>

<p>@item C-t Down
Move to the frame below the current frame.</p>

<p>@item C-t Left
Move to the frame left of the current frame.</p>

<p>@item C-t Right
Move to the frame right of the current frame.</p>

<p>@item C-t Up
Move to the frame above the current frame.</p>

<p>@item C-t C-Down
Exchange the window in the current frame with the window in the frame below it.</p>

<p>@item C-t C-Left
Exchange the window in the current frame with the window in the frame to the left of it.</p>

<p>@item C-t C-Right
Exchange the window in the current frame with the window in the frame to the rigth of it.</p>

<p>@item C-t C-Up
Exchange the window in the current frame with the window in the frame above it.</p>

<p>@item C-t x
@item C-t C-x
Choose a frame and exchange the window in the current frame with the
window in the chosen frame.</p>

<p>@end table</p>

<p>@node Hooks
@chapter Hooks</p>

<p>One of the goals of ratpoison is to allow users to create exciting
customization to fit their specific needs. Hooks allow a user to latch
scripts onto certain events.</p>

<p>Each hook contains a list of commands to be executed when the
appropriate event occurs in ratpoison. For example, if you want to warp
the rat to corner of the screen every time you press a top level bound
key, you could add this to you .ratpoisonrc file:</p>

<p>@example
addhook key banish
@end example</p>

<p>That should keep the rat out of your way.</p>

<p>@deffn Command addhook @var{hook} @var{command}
Add a @var{command} to @var{hook}. When the hook is run, @var{command}
will be executed.</p>

<p>The following hooks are available:</p>

<p>@table @asis
@item key
Run when a top level key is pressed (by default the only top level key
is the prefix key).
@item switchwin
Run when the user switches to a different window in the current frame.
@item switchframe
Run when the user switches to another frame. This is also run when the
user switches to a different screen, since a frame switch also occurs.
@item switchgroup
Run when the user switches to a different group.
@item switchscreen
Run when the user switches to a different screen.
@item deletewindow
Run when a window is deleted.
@item newwindow
Run after a new window is mapped.
@item titlechanged
Run when the current window’s title changes.
@item quit
Run when ratpoison exits.
@item restart
Run when ratpoison restarts.
@end table</p>

<p>@end deffn</p>

<p>@deffn Command remhook @var{hook} @var{command}
Remove @var{command} from the hook. See @command{addhook} for a list
of available hooks.
@end deffn</p>

<p>@deffn Command listhook @var{hook}
List the commands that will be run when @var{hook} is fired.
@end deffn</p>

<p>@node The Status Bar
@chapter The Status Bar</p>

<p>ratpoison presents status and output through the status bar. By default
it is located in the top right corner of the screen.</p>

<p>This chapter presents commands for manipulating the status bar.</p>

<p>Since it is the only visible evidence that ratpoison is running (as
opposed to the invisible evidence including the lack of title bars and
your favorite desktop background) there are also copious visual
customizations available for those rainy days.</p>

<p>@deffn Command lastmsg
Display the last message.
@end deffn</p>

<p>@deffn Command echo @var{text}
Display @var{text} as a message.
@end deffn</p>

<p>@deffn Command {set msgwait} @var{n}
Set the bar’s timeout in seconds.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set inputwidth} @var{n}
Set the width of the input window.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set font} @var{font}
Set the font. @var{font} is a font string like @samp{9x15bold}.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set framefmt} @var{fmt}
Set the text that appears when the @command{curframe} command is
called. @var{fmt} is a format string that accepts the same format
characters as @command{set winfmt}.
@end deffn</p>

<p>@deffn Command {set fgcolor} @var{color}
Set the foreground color for all text ratpoison displays. @var{color}
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set bgcolor} @var{color}
Set the background color for all text ratpoison displays. @var{color}
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set fwcolor} @var{color}
Set the border color for the focused window.
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set bwcolor} @var{color}
Set the border color for unfocused windows.
is any valid X11 color.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set framemsgwait} @var{n}
Set the duration the @samp{Current frame} indicator is shown.  If seconds
is zero, wait until the next interactive command.  If seconds is -1,
don’t show any message.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set barpadding} @var{x} @var{y}
Set the horizontal and vertical padding inside the bar.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set bargravity} @var{g}
Set the default alignment for the message bar. See the @command{gravity} command.</p>

<p>When called with no arguments, the current setting is
returned.
@end deffn</p>

<p>@deffn Command {set barborder} @var{n}
Set the border width for the bar window.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set barinpadding} @var{n}
Set whether the bar window appears at the edge of the screen when there is
padding – that is, within the “padding” area – or whether it appears at the
edge of the window area.  “1” represents the former, “0” the latter.  See the
@command{set padding} and @command{set bargravity} commands.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node Using Other Window Managers
@chapter Using Other Window Managers</p>

<p>There are times when a program has been so badly written that it is
virtually impossible to use under ratpoison. Some authors have tailored
their programs to certain window management paradigms so aggressively
that very little can be done. Ratpoison has two commands to help you
through these difficult times: @command{tmpwm} and @command{newwm}.</p>

<p>These commands should be used sparingly. They were created to allow
users to understand how a poorly designed program is intended to
function so they can build a replacement or patch an existing
alternative’s missing functionality.</p>

<p>According to independant studies, @command{tmpwm} has been used almost
exclusively to verify its correct operation – like a vintage sports
car: always kept in prime condition and never used.</p>

<p>@command{tmpwm} and @command{newwm} are provided for boasting and
completeness.</p>

<p>@deffn Command tmpwm @var{WM}
Gives control over to another window manager and regains control once
it has terminated. @var{WM} is the path to the new window
manager. This command is useful when you want to temporarily take a
look at another window manager, or program under a different window
manager, but you want to come back to ratpoison when you’ve finished
your investigation.
@end deffn</p>

<p>@deffn Command newwm @var{window-manager}
This is a bad-bad command. It kills ratpoison and revives that
ugly rodent! Yuck! Avoid!
@end deffn</p>

<p>@node Other Commands
@chapter Other Commands</p>

<p>The following is a list of commands that don’t fit in any existing
chapters.</p>

<p>@deffn Command abort
This is a pretty useless command. By default, it is bound to @kbd{C-t
g} and its purpose is to abort the current chain of keystrokes (just
like @kbd{C-g} in @samp{Emacs}).
@end deffn</p>

<p>@deffn Command alias @var{name} @var{command}
Allows you to name a ratpoison command something else. For
instance, if you frequently open emacs you may want to make an alias
called @samp{emacs} that loads emacs. You would do it like this:</p>

<p>@example
alias emacs exec emacs
@end example</p>

<p>An alias is treated exactly like a colon command in that you can call
it from the colon prompt, bind it to a key, and call it
non-interactively with @command{ratpoison -c}.
@end deffn</p>

<p>@deffn Command banish
Banish the mouse to the lower right corner of the screen.
@end deffn</p>

<p>@deffn Command banishrel
Banish the rat cursor to the lower right corner of the curren window.
If there isn’t a window in the current frame, it banishes the rat cursor
to the lower right corner of the frame.
@end deffn</p>

<p>@deffn Command chdir
Change the current directory for ratpoison.
@end deffn</p>

<p>@deffn Command colon @var{command}
Run a ratpoison command.
@end deffn</p>

<p>@deffn Command {set padding} @var{left} @var{top} @var{right} @var{bottom}
Set the padding around the edge of the screen.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set waitcursor} @var{n}
Set whether the rat cursor should change into a square when waiting
for a key. A non-zero number means change the cursor. Zero means don’t
change the cursor.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historysize} @var{n}
Set how many lines of history should be recorded.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historcompaction} @var{bool}
Set whether to remove multiple equal lines from history,
even if not adjacent.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command {set historexpansion} @var{bool}
Set whether to expand ! using readline’s libhistory in input.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@deffn Command escape @var{key}
Set the prefix to @var{key}. For example @samp{escape C-b} sets the
prefix key to @key{C-b}.
@end deffn</p>

<p>@deffn Command exchangedown
Exchange the current frame with the one below it.
@end deffn</p>

<p>@deffn Command exchangeleft
Exchange the current frame with the one to the left of it.
@end deffn</p>

<p>@deffn Command exchangeright
Exchange the current frame with the one to the right of it.
@end deffn</p>

<p>@deffn Command exchangeup
Exchange the current frame with the one above it.
@end deffn</p>

<p>@deffn Command exec @var{command}
Execute a shell command. By default, @kbd{C-t !} does this.
@end deffn</p>

<p>@deffn Command execa @var{command}
Execute a shell command but don’t record which frame it was executed
from. The client’s windows will pop up in whatever frame is current.
@end deffn</p>

<p>@deffn Command execf @var{frame} @var{command}
Execute a shell command and choose which frame the client’s first
window will open in. The client must be netwm compliant for this to
work.
@end deffn</p>

<p>@deffn Command getenv @var{env}
Display the value of the environment variable @var{env}.
@end deffn</p>

<p>@deffn Command getsel
Return the contents of the X11 selection.
@end deffn</p>

<p>@deffn Command help
Display a help screen that lists all bound keystrokes.
@end deffn</p>

<p>@deffn Command license
Display ratpoison’s license. By default, this is bound to @kbd{C-t V}.
@end deffn</p>

<p>@deffn Command meta @var{key}
@var{key} is an optional argument. When @var{key} is omitted, send a
@kbd{C-t} to the current window. Otherwise, send the key described by
@var{key} to the current window. Note that some applications by
default ignore the synthetic key that is sent using this command as it
is considered a security hole. xterm is one such application.</p>

<p>For example, if your @samp{Emacs} window is focused,</p>

<p>@example
meta M-x
@end example</p>

<p>Would cause emacs to prompt for an extended command.
@end deffn</p>

<p>@deffn Command prompt @var{prompt}
This command is only useful when called
non-interactively. @command{prompt} prompts the user for input using
@var{prompt} and returns the input.
@end deffn</p>

<p>@deffn Command putsel @var{text}
Make text the X11 selection.
@end deffn</p>

<p>@deffn Command quit
Quit ratpoison.
@end deffn</p>

<p>@deffn Command ratinfo
Display the x y coordinates of the rat cursor relative to the screen.
@end deffn</p>

<p>@deffn Command ratrelinfo
Display the x y coordinates of the rat cursor relative to the current window or current frame if no window is focused.
@end deffn</p>

<p>@deffn Command ratrelwarp @var{x} @var{y}
Warp the rat to the specified location relative to the current rat
position.
@end deffn</p>

<p>@deffn Command ratwarp @var{x} @var{y}
Warp the rat to the specified absolute location.
@end deffn</p>

<p>@deffn Command ratclick @var{button}
click the rat. @var{button} is either 1, 2, or 3. @var{button}
defaults to button 1.
@end deffn</p>

<p>@deffn Command rathold @var{state} @var{button}
click the rat button down if @var{state} is @samp{down} or release the button if @var{state} is @samp{up}.
@end deffn</p>

<p>@deffn Command redisplay
Extend the current window to the whole size of its current frame and
redisplay it. This can be used to:</p>

<p>@itemize @bullet
@item redisplay normal windows or bring transient windows to the full size of the frame as only normal windows are maximized by ratpoison.
@item fix xterms that didn’t catch ratpoison’s initial maximize event.
@end itemize</p>

<p>@end deffn</p>

<p>@deffn Command restart
Restart ratpoison.
@end deffn</p>

<p>@deffn Command set @var{var} @var{value}
Set the value of a ratpoison variable.</p>

<p>Here is a list of variables that can be set:</p>

<p>@itemize @bullet
@item framesels
@item winliststyle
@item barpadding
@item bgcolor
@item fgcolor
@item winname
@item winfmt
@item waitcursor
@item inputwidth
@item barborder
@item border
@item padding
@item font
@item bargravity
@item maxsizegravity
@item transgravity
@item wingravity
@item maxundos
@item resizeunit
@item historysize
@item historycompaction
@item historyexpansion
@item msgwait
@item framemsgwait
@item startupmessage
@item warp
@end itemize</p>

<p>@end deffn</p>

<p>@deffn Command setenv @var{env} @var{value}
Set the environment variable @var{env} to @var{value}
@end deffn</p>

<p>@deffn Command source @var{file}
Read a text file containing ratpoison commands.
@end deffn</p>

<p>@deffn Command swap @var{destination-frame} @var{source-frame}
When called interactively prompt for a frame and swap its window with
the window in the current frame. An optional second argument allows
swapping of windows between arbitrary frames.
@end deffn</p>

<p>@deffn Command time
Show current time in the status bar.
@end deffn</p>

<p>@deffn Command unalias @var{name}
Remove @var{name} from the list of defined aliases.
@end deffn</p>

<p>@deffn Command unsetenv @var{env}
Clear the value of the environment variable, @var{env}.
@end deffn</p>

<p>@deffn Command verbexec @var{command}
Verbosely exec the shell command @var{command}. Raptoison displays a
message saying command was executed.
@end deffn</p>

<p>@deffn Command version
Print ratpoison version.  By default, this is bound to @kbd{C-t v}.
@end deffn</p>

<p>@node Input
@chapter Input
At various times ratpoison will prompt you for input. Ratpoison sports
a fully featured line editor. The following table lists the keystrokes
and actions:</p>

<p>@table @key
@item C-g
@itemx escape
abort the command requesting input.</p>

<p>@item C-f
@itemx right arrow
move forward a character.</p>

<p>@item C-b
@itemx left arrow
move backward a character.</p>

<p>@item M-f
move forward a word.</p>

<p>@item M-b
move backward a word.</p>

<p>@item C-a
@itemx home
move to the beginning of the line.</p>

<p>@item C-e
@itemx end
move to the end of the line.</p>

<p>@item C-d
@itemx delete
delete the character at point.</p>

<p>@item M-d
delete the word at point.
@item backspace
delete the character before the point.</p>

<p>@item M-backspace
delete the word before the point.</p>

<p>@item C-k
delete from the point to the end of the line.</p>

<p>@item C-u
delete from the point to the beginning of the line.</p>

<p>@item C-y
Yank the text from the X11 cut buffer.</p>

<p>@item C-p
@itemx up arrow
Cycle backwards through the history (This command does nothing if
ratpoison was configured with the @code{–disable-history} configure
option).</p>

<p>@item C-n
@itemx down arrow
Cycle forwards through the history (This command does nothing if
ratpoison was configured with the @code{–disable-history} configure
option).</p>

<p>@item return
submit the line of text.</p>

<p>@item tab
complete the text up to the point or if there are several possible
completions, cycle through them. This only works in certain
contexts. Tab completion will complete a shell command, a window name,
a group name, and colon commands in their appropriate context
(i.e. when being asked for a window name).</p>

<p>@item S-iso-lefttab
This is shift + tab by the way. This does the same as tab, but cycles
backwards through the completions.</p>

<p>@end table</p>

<p>All input is stored in the same history list. By default ratpoison has
a history length of 100 entries. This history is saved to the file
@file{~/.ratpoison_history} and is loaded when you start
ratpoison. This means your history sticks between sessions. This
assumes history has not been disabled on compilation.</p>

<p>@node Command Line Arguments
@chapter Command Line Arguments
ratpoison supports command line arguments to request various actions
when invoking ratpoison.</p>

<p>@table @code
@item -h, –help
Display this help screen</p>

<p>@item -v, –version
Display the version</p>

<p>@item -d, –display
Specify the X display to connect to.</p>

<p>@item -s, –screen
Specify the screen to use. By default ratpoison runs on all
screens. You can tell it to use just one with this option.</p>

<p>@item -c, –command
Send ratpoison a colon-command. This allows you to control ratpoison
from the command-line. with the @option{-c} option you can script
ratpoison using any programming language that can spawn a
process. Some commands behave differently when invoked this
way. Currently the only commands that behaves differently are the
@code{windows} and @code{set} commands. For @code{windows}, instead of
displaying the window list in a message window, it is printed to
stdout. The output can then be captured and used in the ratpoison
script. For instance, this could be used to check whether a program is
running and if it is switch to its window otherwise launch it.</p>

<p>It should also be noted that multiple @option{-c} options can be used.</p>

<p>to facilitate writing scripts, the @env{RATPOISON} environment
variable is set to the full path of the ratpoison binary.</p>

<p>@example
$ ratpoison -c split -c split
@end example</p>

<p>Here ratpoison would split the current frame twice.</p>

<p>@item -i, –interactive
Force ratpoison to execute commands in interactive mode. This is used
in conjunction with the @option{-c} option.</p>

<p>@item -f, –file
Specify an alternate configuration file. @xref{Startup file}.</p>

<p>@end table</p>

<p>@node Startup file
@chapter Startup file</p>

<p>Now you’ve probably read the web page, and you’ve no doubt dug up some
old file I forgot about. You’re probably wondering, ``say, didn’t he say
there was no configuration file to customize?’’. Okay, ya got me. But let’s
be honest here: ratpoison is so pure and fast-acting, customization is
barely worth the extra effort. In the off chance that you need to make
ratpoison your own, we now support it.</p>

<p>On startup ratpoison looks for @file{~/.ratpoisonrc} and runs it through
the command parser. If @file{~/.ratpoisonrc} does not exist, ratpoison
tries @file{/etc/ratpoisonrc}. This means any command you can bind a key
to or run at the command prompt (@kbd{C-t :}) you can execute in this rc
file.</p>

<p>You can also use the @option{-f} option to specify another startup
file, allowing you to switch between different configurations
(@pxref{Command Line Arguments}).</p>

<p>@deffn Command {set startupmessage} @var{n}
Turn on or off the startup_message. This is most useful in your
.ratpoisonrc file. @var{n} can be @code{1} (default) or @code{0}.</p>

<p>When called with no arguments, the current setting is returned.
@end deffn</p>

<p>@node GNU Free Documentation License
@chapter GNU Free Documentation License
@include fdl.texi</p>

<p>@node Command Index
@unnumbered Command Index</p>

<p>@printindex fn</p>

<p>@bye
{% endcodeblock %}</p>]]></content><author><name></name></author><category term="linux&gt;software&gt;dotfile" /></entry><entry><title type="html">Ratpoison WM</title><link href="https://ib.bsb.br/ratpoison-wm/" rel="alternate" type="text/html" title="Ratpoison WM" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-13T01:11:40+00:00</updated><id>https://ib.bsb.br/ratpoison-wm</id><content type="html" xml:base="https://ib.bsb.br/ratpoison-wm/"><![CDATA[<h3 id="step-1-install-ratpoison-and-essential-tools"><strong>Step 1: Install Ratpoison and Essential Tools</strong></h3>

<p>First, update your package lists and install Ratpoison. The rpws (Ratpoison Workspace System) script is included with the ratpoison package in Debian Bullseye. Consider installing dmenu for application launching and a basic terminal like xterm or rxvt-unicode.<br />
<code class="language-plaintext highlighter-rouge">sudo apt update</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt upgrade</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt install ratpoison dmenu xterm # Or rxvt-unicode, etc.</code><br />
<code class="language-plaintext highlighter-rouge"># Install other optional utilities you might find useful:</code><br />
<code class="language-plaintext highlighter-rouge"># sudo apt install alsamixergui bpytop brightnessctl catfish dialog gmrun gsimplecal neofetch </code><br />
<code class="language-plaintext highlighter-rouge"># python3-psutil unclutter viewnior xdotool scrot </code><br />
<code class="language-plaintext highlighter-rouge"># fonts-dejavu fonts-terminus nitrogen picom # (nitrogen for wallpaper, picom for compositing)</code></p>

<h3 id="step-2-create-a-ratpoison-session-file-for-lightdm"><strong>Step 2: Create a Ratpoison Session File for LightDM</strong></h3>

<p>LightDM uses .desktop files located in /usr/share/xsessions/ to identify available sessions. Create one for Ratpoison:<br />
<code class="language-plaintext highlighter-rouge">sudo nano /usr/share/xsessions/ratpoison.desktop</code></p>

<p>Add the following content:<br />
<code class="language-plaintext highlighter-rouge">[Desktop Entry]</code><br />
<code class="language-plaintext highlighter-rouge">Version=1.0</code><br />
<code class="language-plaintext highlighter-rouge">Encoding=UTF-8</code><br />
<code class="language-plaintext highlighter-rouge">Name=Ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">Comment=Minimalist Tiling Window Manager</code><br />
<code class="language-plaintext highlighter-rouge">Exec=ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">TryExec=ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">Icon=</code><br />
<code class="language-plaintext highlighter-rouge">Type=XSession</code></p>

<p>Save and close the file (e.g., Ctrl+X, then Y, then Enter in nano).</p>

<h3 id="step-3-configure-lightdm-for-ratpoison-autologin"><strong>Step 3: Configure LightDM for Ratpoison Autologin</strong></h3>

<p>To ensure LightDM launches Ratpoison for the autologin user, you need to update its configuration. Debian best practices suggest using configuration snippets in /etc/lightdm/lightdm.conf.d/. If you already have an autologin configuration file there (e.g., 50-autologin.conf), modify it. Otherwise, you can edit /etc/lightdm/lightdm.conf directly or create a new snippet.</p>

<ol>
  <li><strong>Edit or Create LightDM Configuration:</strong> For example, to create/edit a dedicated snippet:<br />
<code class="language-plaintext highlighter-rouge">sudo nano /etc/lightdm/lightdm.conf.d/60-autologin-ratpoison.conf</code><br />
Ensure the configuration specifies linaro and sets autologin-session to ratpoison. The autologin-session value should match the filename of the .desktop file created in Step 2 (without the .desktop extension).<br />
<code class="language-plaintext highlighter-rouge">[Seat:*]</code><br />
<code class="language-plaintext highlighter-rouge">autologin-user=linaro</code><br />
<code class="language-plaintext highlighter-rouge">autologin-user-timeout=0</code><br />
<code class="language-plaintext highlighter-rouge">autologin-session=ratpoison</code><br />
If you are editing an existing file that previously specified autologin-session=xfce (or similar), change it to ratpoison. Adding this line explicitly makes the autologin deterministic.</li>
  <li><strong>Note on Session Selection:</strong> While LightDM can sometimes remember the last session selected at the greeter, for an autologin setup, explicitly defining autologin-session is the most reliable method.</li>
</ol>

<h3 id="step-4-configure-ratpoison-ratpoisonrc"><strong>Step 4: Configure Ratpoison (~/.ratpoisonrc)</strong></h3>

<p>Create and configure the ~/.ratpoisonrc file in the home directory of the autologin user (i.e., /home/linaro/.ratpoisonrc). This file controls Ratpoison’s behavior, keybindings, and startup applications.<br />
<code class="language-plaintext highlighter-rouge"># Ensure you are the user ‘linaro’ or adjust path accordingly</code><br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.ratpoisonrc</code></p>

<p>Here’s a comprehensive example configuration:<br />
<code class="language-plaintext highlighter-rouge"># ~/.ratpoisonrc for linaro</code></p>
<section class="code-block-container" role="group" aria-label=" Code Block" data-filename="_code_block.txt" data-code="set winname title
set winliststyle column
set wingravity n
set winfmt &quot;%n: %t (%c)&quot;
set waitcursor 1
set transgravity center
set padding 0 0 0 24
set inputwidth 600
set historysize 1000
set gravity center
set font &quot;Intel One Mono:size=13&quot;
set border 0
set bgcolor silver
set barpadding 4 4
set bargravity c
set barborder 0

definekey top M-Tab next
definekey top M-ISO_Left_Tab prev

exec rpws init 9
exec rpbar
exec xsetroot -bitmap /home/linaro/Desktop/02-media/pics/wallpaper1.xbm -bg &quot;#073642&quot; -fg &quot;#345345&quot;
exec xrdb -merge /home/linaro/.Xresources
exec xfce4-power-manager
exec unclutter --timeout 2 --jitter 5
exec nm-applet
exec brightnessctl s 7
exec /usr/bin/rpws restore /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp

startup_message on
escape Super_L
banish
unmanage rpbar

addhook titlechanged exec rpbarsend
addhook switchwin exec rpbarsend
addhook switchgroup exec rpbarsend
addhook switchframe exec rpbarsend
addhook newwindow exec rpbarsend
addhook deletewindow exec rpbarsend

bind w exec thorium-browser
bind v exec paste_clipboard_from_file.sh
bind Up focusup
bind u undo
bind Tab focus 
bind t exec pcmanfm-qt --daemon-mode
bind space exec dmenu_run
bind Right focusright
bind Return exec x-terminal-emulator
bind r resize
bind q delete
bind k kill
bind Print exec xfce4-screenshooter
bind Page_Up exec rpws prev
bind Page_Down exec rpws next
bind minus vsplit
bind Left focusleft
bind KP_Separator exec xdotool key quotedbl key quotedbl key quotedbl
bind KP_9 exec rpws 9
bind KP_8 exec rpws 8
bind KP_7 exec rpws 7
bind KP_6 exec rpws 6
bind KP_5 exec rpws 5
bind KP_4 exec rpws 4
bind KP_3 exec rpws 3
bind KP_2 exec rpws 2
bind KP_1 exec rpws 1
bind KP_0 exec xdotool key apostrophe key apostrophe key apostrophe
bind i exec viewnior
bind g exec gsimplecal
bind F8 exec flatpak run io.github.zaps166.QMPlay2
bind F7 exec flatpak run com.github.ryonakano.reco
bind F6 exec flatpak run com.strlen.TreeSheets
bind F5 exec flatpak run com.github.tenderowl.frog
bind F4 exec flatpak run org.telegram.desktop
bind F1 exec thermal.sh
bind f only
bind Escape exec /usr/bin/rpws dump /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp
bind equal hsplit
bind e exec xnedit
bind Down focusdown
bind c exec write_clipboard_to_file.sh
bind BackSpace next
bind h exec x-terminal-emulator -e bpytop
bind apostrophe colon exec x-terminal-emulator -e 
bind 9 exec rpws 9
bind 8 exec rpws 8
bind 7 exec rpws 7
bind 6 exec rpws 6
bind 5 exec rpws 5
bind 4 exec rpws 4
bind 3 exec rpws 3
bind 2 exec rpws 2
bind 1 exec rpws 1
bind 0 remove
bind s-w exec x-terminal-emulator -e nm-connection-editor
bind s-Up exchangeup
bind s-u redo
bind s-Tab nextscreen
bind s-t exec sudo pcmanfm-qt
bind s-space exec ratpoison -c &quot;select `ratpoison -c &quot;windows %n: %c&quot; | dmenu | awk &#39;{print $1}&#39;`&quot;
bind s-Right exchangeright
bind s-Return exec sudo x-terminal-emulator
bind s-q abort
bind s-Print exec scrot -s -e &#39;xclip -selection clipboard -t image/png -i $f &amp;&amp; rm $f&#39;
bind s-Page_Up exec rpws movenext
bind s-Page_Down exec rpws moveprev
bind s-minus exec amixer set Master 5%-
bind s-Left exchangeleft
bind s-KP_9 exec rpws move9
bind s-KP_8 exec rpws move8
bind s-KP_7 exec rpws move7
bind s-KP_6 exec rpws move6
bind s-KP_5 exec rpws move5
bind s-KP_4 exec rpws move4
bind s-KP_3 exec rpws move3
bind s-KP_2 exec rpws move2
bind s-KP_1 exec rpws move1
bind s-g exec galculator
bind s-F1 exec reverse-thermal.sh
bind s-Escape exec /usr/bin/rpws restore /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp
bind s-equal exec amixer set Master 5%+
bind s-e exec xnc
bind s-Down exchangedown
bind s-BackSpace prev
bind s-b exec vorta
bind b exec sudo timeshift --create --comments &quot;Before making changes&quot;
bind s-apostrophe colon exec x-terminal-emulator -e sudo 
bind s-a title
bind s-9 exec rpws move9
bind s-8 exec rpws move8
bind s-7 exec rpws move7
bind s-6 exec rpws move6
bind s-5 exec rpws move5
bind s-4 exec rpws move4
bind s-3 exec rpws move3
bind s-2 exec rpws move2
bind s-1 exec rpws move1
bind s-0 exec amixer set Master toggle" data-download-link="" data-download-label="Download ">
  <code class="language-">set winname title
set winliststyle column
set wingravity n
set winfmt &quot;%n: %t (%c)&quot;
set waitcursor 1
set transgravity center
set padding 0 0 0 24
set inputwidth 600
set historysize 1000
set gravity center
set font &quot;Intel One Mono:size=13&quot;
set border 0
set bgcolor silver
set barpadding 4 4
set bargravity c
set barborder 0

definekey top M-Tab next
definekey top M-ISO_Left_Tab prev

exec rpws init 9
exec rpbar
exec xsetroot -bitmap /home/linaro/Desktop/02-media/pics/wallpaper1.xbm -bg &quot;#073642&quot; -fg &quot;#345345&quot;
exec xrdb -merge /home/linaro/.Xresources
exec xfce4-power-manager
exec unclutter --timeout 2 --jitter 5
exec nm-applet
exec brightnessctl s 7
exec /usr/bin/rpws restore /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp

startup_message on
escape Super_L
banish
unmanage rpbar

addhook titlechanged exec rpbarsend
addhook switchwin exec rpbarsend
addhook switchgroup exec rpbarsend
addhook switchframe exec rpbarsend
addhook newwindow exec rpbarsend
addhook deletewindow exec rpbarsend

bind w exec thorium-browser
bind v exec paste_clipboard_from_file.sh
bind Up focusup
bind u undo
bind Tab focus 
bind t exec pcmanfm-qt --daemon-mode
bind space exec dmenu_run
bind Right focusright
bind Return exec x-terminal-emulator
bind r resize
bind q delete
bind k kill
bind Print exec xfce4-screenshooter
bind Page_Up exec rpws prev
bind Page_Down exec rpws next
bind minus vsplit
bind Left focusleft
bind KP_Separator exec xdotool key quotedbl key quotedbl key quotedbl
bind KP_9 exec rpws 9
bind KP_8 exec rpws 8
bind KP_7 exec rpws 7
bind KP_6 exec rpws 6
bind KP_5 exec rpws 5
bind KP_4 exec rpws 4
bind KP_3 exec rpws 3
bind KP_2 exec rpws 2
bind KP_1 exec rpws 1
bind KP_0 exec xdotool key apostrophe key apostrophe key apostrophe
bind i exec viewnior
bind g exec gsimplecal
bind F8 exec flatpak run io.github.zaps166.QMPlay2
bind F7 exec flatpak run com.github.ryonakano.reco
bind F6 exec flatpak run com.strlen.TreeSheets
bind F5 exec flatpak run com.github.tenderowl.frog
bind F4 exec flatpak run org.telegram.desktop
bind F1 exec thermal.sh
bind f only
bind Escape exec /usr/bin/rpws dump /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp
bind equal hsplit
bind e exec xnedit
bind Down focusdown
bind c exec write_clipboard_to_file.sh
bind BackSpace next
bind h exec x-terminal-emulator -e bpytop
bind apostrophe colon exec x-terminal-emulator -e 
bind 9 exec rpws 9
bind 8 exec rpws 8
bind 7 exec rpws 7
bind 6 exec rpws 6
bind 5 exec rpws 5
bind 4 exec rpws 4
bind 3 exec rpws 3
bind 2 exec rpws 2
bind 1 exec rpws 1
bind 0 remove
bind s-w exec x-terminal-emulator -e nm-connection-editor
bind s-Up exchangeup
bind s-u redo
bind s-Tab nextscreen
bind s-t exec sudo pcmanfm-qt
bind s-space exec ratpoison -c &quot;select `ratpoison -c &quot;windows %n: %c&quot; | dmenu | awk &#39;{print $1}&#39;`&quot;
bind s-Right exchangeright
bind s-Return exec sudo x-terminal-emulator
bind s-q abort
bind s-Print exec scrot -s -e &#39;xclip -selection clipboard -t image/png -i $f &amp;&amp; rm $f&#39;
bind s-Page_Up exec rpws movenext
bind s-Page_Down exec rpws moveprev
bind s-minus exec amixer set Master 5%-
bind s-Left exchangeleft
bind s-KP_9 exec rpws move9
bind s-KP_8 exec rpws move8
bind s-KP_7 exec rpws move7
bind s-KP_6 exec rpws move6
bind s-KP_5 exec rpws move5
bind s-KP_4 exec rpws move4
bind s-KP_3 exec rpws move3
bind s-KP_2 exec rpws move2
bind s-KP_1 exec rpws move1
bind s-g exec galculator
bind s-F1 exec reverse-thermal.sh
bind s-Escape exec /usr/bin/rpws restore /home/linaro/Desktop/01-document/dotfiles/rpws_layouts.dmp
bind s-equal exec amixer set Master 5%+
bind s-e exec xnc
bind s-Down exchangedown
bind s-BackSpace prev
bind s-b exec vorta
bind b exec sudo timeshift --create --comments &quot;Before making changes&quot;
bind s-apostrophe colon exec x-terminal-emulator -e sudo 
bind s-a title
bind s-9 exec rpws move9
bind s-8 exec rpws move8
bind s-7 exec rpws move7
bind s-6 exec rpws move6
bind s-5 exec rpws move5
bind s-4 exec rpws move4
bind s-3 exec rpws move3
bind s-2 exec rpws move2
bind s-1 exec rpws move1
bind s-0 exec amixer set Master toggle</code>
</section>

<h4 id="rpbarini">~/.rpbar.ini</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[program]
# Window name for rpbar
win_name = rpbar

# Path for the communication socket with rpbarsend
# /tmp/ is generally standard and should work on Debian.
socket_path = /tmp/rpbarsocket

# Separator for program title (likely for ratpoison integration)
sep = $)@=

# Buffer size for communication with ratpoison
bufsize = 2048

# Timeout in seconds for communication
timeout_s = 5

[display]
# Whether rpbar is on the top (1) or bottom (0) of the screen
top = 0

# The Xorg screen (monitor) to display the bar on.
# '0' is typically the primary monitor. Adjust if you have multiple monitors
# and want it on a different one (e.g., 1 for secondary).
# Use `xrandr` to list screens if unsure.
screen = 0 ; Defaulting to primary screen, adjust if needed.

# Padding around the top/bottom of the text within the bar
padding = 4

# Left/right padding for elements like buttons
button_margin = 10

# Padding specifically for the status bar text area
status_padding = 30

# Font string for the bar (e.g., "Font Family Name:size=POINT_SIZE").
# CRITICAL: Ensure "Intel One Mono" is installed on your Debian Bullseye system.
# If not, replace with an available font (e.g., "DejaVu Sans Mono:size=10", "Liberation Mono:size=10", "Monospace:size=10").
# Check availability with `fc-list | grep "Your Font Name"`
font_str = Intel One Mono:size=13 ; ### VERIFY THIS FONT IS INSTALLED OR CHANGE IT ###

[color]
bordercolor = #d7d7d7
bgcolor = #353535
fgcolor = #d7d7d7
mainbgcolor = #d4ccb9
mainfgcolor = #45363b
statusbgcolor = #d7d7d7
statusfgcolor = #353535
</code></pre></div></div>

<h4 id="xresources">.Xresources</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! title      Nord XResources                                    +
! project    nord-xresources                                    +
! version    0.1.0                                              +
! repository https://github.com/arcticicestudio/nord-xresources +
! author     Arctic Ice Studio                                  +
! email      development@arcticicestudio.com                    +
! copyright  Copyright (C) 2016                                 +
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define nord0 #2E3440
#define nord1 #3B4252
#define nord2 #434C5E
#define nord3 #4C566A
#define nord4 #D8DEE9
#define nord5 #E5E9F0
#define nord6 #ECEFF4
#define nord7 #8FBCBB
#define nord8 #88C0D0
#define nord9 #81A1C1
#define nord10 #5E81AC
#define nord11 #BF616A
#define nord12 #D08770
#define nord13 #EBCB8B
#define nord14 #A3BE8C
#define nord15 #B48EAD

*.foreground:   nord4
*.background:   nord0
*.cursorColor:  nord4
*fading: 0
*fadeColor: nord3

*.color0: nord1
*.color1: nord11
*.color2: nord14
*.color3: nord13
*.color4: nord9
*.color5: nord15
*.color6: nord8
*.color7: nord5
*.color8: nord3
*.color9: nord11
*.color10: nord14
*.color11: nord13
*.color12: nord9
*.color13: nord15
*.color14: nord7
*.color15: nord6
</code></pre></div></div>
<h4 id="setting-up-rpws-for-desktop-switching">Setting Up <code class="language-plaintext highlighter-rouge">rpws</code> for Desktop Switching</h4>

<p>To configure desktop switching with <code class="language-plaintext highlighter-rouge">rpws</code>, you will need to add the following line to your <code class="language-plaintext highlighter-rouge">~/.ratpoisonrc</code> file:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exec </span>rpws init N <span class="nt">-k</span>
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">N</code> is the number of desktops you wish to create (at least 2). The <code class="language-plaintext highlighter-rouge">-k</code> flag is optional and is only necessary if you want to use predefined keybindings for switching desktops and managing windows.</p>

<p>When <code class="language-plaintext highlighter-rouge">rpws</code> is initialized, it will create <code class="language-plaintext highlighter-rouge">N</code> desktops, and by default, it assigns the following keybindings:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Alt+F(N)</code> - Switch to desktop <code class="language-plaintext highlighter-rouge">N</code> (e.g., <code class="language-plaintext highlighter-rouge">Alt+F1</code> switches to the first desktop).</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+Alt+Right</code> - Go to the next desktop.</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+Alt+Left</code> - Go to the previous desktop.</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+Alt+Windows+F(N)</code> - Move the current window to desktop <code class="language-plaintext highlighter-rouge">N</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+Alt+&gt;</code> - Move the window to the next desktop.</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+Alt+&lt;</code> - Move the window to the previous desktop.</li>
</ul>

<p>However, you may find these keybindings inconvenient or difficult to use. In that case, you can customize them to suit your preferences.</p>

<h4 id="customizing-rpws-hotkeys">Customizing <code class="language-plaintext highlighter-rouge">rpws</code> Hotkeys</h4>

<p>To customize the keybindings, add the following lines to your <code class="language-plaintext highlighter-rouge">~/.ratpoisonrc</code> file:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Initialize 6 desktops</span>
<span class="nb">exec </span>rpws init 6

<span class="c"># Switch desktops with the Windows+digit combination</span>
definekey top s-1 <span class="nb">exec </span>rpws 1
definekey top s-2 <span class="nb">exec </span>rpws 2
definekey top s-3 <span class="nb">exec </span>rpws 3
definekey top s-4 <span class="nb">exec </span>rpws 4
definekey top s-5 <span class="nb">exec </span>rpws 5
definekey top s-6 <span class="nb">exec </span>rpws 6

<span class="c"># Move windows to desktops using Windows+F(N)</span>
definekey top s-F1 <span class="nb">exec </span>rpws move1
definekey top s-F2 <span class="nb">exec </span>rpws move2
definekey top s-F3 <span class="nb">exec </span>rpws move3
definekey top s-F4 <span class="nb">exec </span>rpws move4
definekey top s-F5 <span class="nb">exec </span>rpws move5
definekey top s-F6 <span class="nb">exec </span>rpws move6

<span class="c"># Move between desktops with Windows+Right/Left</span>
definekey top s-Right <span class="nb">exec </span>rpws next
definekey top s-Left <span class="nb">exec </span>rpws prev

<span class="c"># Move window to next/previous desktop using Windows+Up/Down</span>
definekey top s-Up <span class="nb">exec </span>rpws movenext
definekey top s-Down <span class="nb">exec </span>rpws moveprev
</code></pre></div></div>

<h5 id="keybinding-legend">Keybinding Legend:</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">C</code> stands for <strong>Ctrl</strong></li>
  <li><code class="language-plaintext highlighter-rouge">S</code> stands for the <strong>Windows</strong> key</li>
  <li><code class="language-plaintext highlighter-rouge">M</code> stands for <strong>Alt</strong></li>
</ul>

<p>For example, <code class="language-plaintext highlighter-rouge">C-S-M-q</code> represents pressing <code class="language-plaintext highlighter-rouge">Ctrl + Windows + Alt + q</code> in sequence.</p>

<h3 id="step-5-configure-user-specific-x-settings-xsessionrc"><strong>Step 5: Configure User-Specific X Settings (~/.xsessionrc)</strong></h3>

<p>The ~/.xsessionrc file (in /home/linaro/) is executed when your X session starts via LightDM. It’s useful for setting environment variables or running commands like xrandr before Ratpoison loads. This file must be executable.<br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.xsessionrc</code></p>

<p>Add your configurations, for example:</p>
<section class="code-block-container" role="group" aria-label=" Code Block" data-filename="_code_block.txt" data-code="#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
# set -e

# Optional: Uncomment to log script execution for debugging
LOG_FILE=~/xsessionrc_debug.log
echo &quot;$(date): .xsessionrc started&quot; &gt;&gt; &quot;$LOG_FILE&quot;

# Define custom mode for DP-1 (1152x864 @ 60Hz)
# Ensure standard spaces are used in the modeline string.
# Modeline: &quot;1152x864_60.00&quot; 81.75 1152 1216 1336 1520 864 867 871 897 -hsync +vsync
xrandr --newmode &quot;1152x864_60.00&quot; 81.75 1152 1216 1336 1520 864 867 871 897 -hsync +vsync # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Define custom mode for HDMI-1 (2560x1080 @ 60Hz)
# Modeline: &quot;2560x1080_60.00&quot; 230.00 2560 2720 2992 3424 1080 1083 1093 1120 -hsync +vsync
xrandr --newmode &quot;2560x1080_60.00&quot; 230.00 2560 2720 2992 3424 1080 1083 1093 1120 -hsync +vsync # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Add the new modes to the respective outputs
xrandr --addmode DP-1 &quot;1152x864_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;
xrandr --addmode HDMI-1 &quot;2560x1080_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Apply the modes and set the layout.
# NOTE: The command below sets DP-1 as primary.
# Your comment &quot;# makes HDMI-1 primary&quot; conflicts with this.
# Adjust --primary flag if HDMI-1 should be the primary display.
xrandr \
    --output DP-1 --primary --mode &quot;1152x864_60.00&quot; --below HDMI-1 \
    --output HDMI-1 --mode &quot;2560x1080_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Example: Start a key remapper or other background utility
# xmodmap /home/ linaro/.Xmodmap

# Example: Set an environment variable
# export QT_QPA_PLATFORMTHEME=qt5ct

echo &quot;$(date): .xsessionrc finished successfully&quot; &gt;&gt; &quot;$LOG_FILE&quot;" data-download-link="" data-download-label="Download ">
  <code class="language-">#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
# set -e

# Optional: Uncomment to log script execution for debugging
LOG_FILE=~/xsessionrc_debug.log
echo &quot;$(date): .xsessionrc started&quot; &gt;&gt; &quot;$LOG_FILE&quot;

# Define custom mode for DP-1 (1152x864 @ 60Hz)
# Ensure standard spaces are used in the modeline string.
# Modeline: &quot;1152x864_60.00&quot; 81.75 1152 1216 1336 1520 864 867 871 897 -hsync +vsync
xrandr --newmode &quot;1152x864_60.00&quot; 81.75 1152 1216 1336 1520 864 867 871 897 -hsync +vsync # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Define custom mode for HDMI-1 (2560x1080 @ 60Hz)
# Modeline: &quot;2560x1080_60.00&quot; 230.00 2560 2720 2992 3424 1080 1083 1093 1120 -hsync +vsync
xrandr --newmode &quot;2560x1080_60.00&quot; 230.00 2560 2720 2992 3424 1080 1083 1093 1120 -hsync +vsync # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Add the new modes to the respective outputs
xrandr --addmode DP-1 &quot;1152x864_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;
xrandr --addmode HDMI-1 &quot;2560x1080_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Apply the modes and set the layout.
# NOTE: The command below sets DP-1 as primary.
# Your comment &quot;# makes HDMI-1 primary&quot; conflicts with this.
# Adjust --primary flag if HDMI-1 should be the primary display.
xrandr \
    --output DP-1 --primary --mode &quot;1152x864_60.00&quot; --below HDMI-1 \
    --output HDMI-1 --mode &quot;2560x1080_60.00&quot; # 2&gt;&amp;1 | tee -a &quot;$LOG_FILE&quot;

# Example: Start a key remapper or other background utility
# xmodmap /home/ linaro/.Xmodmap

# Example: Set an environment variable
# export QT_QPA_PLATFORMTHEME=qt5ct

echo &quot;$(date): .xsessionrc finished successfully&quot; &gt;&gt; &quot;$LOG_FILE&quot;</code>
</section>

<p>Make it executable:<br />
<code class="language-plaintext highlighter-rouge">chmod +x /home/linaro/.xsessionrc</code></p>

<h3 id="step-6-optional-but-recommended-remove-xfce4"><strong>Step 6: (Optional but Recommended) Remove XFCE4</strong></h3>

<p>If you no longer need XFCE4 and want to free up disk space, you can remove its packages. <strong>Be cautious</strong> and review the packages to be removed before confirming.<br />
<code class="language-plaintext highlighter-rouge"># Identify XFCE4 meta-packages and components</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt purge xfce4 xfce4-goodies libxfce4ui-utils xfce4-panel xfce4-session xfce4-settings xfconf xfdesktop4 xfwm4 thunar mousepad parole ristretto</code><br />
<code class="language-plaintext highlighter-rouge"># This list might need adjustment based on your specific XFCE4 installation.</code><br />
<code class="language-plaintext highlighter-rouge"># Always review the list of packages apt proposes to remove.</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt autoremove</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt clean</code></p>

<h3 id="step-7-verify-the-setup"><strong>Step 7: Verify the Setup</strong></h3>

<p>Reboot your system or restart LightDM to apply changes:<br />
<code class="language-plaintext highlighter-rouge">sudo systemctl restart lightdm</code></p>

<p>Your system should automatically log in linaro directly into a Ratpoison session.<br />
<strong>Troubleshooting:</strong></p>

<ul>
  <li>LightDM logs: /var/log/lightdm/lightdm.log and seat-specific logs (e.g., /var/log/lightdm/seat0-greeter.log).</li>
  <li>Xorg logs: ~/.local/share/xorg/Xorg.0.log (for user sessions) or /var/log/Xorg.0.log.</li>
  <li>Session errors: Check ~/.xsession-errors (in /home/linaro/) for issues from ~/.xsessionrc or session startup.</li>
</ul>

<h3 id="alternative-manual-start-with-startx-if-not-using-lightdm"><strong>Alternative: Manual Start with startx (If Not Using LightDM)</strong></h3>

<p>If you choose not to use LightDM or wish to start Ratpoison manually from a TTY (console login):</p>

<ol>
  <li>Ensure xinit is installed: sudo apt install xinit.</li>
  <li>Create or edit ~/.xinitrc (in /home/linaro/.xinitrc):<br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.xinitrc</code><br />
Add:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/sh
# ~/.xinitrc for linaro

# Source user-specific X settings if desired (contents similar to .xsessionrc)
# if [ -f /home/linaro/.xprofile_custom ]; then
#  . /home/linaro/.xprofile_custom
# fi
# For xrandr, etc., you might call them directly here or source .xsessionrc
if [ -f /home/linaro/.xsessionrc ]; then
  . /home/linaro/.xsessionrc
fi

exec ratpoison
</code></pre></div></div>

<ol>
  <li>Make it executable: <code class="language-plaintext highlighter-rouge">chmod +x /home/linaro/.xinitrc</code></li>
  <li>Log in to a TTY as linaro and run startx.</li>
</ol>

<p>This approach bypasses LightDM. The primary focus of this guide is the LightDM autologin method.</p>]]></content><author><name></name></author><category term="aid&gt;linux&gt;software&gt;dotfile" /></entry><entry><title type="html">installing Incus OS</title><link href="https://ib.bsb.br/installing-incus-os/" rel="alternate" type="text/html" title="installing Incus OS" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T10:27:34+00:00</updated><id>https://ib.bsb.br/installing-incus-os</id><content type="html" xml:base="https://ib.bsb.br/installing-incus-os/"><![CDATA[<p><strong>I. Introduction to Incus OS and Intel N97 Deployment</strong></p>

<p>Incus OS is a minimal, immutable operating system designed specifically for running Incus instances (virtual machines and system containers). It prioritizes security through features like UEFI Secure Boot integration, dm-verity for disk integrity, TPM-based disk encryption, and an A/B update mechanism. Incus, a modern system container and virtual machine manager, offers a powerful platform for developing and hosting applications. Deploying Incus OS directly onto bare metal ensures maximum performance and control, transforming the host into a dedicated Incus appliance. Incus OS is designed to take advantage of these hardware security mechanisms to create a “locked down environment”.<code class="language-plaintext highlighter-rouge">2</code></p>

<p>The Intel N97 processor, part of the Alder Lake-N series, is a 64-bit, quad-core CPU with features suitable for lightweight server tasks, including virtualization.<code class="language-plaintext highlighter-rouge">1</code> Its low power consumption (12W TDP) makes it an attractive option for always-on home servers or small-scale deployments.<code class="language-plaintext highlighter-rouge">1</code> This guide focuses on a bare-metal x64 host system with an Intel N97 processor.</p>

<p><strong>II. Crucial Preliminary Considerations</strong></p>

<ul>
  <li><strong>Experimental Stage:</strong> Incus OS is in early development. Users should expect potential rough edges and be prepared for troubleshooting. This guide is primarily for testing and evaluation purposes.</li>
  <li><strong>Hardware Requirements:</strong>
    <ul>
      <li><strong>x64 Architecture:</strong> The Intel N97 meets this.</li>
      <li><strong>TPM (Trusted Platform Module) 2.0:</strong> This is <strong>mandatory</strong>. A critical point is that systems without a TPM will be flagged by the Incus OS UI, and installation may fail or result in a non-functional state.</li>
      <li><strong>UEFI Firmware:</strong> Incus OS is designed for UEFI systems.</li>
      <li><strong>RAM and Storage:</strong> A minimum of 8GB RAM is recommended (as used in a VM test); 16GB or more for multiple or larger instances. An NVMe or SATA SSD is recommended for the target disk. A separate USB drive is needed for installation media.</li>
    </ul>
  </li>
  <li><strong>Backup Existing Data:</strong> The installation process will erase the target disk. <strong>Ensure all important data from the target N97 machine is backed up before proceeding.</strong></li>
  <li><strong>Separate Linux Machine:</strong> Needed for preparing the USB installation media and seed configuration files.</li>
  <li><strong>Flasher Tool:</strong> A “flasher tool” to simplify image writing and seed creation is reportedly planned but may not yet be available. This guide describes the manual method.</li>
</ul>

<p><strong>III. Phase 1: Host System UEFI/BIOS Configuration (Intel N97)</strong></p>

<p>Correct BIOS/UEFI configuration is paramount for a successful Incus OS installation and for enabling its security and virtualization features.</p>

<ul>
  <li><strong>Understanding the Intel N97 Platform for Incus OS:</strong>
Before proceeding with the installation, it is crucial to understand the capabilities and potential limitations of the Intel N97 platform in the context of running Incus OS.
    <ul>
      <li><strong>Key Intel N97 Features Relevant to Virtualization and Security:</strong> The Intel N97 processor incorporates several hardware features that are essential or beneficial for running a secure and efficient virtualization host with Incus OS. These are foundational to the secure “enclosure” concept.
        <ul>
          <li><strong>Table 1: Intel N97 Key Virtualization and Security Features</strong>
| Feature Name                                            | Status on Intel N97 (Source) | Criticality/Role for Incus OS Deployment                                                                                                     |
| :—————————————————— | :————————— | :——————————————————————————————————————————————- |
| Intel® Virtualization Technology (VT-x)                 | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Essential for all virtualization; enables the CPU to run multiple operating systems (VMs) and enhances container isolation.                  |
| Intel® Virtualization Technology for Directed I/O (VT-d) | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Crucial for PCI device passthrough to Incus virtual machines, allowing VMs direct access to hardware like GPUs, network cards, or storage controllers. |
| Intel® VT-x with Extended Page Tables (EPT)             | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Enhances VM memory management performance by reducing hypervisor overhead, leading to more efficient virtualization.                         |
| Intel® Boot Guard                                       | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Provides hardware-based boot integrity, forming a root of trust. This is a foundational element for Secure Boot, which Incus OS is designed to leverage.<code class="language-plaintext highlighter-rouge">2</code> |
| Intel® OS Guard                                         | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Protects the operating system kernel from modification by malicious software, contributing to the overall security of the Incus OS environment. |
| TPM 2.0 Support                                         | Typically present <code class="language-plaintext highlighter-rouge">3</code>        | Used by Incus OS for features like measured boot (verifying boot components) and TPM-backed full-disk encryption, enhancing system security.<code class="language-plaintext highlighter-rouge">2</code> |
| 64-bit Instruction Set                                  | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Mandatory for running modern operating systems, including Incus OS and the guest operating systems within Incus instances.                   |
The presence of these features, confirmed by Intel’s official specifications <code class="language-plaintext highlighter-rouge">1</code> and motherboard documentation (e.g., ASRock NUC-N97 indicating “TPM 2.0 onboard IC” <code class="language-plaintext highlighter-rouge">3</code>), ensures that the N97 CPU meets the fundamental hardware requirements for a robust Incus OS deployment.</li>
        </ul>
      </li>
      <li><strong>Potential Performance Considerations and Platform Variability:</strong>
        <ul>
          <li><strong>Single-Channel Memory Architecture:</strong> The Intel N97 processor supports only a single memory channel.<code class="language-plaintext highlighter-rouge">1</code> Motherboards based on this CPU, such as the ASRock NUC-N97, also specify single-channel DDR4 3200 MHz technology.<code class="language-plaintext highlighter-rouge">3</code> This could be a performance bottleneck for memory-bandwidth intensive Incus workloads. Using the fastest supported RAM type available for the specific N97 board can help maximize available bandwidth.</li>
          <li><strong>“Embedded” Nature and BIOS Variability:</strong> The Intel N97 is categorized under “Intel® Processor N-series” with a “Vertical Segment” of “Embedded”.<code class="language-plaintext highlighter-rouge">1</code> This can lead to greater variability in BIOS/UEFI implementations across different N97-based systems. User experiences with GMKtec N97 Mini PCs, for instance, have highlighted issues with BIOS interfaces and USB boot behavior.<code class="language-plaintext highlighter-rouge">4</code> The low power consumption, however, is a significant advantage.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Accessing BIOS/UEFI Setup:</strong>
This is typically done by pressing a specific key (commonly F2, Delete, ESC, or F10 <code class="language-plaintext highlighter-rouge">6</code>) immediately after powering on the system. The exact key can vary. For instance, the ASRock NUC-N97 motherboard manual outlines its BIOS structure.<code class="language-plaintext highlighter-rouge">3</code></p>
  </li>
  <li><strong>Essential Settings to Configure:</strong>
Once inside the BIOS/UEFI setup utility, several settings must be verified and adjusted.
    <ul>
      <li><strong>Table 2: Recommended BIOS/UEFI Settings for Incus OS on Intel N97</strong>
| Setting Category      | Typical Setting Name(s) in BIOS (and common variations)        | Recommended Value for Incus OS                                              | Rationale &amp; Importance                                                                                                                               |
| :——————– | :————————————————————- | :————————————————————————– | :————————————————————————————————————————————————— |
| Load Defaults         | Load Optimized Defaults, Load UEFI Defaults                    | Execute this first                                                          | Establishes a clean, known baseline. Intel NUCs often use F9 for this.<code class="language-plaintext highlighter-rouge">6</code>                                                                              |
| Virtualization        | Intel® Virtualization Technology, VT-x, Virtualization, SVM Mode | Enabled                                                                     | Core requirement for Incus. Found in “CPU Configuration”.<code class="language-plaintext highlighter-rouge">3</code> N97 supports VT-x.<code class="language-plaintext highlighter-rouge">1</code>                                                                      |
| I/O Virtualization    | Intel® VT-d, Directed I/O, IOMMU                               | Enabled                                                                     | Essential for PCIe device passthrough. Often in “Chipset Configuration.” N97 supports VT-d.<code class="language-plaintext highlighter-rouge">1</code>                                                         |
| TPM                   | Trusted Platform Module, TPM Device, Security Chip, fTPM       | Enabled &amp; Activated (or “Available” / “Owned” depending on BIOS)            | Crucial for Incus OS security (measured boot, disk encryption).<code class="language-plaintext highlighter-rouge">2</code> Look for “Trusted Computing”.<code class="language-plaintext highlighter-rouge">3</code> ASRock NUC-N97 has onboard TPM 2.0 IC.<code class="language-plaintext highlighter-rouge">3</code>          |
| Secure Boot           | Secure Boot Control, Secure Boot                               | Enabled (with keys cleared for “Setup Mode”)                                | Incus OS leverages Secure Boot.<code class="language-plaintext highlighter-rouge">2</code> For first boot, system must be in “Setup Mode” for key enrollment. Found in “Security” or “Boot” sections.<code class="language-plaintext highlighter-rouge">3</code> |
| CSM                   | Compatibility Support Module                                   | Disabled                                                                    | Ensure pure UEFI mode.                                                                                                                               |
| Boot Priority / Order | Boot Option #1, Fixed Boot Order Priorities, Boot Sequence     | 1st: USB Drive (for installation), Then: Internal SSD/NVMe (for installed OS) | To boot from installer, then installed system. N97 USB Boot Quirks: Some N97 BIOSes may require disabling boot priority options to recognize USB.<code class="language-plaintext highlighter-rouge">5</code> |
| Hyper-Threading       | Intel® Hyper-Threading Technology, Logical Processor           | N/A or Disabled/Auto                                                        | Intel N97 does not support Hyper-Threading.<code class="language-plaintext highlighter-rouge">1</code>                                                                                                        |
| Intel SGX             | Intel® Software Guard Extensions                               | Disabled or Default                                                         | Generally not required for Incus OS.                                                                                                                 |</li>
      <li><strong>Detailed Configuration Steps:</strong>
        <ol>
          <li><strong>Load Optimized Defaults:</strong> Navigate to “Exit” or “Save &amp; Exit” and select “Load Optimized Defaults.” Intel NUC systems often use F9.<code class="language-plaintext highlighter-rouge">6</code></li>
          <li><strong>Enable Intel® Virtualization Technology (VT-x):</strong> Critical. Typically under “CPU Configuration” or “Advanced.” Set to <code class="language-plaintext highlighter-rouge">Enabled</code>. The Intel N97 supports VT-x.<code class="language-plaintext highlighter-rouge">1</code></li>
          <li><strong>Enable Intel® VT-d (Virtualization Technology for Directed I/O):</strong> If separate, also set to <code class="language-plaintext highlighter-rouge">Enabled</code>. Vital for PCIe passthrough. The N97 supports VT-d.<code class="language-plaintext highlighter-rouge">1</code></li>
          <li><strong>Enable and Configure TPM (Trusted Platform Module):</strong> Locate “TPM” or “Trusted Computing” settings.<code class="language-plaintext highlighter-rouge">3</code> Ensure TPM 2.0 is <code class="language-plaintext highlighter-rouge">Enabled</code> and <code class="language-plaintext highlighter-rouge">Activated</code>. For Incus OS, it must be available for the OS to utilize for features like “TPM measured” boot and “storage encrypted using that TPM state”.<code class="language-plaintext highlighter-rouge">2</code></li>
          <li><strong>Configure Secure Boot:</strong> Find “Secure Boot” options.<code class="language-plaintext highlighter-rouge">3</code> Set Secure Boot to <code class="language-plaintext highlighter-rouge">Enabled</code>. <strong>Crucially, for the initial installation, set Secure Boot to “Setup Mode.”</strong> This often involves an option to “Clear Secure Boot Keys,” “Delete All Secure Boot Variables,” or “Reset to Setup Mode.” This allows Incus OS to enroll its own keys on first boot, as stated in its <code class="language-plaintext highlighter-rouge">README.md</code>: “On first boot, it will automatically add the relevant Secure Boot key (requires the system be in setup mode).”</li>
          <li><strong>Disable CSM (Compatibility Support Module):</strong> Ensure the system is in pure UEFI mode, not legacy BIOS compatibility mode.</li>
          <li><strong>Set Boot Order/Priority (Addressing N97 USB Boot Issues):</strong> Configure the USB drive as the primary boot device for installation.
            <ul>
              <li><strong>Common N97 USB Boot Challenges:</strong> Users of N97-based systems have reported difficulties booting from USB.<code class="language-plaintext highlighter-rouge">5</code></li>
              <li><strong>Troubleshooting USB Boot:</strong> First, try setting USB as the first boot option. If it fails, use the system’s boot menu (often F7, F10, F11, F12, or ESC – F7 noted for a GMKtec N97 <code class="language-plaintext highlighter-rouge">5</code>). A specific N97 workaround involved setting both boot priority options to “disabled” to allow USB boot.<code class="language-plaintext highlighter-rouge">5</code></li>
            </ul>
          </li>
          <li><strong>Review Conflicting/Unnecessary Settings:</strong>
            <ul>
              <li><strong>Virtualization MUST Be Enabled:</strong> Advice to “disable Virtualization - potential for attack”<code class="language-plaintext highlighter-rouge">8</code> is incorrect for an Incus host. VT-x and VT-d are fundamental.</li>
              <li><strong>Hyper-Threading:</strong> N/A for Intel N97.<code class="language-plaintext highlighter-rouge">1</code></li>
              <li><strong>Intel SGX:</strong> Leaving at default (often disabled or auto) is appropriate.</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li><strong>Saving Changes:</strong>
Navigate to “Exit” or “Save &amp; Exit,” select “Save Changes and Exit.” Intel NUCs typically use F10.<code class="language-plaintext highlighter-rouge">6</code></li>
</ul>

<p><strong>IV. Phase 2: Preparing Incus OS Installation Media &amp; Seed Configuration (on Separate Linux Machine)</strong></p>

<ul>
  <li><strong>Downloading the Official Incus OS Image:</strong>
    <ol>
      <li>Obtain the official Incus OS installation image from trusted sources, typically the official Incus project website or the Incus GitHub repository’s “Releases” section.<code class="language-plaintext highlighter-rouge">2</code> Download the latest raw disk image for x86-64 (e.g., <code class="language-plaintext highlighter-rouge">IncusOS_VERSION.raw.gz</code>).</li>
      <li>Decompress the image:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">gzip</span> <span class="nt">-d</span> IncusOS_VERSION.raw.gz
</code></pre></div>        </div>
        <p>This results in a <code class="language-plaintext highlighter-rouge">.raw</code> file (e.g., <code class="language-plaintext highlighter-rouge">IncusOS_VERSION.raw</code>). For clarity, this guide may refer to it as <code class="language-plaintext highlighter-rouge">incus-os-installer.raw</code>.</p>
      </li>
      <li><strong>(Recommended) Verifying Image Integrity:</strong> If checksums (e.g., SHA256) are provided, download the checksum file and verify the downloaded image using a utility like <code class="language-plaintext highlighter-rouge">sha256sum incus-os-installer.raw</code> and comparing the output.</li>
    </ol>
  </li>
  <li><strong>Preparing the USB Installation Drive:</strong>
    <ol>
      <li><strong>USB Drive Selection (Size):</strong> Use a USB drive of <strong>at least 64GB</strong>. This recommendation stems from observations that the Incus OS installer (specifically components like <code class="language-plaintext highlighter-rouge">systemd-repart</code>) might have expectations about minimum media size for its partitioning operations, beyond just fitting the OS image itself.</li>
      <li><strong>Identify USB Device Name:</strong> Insert the USB drive. Identify its device name (e.g., <code class="language-plaintext highlighter-rouge">/dev/sdb</code>, <code class="language-plaintext highlighter-rouge">/dev/sdc</code>) using <code class="language-plaintext highlighter-rouge">lsblk</code> or <code class="language-plaintext highlighter-rouge">sudo fdisk -l</code>. <strong>Be extremely careful to choose the correct device, as the next step will overwrite it.</strong></li>
      <li><strong>Writing the Image to USB Drive:</strong>
        <ul>
          <li><strong>Using <code class="language-plaintext highlighter-rouge">dd</code> (Linux/macOS - Use with Extreme Caution):</strong>
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>incus-os-installer.raw <span class="nv">of</span><span class="o">=</span>/dev/sdX <span class="nv">bs</span><span class="o">=</span>4M <span class="nv">status</span><span class="o">=</span>progress <span class="nv">conv</span><span class="o">=</span>fsync
</code></pre></div>            </div>
            <p>Replace <code class="language-plaintext highlighter-rouge">/dev/sdX</code> with your USB device path.</p>
          </li>
          <li><strong>Using Graphical Tools:</strong> Balena Etcher (cross-platform) or Rufus (Windows) <code class="language-plaintext highlighter-rouge">5</code> are user-friendly alternatives. For Rufus, ensure “Partition scheme” is “GPT” and “Target system” is “UEFI (non CSM)”.</li>
        </ul>
      </li>
      <li><strong>(Optional) <code class="language-plaintext highlighter-rouge">truncate</code> Raw Image (Primarily for VM testing):</strong> In some VM test scenarios where the <code class="language-plaintext highlighter-rouge">.raw</code> file itself acts as the disk, if boot errors related to partition fitting occurred, truncating the <code class="language-plaintext highlighter-rouge">.raw</code> file to a larger size (e.g., 50GB) <em>before</em> writing it to the virtual disk was a workaround. This is less common for physical USB preparation if the USB stick itself is sufficiently large.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># truncate -s 50G incus-os-installer.raw # Optional, context-dependent</span>
</code></pre></div>        </div>
      </li>
      <li><strong>(Optional) GPT Table Relocation for Large USBs:</strong> If the USB is much larger than the image, and boot issues occur, the backup GPT table might be misplaced. Use <code class="language-plaintext highlighter-rouge">sgdisk</code> on the USB drive (<code class="language-plaintext highlighter-rouge">x</code> then <code class="language-plaintext highlighter-rouge">e</code> then <code class="language-plaintext highlighter-rouge">w</code>) to relocate it to the end of the physical device.</li>
    </ol>
  </li>
  <li><strong>Creating Seed Configuration Files:</strong>
Incus OS uses a seed configuration (a tarball) to automate setup. The exact filenames expected within the tarball (<code class="language-plaintext highlighter-rouge">install.yaml</code>, <code class="language-plaintext highlighter-rouge">incus.yaml</code>, <code class="language-plaintext highlighter-rouge">network.yaml</code>) should be verified against the official Incus OS documentation for the specific version you are installing, as these can be implementation details.
    <ol>
      <li><strong>Create <code class="language-plaintext highlighter-rouge">install.yaml</code> (Installer Options):</strong>
        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># install.yaml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1.0"</span> 
<span class="na">force_install</span><span class="pi">:</span> <span class="kc">true</span> 
<span class="na">force_reboot</span><span class="pi">:</span> <span class="kc">false</span> 
<span class="c1"># target: </span>
<span class="c1">#   id: "ata-YOUR_DISK_MODEL_SERIAL" </span>
</code></pre></div>        </div>
      </li>
      <li><strong>Create <code class="language-plaintext highlighter-rouge">incus.yaml</code> (Incus Daemon Configuration):</strong>
```yaml
        <h1 id="incusyaml">incus.yaml</h1>
        <p>version: “1.0” 
apply_defaults: true 
certificates:</p>
        <ul>
          <li>name: “my-remote-admin-client” 
type: “client”
certificate: |
  YOUR_SINGLE_LINE_BASE64_ENCODED_DER_CERTIFICATE_CONTENT_HERE
description: “Certificate for my remote admin machine”
```</li>
          <li><strong>Generating Client Certificate in Correct Format (CRITICAL):</strong>
The certificate content must be <strong>Base64 encoded DER format, WITHOUT PEM headers/footers</strong>.
To convert a PEM client certificate (e.g., <code class="language-plaintext highlighter-rouge">client.crt</code>):
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 <span class="nt">-in</span> client.crt <span class="nt">-outform</span> DER | <span class="nb">base64</span> <span class="nt">-w0</span>
</code></pre></div>            </div>
            <p>Paste the resulting single line of Base64 text into the <code class="language-plaintext highlighter-rouge">certificate:</code> field.</p>
          </li>
        </ul>
      </li>
      <li><strong>(Optional) Create <code class="language-plaintext highlighter-rouge">network.yaml</code> (Static Network Configuration):</strong>
If omitted, Incus OS attempts DHCP. Example:
```yaml
        <h1 id="networkyaml">network.yaml</h1>
        <p>version: “1.0”
dns:
  hostname: “incus-n97”
interfaces:</p>
        <ul>
          <li>name: “br0” 
hwaddr: “XX:XX:XX:XX:XX:XX” # Physical NIC MAC
addresses: [“192.168.1.50/24”] 
routes:
            <ul>
              <li>to: “0.0.0.0/0” 
via: “192.168.1.1”
```</li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
  <li><strong>Packaging Seed Data and Writing to USB Media:</strong>
    <ol>
      <li><strong>Create Tarball:</strong> A common name for the tarball in test scripts is <code class="language-plaintext highlighter-rouge">seed.install.tar</code>.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-cvf</span> seed.install.tar install.yaml incus.yaml <span class="c"># Add network.yaml if used</span>
</code></pre></div>        </div>
      </li>
      <li><strong>Write the Seed Tarball to the USB Drive:</strong>
This uses a specific offset. Build scripts often use an offset of <code class="language-plaintext highlighter-rouge">4196352</code> with a block size of <code class="language-plaintext highlighter-rouge">512</code>. This offset, derived from project build scripts, typically places the seed data at the beginning of a dedicated seed partition located after the ESP (often 2GB in size).
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>seed.install.tar <span class="nv">of</span><span class="o">=</span>/dev/sdX <span class="nv">seek</span><span class="o">=</span>4196352 <span class="nv">bs</span><span class="o">=</span>512 <span class="nv">conv</span><span class="o">=</span>notrunc
</code></pre></div>        </div>
        <p>(Replace <code class="language-plaintext highlighter-rouge">/dev/sdX</code> with your USB device name). <code class="language-plaintext highlighter-rouge">conv=notrunc</code> is vital.</p>
      </li>
    </ol>
  </li>
</ul>

<p><strong>V. Phase 3: Incus OS Installation on the Target Host (Intel N97)</strong></p>

<ul>
  <li>
    <p><strong>Final UEFI/BIOS Boot Configuration for USB Boot:</strong>
Ensure the USB drive is the primary boot device, Secure Boot is enabled and in Setup Mode, and TPM 2.0 is enabled.</p>
  </li>
  <li>
    <p><strong>Booting from USB and Secure Boot Enrollment:</strong>
The system should boot from the USB. On first boot with Secure Boot in Setup Mode, Incus OS will attempt to enroll its Secure Boot keys. This might involve one or two automatic reboots.</p>
  </li>
  <li>
    <p><strong>Navigating the Incus OS Installer:</strong>
A TUI will likely appear. The installer reads the seed data, identifies the target disk, partitions it, and copies OS files automatically. It’s expected to handle full-disk encryption (leveraging TPM <code class="language-plaintext highlighter-rouge">2</code>) and dm-verity <code class="language-plaintext highlighter-rouge">2</code> automatically.</p>
  </li>
  <li>
    <p><strong>Installation Process Details:</strong>
The installer partitions and formats the target disk, copies Incus OS system files, installs the bootloader to the ESP, and configures the base system, potentially interacting with the TPM and enrolling Secure Boot keys.<code class="language-plaintext highlighter-rouge">2</code></p>
  </li>
  <li>
    <p><strong>Completion and Reboot:</strong>
Upon completion, a message will prompt for media removal (unless <code class="language-plaintext highlighter-rouge">force_reboot: true</code>). Remove the USB installation drive. Reboot manually if needed.</p>
  </li>
</ul>

<p><strong>VI. Phase 4: First Boot, System Verification, and Initial Incus Setup</strong></p>

<ul>
  <li>
    <p><strong>First Boot into Installed Incus OS:</strong>
(Optional: Enter UEFI/BIOS and set your internal disk as primary boot device). The system boots from the internal disk. <code class="language-plaintext highlighter-rouge">incus-osd</code> (the Incus OS daemon) starts and applies the seed configuration. If <code class="language-plaintext highlighter-rouge">apply_defaults: true</code> was set, it initializes ZFS, default Incus networking, and trusts your client certificate. If no <code class="language-plaintext highlighter-rouge">network.yaml</code> was provided, Incus OS itself attempts DHCP. It may download applications like Incus itself.</p>
  </li>
  <li><strong>Retrieving and Storing Disk Encryption Recovery Key (Vital):</strong>
The root filesystem is encrypted. Retrieve the recovery key.
From your remote client (after establishing access):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus query my-n97-incus-os:/1.0/system/encryption
</code></pre></div>    </div>
    <p>The JSON output will contain <code class="language-plaintext highlighter-rouge">config.recovery_keys</code>. <strong>Store these keys securely offline.</strong> A TUI warning on the console may persist until retrieved.</p>
  </li>
  <li><strong>Verifying Incus Remote Access:</strong>
Find the Incus OS host’s IP. From your client machine:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus remote add my-n97-incus-os &lt;IP_OF_INCUS_OS_HOST&gt;:8443
<span class="c"># You will likely be prompted to accept the server's certificate fingerprint.</span>
incus list my-n97-incus-os:
</code></pre></div>    </div>
  </li>
  <li><strong>Verifying Incus Service Status:</strong>
<code class="language-plaintext highlighter-rouge">incus-osd</code> is the Incus OS management daemon, which in turn manages the main <code class="language-plaintext highlighter-rouge">incus</code> service. Check the status of the primary Incus service (e.g., <code class="language-plaintext highlighter-rouge">incus.service</code> or <code class="language-plaintext highlighter-rouge">incusd.service</code> - consult Incus OS documentation for the exact name):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status incus.service <span class="c"># Or the appropriate service name</span>
<span class="c"># Check logs if needed:</span>
<span class="nb">sudo </span>journalctl <span class="nt">-u</span> incus.service <span class="c"># Or the appropriate service name</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Initializing the Incus Service (Relationship to Seed):</strong>
If <code class="language-plaintext highlighter-rouge">apply_defaults: true</code> was used in <code class="language-plaintext highlighter-rouge">incus.yaml</code> and the seed was processed successfully, the Incus daemon (storage pools, default network, etc.) should be automatically configured. In this case, running <code class="language-plaintext highlighter-rouge">sudo incus admin init</code> is generally <strong>not required</strong> for the initial setup.
The <code class="language-plaintext highlighter-rouge">incus admin init</code> command is used for:
    <ul>
      <li>Manual initial configuration if <code class="language-plaintext highlighter-rouge">apply_defaults: false</code> was set or if the seed was not used/failed.</li>
      <li>Reconfiguring an existing Incus setup.</li>
      <li>Advanced or custom setups beyond the seed defaults.
If needed, <code class="language-plaintext highlighter-rouge">sudo incus admin init</code> interactively configures clustering, storage pools (ZFS, Btrfs, etc.), network bridges, and remote access settings.</li>
    </ul>
  </li>
</ul>

<p><strong>VII. Phase 5: Extended Verification - Launching Your First Incus Instance</strong></p>

<ul>
  <li><strong>Listing Available Images:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus image list images: <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Launching Test Instances:</strong>
    <ul>
      <li><strong>System Container:</strong> <code class="language-plaintext highlighter-rouge">incus launch images:alpine/edge test-alpine-container -r my-n97-incus-os</code></li>
      <li><strong>OCI Container:</strong> <code class="language-plaintext highlighter-rouge">incus launch oci-docker:nginx nginx-oci-test -r my-n97-incus-os</code></li>
      <li><strong>Virtual Machine:</strong> <code class="language-plaintext highlighter-rouge">incus launch images:ubuntu/22.04 test-ubuntu-vm --vm -r my-n97-incus-os</code></li>
    </ul>
  </li>
  <li><strong>Checking Instance Status:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus list <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Accessing Instances:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus <span class="nb">exec </span>test-alpine-container <span class="nt">--</span> sh <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Basic Network Test from Within an Instance:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping <span class="nt">-c</span> 3 google.com
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>VIII. Phase 6: Troubleshooting</strong></p>

<ul>
  <li><strong>TPM Mandatory:</strong> No TPM 2.0 will lead to failure or a non-functional state.</li>
  <li><strong>Secure Boot Setup Mode:</strong> Essential for initial key enrollment.</li>
  <li><strong>Seed File Errors:</strong> YAML syntax (indentation) and certificate format (Base64 DER) are common pitfalls.</li>
  <li><strong>USB Boot Problems:</strong>
    <ul>
      <li>Check BIOS boot order, try boot menu (F7, F10, etc.).<code class="language-plaintext highlighter-rouge">5</code></li>
      <li>N97 specific: Try setting boot priority options to “disabled” in BIOS.<code class="language-plaintext highlighter-rouge">5</code></li>
      <li>Recreate USB media, try different tools.</li>
      <li>For very large USBs, consider <code class="language-plaintext highlighter-rouge">sgdisk</code> to relocate backup GPT.</li>
      <li>Installer might not clean up USB stick partitions after an install (re-image USB for new attempt).</li>
    </ul>
  </li>
  <li><strong>Image Size Issues:</strong>
    <ul>
      <li>USB stick must be large enough (&gt;=64GB recommended due to installer repart behavior).</li>
      <li>Target internal disk should be sufficiently large (e.g., 50GB+).</li>
    </ul>
  </li>
  <li><strong>GitHub Rate Limiting:</strong> During first boot, Incus OS might download components. Repeated attempts from the same IP can hit rate limits.</li>
  <li><strong>System Overheating (N97 Mini PCs):</strong> Ensure adequate ventilation. Check for BIOS updates for thermal management.<code class="language-plaintext highlighter-rouge">4</code></li>
  <li><strong>Installer Failures:</strong> Check disk/network connections. Try DHCP if static IP fails. Consult Incus OS release notes.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">incusd</code> Service Failures:</strong> Check logs. Review seed files or <code class="language-plaintext highlighter-rouge">incus admin init</code> choices.</li>
  <li><strong>Cannot Launch Instances:</strong> Check storage pool, network, image integrity, host resources, instance logs.</li>
  <li><strong>BIOS Version Issues:</strong> Outdated BIOS can cause instability.<code class="language-plaintext highlighter-rouge">4, 6</code> Check manufacturer for updates.</li>
</ul>

<p><strong>IX. Phase 7: Conclusion and Next Steps</strong></p>

<p>Successfully installing and configuring Incus OS on an Intel N97 bare-metal host establishes a robust, secure, and minimal platform for Incus containers and virtual machines.</p>

<ul>
  <li><strong>Pointers for Further Learning:</strong>
    <ul>
      <li><strong>Official Incus Documentation:</strong> The primary resource (typically on <code class="language-plaintext highlighter-rouge">linuxcontainers.org</code>).</li>
      <li><strong>Community Resources:</strong> Linux Containers Forum,<code class="language-plaintext highlighter-rouge">9</code> Incus Subreddit.<code class="language-plaintext highlighter-rouge">11</code></li>
      <li><strong>Advanced Incus Features:</strong> Profiles, snapshots, device passthrough (utilizing N97’s VT-d <code class="language-plaintext highlighter-rouge">1</code>), clustering,<code class="language-plaintext highlighter-rouge">2</code> alternative storage backends (Linstor <code class="language-plaintext highlighter-rouge">9</code>), OCI container management.<code class="language-plaintext highlighter-rouge">2</code></li>
      <li><strong>Automation Tools:</strong> <code class="language-plaintext highlighter-rouge">incus-deploy</code> <code class="language-plaintext highlighter-rouge">2</code> (Ansible/Terraform scripts), IncusScripts <code class="language-plaintext highlighter-rouge">10</code> (community scripts).</li>
    </ul>
  </li>
  <li><strong>Maintaining Your Incus OS Deployment:</strong>
    <ul>
      <li><strong>Regular Updates:</strong> Incus OS (via its A/B mechanism) and the Incus package itself (Incus has monthly feature releases and LTS versions <code class="language-plaintext highlighter-rouge">2</code>).</li>
      <li><strong>System Monitoring:</strong> Host resources and Incus pool usage. Review Incus logs.</li>
      <li><strong>Backup Strategy:</strong> Incus configuration and instance data.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">How to run `.qcow2` from Fedora CoreOS + Podman + Incus</title><link href="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/" rel="alternate" type="text/html" title="How to run `.qcow2` from Fedora CoreOS + Podman + Incus" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T19:14:50+00:00</updated><id>https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus</id><content type="html" xml:base="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/"><![CDATA[<p><strong>Understanding the Core Technology</strong></p>

<ul>
  <li><strong>Incus:</strong> Your custom OS includes Incus, a powerful system container and virtual machine manager. For VMs, Incus utilizes QEMU/KVM.</li>
  <li><strong>QEMU/KVM:</strong>
    <ul>
      <li><strong>QEMU:</strong> An open-source machine emulator and virtualizer.</li>
      <li><strong>KVM (Kernel-based Virtual Machine):</strong> A Linux kernel module that enables QEMU to use hardware virtualization extensions (Intel VT-x or AMD-V), providing near-native performance. Fedora CoreOS includes KVM support.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code>:</strong> This is a disk image format commonly used by QEMU, supporting features like copy-on-write and snapshots.</li>
</ul>

<p><strong>Methods to Run a <code class="language-plaintext highlighter-rouge">.qcow2</code> Image with Incus</strong></p>

<p>Here are a few methods, ranging from a quick one-off boot to creating a reusable Incus image:</p>

<p><strong>Prerequisites for all methods:</strong></p>

<ol>
  <li><strong>Hardware Virtualization:</strong> Ensure Intel VT-x or AMD-V is enabled in your machine’s BIOS/UEFI.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code> File:</strong> The bootable <code class="language-plaintext highlighter-rouge">.qcow2</code> file must be accessible on your custom OS’s filesystem (e.g., copied to your home directory or another accessible path).</li>
  <li><strong>Incus Initialization (One-time):</strong> If you haven’t used Incus before, you might need to initialize it. This typically involves setting up a default profile and a storage pool.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>incus admin init
</code></pre></div>    </div>
    <p>Follow the prompts. For simplicity, you can often accept the defaults. This might create a storage pool (e.g., named <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>User Permissions:</strong> While <code class="language-plaintext highlighter-rouge">incus admin init</code> requires <code class="language-plaintext highlighter-rouge">sudo</code>, many subsequent <code class="language-plaintext highlighter-rouge">incus</code> commands can be run by a user added to the <code class="language-plaintext highlighter-rouge">incus-admin</code> group (or <code class="language-plaintext highlighter-rouge">lxd</code> if you had a previous LXD installation and it was migrated). If your user is not in this group, you may need to prefix <code class="language-plaintext highlighter-rouge">incus</code> commands with <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
</ol>

<hr />

<p><strong>Method 1: Direct Boot by Attaching <code class="language-plaintext highlighter-rouge">.qcow2</code> as a Disk (Recommended for Quick/One-Off Use)</strong></p>

<p>This method is often the most straightforward for booting an existing <code class="language-plaintext highlighter-rouge">.qcow2</code> file without converting it into a formal Incus image, especially if your Incus storage pool is of type <code class="language-plaintext highlighter-rouge">dir</code>.</p>

<ol>
  <li><strong>Create a VM Instance (without a standard root disk initially):</strong>
It’s often easiest to launch a minimal VM instance using a placeholder image (like a minimal cloud image if you have one aliased, or even a standard image whose disk you’ll immediately replace).
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Launch a VM; 'images:alpine/edge' is just a small image to create the VM config.</span>
<span class="c"># We will replace its disk.</span>
incus launch images:alpine/edge my-qcow-vm <span class="nt">--vm</span> 
</code></pre></div>    </div>
    <p><em>Note: If you have a very minimal image alias or a profile designed for “empty” VMs, you can use that instead.</em></p>
  </li>
  <li><strong>Stop the VM:</strong>
The VM will likely start automatically. Stop it to modify its disk configuration.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus stop my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Remove the Default Root Disk:</strong>
The VM was created with a root disk from the placeholder image. Remove it.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device remove my-qcow-vm root
</code></pre></div>    </div>
  </li>
  <li><strong>Add Your <code class="language-plaintext highlighter-rouge">.qcow2</code> File as the New Root Disk:</strong>
This command tells Incus to use your <code class="language-plaintext highlighter-rouge">.qcow2</code> file as the primary bootable disk for the VM.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device add my-qcow-vm root disk <span class="nb">source</span><span class="o">=</span>/path/to/your/image.qcow2 boot.priority<span class="o">=</span>1
</code></pre></div>    </div>
    <p>Replace <code class="language-plaintext highlighter-rouge">/path/to/your/image.qcow2</code> with the actual path to your file.</p>
    <ul>
      <li><strong>Storage Pool Consideration:</strong> This method works best if your Incus storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>) is of type <code class="language-plaintext highlighter-rouge">dir</code>. For block-based pools (LVM, ZFS, Ceph), Incus might try to import the <code class="language-plaintext highlighter-rouge">.qcow2</code> content into a new volume in its native format, which is usually fine.</li>
    </ul>
  </li>
  <li><strong>Start the VM:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus start my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-qcow-vm
</code></pre></div>    </div>
    <p>Press <code class="language-plaintext highlighter-rouge">Ctrl+a q</code> (or <code class="language-plaintext highlighter-rouge">Ctrl+a c</code> then <code class="language-plaintext highlighter-rouge">q</code>) to detach from the console.</p>
  </li>
</ol>

<hr />

<p><strong>Method 2: Importing <code class="language-plaintext highlighter-rouge">.qcow2</code> into a Custom Storage Volume (More Robust for Block-Based Pools)</strong></p>

<p>If your storage pool is block-based (e.g., LVM, ZFS), or you want Incus to manage the disk image as a distinct volume, this method is more appropriate. It involves converting the <code class="language-plaintext highlighter-rouge">.qcow2</code> to a raw format and importing that.</p>

<ol>
  <li><strong>Identify Your Storage Pool:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage list
</code></pre></div>    </div>
    <p>Note the name of your desired storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>Convert <code class="language-plaintext highlighter-rouge">.qcow2</code> to Raw Format (if needed):</strong>
Incus’s volume import often works best with raw image files.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img convert <span class="nt">-f</span> qcow2 <span class="nt">-O</span> raw /path/to/your/image.qcow2 /tmp/image.raw
</code></pre></div>    </div>
    <p>Replace paths as necessary. Ensure you have enough space in <code class="language-plaintext highlighter-rouge">/tmp</code> or choose another location.</p>
  </li>
  <li><strong>Import the Raw Image into an Incus Custom Storage Volume:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import &lt;your-pool-name&gt; /tmp/image.raw &lt;name-for-your-volume&gt;
</code></pre></div>    </div>
    <p>For example:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import default /tmp/image.raw my-custom-boot-volume
</code></pre></div>    </div>
    <p>This creates an Incus storage volume containing the content of your bootable image.</p>
  </li>
  <li><strong>Clean up the temporary raw file:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> /tmp/image.raw
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM Using the Custom Volume:</strong>
You’ll create a VM instance and tell it to use this custom volume as its root disk.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a VM instance (similar to Method 1, using a placeholder)</span>
incus launch images:alpine/edge my-custom-vol-vm <span class="nt">--vm</span>
incus stop my-custom-vol-vm
incus config device remove my-custom-vol-vm root

<span class="c"># Add the custom volume as the root disk</span>
incus config device add my-custom-vol-vm root disk <span class="nv">pool</span><span class="o">=</span>&lt;your-pool-name&gt; <span class="nb">source</span><span class="o">=</span>&lt;name-for-your-volume&gt; boot.priority<span class="o">=</span>1
<span class="c"># Example:</span>
<span class="c"># incus config device add my-custom-vol-vm root disk pool=default source=my-custom-boot-volume boot.priority=1</span>

incus start my-custom-vol-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-custom-vol-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Method 3: Creating a Reusable Incus Image from <code class="language-plaintext highlighter-rouge">.qcow2</code> (For Frequent Use)</strong></p>

<p>If you plan to launch multiple VMs from this same <code class="language-plaintext highlighter-rouge">.qcow2</code> image, creating a proper Incus image is efficient.</p>

<ol>
  <li><strong>Prepare a <code class="language-plaintext highlighter-rouge">metadata.yaml</code> File:</strong>
This file describes your image to Incus. Create a file named <code class="language-plaintext highlighter-rouge">metadata.yaml</code> in the same directory as your <code class="language-plaintext highlighter-rouge">.qcow2</code> file (or a temporary directory where you copy the <code class="language-plaintext highlighter-rouge">.qcow2</code>):
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">architecture</span><span class="pi">:</span> <span class="s">x86_64</span>  <span class="c1"># Or your image's architecture (e.g., aarch64)</span>
<span class="na">creation_date</span><span class="pi">:</span> <span class="s">$(date +%s)</span> <span class="c1"># This will be replaced by actual date in next step</span>
<span class="na">properties</span><span class="pi">:</span>
  <span class="na">os</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyQcow2OS"</span> <span class="c1"># A friendly name for the OS</span>
  <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Bootable</span><span class="nv"> </span><span class="s">qcow2</span><span class="nv"> </span><span class="s">image"</span>
  <span class="na">architecture</span><span class="pi">:</span> <span class="s2">"</span><span class="s">x86_64"</span> <span class="c1"># Repeat architecture here</span>
<span class="c1"># Add other properties if known, like 'release', 'variant', etc.</span>
</code></pre></div>    </div>
    <p>You can generate the <code class="language-plaintext highlighter-rouge">creation_date</code> dynamically:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; metadata.yaml
architecture: </span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh"> # Or specify explicitly e.g. x86_64
creation_date: </span><span class="si">$(</span><span class="nb">date</span> +%s<span class="si">)</span><span class="sh">
properties:
  os: "MyQcow2OS"
  description: "My custom bootable qcow2"
  architecture: "</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh">" # Or specify explicitly
</span><span class="no">EOF
</span></code></pre></div>    </div>
  </li>
  <li><strong>Create a Tarball:</strong>
Package the <code class="language-plaintext highlighter-rouge">.qcow2</code> file (e.g., <code class="language-plaintext highlighter-rouge">my-image.qcow2</code>) and <code class="language-plaintext highlighter-rouge">metadata.yaml</code> into a <code class="language-plaintext highlighter-rouge">.tar.gz</code> file. The <code class="language-plaintext highlighter-rouge">.qcow2</code> file should be named <code class="language-plaintext highlighter-rouge">root.img</code> or <code class="language-plaintext highlighter-rouge">disk.img</code> inside the tarball for some Incus versions, or more generally, Incus will pick up the largest file as the root disk if it’s a qcow2. For simplicity, let’s assume your qcow2 is <code class="language-plaintext highlighter-rouge">my-os.qcow2</code>. You might need to rename it to <code class="language-plaintext highlighter-rouge">root.qcow2</code> or ensure it’s the clear candidate.
A common practice is to name the image file <code class="language-plaintext highlighter-rouge">root.qcow2</code> within the tarball.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming your qcow2 is my-os.qcow2</span>
<span class="nb">cp</span> /path/to/your/my-os.qcow2 <span class="nb">.</span> <span class="c"># Copy to current directory</span>
<span class="nb">mv </span>my-os.qcow2 root.qcow2      <span class="c"># Rename for clarity within tarball</span>
<span class="nb">tar</span> <span class="nt">-czvf</span> my-incus-image.tar.gz root.qcow2 metadata.yaml
</code></pre></div>    </div>
  </li>
  <li><strong>Import the Tarball as an Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus image import my-incus-image.tar.gz <span class="nt">--alias</span> my-bootable-qcow-image
</code></pre></div>    </div>
    <p>This makes the image available in your local Incus image store.</p>
  </li>
  <li><strong>Clean up Temporary Files:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm </span>root.qcow2 metadata.yaml my-incus-image.tar.gz
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM from the New Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus launch my-bootable-qcow-image my-new-vm <span class="nt">--vm</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-new-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Alternative: Direct QEMU/KVM (Bypassing Incus Management)</strong></p>

<p>While Incus is the recommended and integrated way on your custom OS, you <em>could</em> use QEMU/KVM directly. This gives raw access but lacks Incus’s management features (networking, storage, snapshots, etc.).</p>

<ol>
  <li><strong>Ensure QEMU/KVM Utilities are Installed:</strong>
On Fedora CoreOS, if not already present as a dependency of Incus, you might need to install them:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>rpm-ostree <span class="nb">install </span>qemu-system-x86 <span class="c"># For x86_64</span>
<span class="c"># May require a reboot</span>
<span class="c"># sudo systemctl reboot</span>
</code></pre></div>    </div>
    <p>However, <code class="language-plaintext highlighter-rouge">incus</code> typically pulls in <code class="language-plaintext highlighter-rouge">qemu-kvm</code> or similar packages.</p>
  </li>
  <li><strong>Run with <code class="language-plaintext highlighter-rouge">qemu-system-x86_64</code>:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="se">\</span>
    <span class="nt">-enable-kvm</span> <span class="se">\</span>
    <span class="nt">-m</span> 2048 <span class="se">\</span>
    <span class="nt">-smp</span> 2 <span class="se">\</span>
    <span class="nt">-hda</span> /path/to/your/image.qcow2 <span class="se">\</span>
    <span class="nt">-boot</span> d <span class="se">\</span>
    <span class="nt">-vga</span> std <span class="se">\</span>
    <span class="nt">-net</span> nic <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::2222-:22 <span class="c"># Example networking</span>
</code></pre></div>    </div>
    <p>This is more manual and generally not preferred if Incus is available.</p>
  </li>
</ol>

<p><strong>Podman’s Role</strong></p>

<p>Podman is for managing OCI/Docker-compatible <em>containers</em>, not full virtual machines from <code class="language-plaintext highlighter-rouge">.qcow2</code> images. It operates at a different level of virtualization (OS-level virtualization, sharing the host kernel) compared to the hardware virtualization used by Incus for VMs.</p>

<p><strong>Conclusion</strong></p>

<p>Your Fedora CoreOS + Podman + Incus system is well-equipped to run <code class="language-plaintext highlighter-rouge">.qcow2</code> Linux images. <strong>Using Incus (Method 1 or 2 for direct use, Method 3 for reusability) is the most integrated and recommended approach.</strong> It provides a robust management layer over QEMU/KVM, allowing you to easily launch and manage these VMs right after your system boots.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>