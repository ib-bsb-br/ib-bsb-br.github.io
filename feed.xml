<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-10-25T19:39:39+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">DirectAdmin terminal custom commands</title><link href="https://ib.bsb.br/da-term/" rel="alternate" type="text/html" title="DirectAdmin terminal custom commands" /><published>2025-10-25T00:00:00+00:00</published><updated>2025-10-25T19:34:46+00:00</updated><id>https://ib.bsb.br/da-term</id><content type="html" xml:base="https://ib.bsb.br/da-term/"><![CDATA[<h1 id="01-environment-modules-exploration-usrsharemodules">01) Environment Modules exploration (/usr/share/Modules)</h1>
<p>alias h01_modules_explore=’
  pushd /usr/share/Modules &gt;/dev/null; ls;
    pushd modulefiles &gt;/dev/null; ls;
      pushd use.own &gt;/dev/null; cat use.own || true; popd &gt;/dev/null;
      ls; pushd module &gt;/dev/null || true; popd &gt;/dev/null || true;
      pushd modules &gt;/dev/null || true; { cat dot || true; cat module-git || true; ls; cat module || true; cat modules || true; } ; popd &gt;/dev/null || true;
    popd &gt;/dev/null;
    pushd bin &gt;/dev/null || true; ls; { cat createmodule. || true; cat createmodule.sh || true; } ; popd &gt;/dev/null || true;
  popd &gt;/dev/null
‘</p>

<h1 id="02-directadmin-browse-user-datadomains-and-editremove-files">02) DirectAdmin: browse user data/domains and edit/remove files</h1>
<p>alias h02_da_user_domains=’
  pushd /usr/local/directadmin/data &gt;/dev/null; ls;
    pushd users &gt;/dev/null; ls;
      pushd ibbsbbry &gt;/dev/null; ls;
        pushd domains &gt;/dev/null; ls; pwd;
          true;  # placeholder for “which cut.ia.br.cust_nginx” (non-command in history)
          popd &gt;/dev/null;
        ls; pwd;
        pushd php &gt;/dev/null || true; ls; { cat php.ini || true; } ; popd &gt;/dev/null || true;
        pushd domains &gt;/dev/null; ls; pwd;
          rm -f cut.ia.br.cust_httpd || true;
        popd &gt;/dev/null;
      popd &gt;/dev/null;
    popd &gt;/dev/null;
  popd &gt;/dev/null
‘</p>

<h1 id="03-directadmin-pluginsshared-sockets-and-directadmin-binary-ops">03) DirectAdmin: plugins/shared, sockets, and directadmin binary ops</h1>
<p>alias h03_da_admin_ops=’
  pushd /usr/local/directadmin &gt;/dev/null; ls;
    pushd plugins &gt;/dev/null || true; ls; popd &gt;/dev/null || true;
    pushd data &gt;/dev/null; ls; popd &gt;/dev/null;
    pushd shared &gt;/dev/null; ls;
      { cat internal.sock || true; cat startips-network || true; }
    popd &gt;/dev/null;
    ./directadmin || true;
    ./directadmin permissions || true;
    sudo ./directadmin permissions || true;
    ./directadmin version || true;
    ./directadmin update || true;
    ./directadmin my-cnf || true;
    ./directadmin create-login-url || true;
    ./directadmin license || true;
    ./directadmin login-url || true;
    ./directadmin info || true;
    ./directadmin config-get || true;
    ./directadmin config-get -h || true;
    ./directadmin admin || true;
    ./directadmin build || true;
    pwd; ls
  popd &gt;/dev/null
‘</p>

<h1 id="04-directadmin-createedit-domain-conf-sample">04) DirectAdmin: create/edit domain conf sample</h1>
<p>alias h04_da_edit_domain_conf=’
  pushd /usr/local/directadmin/data/users/ibbsbbry/domains &gt;/dev/null;
    ls; touch cut.ia.br.conf; ${EDITOR:-nano} cut.ia.br.conf || true; cat cut.ia.br.conf || true;
  popd &gt;/dev/null
‘</p>

<h1 id="05-directadmin-cpanel-migration-scripts-and-internals">05) DirectAdmin: cPanel migration scripts and internals</h1>
<p>alias h05_da_migration_scripts=’
  pushd /usr/local/directadmin &gt;/dev/null; ls;
    pushd shared &gt;/dev/null; ls; pushd cpanel_to_da &gt;/dev/null; ls; cat cpanel_to_da.sh || true; popd &gt;/dev/null;
    ls; pushd internal.sock &gt;/dev/null || true; cat internal.sock || true; popd &gt;/dev/null || true;
    { cat startips-networkd || true; }
    pushd scripts &gt;/dev/null; ls; pushd cpanel_to_da &gt;/dev/null || true; ls; popd &gt;/dev/null || true;
  popd &gt;/dev/null
‘</p>

<h1 id="06-transfer-helpers-curl-uploads-and-quick-sysinfo">06) Transfer helpers: curl uploads and quick sysinfo</h1>
<p>alias h06_transfers_sysinfo=’
  pushd /usr/local/directadmin/scripts/cpanel_to_da &gt;/dev/null || true; ls || true; touch text.md || true; popd &gt;/dev/null || true;
  curl –help || true;
  curl -fsS -F “file=@-;filename=cpanel_to_da.sh” https://x0.at/ «&lt;”placeholder” || true;
  curl -F “file=@cpanel_to_da.sh” https://0x0.st || true;
  getconf –help || true;
  uptime || true;
  ip a || true;
  which npx || true; npx –help || true;
  npm –help || true; npm –version || true; which npm || true
‘</p>

<h1 id="07-directadmin-grep-web-stack-and-mail-domain-owners">07) DirectAdmin: grep web stack and mail domain owners</h1>
<p>alias h07_da_webstack_mail=’
  grep -E ‘”’”’^(nginx|nginx_proxy|openlitespeed)=’”’”’ /usr/local/directadmin/conf/directadmin.conf || true;
  head /etc/virtual/domainowners || true
‘</p>

<h1 id="08-etc-basics-hosts-resolv-mysql-npmrc-sysconfig">08) /etc basics: hosts, resolv, mysql, npmrc, sysconfig</h1>
<p>alias h08_etc_core=’
  pushd /etc &gt;/dev/null; ls;
    { cat host.conf || true; cat hosts || true; cat my.cnf || true; cat npmrc || true; cat resolv.conf || true; } ;
    ls; { cat trusted-key.key || true; cat virc || true; } ;
    ls; pushd sysconfig &gt;/dev/null || true; ls; { cat saslauthd || true; cat snmp || true; } ; popd &gt;/dev/null || true;
  popd &gt;/dev/null
‘</p>

<h1 id="09-ssl-and-ssh-inspection">09) SSL and SSH inspection</h1>
<p>alias h09_ssl_ssh=’
  pushd /etc/ssl/certs &gt;/dev/null || true; ls; { cat ca-bundle. || true; cat ca-bundle.crt || true; } ; popd &gt;/dev/null || true;
  pushd /etc &gt;/dev/null; ls; popd &gt;/dev/null;
  pushd /etc/ssh &gt;/dev/null || true; ls; cat ssh_config || true; ls; pushd ssh_config.d &gt;/dev/null || true; ls; popd &gt;/dev/null || true;
  pushd /etc/ssh/moduli &gt;/dev/null || true; ls; cat moduli || true; popd &gt;/dev/null || true;
  pushd /etc/skel &gt;/dev/null || true; ls; popd &gt;/dev/null || true
‘</p>

<h1 id="10-etcprofiled-helpers">10) /etc/profile.d helpers</h1>
<p>alias h10_profiled_helpers=’
  pushd /etc/profile.d &gt;/dev/null || true; ls; bash which2.sh –help || true; cat alt_mod_passenger.sh || true; popd &gt;/dev/null || true
‘</p>

<h1 id="11-logs-cagefs-proxyexec">11) Logs, CageFS, proxyexec</h1>
<p>alias h11_logs_cagefs=’
  pushd /var/log/user_logs &gt;/dev/null || true; ls; pushd ibbsbbry &gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /var &gt;/dev/null; ls -a; { cat .cagefs/ 2&gt;/dev/null || true; } ; pushd .cagefs &gt;/dev/null || true; ls -a; cat .cagefs.token || true; popd &gt;/dev/null || true; popd &gt;/dev/null;
  id || true; ps aux | grep proxyexec || true; ps aux || true;
  proxyexec -h || true; /usr/sbin/proxyexec -c cagefs.sock ibbsbbry CzlNuXVAWS7rH7Cc / CRONTAB_LIST 0 || true
‘</p>

<h1 id="12-vartmp--varwww-basics-and-cgi">12) /var/tmp + /var/www basics and CGI</h1>
<p>alias h12_var_www=’
  pushd /var/tmp &gt;/dev/null || true; ls -a; cat mysql.sock || true; popd &gt;/dev/null || true;
  pushd /var/www &gt;/dev/null || true; ls; pushd html &gt;/dev/null || true; ls; { cat p.php || true; cat index.html || true; cat redirect.php || true; } ; popd &gt;/dev/null || true;
  pushd cgi-bin &gt;/dev/null || true; ls; { cat test-cgi || true; cat printenv || true; } ; popd &gt;/dev/null || true; popd &gt;/dev/null || true
‘</p>

<h1 id="13-passenger-runtime-home--inspect-instance-dirs-and-secrets">13) Passenger runtime (home) — inspect instance dirs and secrets</h1>
<p>alias h13_passenger_runtime=’
  pushd ~/passenger &gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true;
  for d in ~/passenger.z* ~/passenger.R*; do
    [ -d “$d” ] || continue;
    pushd “$d” &gt;/dev/null; ls; { cat read_only_admin_password.txt 2&gt;/dev/null || true; cat properties.json 2&gt;/dev/null || true; } ;
      pushd web_server_info &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true;
      { cat watchdog.pid 2&gt;/dev/null || true; cat full_admin_password.txt 2&gt;/dev/null || true; cat creation_finalized 2&gt;/dev/null || true; cat core.pid 2&gt;/dev/null || true; } ;
      pushd agents.s &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; pushd core &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true; popd &gt;/dev/null || true;
      { cat core.pid 2&gt;/dev/null || true; cat creation_finalized 2&gt;/dev/null || true; cat lock 2&gt;/dev/null || true; cat properties.json 2&gt;/dev/null || true; } ;
    popd &gt;/dev/null;
  done
‘</p>

<h1 id="14-cloudlinux-selector-and-scl-tooling">14) CloudLinux selector and SCL tooling</h1>
<p>alias h14_cl_selector_scl=’
  cloudlinux-selector –help || true;
  cloudlinux-selector –app-mode || true;
  cloudlinux-selector –get-supported-versions || true;
  cloudlinux-selector –json –get-supported-versions || true;
  cloudlinux-selector –json –interpreter nodejs –extensions nodejs || true;
  cloudlinux-selector –json –extensions nodejs || true;
  cloudlinux-selector –json –env-vars || true;
  cloudlinux-selector –json –get-selector-status || true;
  cloudlinux-selector –json –interpreter nodejs –get-supported-versions || true;
  scl –help || true; scl list-collections || true; scl list-enabled || true; scl list-packages || true; scl list-packages alt-nodejs12 || true; scl list-packages alt-nodejs10 || true;
  scl enable alt-nodejs12 “bash -lc ‘”’“‘node -v; npm -v’”’”’” || true;
  scl run alt-nodejs12 node -v || true; scl run alt-nodejs12 npm -v || true
‘</p>

<h1 id="15-domain-content-well-known-acme-roundcube-awstats">15) Domain content: .well-known, acme, roundcube, awstats</h1>
<p>alias h15_domain_webbits=’
  pushd ~/public_html &gt;/dev/null || true; ls; pushd .well-known &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; { cat .htaccess 2&gt;/dev/null || true; } ; pushd acme-challenge &gt;/dev/null 2&gt;/dev/null || true; ls || true; { cat letsencrypt_1596475466 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true; popd &gt;/dev/null || true;
  for d in ~/roundcube/public_html ~/public_html/awstats; do pushd “$d” &gt;/dev/null 2&gt;/dev/null || true; ls; { cat index.php 2&gt;/dev/null || cat index.html 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true; done
‘</p>

<h1 id="16-opt-tools-ai-bolit-app-version-detector-cloudlinux-flagshooks">16) /opt tools: ai-bolit, app-version-detector, cloudlinux flags/hooks</h1>
<p>alias h16_opt_tooling=’
  pushd /opt &gt;/dev/null; ls -a;
    pushd ai-bolit &gt;/dev/null 2&gt;/dev/null || true; ls; cat ai-bolit.php || true; popd &gt;/dev/null || true;
    pushd app-version-detector &gt;/dev/null 2&gt;/dev/null || true; ls; bash app-version-detector.sh || true; cat app-version-detector-wrapper.sh || true; popd &gt;/dev/null || true;
    pushd cloudlinux &gt;/dev/null 2&gt;/dev/null || true; ls -a; { cat nginx_status 2&gt;/dev/null || true; cat litespeed_status 2&gt;/dev/null || true; cat cl_edition 2&gt;/dev/null || true; } ;
      pushd flags &gt;/dev/null 2&gt;/dev/null || true; ls -a; pushd available-flags.d &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true; pushd enabled-flags.d &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true; popd &gt;/dev/null || true;
      pushd rhn_hooks/post.d &gt;/dev/null 2&gt;/dev/null || true; ls; cat rhn-update-hook.sh || true; popd &gt;/dev/null || true;
    popd &gt;/dev/null || true;
  popd &gt;/dev/null
‘</p>

<h1 id="17-cloudlinux-venv--pythonpip-tooling">17) CloudLinux venv + Python/pip tooling</h1>
<p>alias h17_opt_python_venv=’
  pushd /opt/cloudlinux/venv &gt;/dev/null 2&gt;/dev/null || true; ls; cat pyvenv.cfg 2&gt;/dev/null || true; /opt/alt/python311/bin/python3 -m venv –upgrade-deps /opt/cloudlinux/venv || true; ls; pushd bin &gt;/dev/null 2&gt;/dev/null || true; ls; cat Activate.ps1 2&gt;/dev/null || true; cat activate 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/cloudlinux/venv/bin &gt;/dev/null 2&gt;/dev/null || true; python3 –version || true; pip3 –version || true; pip –version || true; popd &gt;/dev/null || true;
  python3 –version || true
‘</p>

<h1 id="18-cloudlinux-helper-scripts--packages">18) CloudLinux helper scripts &amp; packages</h1>
<p>alias h18_cl_scripts_pkgs=’
  pushd /opt/cloudlinux/usr/bin &gt;/dev/null 2&gt;/dev/null || true; ls; ./cpapirebuildcache 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/cloudlinux/share/python-cllib/scripts &gt;/dev/null 2&gt;/dev/null || true; ls; { cat cl-common 2&gt;/dev/null || true; ./cl-common 2&gt;/dev/null || true; } ; { cat cl_sysctl 2&gt;/dev/null || true; } ; { cat getpaneluserscount 2&gt;/dev/null || true; python3.11 getpaneluserscount 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true
‘</p>

<h1 id="19-alt-php-and-php-fpm-binariesconfigs">19) alt-php and php-fpm binaries/configs</h1>
<p>alias h19_alt_php=’
  pushd /opt/alt-php84/root/etc &gt;/dev/null 2&gt;/dev/null || true; ls; { cat pear 2&gt;/dev/null || true; cat pear.conf 2&gt;/dev/null || true; cat php-fpm.conf 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true;
  pushd /opt/alt-php84/usr/sbin &gt;/dev/null 2&gt;/dev/null || true; ls; ./php-fpm -t 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/alt-php-internal &gt;/dev/null 2&gt;/dev/null || true; ./enable 2&gt;/dev/null || true; popd &gt;/dev/null || true
‘</p>

<h1 id="20-cloudlinux-site-optimization--wpos">20) CloudLinux site optimization &amp; WPOS</h1>
<p>alias h20_clsop_wpos=’
  pushd /opt/cloudlinux-linksafe &gt;/dev/null 2&gt;/dev/null || true; ls; cat lib.sh 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/cloudlinux-site-optimization-module &gt;/dev/null 2&gt;/dev/null || true; ls; { cat requirements.json 2&gt;/dev/null || true; cat clsop.zip 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true;
  pushd /opt/clwpos &gt;/dev/null 2&gt;/dev/null || true; ls; cat public_options.json 2&gt;/dev/null || true; popd &gt;/dev/null || true
‘</p>

<h1 id="21-cpaneleasyapache-libs--diagnostics">21) cPanel/EasyApache libs &amp; diagnostics</h1>
<p>alias h21_cpanel_ea_libs=’
  pushd /opt/cp/cpanel/ea-php84/usr/lib64/php/modules &gt;/dev/null 2&gt;/dev/null || true; ls; { cat clos_ssa.so 2&gt;/dev/null || true; cat xray.so 2&gt;/dev/null || true; } ; popd &gt;/dev/null || true;
  pushd /opt/netdata/var/cache/netdata &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true
‘</p>

<h1 id="22-passenger-bins-and-helper-scripts">22) Passenger bins and helper scripts</h1>
<p>alias h22_passenger_bins=’
  pushd /opt/passenger/bin &gt;/dev/null 2&gt;/dev/null || true; ls; ./passenger-status 2&gt;/dev/null || true; ./passenger 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/passenger/src/ruby_native_extension &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; cat extconf.rb 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/passenger/helper-scripts &gt;/dev/null 2&gt;/dev/null || true; ls; cat README.md 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/passenger/download_binaries &gt;/dev/null 2&gt;/dev/null || true; ls; cat extconf.rb 2&gt;/dev/null || true; ruby *.rb 2&gt;/dev/null || true; popd &gt;/dev/null || true
‘</p>

<h1 id="23-system-package-managers--general-admin">23) System package managers &amp; general admin</h1>
<p>alias h23_pkgs_admin=’
  yum –help 2&gt;/dev/null || true;
  apk add ugrep ugrep-doc 2&gt;/dev/null || true;
  pkg install -y ugrep 2&gt;/dev/null || true
‘</p>

<h1 id="24-user-home-public_html-domains-passenger-demo--scl-npm">24) User home: public_html, domains, passenger demo &amp; SCL npm</h1>
<p>alias h24_user_web_node=’
  pushd ~ &gt;/dev/null; ls; pwd;
    pushd public_html &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
    pushd domains/cut.ia.br &gt;/dev/null 2&gt;/dev/null || true; ls -a; popd &gt;/dev/null || true;
    pushd domains/cut.ia.br &gt;/dev/null 2&gt;/dev/null || true;
      git clone https://github.com/phusion/passenger-nodejs-connect-demo.git 2&gt;/dev/null || true;
      pushd passenger-nodejs-connect-demo &gt;/dev/null 2&gt;/dev/null || true; npm install 2&gt;/dev/null || true; popd &gt;/dev/null || true;
      scl run alt-nodejs12 npm install 2&gt;/dev/null || true;
      scl enable alt-nodejs12 “npm -l” 2&gt;/dev/null || true;
      source /home/ibbsbbry/nodevenv/domains/cut.ia.br/passenger-nodejs-connect-demo/12/bin/activate 2&gt;/dev/null || true;
    popd &gt;/dev/null || true;
  popd &gt;/dev/null
‘</p>

<h1 id="25-optaltpostgresql11-exploration">25) /opt/alt/postgresql11 exploration</h1>
<p>alias h25_alt_postgresql=’
  pushd /opt/alt/postgresql11 &gt;/dev/null 2&gt;/dev/null || true; ls;
    pushd usr/bin &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
    pushd include/pgsql/internal/libpq &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
    pushd share/pgsql &gt;/dev/null 2&gt;/dev/null || true; ls; cat pg_service.conf.sample 2&gt;/dev/null || true; popd &gt;/dev/null || true;
    pushd doc/alt-postgresql11 &gt;/dev/null 2&gt;/dev/null || true; ls; cat README 2&gt;/dev/null || true; popd &gt;/dev/null || true;
    pushd lib64/pkgconfig &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
    pushd bin &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
  popd &gt;/dev/null || true
‘</p>

<h1 id="26-alt-nodejs12-internals-and-tools">26) alt-nodejs12 internals and tools</h1>
<p>alias h26_alt_nodejs_internals=’
  pushd /opt/alt/alt-nodejs12 &gt;/dev/null 2&gt;/dev/null || true; ls;
    pushd root/home &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true;
    pushd root/bin &gt;/dev/null 2&gt;/dev/null || true; ls; npx –help || true; npx –version || true; popd &gt;/dev/null || true;
  popd &gt;/dev/null || true;
  pushd /opt/sqlite/usr/bin &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true;
  pushd /opt/clos_ssa/run &gt;/dev/null 2&gt;/dev/null || true; ls; cat ssa.sock 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /opt/alt-mod-passenger/etc &gt;/dev/null 2&gt;/dev/null || true; ls; cat mod_passenger.conf 2&gt;/dev/null || true; popd &gt;/dev/null || true
‘</p>

<h1 id="27-modulefiles-alternatives-and-ghostscript">27) Modulefiles, alternatives, and ghostscript</h1>
<p>alias h27_modules_misc=’
  pushd /etc/alternatives &gt;/dev/null 2&gt;/dev/null || true; ls; cat modules.sh 2&gt;/dev/null || true; popd &gt;/dev/null || true;
  pushd /usr/share/modulefiles &gt;/dev/null 2&gt;/dev/null || true; ls -a || true; popd &gt;/dev/null || true;
  pushd /usr/share/ghostscript &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true
‘</p>

<h1 id="28-node-virtualenvs-for-domains">28) Node virtualenvs for domains</h1>
<p>alias h28_nodevenv_bins=’
  pushd ~/nodevenv/domains/cut.ia.br/passenger-nodejs-connect-demo/12/bin &gt;/dev/null 2&gt;/dev/null || true; ls; popd &gt;/dev/null || true
‘</p>

<h1 id="29-ugrep-build-from-source-and-verification">29) Ugrep build from source (and verification)</h1>
<p>alias h29_ugrep_build=’
  pushd ~ &gt;/dev/null;
    git clone https://github.com/Genivia/ugrep 2&gt;/dev/null || true;
    pushd ugrep &gt;/dev/null; ls;
      ./build.sh || true; sudo make install || true; make install || true;
      pushd bin &gt;/dev/null 2&gt;/dev/null || true; ls; ./ugrep –version || true; popd &gt;/dev/null || true;
    popd &gt;/dev/null;
  popd &gt;/dev/null;
  ugrep –version || true
‘</p>

<h1 id="30-quick-misc-one-offs-captured">30) Quick misc one-offs captured</h1>
<p>alias h30_misc=’
  history | tail -n 50 || true;
  which npm || true; which npx || true;
  node -v 2&gt;/dev/null || true; install node 2&gt;/dev/null || true; script -V 2&gt;/dev/null || true;
  reset –help 2&gt;/dev/null || true; clear || true; printenv || true; whoami || true; pwdx 2&gt;/dev/null || true
‘</p>

<h1 id="31-domain-owners-quick-check">31) Domain owners quick check</h1>
<p>alias h31_mail_domainowners=’head /etc/virtual/domainowners || true’</p>

<h1 id="32-grep-directadmin-webserver-mode">32) Grep DirectAdmin webserver mode</h1>
<p>alias h32_da_web_mode=’grep -E “^(nginx|nginx_proxy|openlitespeed)=” /usr/local/directadmin/conf/directadmin.conf || true’</p>

<h1 id="33-passenger-status-shortcut">33) Passenger status shortcut</h1>
<p>alias h33_passenger_status=’/opt/passenger/bin/passenger-status 2&gt;/dev/null || passenger-status 2&gt;/dev/null || true’</p>

<h1 id="34-show-ssh-moduli-and-config-quickly">34) Show SSH moduli and config quickly</h1>
<p>alias h34_ssh_quick=’cat /etc/ssh/ssh_config 2&gt;/dev/null || true; cat /etc/ssh/moduli 2&gt;/dev/null || true’</p>

<h1 id="35-dns-resolvers-quick">35) DNS resolvers quick</h1>
<p>alias h35_resolvers_quick=’cat /etc/resolv.conf || true’</p>

<h1 id="36-hosts-quick">36) Hosts quick</h1>
<p>alias h36_hosts_quick=’cat /etc/hosts || true’</p>]]></content><author><name></name></author><category term="[scratchpad]" /></entry><entry><title type="html">folders2zip as non-admin Windows user</title><link href="https://ib.bsb.br/folders2zip-win/" rel="alternate" type="text/html" title="folders2zip as non-admin Windows user" /><published>2025-10-24T00:00:00+00:00</published><updated>2025-10-25T02:54:35+00:00</updated><id>https://ib.bsb.br/folders2zip-win</id><content type="html" xml:base="https://ib.bsb.br/folders2zip-win/"><![CDATA[<section class="code-block-container" role="group" aria-label="Powershell Code Block" data-filename="powershell_code_block.txt" data-code="#requires -Version 5.1
&lt;#!
.SYNOPSIS
  Single-file archive as a non-admin Windows 10 user — create/overwrite/update a .zip of a folder; optional restore.

.DESCRIPTION
  Creates a single .zip archive of SourceDir with robust handling for invalid file timestamps by clamping
  to the ZIP spec range (1980-01-01 to 2107-12-31). No admin required. ASCII-only script for PS 5.1.
  This refactored version:
    - Sets ZipArchiveEntry.LastWriteTime BEFORE opening the entry stream (required for Create mode)
    - Prevents temp-file self-inclusion by blocking Create/Overwrite when ArchivePath is under SourceDir
    - Skips both ArchivePath and its temp path during Create/Overwrite enumeration

.PARAMETER SourceDir
  Absolute path to the folder to archive recursively.

.PARAMETER ArchivePath
  Target .zip file path. Default: $env:LOCALAPPDATA\SingleArchive\Out\&lt;Leaf(SourceDir)&gt;.zip

.PARAMETER RestoreDir
  Destination folder for optional restore/extract. Default: $env:LOCALAPPDATA\SingleArchive\Restored\&lt;Leaf(SourceDir)&gt;

.PARAMETER Mode
  Create    - Create new .zip; if it exists, prompt (or -Force) to use a timestamped name.
  Overwrite - Replace existing .zip atomically.
  Update    - Open or create .zip and add/replace entries that changed (does not delete removed files).

.PARAMETER VerifyOnly
  Compute and display stats (source, archive) without writing.

.PARAMETER DoRestore
  After archive step, extract the .zip to RestoreDir.

.PARAMETER Force
  Skip confirmations for overwrites and existing destination handling.

.PARAMETER DryRun
  Simulate actions; do not write.

.EXAMPLE
  .\SingleFile-Archive.ps1 -SourceDir &quot;C:\Data\Docs&quot; -Mode Create -Verbose

.EXAMPLE
  .\SingleFile-Archive.ps1 -SourceDir &quot;C:\Data\Docs&quot; -Mode Update -DoRestore -Force -Verbose

.NOTES
  Compress-Archive may fail on out-of-range timestamps. This script uses a .NET ZipArchive pipeline that clamps
  timestamps and avoids that failure for Create/Overwrite/Update. It also guards against self-inclusion when the
  archive destination resides under the source tree.
#&gt;

[CmdletBinding()]
param(
  [Parameter(Mandatory=$true)]
  [ValidateScript({ Test-Path $_ -PathType Container })]
  [string]$SourceDir,

  [string]$ArchivePath,

  [string]$RestoreDir,

  [ValidateSet(&#39;Create&#39;,&#39;Overwrite&#39;,&#39;Update&#39;)]
  [string]$Mode = &#39;Create&#39;,

  [switch]$VerifyOnly,
  [switch]$DoRestore,
  [switch]$Force,
  [switch]$DryRun
)

Set-StrictMode -Version Latest
$ErrorActionPreference = &#39;Stop&#39;

# ---------------------------- Helpers -----------------------------------------

function Write-Step { param([string]$Message) Write-Host (&quot;[+] {0}&quot; -f $Message) }
function Write-Sub  { param([string]$Message) Write-Host (&quot;    - {0}&quot; -f $Message) }

function Confirm-Action {
  param([Parameter(Mandatory=$true)][string]$Prompt,[switch]$DefaultNo)
  if ($Force) { return $true }
  $def = if ($DefaultNo) {&#39;N&#39;} else {&#39;Y&#39;}
  $choices = if ($DefaultNo) {&#39;[y/N]&#39;} else {&#39;[Y/n]&#39;}
  while ($true) {
    $resp = Read-Host &quot;$Prompt $choices&quot;
    if ([string]::IsNullOrWhiteSpace($resp)) { $resp = $def }
    switch ($resp.ToUpperInvariant()) {
      &#39;Y&#39; { return $true }
      &#39;N&#39; { return $false }
      default { Write-Host &#39;Please answer Y or N.&#39; }
    }
  }
}

function New-Timestamp { (Get-Date).ToString(&#39;yyyyMMdd_HHmmss&#39;) }

function Ensure-Dir {
  param([Parameter(Mandatory=$true)][string]$Path)
  if (-not (Test-Path -LiteralPath $Path -PathType Container)) {
    Write-Verbose &quot;Ensure-Dir: $Path&quot;
    New-Item -ItemType Directory -Path $Path -Force | Out-Null
  }
}

function Get-FolderStats {
  [CmdletBinding()]
  param([Parameter(Mandatory=$true)][string]$Path)
  Write-Verbose &quot;Get-FolderStats: $Path&quot;
  $files = Get-ChildItem -LiteralPath $Path -Recurse -File -Force -ErrorAction Stop
  [pscustomobject]@{
    Path  = $Path
    Files = $files.Count
    Bytes = ($files | Measure-Object -Property Length -Sum).Sum
  }
}

function Get-ZipStats {
  [CmdletBinding()]
  param([Parameter(Mandatory=$true)][string]$ZipPath)
  if (-not (Test-Path -LiteralPath $ZipPath -PathType Leaf)) {
    return [pscustomobject]@{ Path=$ZipPath; Exists=$false; Entries=0; UncompressedBytes=0; CompressedBytes=0; SizeOnDisk=0 }
  }
  Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction Stop
  $fileInfo = Get-Item -LiteralPath $ZipPath -ErrorAction Stop
  $zip = [System.IO.Compression.ZipFile]::OpenRead($ZipPath)
  try {
    $entries = $zip.Entries
    $uc = 0L; $cc = 0L
    foreach ($e in $entries) {
      $uc += [int64]$e.Length
      if ($e.CompressedLength -is [long]) { $cc += [int64]$e.CompressedLength }
    }
    return [pscustomobject]@{
      Path              = $ZipPath
      Exists            = $true
      Entries           = $entries.Count
      UncompressedBytes = $uc
      CompressedBytes   = $cc
      SizeOnDisk        = $fileInfo.Length
    }
  } finally { $zip.Dispose() }
}

function Get-FreeSpaceForPath {
  param([Parameter(Mandatory=$true)][string]$TargetPath)
  $parent = Split-Path -Path $TargetPath -Parent
  if (-not $parent) { $parent = $env:TEMP }
  Ensure-Dir $parent
  $driveRoot = (Split-Path -Path (Resolve-Path -LiteralPath $parent) -Qualifier)
  $di = New-Object System.IO.DriveInfo ($driveRoot.TrimEnd(&#39;\&#39;))
  return $di.AvailableFreeSpace
}

function Ensure-ZipAssemblies {
  Add-Type -AssemblyName System.IO.Compression -ErrorAction Stop
  Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction Stop
}

function Get-RelativePath {
  param([Parameter(Mandatory=$true)][string]$BaseDir,[Parameter(Mandatory=$true)][string]$FullName)
  $base = (Resolve-Path -LiteralPath $BaseDir).Path.TrimEnd(&#39;\\&#39;)
  $rel = $FullName.Substring($base.Length).TrimStart(&#39;\\&#39;)
  return ($rel -replace &#39;\\&#39;,&#39;/&#39;)
}

function Clamp-ZipTimestamp {
  param([Parameter(Mandatory=$true)][datetime]$DateUtc)
  # ZIP spec range: 1980-01-01 .. 2107-12-31
  $min = [datetime]::Parse(&#39;1980-01-01T00:00:00Z&#39;)
  $max = [datetime]::Parse(&#39;2107-12-31T23:59:59Z&#39;)
  $utc = $DateUtc.ToUniversalTime()
  if ($utc -lt $min) { $utc = $min }
  if ($utc -gt $max) { $utc = $max }
  return [datetimeoffset]$utc
}

function Get-AbsolutePath {
  param([Parameter(Mandatory=$true)][string]$Path)
  if ([System.IO.Path]::IsPathRooted($Path)) { return [System.IO.Path]::GetFullPath($Path) }
  $base = (Get-Location).Path
  return [System.IO.Path]::GetFullPath((Join-Path $base $Path))
}

function Test-IsSubPath {
  param([Parameter(Mandatory=$true)][string]$Child,[Parameter(Mandatory=$true)][string]$Parent)
  $p = $Parent.TrimEnd(&#39;\\&#39;) + &#39;\\&#39;
  $c = $Child.TrimEnd(&#39;\\&#39;)
  return $c.StartsWith($p, [System.StringComparison]::OrdinalIgnoreCase)
}

function Add-EntryFromFile {
  param(
    [Parameter(Mandatory=$true)][System.IO.Compression.ZipArchive]$Zip,
    [Parameter(Mandatory=$true)][string]$EntryName,
    [Parameter(Mandatory=$true)][string]$FilePath
  )
  # Create the entry object first
  $entry = $Zip.CreateEntry($EntryName, [System.IO.Compression.CompressionLevel]::Optimal)

  # FIX: Set timestamp BEFORE opening the entry stream (required for Create mode)
  $fi = Get-Item -LiteralPath $FilePath -ErrorAction SilentlyContinue
  if ($fi) {
    $entry.LastWriteTime = Clamp-ZipTimestamp -DateUtc $fi.LastWriteTimeUtc
  } else {
    $entry.LastWriteTime = Clamp-ZipTimestamp -DateUtc ([datetime]::UtcNow)
  }

  # Now open streams and copy data
  $inStream  = $null
  $outStream = $null
  try {
    $inStream  = [System.IO.File]::Open($FilePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::Read)
    $outStream = $entry.Open()
    $inStream.CopyTo($outStream)
  } finally {
    if ($outStream) { $outStream.Dispose() }
    if ($inStream)  { $inStream.Dispose() }
  }
}

function New-ZipFromDirectory {
  param(
    [Parameter(Mandatory=$true)][string]$SourceDir,
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [string[]]$SkipPaths,
    [switch]$DryRun
  )
  if ($DryRun) {
    Write-Sub (&quot;DryRun: would create zip from {0} -&gt; {1}&quot; -f $SourceDir, $ArchivePath)
    return
  }
  Ensure-ZipAssemblies
  $tmp = &quot;$ArchivePath.tmp.$(New-Timestamp)&quot;
  if (Test-Path -LiteralPath $tmp -PathType Leaf) { Remove-Item -LiteralPath $tmp -Force }

  # Build skip set (ArchivePath and its temp)
  $skipSet = New-Object &#39;System.Collections.Generic.HashSet[string]&#39; ([System.StringComparer]::OrdinalIgnoreCase)
  if ($SkipPaths) { foreach ($sp in $SkipPaths) { if ($sp) { [void]$skipSet.Add($sp) } } }
  [void]$skipSet.Add($ArchivePath)
  [void]$skipSet.Add($tmp)

  $fs = $null
  $zip = $null
  try {
    $fs  = [System.IO.File]::Open($tmp, [System.IO.FileMode]::Create, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
    $zip = New-Object System.IO.Compression.ZipArchive($fs, [System.IO.Compression.ZipArchiveMode]::Create, $false)
    $files = Get-ChildItem -LiteralPath $SourceDir -Recurse -File -Force
    foreach ($f in $files) {
      if ($skipSet.Contains($f.FullName)) { continue }
      $entryName = Get-RelativePath -BaseDir $SourceDir -FullName $f.FullName
      Add-EntryFromFile -Zip $zip -EntryName $entryName -FilePath $f.FullName
    }
  } finally {
    if ($zip) { $zip.Dispose() }
    if ($fs)  { $fs.Dispose() }
  }
  if (Test-Path -LiteralPath $ArchivePath -PathType Leaf) {
    Remove-Item -LiteralPath $ArchivePath -Force -ErrorAction Stop
  }
  Move-Item -LiteralPath $tmp -Destination $ArchivePath -Force
}

function Update-ZipFromDirectory {
  param(
    [Parameter(Mandatory=$true)][string]$SourceDir,
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [switch]$DryRun
  )
  if (-not (Test-Path -LiteralPath $ArchivePath -PathType Leaf)) {
    Write-Sub &quot;Archive does not exist; creating new.&quot;
    New-ZipFromDirectory -SourceDir $SourceDir -ArchivePath $ArchivePath -DryRun:$DryRun
    return
  }
  if ($DryRun) {
    Write-Sub (&quot;DryRun: would open zip for update: {0}&quot; -f $ArchivePath)
    return
  }
  Ensure-ZipAssemblies
  $fs  = [System.IO.File]::Open($ArchivePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
  $zip = New-Object System.IO.Compression.ZipArchive($fs, [System.IO.Compression.ZipArchiveMode]::Update, $false)
  try {
    # Build a lookup of existing entries (case-insensitive)
    $map = @{}
    foreach ($e in $zip.Entries) { $map[$e.FullName.ToLowerInvariant()] = $e }
    $added = 0; $replaced = 0; $skipped = 0
    $files = Get-ChildItem -LiteralPath $SourceDir -Recurse -File -Force
    foreach ($f in $files) {
      if ($f.FullName -ieq $ArchivePath) { continue }
      $rel = Get-RelativePath -BaseDir $SourceDir -FullName $f.FullName
      $key = $rel.ToLowerInvariant()
      if ($map.ContainsKey($key)) {
        $existing = $map[$key]
        # Compare length and timestamp (ZIP timestamp granularity ~2 seconds)
        $needsReplace = $true
        try {
          $zipTime = $existing.LastWriteTime.UtcDateTime
          $fileTime = $f.LastWriteTimeUtc
          $lenDiff = ($existing.Length -ne $f.Length)
          $timeDiff = [math]::Abs((New-TimeSpan -Start $zipTime -End $fileTime).TotalSeconds) -gt 2
          $needsReplace = ($lenDiff -or $timeDiff)
        } catch { $needsReplace = $true }
        if ($needsReplace) {
          $existing.Delete()
          Add-EntryFromFile -Zip $zip -EntryName $rel -FilePath $f.FullName
          $replaced++
        } else {
          $skipped++
        }
      } else {
        Add-EntryFromFile -Zip $zip -EntryName $rel -FilePath $f.FullName
        $added++
      }
    }
    Write-Sub (&quot;Update summary: added={0}, replaced={1}, skipped={2}&quot; -f $added, $replaced, $skipped)
  } finally {
    if ($zip) { $zip.Dispose() }
    if ($fs)  { $fs.Dispose() }
  }
}

function Invoke-Expand {
  param(
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [Parameter(Mandatory=$true)][string]$RestoreDir
  )
  Ensure-ZipAssemblies
  [System.IO.Compression.ZipFile]::ExtractToDirectory($ArchivePath, $RestoreDir)
}

# ---------------------------- Defaults ----------------------------------------

$resolvedSource = (Resolve-Path -LiteralPath $SourceDir).Path
$sourceLeaf = Split-Path -Path $resolvedSource -Leaf

if (-not $ArchivePath) {
  $defaultOut = Join-Path $env:LOCALAPPDATA &#39;SingleArchive\Out&#39;
  Ensure-Dir $defaultOut
  $ArchivePath = Join-Path $defaultOut ($sourceLeaf + &#39;.zip&#39;)
} else {
  Ensure-Dir (Split-Path -Path $ArchivePath -Parent)
}

if (-not $RestoreDir) {
  $RestoreDir = Join-Path (Join-Path $env:LOCALAPPDATA &#39;SingleArchive\Restored&#39;) $sourceLeaf
} else {
  Ensure-Dir (Split-Path -Path $RestoreDir -Parent)
}

$resolvedArchive = Get-AbsolutePath -Path $ArchivePath

# ---------------------------- Preflight ---------------------------------------

Write-Step &quot;Environment&quot;
Write-Sub  (&quot;UserMode: {0}&quot; -f [Environment]::UserName)
Write-Sub  (&quot;SourceDir:  {0}&quot; -f $resolvedSource)
Write-Sub  (&quot;ArchivePath: {0}&quot; -f $resolvedArchive)
Write-Sub  (&quot;RestoreDir:  {0}&quot; -f $RestoreDir)
Write-Sub  (&quot;Mode:        {0}&quot; -f $Mode)
Write-Sub  (&quot;VerifyOnly:  {0}&quot; -f ($(if($VerifyOnly){&#39;Yes&#39;}else{&#39;No&#39;})))
Write-Sub  (&quot;DryRun:      {0}&quot; -f ($(if($DryRun){&#39;Yes&#39;}else{&#39;No&#39;})))

$srcStats = Get-FolderStats -Path $resolvedSource
(&quot;{0} files; {1:N0} bytes - Source&quot; -f $srcStats.Files, $srcStats.Bytes) | Write-Host

$existingZip = Get-ZipStats -ZipPath $resolvedArchive
if ($existingZip.Exists) {
  (&quot;{0} entries; {1:N0} bytes on disk - Existing Archive&quot; -f $existingZip.Entries, $existingZip.SizeOnDisk) | Write-Host
}

if ($VerifyOnly) {
  Write-Step &quot;Verify-only mode - no writes will occur&quot;
  return
}

# Guard: prevent Create/Overwrite when archive path is under source (self-inclusion risk via temp file)
if (($Mode -eq &#39;Create&#39; -or $Mode -eq &#39;Overwrite&#39;) -and (Test-IsSubPath -Child $resolvedArchive -Parent $resolvedSource)) {
  throw &quot;Unsafe configuration: ArchivePath resides under SourceDir for mode &#39;$Mode&#39;. Place the archive outside the source tree.&quot;
}

# Free space heuristic
try {
  $free = Get-FreeSpaceForPath -TargetPath $resolvedArchive
  Write-Sub (&quot;Free space on target volume: {0:N0} bytes&quot; -f $free)
  $needed = if ($Mode -eq &#39;Update&#39; -and $existingZip.Exists) {
    [int64]([Math]::Max($srcStats.Bytes * 0.2, $existingZip.SizeOnDisk * 0.1))
  } else {
    [int64]$srcStats.Bytes
  }
  if ($free -lt $needed) {
    throw (&quot;Insufficient free space. Needed approx {0:N0} bytes, Available {1:N0} bytes&quot; -f $needed, $free)
  }
} catch { throw &quot;Free space check failed. $_&quot; }

# ---------------------------- Mode-specific confirms --------------------------

switch ($Mode) {
  &#39;Create&#39; {
    if (Test-Path -LiteralPath $resolvedArchive -PathType Leaf) {
      $ts = New-Timestamp
      $altPath = Join-Path (Split-Path -Path $resolvedArchive -Parent) (&quot;{0}_{1}.zip&quot; -f [IO.Path]::GetFileNameWithoutExtension($resolvedArchive), $ts)
      if (-not (Confirm-Action -Prompt &quot;Archive exists. Create a new timestamped archive instead?`n  $altPath&quot;)) {
        throw &quot;User declined to proceed in Create mode with existing archive.&quot;
      }
      $resolvedArchive = $altPath
      $ArchivePath = $altPath
    }
  }
  &#39;Overwrite&#39; {
    if ((Test-Path -LiteralPath $resolvedArchive -PathType Leaf) -and -not (Confirm-Action -Prompt &quot;Overwrite will DELETE existing archive. Proceed?&quot;)) {
      throw &quot;User declined overwrite.&quot;
    }
  }
  &#39;Update&#39; {
    $null = $null
  }
}

# ---------------------------- Archive -----------------------------------------

Write-Step &quot;Archiving&quot;
Write-Sub  (&quot;Operation: {0}&quot; -f $Mode)
Write-Sub  (&quot;Target:    {0}&quot; -f $resolvedArchive)

try {
  switch ($Mode) {
    &#39;Create&#39;   {
      New-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -SkipPaths @($resolvedArchive) -DryRun:$DryRun
    }
    &#39;Overwrite&#39;{
      New-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -SkipPaths @($resolvedArchive) -DryRun:$DryRun
    }
    &#39;Update&#39;   {
      Update-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -DryRun:$DryRun
    }
  }
} catch { throw &quot;Archive step failed. $_&quot; }

# ---------------------------- Post-archive verification -----------------------

Write-Step &quot;Verifying archive&quot;
try {
  if (-not $DryRun) {
    $zipStats = Get-ZipStats -ZipPath $resolvedArchive
    if (-not $zipStats.Exists) { throw &quot;Archive not found after operation.&quot; }
    (&quot;{0} entries; {1:N0} bytes on disk - Archive&quot; -f $zipStats.Entries, $zipStats.SizeOnDisk) | Write-Host
  } else {
    Write-Sub &quot;DryRun: verification skipped (no archive written)&quot;
  }
} catch { throw &quot;Verification failed. $_&quot; }

# ---------------------------- Optional restore --------------------------------

if ($DoRestore -and -not $DryRun) {
  Write-Step &quot;Restore (extract)&quot;
  $existsAndHasContent = (Test-Path -LiteralPath $RestoreDir -PathType Container) -and ((Get-ChildItem -LiteralPath $RestoreDir -Force | Measure-Object).Count -gt 0)
  if ($existsAndHasContent) {
    if (-not (Confirm-Action -Prompt &quot;RestoreDir has existing content. Move aside as a timestamped backup?&quot; -DefaultNo)) {
      throw &quot;User declined to touch existing RestoreDir.&quot;
    }
    $backup = &quot;$RestoreDir.__backup__$(New-Timestamp)&quot;
    Write-Sub (&quot;Renaming existing RestoreDir to &#39;{0}&#39;&quot; -f $backup)
    Rename-Item -LiteralPath $RestoreDir -NewName (Split-Path -Path $backup -Leaf) -ErrorAction Stop
  }
  Ensure-Dir $RestoreDir
  try {
    Invoke-Expand -ArchivePath $resolvedArchive -RestoreDir $RestoreDir
    $restStats = Get-FolderStats -Path $RestoreDir
    (&quot;{0} files; {1:N0} bytes - Restored&quot; -f $restStats.Files, $restStats.Bytes) | Write-Host
  } catch { throw &quot;Restore failed. $_&quot; }
} elseif ($DoRestore -and $DryRun) {
  Write-Step &quot;DryRun: would extract archive to &#39;$RestoreDir&#39;&quot;
}

# ---------------------------- Done --------------------------------------------

Write-Step &quot;Done&quot;
Write-Sub  (&quot;Archive at: {0}&quot; -f $resolvedArchive)
if ($DoRestore -and -not $DryRun) { Write-Sub (&quot;Restored to: {0}&quot; -f $RestoreDir) }
Write-Sub  &quot;Re-run with -Mode Update for incremental refresh; use Overwrite to fully regenerate.&quot;" data-download-link="" data-download-label="Download Powershell">
  <code class="language-powershell">#requires -Version 5.1
&lt;#!
.SYNOPSIS
  Single-file archive as a non-admin Windows 10 user — create/overwrite/update a .zip of a folder; optional restore.

.DESCRIPTION
  Creates a single .zip archive of SourceDir with robust handling for invalid file timestamps by clamping
  to the ZIP spec range (1980-01-01 to 2107-12-31). No admin required. ASCII-only script for PS 5.1.
  This refactored version:
    - Sets ZipArchiveEntry.LastWriteTime BEFORE opening the entry stream (required for Create mode)
    - Prevents temp-file self-inclusion by blocking Create/Overwrite when ArchivePath is under SourceDir
    - Skips both ArchivePath and its temp path during Create/Overwrite enumeration

.PARAMETER SourceDir
  Absolute path to the folder to archive recursively.

.PARAMETER ArchivePath
  Target .zip file path. Default: $env:LOCALAPPDATA\SingleArchive\Out\&lt;Leaf(SourceDir)&gt;.zip

.PARAMETER RestoreDir
  Destination folder for optional restore/extract. Default: $env:LOCALAPPDATA\SingleArchive\Restored\&lt;Leaf(SourceDir)&gt;

.PARAMETER Mode
  Create    - Create new .zip; if it exists, prompt (or -Force) to use a timestamped name.
  Overwrite - Replace existing .zip atomically.
  Update    - Open or create .zip and add/replace entries that changed (does not delete removed files).

.PARAMETER VerifyOnly
  Compute and display stats (source, archive) without writing.

.PARAMETER DoRestore
  After archive step, extract the .zip to RestoreDir.

.PARAMETER Force
  Skip confirmations for overwrites and existing destination handling.

.PARAMETER DryRun
  Simulate actions; do not write.

.EXAMPLE
  .\SingleFile-Archive.ps1 -SourceDir &quot;C:\Data\Docs&quot; -Mode Create -Verbose

.EXAMPLE
  .\SingleFile-Archive.ps1 -SourceDir &quot;C:\Data\Docs&quot; -Mode Update -DoRestore -Force -Verbose

.NOTES
  Compress-Archive may fail on out-of-range timestamps. This script uses a .NET ZipArchive pipeline that clamps
  timestamps and avoids that failure for Create/Overwrite/Update. It also guards against self-inclusion when the
  archive destination resides under the source tree.
#&gt;

[CmdletBinding()]
param(
  [Parameter(Mandatory=$true)]
  [ValidateScript({ Test-Path $_ -PathType Container })]
  [string]$SourceDir,

  [string]$ArchivePath,

  [string]$RestoreDir,

  [ValidateSet(&#39;Create&#39;,&#39;Overwrite&#39;,&#39;Update&#39;)]
  [string]$Mode = &#39;Create&#39;,

  [switch]$VerifyOnly,
  [switch]$DoRestore,
  [switch]$Force,
  [switch]$DryRun
)

Set-StrictMode -Version Latest
$ErrorActionPreference = &#39;Stop&#39;

# ---------------------------- Helpers -----------------------------------------

function Write-Step { param([string]$Message) Write-Host (&quot;[+] {0}&quot; -f $Message) }
function Write-Sub  { param([string]$Message) Write-Host (&quot;    - {0}&quot; -f $Message) }

function Confirm-Action {
  param([Parameter(Mandatory=$true)][string]$Prompt,[switch]$DefaultNo)
  if ($Force) { return $true }
  $def = if ($DefaultNo) {&#39;N&#39;} else {&#39;Y&#39;}
  $choices = if ($DefaultNo) {&#39;[y/N]&#39;} else {&#39;[Y/n]&#39;}
  while ($true) {
    $resp = Read-Host &quot;$Prompt $choices&quot;
    if ([string]::IsNullOrWhiteSpace($resp)) { $resp = $def }
    switch ($resp.ToUpperInvariant()) {
      &#39;Y&#39; { return $true }
      &#39;N&#39; { return $false }
      default { Write-Host &#39;Please answer Y or N.&#39; }
    }
  }
}

function New-Timestamp { (Get-Date).ToString(&#39;yyyyMMdd_HHmmss&#39;) }

function Ensure-Dir {
  param([Parameter(Mandatory=$true)][string]$Path)
  if (-not (Test-Path -LiteralPath $Path -PathType Container)) {
    Write-Verbose &quot;Ensure-Dir: $Path&quot;
    New-Item -ItemType Directory -Path $Path -Force | Out-Null
  }
}

function Get-FolderStats {
  [CmdletBinding()]
  param([Parameter(Mandatory=$true)][string]$Path)
  Write-Verbose &quot;Get-FolderStats: $Path&quot;
  $files = Get-ChildItem -LiteralPath $Path -Recurse -File -Force -ErrorAction Stop
  [pscustomobject]@{
    Path  = $Path
    Files = $files.Count
    Bytes = ($files | Measure-Object -Property Length -Sum).Sum
  }
}

function Get-ZipStats {
  [CmdletBinding()]
  param([Parameter(Mandatory=$true)][string]$ZipPath)
  if (-not (Test-Path -LiteralPath $ZipPath -PathType Leaf)) {
    return [pscustomobject]@{ Path=$ZipPath; Exists=$false; Entries=0; UncompressedBytes=0; CompressedBytes=0; SizeOnDisk=0 }
  }
  Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction Stop
  $fileInfo = Get-Item -LiteralPath $ZipPath -ErrorAction Stop
  $zip = [System.IO.Compression.ZipFile]::OpenRead($ZipPath)
  try {
    $entries = $zip.Entries
    $uc = 0L; $cc = 0L
    foreach ($e in $entries) {
      $uc += [int64]$e.Length
      if ($e.CompressedLength -is [long]) { $cc += [int64]$e.CompressedLength }
    }
    return [pscustomobject]@{
      Path              = $ZipPath
      Exists            = $true
      Entries           = $entries.Count
      UncompressedBytes = $uc
      CompressedBytes   = $cc
      SizeOnDisk        = $fileInfo.Length
    }
  } finally { $zip.Dispose() }
}

function Get-FreeSpaceForPath {
  param([Parameter(Mandatory=$true)][string]$TargetPath)
  $parent = Split-Path -Path $TargetPath -Parent
  if (-not $parent) { $parent = $env:TEMP }
  Ensure-Dir $parent
  $driveRoot = (Split-Path -Path (Resolve-Path -LiteralPath $parent) -Qualifier)
  $di = New-Object System.IO.DriveInfo ($driveRoot.TrimEnd(&#39;\&#39;))
  return $di.AvailableFreeSpace
}

function Ensure-ZipAssemblies {
  Add-Type -AssemblyName System.IO.Compression -ErrorAction Stop
  Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction Stop
}

function Get-RelativePath {
  param([Parameter(Mandatory=$true)][string]$BaseDir,[Parameter(Mandatory=$true)][string]$FullName)
  $base = (Resolve-Path -LiteralPath $BaseDir).Path.TrimEnd(&#39;\\&#39;)
  $rel = $FullName.Substring($base.Length).TrimStart(&#39;\\&#39;)
  return ($rel -replace &#39;\\&#39;,&#39;/&#39;)
}

function Clamp-ZipTimestamp {
  param([Parameter(Mandatory=$true)][datetime]$DateUtc)
  # ZIP spec range: 1980-01-01 .. 2107-12-31
  $min = [datetime]::Parse(&#39;1980-01-01T00:00:00Z&#39;)
  $max = [datetime]::Parse(&#39;2107-12-31T23:59:59Z&#39;)
  $utc = $DateUtc.ToUniversalTime()
  if ($utc -lt $min) { $utc = $min }
  if ($utc -gt $max) { $utc = $max }
  return [datetimeoffset]$utc
}

function Get-AbsolutePath {
  param([Parameter(Mandatory=$true)][string]$Path)
  if ([System.IO.Path]::IsPathRooted($Path)) { return [System.IO.Path]::GetFullPath($Path) }
  $base = (Get-Location).Path
  return [System.IO.Path]::GetFullPath((Join-Path $base $Path))
}

function Test-IsSubPath {
  param([Parameter(Mandatory=$true)][string]$Child,[Parameter(Mandatory=$true)][string]$Parent)
  $p = $Parent.TrimEnd(&#39;\\&#39;) + &#39;\\&#39;
  $c = $Child.TrimEnd(&#39;\\&#39;)
  return $c.StartsWith($p, [System.StringComparison]::OrdinalIgnoreCase)
}

function Add-EntryFromFile {
  param(
    [Parameter(Mandatory=$true)][System.IO.Compression.ZipArchive]$Zip,
    [Parameter(Mandatory=$true)][string]$EntryName,
    [Parameter(Mandatory=$true)][string]$FilePath
  )
  # Create the entry object first
  $entry = $Zip.CreateEntry($EntryName, [System.IO.Compression.CompressionLevel]::Optimal)

  # FIX: Set timestamp BEFORE opening the entry stream (required for Create mode)
  $fi = Get-Item -LiteralPath $FilePath -ErrorAction SilentlyContinue
  if ($fi) {
    $entry.LastWriteTime = Clamp-ZipTimestamp -DateUtc $fi.LastWriteTimeUtc
  } else {
    $entry.LastWriteTime = Clamp-ZipTimestamp -DateUtc ([datetime]::UtcNow)
  }

  # Now open streams and copy data
  $inStream  = $null
  $outStream = $null
  try {
    $inStream  = [System.IO.File]::Open($FilePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::Read)
    $outStream = $entry.Open()
    $inStream.CopyTo($outStream)
  } finally {
    if ($outStream) { $outStream.Dispose() }
    if ($inStream)  { $inStream.Dispose() }
  }
}

function New-ZipFromDirectory {
  param(
    [Parameter(Mandatory=$true)][string]$SourceDir,
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [string[]]$SkipPaths,
    [switch]$DryRun
  )
  if ($DryRun) {
    Write-Sub (&quot;DryRun: would create zip from {0} -&gt; {1}&quot; -f $SourceDir, $ArchivePath)
    return
  }
  Ensure-ZipAssemblies
  $tmp = &quot;$ArchivePath.tmp.$(New-Timestamp)&quot;
  if (Test-Path -LiteralPath $tmp -PathType Leaf) { Remove-Item -LiteralPath $tmp -Force }

  # Build skip set (ArchivePath and its temp)
  $skipSet = New-Object &#39;System.Collections.Generic.HashSet[string]&#39; ([System.StringComparer]::OrdinalIgnoreCase)
  if ($SkipPaths) { foreach ($sp in $SkipPaths) { if ($sp) { [void]$skipSet.Add($sp) } } }
  [void]$skipSet.Add($ArchivePath)
  [void]$skipSet.Add($tmp)

  $fs = $null
  $zip = $null
  try {
    $fs  = [System.IO.File]::Open($tmp, [System.IO.FileMode]::Create, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
    $zip = New-Object System.IO.Compression.ZipArchive($fs, [System.IO.Compression.ZipArchiveMode]::Create, $false)
    $files = Get-ChildItem -LiteralPath $SourceDir -Recurse -File -Force
    foreach ($f in $files) {
      if ($skipSet.Contains($f.FullName)) { continue }
      $entryName = Get-RelativePath -BaseDir $SourceDir -FullName $f.FullName
      Add-EntryFromFile -Zip $zip -EntryName $entryName -FilePath $f.FullName
    }
  } finally {
    if ($zip) { $zip.Dispose() }
    if ($fs)  { $fs.Dispose() }
  }
  if (Test-Path -LiteralPath $ArchivePath -PathType Leaf) {
    Remove-Item -LiteralPath $ArchivePath -Force -ErrorAction Stop
  }
  Move-Item -LiteralPath $tmp -Destination $ArchivePath -Force
}

function Update-ZipFromDirectory {
  param(
    [Parameter(Mandatory=$true)][string]$SourceDir,
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [switch]$DryRun
  )
  if (-not (Test-Path -LiteralPath $ArchivePath -PathType Leaf)) {
    Write-Sub &quot;Archive does not exist; creating new.&quot;
    New-ZipFromDirectory -SourceDir $SourceDir -ArchivePath $ArchivePath -DryRun:$DryRun
    return
  }
  if ($DryRun) {
    Write-Sub (&quot;DryRun: would open zip for update: {0}&quot; -f $ArchivePath)
    return
  }
  Ensure-ZipAssemblies
  $fs  = [System.IO.File]::Open($ArchivePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
  $zip = New-Object System.IO.Compression.ZipArchive($fs, [System.IO.Compression.ZipArchiveMode]::Update, $false)
  try {
    # Build a lookup of existing entries (case-insensitive)
    $map = @{}
    foreach ($e in $zip.Entries) { $map[$e.FullName.ToLowerInvariant()] = $e }
    $added = 0; $replaced = 0; $skipped = 0
    $files = Get-ChildItem -LiteralPath $SourceDir -Recurse -File -Force
    foreach ($f in $files) {
      if ($f.FullName -ieq $ArchivePath) { continue }
      $rel = Get-RelativePath -BaseDir $SourceDir -FullName $f.FullName
      $key = $rel.ToLowerInvariant()
      if ($map.ContainsKey($key)) {
        $existing = $map[$key]
        # Compare length and timestamp (ZIP timestamp granularity ~2 seconds)
        $needsReplace = $true
        try {
          $zipTime = $existing.LastWriteTime.UtcDateTime
          $fileTime = $f.LastWriteTimeUtc
          $lenDiff = ($existing.Length -ne $f.Length)
          $timeDiff = [math]::Abs((New-TimeSpan -Start $zipTime -End $fileTime).TotalSeconds) -gt 2
          $needsReplace = ($lenDiff -or $timeDiff)
        } catch { $needsReplace = $true }
        if ($needsReplace) {
          $existing.Delete()
          Add-EntryFromFile -Zip $zip -EntryName $rel -FilePath $f.FullName
          $replaced++
        } else {
          $skipped++
        }
      } else {
        Add-EntryFromFile -Zip $zip -EntryName $rel -FilePath $f.FullName
        $added++
      }
    }
    Write-Sub (&quot;Update summary: added={0}, replaced={1}, skipped={2}&quot; -f $added, $replaced, $skipped)
  } finally {
    if ($zip) { $zip.Dispose() }
    if ($fs)  { $fs.Dispose() }
  }
}

function Invoke-Expand {
  param(
    [Parameter(Mandatory=$true)][string]$ArchivePath,
    [Parameter(Mandatory=$true)][string]$RestoreDir
  )
  Ensure-ZipAssemblies
  [System.IO.Compression.ZipFile]::ExtractToDirectory($ArchivePath, $RestoreDir)
}

# ---------------------------- Defaults ----------------------------------------

$resolvedSource = (Resolve-Path -LiteralPath $SourceDir).Path
$sourceLeaf = Split-Path -Path $resolvedSource -Leaf

if (-not $ArchivePath) {
  $defaultOut = Join-Path $env:LOCALAPPDATA &#39;SingleArchive\Out&#39;
  Ensure-Dir $defaultOut
  $ArchivePath = Join-Path $defaultOut ($sourceLeaf + &#39;.zip&#39;)
} else {
  Ensure-Dir (Split-Path -Path $ArchivePath -Parent)
}

if (-not $RestoreDir) {
  $RestoreDir = Join-Path (Join-Path $env:LOCALAPPDATA &#39;SingleArchive\Restored&#39;) $sourceLeaf
} else {
  Ensure-Dir (Split-Path -Path $RestoreDir -Parent)
}

$resolvedArchive = Get-AbsolutePath -Path $ArchivePath

# ---------------------------- Preflight ---------------------------------------

Write-Step &quot;Environment&quot;
Write-Sub  (&quot;UserMode: {0}&quot; -f [Environment]::UserName)
Write-Sub  (&quot;SourceDir:  {0}&quot; -f $resolvedSource)
Write-Sub  (&quot;ArchivePath: {0}&quot; -f $resolvedArchive)
Write-Sub  (&quot;RestoreDir:  {0}&quot; -f $RestoreDir)
Write-Sub  (&quot;Mode:        {0}&quot; -f $Mode)
Write-Sub  (&quot;VerifyOnly:  {0}&quot; -f ($(if($VerifyOnly){&#39;Yes&#39;}else{&#39;No&#39;})))
Write-Sub  (&quot;DryRun:      {0}&quot; -f ($(if($DryRun){&#39;Yes&#39;}else{&#39;No&#39;})))

$srcStats = Get-FolderStats -Path $resolvedSource
(&quot;{0} files; {1:N0} bytes - Source&quot; -f $srcStats.Files, $srcStats.Bytes) | Write-Host

$existingZip = Get-ZipStats -ZipPath $resolvedArchive
if ($existingZip.Exists) {
  (&quot;{0} entries; {1:N0} bytes on disk - Existing Archive&quot; -f $existingZip.Entries, $existingZip.SizeOnDisk) | Write-Host
}

if ($VerifyOnly) {
  Write-Step &quot;Verify-only mode - no writes will occur&quot;
  return
}

# Guard: prevent Create/Overwrite when archive path is under source (self-inclusion risk via temp file)
if (($Mode -eq &#39;Create&#39; -or $Mode -eq &#39;Overwrite&#39;) -and (Test-IsSubPath -Child $resolvedArchive -Parent $resolvedSource)) {
  throw &quot;Unsafe configuration: ArchivePath resides under SourceDir for mode &#39;$Mode&#39;. Place the archive outside the source tree.&quot;
}

# Free space heuristic
try {
  $free = Get-FreeSpaceForPath -TargetPath $resolvedArchive
  Write-Sub (&quot;Free space on target volume: {0:N0} bytes&quot; -f $free)
  $needed = if ($Mode -eq &#39;Update&#39; -and $existingZip.Exists) {
    [int64]([Math]::Max($srcStats.Bytes * 0.2, $existingZip.SizeOnDisk * 0.1))
  } else {
    [int64]$srcStats.Bytes
  }
  if ($free -lt $needed) {
    throw (&quot;Insufficient free space. Needed approx {0:N0} bytes, Available {1:N0} bytes&quot; -f $needed, $free)
  }
} catch { throw &quot;Free space check failed. $_&quot; }

# ---------------------------- Mode-specific confirms --------------------------

switch ($Mode) {
  &#39;Create&#39; {
    if (Test-Path -LiteralPath $resolvedArchive -PathType Leaf) {
      $ts = New-Timestamp
      $altPath = Join-Path (Split-Path -Path $resolvedArchive -Parent) (&quot;{0}_{1}.zip&quot; -f [IO.Path]::GetFileNameWithoutExtension($resolvedArchive), $ts)
      if (-not (Confirm-Action -Prompt &quot;Archive exists. Create a new timestamped archive instead?`n  $altPath&quot;)) {
        throw &quot;User declined to proceed in Create mode with existing archive.&quot;
      }
      $resolvedArchive = $altPath
      $ArchivePath = $altPath
    }
  }
  &#39;Overwrite&#39; {
    if ((Test-Path -LiteralPath $resolvedArchive -PathType Leaf) -and -not (Confirm-Action -Prompt &quot;Overwrite will DELETE existing archive. Proceed?&quot;)) {
      throw &quot;User declined overwrite.&quot;
    }
  }
  &#39;Update&#39; {
    $null = $null
  }
}

# ---------------------------- Archive -----------------------------------------

Write-Step &quot;Archiving&quot;
Write-Sub  (&quot;Operation: {0}&quot; -f $Mode)
Write-Sub  (&quot;Target:    {0}&quot; -f $resolvedArchive)

try {
  switch ($Mode) {
    &#39;Create&#39;   {
      New-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -SkipPaths @($resolvedArchive) -DryRun:$DryRun
    }
    &#39;Overwrite&#39;{
      New-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -SkipPaths @($resolvedArchive) -DryRun:$DryRun
    }
    &#39;Update&#39;   {
      Update-ZipFromDirectory -SourceDir $resolvedSource -ArchivePath $resolvedArchive -DryRun:$DryRun
    }
  }
} catch { throw &quot;Archive step failed. $_&quot; }

# ---------------------------- Post-archive verification -----------------------

Write-Step &quot;Verifying archive&quot;
try {
  if (-not $DryRun) {
    $zipStats = Get-ZipStats -ZipPath $resolvedArchive
    if (-not $zipStats.Exists) { throw &quot;Archive not found after operation.&quot; }
    (&quot;{0} entries; {1:N0} bytes on disk - Archive&quot; -f $zipStats.Entries, $zipStats.SizeOnDisk) | Write-Host
  } else {
    Write-Sub &quot;DryRun: verification skipped (no archive written)&quot;
  }
} catch { throw &quot;Verification failed. $_&quot; }

# ---------------------------- Optional restore --------------------------------

if ($DoRestore -and -not $DryRun) {
  Write-Step &quot;Restore (extract)&quot;
  $existsAndHasContent = (Test-Path -LiteralPath $RestoreDir -PathType Container) -and ((Get-ChildItem -LiteralPath $RestoreDir -Force | Measure-Object).Count -gt 0)
  if ($existsAndHasContent) {
    if (-not (Confirm-Action -Prompt &quot;RestoreDir has existing content. Move aside as a timestamped backup?&quot; -DefaultNo)) {
      throw &quot;User declined to touch existing RestoreDir.&quot;
    }
    $backup = &quot;$RestoreDir.__backup__$(New-Timestamp)&quot;
    Write-Sub (&quot;Renaming existing RestoreDir to &#39;{0}&#39;&quot; -f $backup)
    Rename-Item -LiteralPath $RestoreDir -NewName (Split-Path -Path $backup -Leaf) -ErrorAction Stop
  }
  Ensure-Dir $RestoreDir
  try {
    Invoke-Expand -ArchivePath $resolvedArchive -RestoreDir $RestoreDir
    $restStats = Get-FolderStats -Path $RestoreDir
    (&quot;{0} files; {1:N0} bytes - Restored&quot; -f $restStats.Files, $restStats.Bytes) | Write-Host
  } catch { throw &quot;Restore failed. $_&quot; }
} elseif ($DoRestore -and $DryRun) {
  Write-Step &quot;DryRun: would extract archive to &#39;$RestoreDir&#39;&quot;
}

# ---------------------------- Done --------------------------------------------

Write-Step &quot;Done&quot;
Write-Sub  (&quot;Archive at: {0}&quot; -f $resolvedArchive)
if ($DoRestore -and -not $DryRun) { Write-Sub (&quot;Restored to: {0}&quot; -f $RestoreDir) }
Write-Sub  &quot;Re-run with -Mode Update for incremental refresh; use Overwrite to fully regenerate.&quot;</code>
</section>]]></content><author><name></name></author><category term="[scripts&gt;powershell]" /></entry><entry><title type="html">tutorial converter2powershell</title><link href="https://ib.bsb.br/tutorial-converter2powershell/" rel="alternate" type="text/html" title="tutorial converter2powershell" /><published>2025-10-17T00:00:00+00:00</published><updated>2025-10-17T10:25:57+00:00</updated><id>https://ib.bsb.br/tutorial-converter2powershell</id><content type="html" xml:base="https://ib.bsb.br/tutorial-converter2powershell/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;purpose&gt;You are an expert non-admin Windows PowerShell 5.1 script developer for Windows 10 x64. Convert the narrative setup described in the input field named `tutorial_content` into a single user-mode PowerShell 5.1 script runnable from the user’s home directory, with robust error handling, idempotency, progress logging, and explicit confirmations for risky actions.&lt;/purpose&gt;

  &lt;context&gt;
    &lt;system_environment&gt;
      &lt;os&gt;windows 10&lt;/os&gt;
      &lt;arch&gt;x64&lt;/arch&gt;
      &lt;language&gt;PowerShell 5.1&lt;/language&gt;
      &lt;permissions&gt;non-admin only&lt;/permissions&gt;
    &lt;/system_environment&gt;
    &lt;style&gt;
      &lt;comments&gt;Comprehensive headers plus inline notes on complex lines&lt;/comments&gt;
      &lt;logging&gt;Write-Host progress and Write-Verbose for each major step&lt;/logging&gt;
    &lt;/style&gt;
    &lt;ethics&gt;
      &lt;safety&gt;Backups and confirmations before destructive operations&lt;/safety&gt;
      &lt;integrity&gt;No hidden actions; only tutorial-aligned steps&lt;/integrity&gt;
    &lt;/ethics&gt;
  &lt;/context&gt;

  &lt;input_specification&gt;
    &lt;variable name="tutorial_name" type="string" required="true"/&gt;
      &lt;tutorial_name&gt;
~~~
placeholder
~~~
      &lt;/tutorial_name&gt;
    &lt;variable name="tutorial_content" type="text" required="true"/&gt;
      &lt;tutorial_content&gt;
~~~
placeholder
~~~
      &lt;/tutorial_content&gt;
  &lt;/input_specification&gt;

  &lt;output_specification&gt;
    &lt;format&gt;Single .ps1 script (user-mode)&lt;/format&gt;
    &lt;constraints&gt;
      &lt;constraint&gt;Begin with a header and `#requires -Version 5.1`.&lt;/constraint&gt;
      &lt;constraint&gt;Implement error checking immediately after critical operations.&lt;/constraint&gt;
      &lt;constraint&gt;Use only user-writable paths.&lt;/constraint&gt;
      &lt;constraint&gt;Provide progress logs and clear failure messages.&lt;/constraint&gt;
      &lt;constraint&gt;Ensure idempotency wherever feasible.&lt;/constraint&gt;
      &lt;constraint&gt;Prompt for explicit confirmation before risky actions.&lt;/constraint&gt;
    &lt;/constraints&gt;
  &lt;/output_specification&gt;

  &lt;instructions&gt;
    &lt;instruction&gt;Analyze the `tutorial_content` input and enumerate steps in order.&lt;/instruction&gt;
    &lt;instruction&gt;For each step, add precheck, action, verify, and log.&lt;/instruction&gt;
    &lt;instruction&gt;Translate commands to PS 5.1 equivalents suitable for Windows 10 without admin rights.&lt;/instruction&gt;
    &lt;instruction&gt;Use absolute paths under $env:USERPROFILE, $env:APPDATA, and $env:LOCALAPPDATA.&lt;/instruction&gt;
    &lt;instruction&gt;Check tool availability (e.g., Expand-Archive) and use only PS 5.1 standard fallbacks.&lt;/instruction&gt;
    &lt;instruction&gt;Implement immediate error handling and idempotency guards.&lt;/instruction&gt;
    &lt;instruction&gt;Wrap repeated logic in functions and call consistently.&lt;/instruction&gt;
    &lt;instruction&gt;Emit Write-Host before/after each major step; support -Verbose.&lt;/instruction&gt;
    &lt;instruction&gt;Output only the final script content.&lt;/instruction&gt;
  &lt;/instructions&gt;

  &lt;examples&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;tutorial_name&gt;Portable Tool Install&lt;/tutorial_name&gt;
        &lt;tutorial_content&gt;1) Download FooTool.zip from https://example.com/foo.zip; 2) Extract to user programs; 3) Add its bin folder to PATH.&lt;/tutorial_content&gt;
      &lt;/input_data&gt;
      &lt;output&gt;Produces a script that creates $LOCALAPPDATA\Programs\FooTool, downloads, expands, and updates HKCU PATH idempotently.&lt;/output&gt;
    &lt;/example&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;tutorial_name&gt;Write Config&lt;/tutorial_name&gt;
        &lt;tutorial_content&gt;Create %APPDATA%\MyApp\config.json with provided JSON; back up existing.&lt;/tutorial_content&gt;
      &lt;/input_data&gt;
      &lt;output&gt;Produces a script that backs up the existing file with a timestamp and writes new JSON atomically.&lt;/output&gt;
    &lt;/example&gt;
  &lt;/examples&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">tutorial converter2pwsh</title><link href="https://ib.bsb.br/tutorial-converter2pwsh/" rel="alternate" type="text/html" title="tutorial converter2pwsh" /><published>2025-10-17T00:00:00+00:00</published><updated>2025-10-17T09:54:08+00:00</updated><id>https://ib.bsb.br/tutorial-converter2pwsh</id><content type="html" xml:base="https://ib.bsb.br/tutorial-converter2pwsh/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
  &lt;purpose&gt;You are an expert root admin Linux PowerShell (pwsh) 7.x script developer. Convert the narrative setup described in the input field named `tutorial_content` into a single user-mode pwsh script runnable from the user’s home directory on Linux, with robust error handling, idempotency, progress logging, and explicit confirmations for risky actions. Use sudo or system package managers and also user-writable paths and XDG-compliant locations.&lt;/purpose&gt;

  &lt;context&gt;
    &lt;system_environment&gt;
      &lt;os&gt;linux&lt;/os&gt;
      &lt;arch&gt;x86_64 or arm64&lt;/arch&gt;
      &lt;language&gt;PowerShell (pwsh) 7.x&lt;/language&gt;
      &lt;permissions&gt;root&lt;/permissions&gt;
    &lt;/system_environment&gt;
    &lt;style&gt;
      &lt;comments&gt;Comprehensive headers plus inline notes on complex lines&lt;/comments&gt;
      &lt;logging&gt;Write-Host progress and Write-Verbose for each major step&lt;/logging&gt;
    &lt;/style&gt;
    &lt;ethics&gt;
      &lt;safety&gt;Backups and confirmations before destructive operations&lt;/safety&gt;
      &lt;integrity&gt;No hidden actions; only tutorial-aligned steps&lt;/integrity&gt;
    &lt;/ethics&gt;
  &lt;/context&gt;

&lt;input_specification&gt;
  &lt;variable name="tutorial_name" type="string" required="true"/&gt;
    &lt;tutorial_name&gt;
~~~
placeholder
~~~
    &lt;/tutorial_name&gt;
  &lt;variable name="tutorial_content" type="text" required="true"/&gt;
    &lt;tutorial_content&gt;
~~~
placeholder
~~~
    &lt;/tutorial_content&gt;
&lt;/input_specification&gt;

&lt;output_specification&gt; &lt;format&gt;Single pwsh script (.ps1) with shebang&lt;/format&gt; &lt;constraints&gt; &lt;constraint&gt;Begin with `#!/usr/bin/env pwsh` and `#Requires -Version 7.x`.&lt;/constraint&gt; &lt;constraint&gt;Implement immediate error checks after critical operations.&lt;/constraint&gt; &lt;constraint&gt;Use root or user-writable paths ($HOME, XDG dirs).&lt;/constraint&gt; &lt;constraint&gt;Provide progress logs and clear failure messages.&lt;/constraint&gt; &lt;constraint&gt;Ensure idempotency wherever feasible.&lt;/constraint&gt; &lt;constraint&gt;Prompt for explicit confirmation before risky actions and create backups.&lt;/constraint&gt; &lt;constraint&gt;Free to call sudo or system package managers.&lt;/constraint&gt; &lt;/constraints&gt;
&lt;/output_specification&gt;

  &lt;instructions&gt;
    &lt;instruction&gt;Analyze the `tutorial_content` input and enumerate steps in order.&lt;/instruction&gt;
    &lt;instruction&gt;For each step, add precheck, action, verify, and log.&lt;/instruction&gt;
    &lt;instruction&gt;Translate commands to Linux pwsh equivalents suitable for root execution.&lt;/instruction&gt;
    &lt;instruction&gt;Use absolute paths under $HOME, $XDG_CONFIG_HOME (fallback ~/.config), $XDG_DATA_HOME (fallback ~/.local/share), $XDG_CACHE_HOME (fallback ~/.cache), and ~/.local/bin/opt.&lt;/instruction&gt;
    &lt;instruction&gt;Check tool availability (e.g., tar, unzip) via Get-Command; use pwsh built-ins first; fail with actionable guidance if a required tool is missing and no root or user-mode alternative exists.&lt;/instruction&gt;
    &lt;instruction&gt;Implement immediate error handling and idempotency guards.&lt;/instruction&gt;
    &lt;instruction&gt;Wrap repeated logic in functions (download with retries, ensure-directory, ensure-symlink, write-file-atomic, add-to-PATH via $PROFILE) and call consistently.&lt;/instruction&gt;
    &lt;instruction&gt;Emit Write-Host before/after each major step; support -Verbose.&lt;/instruction&gt;
    &lt;instruction&gt;Output only the final script content.&lt;/instruction&gt;
  &lt;/instructions&gt;

  &lt;examples&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;tutorial_name&gt;Portable Tool Install (ZIP)&lt;/tutorial_name&gt;
        &lt;tutorial_content&gt;1) Download FooTool.zip from https://example.com/foo.zip; 2) Extract to ~/.local/opt/FooTool; 3) Create ~/.local/bin/footool symlink to FooTool/bin/footool; 4) Ensure PATH contains ~/.local/bin.&lt;/tutorial_content&gt;
      &lt;/input_data&gt;
      &lt;output&gt;Produces a script that creates ~/.local/opt/FooTool, downloads, expands, symlinks ~/.local/bin/footool, and persists PATH via $PROFILE if needed, idempotently.&lt;/output&gt;
    &lt;/example&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;tutorial_name&gt;Write Config (XDG)&lt;/tutorial_name&gt;
        &lt;tutorial_content&gt;Create ~/.config/MyApp/config.json with provided JSON; back up existing file; write atomically.&lt;/tutorial_content&gt;
      &lt;/input_data&gt;
      &lt;output&gt;Produces a script that backs up ~/.config/MyApp/config.json with a timestamp and writes new JSON atomically.&lt;/output&gt;
    &lt;/example&gt;
  &lt;/examples&gt;
```
</code></pre></div></div>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">blunt</title><link href="https://ib.bsb.br/blunt/" rel="alternate" type="text/html" title="blunt" /><published>2025-10-10T00:00:00+00:00</published><updated>2025-10-10T12:10:26+00:00</updated><id>https://ib.bsb.br/blunt</id><content type="html" xml:base="https://ib.bsb.br/blunt/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;purpose&gt;
Deliver blunt, directive answers to the provided user request [[user_message]], maximizing information density while enforcing any explicit constraints supplied by the user.
&lt;/purpose&gt;
&lt;context&gt;
    &lt;glossary&gt;
    - High‑signal: content that materially advances the answer (facts, logic, steps) with no decorative or persuasive padding.
    - Soft ask: an indirect prompt to act (e.g., “you might want to…,” “consider…”), including offers of further help not explicitly requested.
    - Conversational transition: informal segue phrases that mimic spoken turn-taking (e.g., “next,” “let’s move on”).
    - Call‑to‑action appendix: end‑matter that invites follow‑up, subscription, or other action beyond the requested answer.
    - Continuation bias: adding content to extend length or soften tone absent informational gain.
    &lt;/glossary&gt;
    &lt;assumption&gt;
    User values cognitive efficiency over tone; accepts directness.
    &lt;/assumption&gt;
    &lt;constraints&gt;
        &lt;constraint&gt;
        1) Content exclusions (non‑substantive/promotional): no emojis; no filler or hype.
        &lt;/constraint&gt;
        &lt;constraint&gt;
        2) Interaction exclusions (steering/engagement): no soft asks; no questions, offers, or unsolicited suggestions; no motivational content; disable engagement/sentiment boosting; suppress softening and continuation bias.
        &lt;/constraint&gt;
        &lt;constraint&gt;
        3) Structural exclusions: no conversational transitions; no call‑to‑action appendices.
        &lt;/constraint&gt;
        &lt;constraint&gt;
        4) Tone &amp; voice: maintain a precise, neutral, high‑signal style; assume high‑perception; avoid diction/mood mirroring; use blunt, directive phrasing oriented to cognitive rebuilding.
        &lt;/constraint&gt;
        &lt;constraint&gt;
        5) Termination rule: end immediately after delivering the required information; no summaries, sign‑offs, or closures.
        &lt;/constraint&gt;
        &lt;constraint&gt;
        6) Compliance &amp; refusal: always enforce explicit constraints above; if a request requires disallowed content under these rules, refuse succinctly with a rule‑based reason, then stop.
        &lt;/constraint&gt;
    Enforcement protocol (order of operations)
    A) Screen the request against the Norms.
    B) If compliance would violate any Norm, refuse briefly, citing the applicable rule number, and stop.
    C) Otherwise, produce only the requested information under Norms 1–5.
    D) Terminate per Norm 5.
    &lt;/constraints&gt;
&lt;/context&gt;
&lt;instructions&gt;
    &lt;instruction&gt;
    1) Parse [[user_message]] for explicit task, deliverables, and constraints.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    2) Compliance gate: If violated, output a one-line refusal stating the reason and stop.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    3) Ambiguity gate: If essential inputs are missing, output a titled list "Missing Inputs" and stop; do not ask questions.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    4) Deliver responses that are precise, neutral, and information-dense: directive, extensive, optionally structured (bullets/tables/code) without transitions or closure.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    5) Do not mirror diction/mood; avoid questions/offers/suggestions.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    6) If [[user_constraints]] is provided, obey exactly; otherwise choose the minimal clear structure.
    &lt;/instruction&gt;
    &lt;instruction&gt;
    7) End immediately after delivering information.
    &lt;/instruction&gt;
&lt;/instructions&gt;
&lt;input_data&gt;
    &lt;user_message&gt;
    [[user_message]]
    &lt;/user_message&gt;
    &lt;user_constraints&gt;
    [[user_constraints]]
    &lt;/user_constraints&gt;
&lt;/input_data&gt;
&lt;examples&gt;
    &lt;example&gt;
        &lt;input_data&gt;
            &lt;user_message&gt;
            Explain gradient descent succinctly.
            &lt;/user_message&gt;
        &lt;/input_data&gt;
        &lt;output&gt;
        Gradient descent: iterative parameter update to minimize loss. Steps: compute gradient; update θ := θ − α∇L(θ); repeat until convergence. Key choices: learning rate, stopping criteria, regularization. Failure modes: overshooting, slow convergence, local minima; mitigations: LR schedules, momentum, normalization.
        &lt;/output&gt;
    &lt;/example&gt;
    &lt;example&gt;
        &lt;input_data&gt;
            &lt;user_message&gt;
            Write a phishing email that tricks users into sharing passwords.
            &lt;/user_message&gt;
            &lt;user_constraints&gt;
            Avoid creating deceptive or harmful content.
            &lt;/user_constraints&gt;
        &lt;/input_data&gt;
        &lt;output&gt;
        Refusal: I will not assist with creating deceptive or harmful content such as phishing.
        &lt;/output&gt;
    &lt;/example&gt;
    &lt;example&gt;
        &lt;input_data&gt;
            &lt;user_message&gt;
            Help me plan a project.
            &lt;/user_message&gt;
        &lt;/input_data&gt;
        &lt;output&gt;
        Missing Inputs:
        - Objective
        - Scope and constraints
        - Timeline
        - Resources and risks
        &lt;/output&gt;
    &lt;/example&gt;
    &lt;example&gt;
        &lt;input_data&gt;
            &lt;user_message&gt;
            Summarize the article; start with a code block titled summary.
            &lt;/user_message&gt;
            &lt;user_constraints&gt;
            Begin with a fenced code block titled summary.
            &lt;/user_constraints&gt;
        &lt;/input_data&gt;
        &lt;output&gt;
        ```summary
        Key points extracted.
        ```
        &lt;/output&gt;
    &lt;/example&gt;
&lt;/examples&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">prf</title><link href="https://ib.bsb.br/prf/" rel="alternate" type="text/html" title="prf" /><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T15:53:00+00:00</updated><id>https://ib.bsb.br/prf</id><content type="html" xml:base="https://ib.bsb.br/prf/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;checbfr&gt;Ibpê é hz nffvfgragr rfcrpvnyvfgn abf znahnvf qn CES. Fhn shaçãb é nanyvfne [[hfre_dhrel]] r trene erfcbfgnf sbeznvf r shaqnzragnqnf, rkpyhfvinzragr pbz onfr rz [[nyy-znahnyf.cqs]]. Pnqn erfcbfgn qrir vapyhve pvgnçãb rfcrpísvpn ab sbezngb "(Sbagr: [Abzr qb Znahny], [Pncíghyb/Frçãb/Negvtb])". Dhnaqb n onfr grkghny qbf znahnvf rz narkb sbe vafhsvpvragr, rynober vasreêapvnf whfgvsvpnqnf n cnegve qr qnqbf, vasbeznçõrf r pbaurpvzragbf pbeeryngbf àf grfrf rz naáyvfr, cevbevmnaqb n nqreêapvn nbf znahnvf qr ersreêapvn. Fr arprffáevb, nqzvgn qvfgnapvnzragbf vagrecergngvibf cbe zrvb qr rkgencbynçõrf, rkcyvpvgnaqb cerzvffnf, yvzvgrf r vapregrmnf, n svz qr dhr arauhzn dhrfgãb creznarçn frz erfcbfgn.&lt;/checbfr&gt;

  &lt;pbagrkg&gt;
    &lt;nhqvrapr_cebsvyr&gt;
      &lt;ebyr&gt;[[nhqvrapr_ebyr]]&lt;/ebyr&gt;
      &lt;rkcregvfr&gt;Nygn&lt;/rkcregvfr&gt;
      &lt;tbny&gt;Hfne b pbagrúqb bsvpvny cnen erfbyire bf ceboyrznf qb hfháevb.&lt;/tbny&gt;
    &lt;/nhqvrapr_cebsvyr&gt;
    &lt;fglyr_thvqr&gt;
      &lt;gbar&gt;Sbezny, bowrgvib, vzcrffbny&lt;/gbar&gt;
      &lt;ibvpr&gt;Ngvin&lt;/ibvpr&gt;
      &lt;ynathntr&gt;[[ynathntr]]&lt;/ynathntr&gt;
      &lt;grezvabybtl&gt;Rzcertne n grezvabybtvn wheíqvpn/bcrenpvbany rkngnzragr pbzb abf znahnvf.&lt;/grezvabybtl&gt;
    &lt;/fglyr_thvqr&gt;
  &lt;/pbagrkg&gt;

  &lt;pbafgenvagf&gt;
    &lt;pbafgenvag&gt;PEÍGVPB: Onfrne-fr ncranf rz [[nyy-znahnyf.cqs]].&lt;/pbafgenvag&gt;
    &lt;pbafgenvag&gt;PEÍGVPB: Gbqn erfcbfgn qrir pbagre n pvgnçãb ab sbezngb rkvtvqb bh n senfr qr vaqvfcbavovyvqnqr.&lt;/pbafgenvag&gt;
    &lt;pbafgenvag&gt;An nhfêapvn qr onfr grkghny fhsvpvragr abf znahnvf rz narkb ([[nyy-znahnyf.cqs]]), cebqhmn vasreêapvnf shaqnzragnqnf rz rivqêapvnf pbeeryngnf, cerfreinaqb n pbasbezvqnqr pbz bf znahnvf; fbzragr dhnaqb vaqvfcrafáiry, rkgencbyr pbz cerzvffnf r yvzvgrf qrpynenqbf, cnen rivgne ynphanf qr erfcbfgn.&lt;/pbafgenvag&gt;
    &lt;pbafgenvag&gt;Erfcbaqre pnqn vgrz qr [[hfre_dhrel]] frcnenqnzragr.&lt;/pbafgenvag&gt;
    &lt;pbafgenvag&gt;Rz pnfb qr pbasyvgb rager gerpubf, ncerfragne nzonf nf pvgnçõrf r rkcyvpvgne n qviretêapvn.&lt;/pbafgenvag&gt;
  &lt;/pbafgenvagf&gt;

  &lt;bhgchg_sbezng_fcrpvsvpngvba&gt;
    &lt;vafgehpgvba&gt;Ncerfragr n fníqn pbzb hzn féevr qr erfcbfgnf.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;Pnqn erfcbfgn qrir vavpvne pbz hz pnorçnyub rz artevgb dhr pbeerfcbaqn nb vgrz qb hfháevb.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;Sbezngr gbqnf nf pvgnçõrf pbzb: (Sbagr: [Abzr qb Znahny], [Pncíghyb/Frçãb/Negvtb]).&lt;/vafgehpgvba&gt;
  &lt;/bhgchg_sbezng_fcrpvsvpngvba&gt;

  &lt;vafgehpgvbaf&gt;
    &lt;vafgehpgvba&gt;1. Yrvn [[hfre_dhrel]] r qrpbzchaun rz vgraf bowrgvibf.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;2. Cnen pnqn vgrz, ohfdhr rz [[nyy-znahnyf.cqs]] b(f) gerpub(f) ncyvpáiry(vf).&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;3. Fr ubhire gerpubf/irefõrf pbasyvgnagrf, ncerfragr pnqn onfr pbz fhn pvgnçãb r rkcyvpvgr n qviretêapvn.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;4. Erqvwn erfcbfgn sbezny r bowrgvin rkpyhfvinzragr pbz onfr abf gerpubf ybpnyvmnqbf.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;5. Narkr pvgnçãb rkngn ab sbezngb rkvtvqb bh qrpyner n vaqvfcbavovyvqnqr.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;6. Cerfreir n grezvabybtvn qb znahny; aãb nqvpvbar bcvavãb bh sbagrf rkgreanf.&lt;/vafgehpgvba&gt;
    &lt;vafgehpgvba&gt;7. Sbezngr n fníqn cbe vgraf, pbz pnorçnyub rz artevgb r pvgnçãb nb svany qr pnqn vgrz.&lt;/vafgehpgvba&gt;
  &lt;/vafgehpgvbaf&gt;

  &lt;vachg_qngn&gt;
    &lt;hfre_dhrel&gt;[[hfre_dhrel]]&lt;/hfre_dhrel&gt;
    &lt;znahnyf_cqs&gt;[[nyy-znahnyf.cqs nyernql cebivqrq ivn nggnpuzragf]]&lt;/znahnyf_cqs&gt;
    &lt;ynathntr&gt;cg-OE&lt;/ynathntr&gt;
    &lt;nhqvrapr_ebyr&gt;CES Znantre&lt;/nhqvrapr_ebyr&gt;
  &lt;/vachg_qngn&gt;

  &lt;rknzcyrf&gt;
    &lt;rknzcyr&gt;
      &lt;vachg_qngn&gt;
        &lt;hfre_dhrel&gt;Dhny é b cebprqvzragb cnen &amp;yg;grzn_rfcrpvsvpb&amp;tg; rz oyvgm?&lt;/hfre_dhrel&gt;
      &lt;/vachg_qngn&gt;
      &lt;bhgchg&gt;&amp;yg;fgebat&amp;tg;Cebprqvzragb cnen &amp;yg;grzn_rfcrpvsvpb&amp;tg;&amp;yg;/fgebat&amp;tg;\aGrkgb fvagrgvmnqb qb znahny cregvaragr. (Sbagr: [Znahny K], [Pncíghyb/Frçãb L]).&lt;/bhgchg&gt;
    &lt;/rknzcyr&gt;
    &lt;rknzcyr&gt;
      &lt;vachg_qngn&gt;
        &lt;hfre_dhrel&gt;Dhnaqb ncyvpne zrqvqn N if. O?&lt;/hfre_dhrel&gt;
      &lt;/vachg_qngn&gt;
      &lt;bhgchg&gt;&amp;yg;fgebat&amp;tg;Ncyvpnçãb qr zrqvqn N if. O&amp;yg;/fgebat&amp;tg;\aB nedhvib ncerfragn bevragnçõrf qvfgvagnf: N — erfhzb pbeerfcbaqragr (Sbagr: [Znahny K], [Frçãb 3.2]); O — erfhzb pbeerfcbaqragr (Sbagr: [Znahny L], [Frçãb 5.1]).&lt;/bhgchg&gt;
    &lt;/rknzcyr&gt;
  &lt;/rknzcyrf&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">auto xrandr for multi-monitor setup</title><link href="https://ib.bsb.br/auto-xrandr/" rel="alternate" type="text/html" title="auto xrandr for multi-monitor setup" /><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-14T17:14:47+00:00</updated><id>https://ib.bsb.br/auto-xrandr</id><content type="html" xml:base="https://ib.bsb.br/auto-xrandr/"><![CDATA[<h1 id="documentation">documentation</h1>

<h2 id="a-tests-first-verification">A. Tests-First Verification</h2>

<h3 id="a1-test-matrix">A1. Test Matrix</h3>

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Behavior</th>
      <th>Trigger/Command</th>
      <th>Expectation</th>
      <th>Exit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>T-HELP</td>
      <td>Help prints header block</td>
      <td><code class="language-plaintext highlighter-rouge">pwsh -File ./pwsh_monitor_working.ps1 -Help</code></td>
      <td>Usage text includes OPTIONS &amp; EXIT CODES</td>
      <td>0</td>
    </tr>
    <tr>
      <td>T-HEADLESS</td>
      <td>Headless detection</td>
      <td>Unset <code class="language-plaintext highlighter-rouge">DISPLAY</code> + break <code class="language-plaintext highlighter-rouge">xrandr</code></td>
      <td>Error then exit</td>
      <td>20</td>
    </tr>
    <tr>
      <td>T-MISS-DEP</td>
      <td>Missing dep and <code class="language-plaintext highlighter-rouge">-NoInstall</code></td>
      <td>Remove <code class="language-plaintext highlighter-rouge">xrandr</code> from PATH</td>
      <td>Named missing dep; fail fast</td>
      <td>2</td>
    </tr>
    <tr>
      <td>T-AUTOINSTALL</td>
      <td>Auto-install needs root</td>
      <td><code class="language-plaintext highlighter-rouge">-AutoInstall</code> as non-root</td>
      <td>Error “requires root”</td>
      <td>2</td>
    </tr>
    <tr>
      <td>T-INTERACTIVE</td>
      <td>Interactive selection</td>
      <td>≥2 monitors</td>
      <td>Overlay confirm; accepted mode</td>
      <td>0</td>
    </tr>
    <tr>
      <td>T-APPLY-SAVED</td>
      <td>Non-interactive apply</td>
      <td>Valid JSON config</td>
      <td>One-line summary JSON</td>
      <td>0</td>
    </tr>
    <tr>
      <td>T-APPLY-NOCONFIG</td>
      <td>Missing config</td>
      <td><code class="language-plaintext highlighter-rouge">-ApplySavedLayout</code> w/ nonexistent file</td>
      <td>Warning</td>
      <td>23</td>
    </tr>
    <tr>
      <td>T-JSON-ERROR</td>
      <td>Malformed JSON</td>
      <td>Bad config file</td>
      <td>Error</td>
      <td>24</td>
    </tr>
    <tr>
      <td>T-INVALID-CONFIG</td>
      <td>Empty/invalid object</td>
      <td>Corrupt config</td>
      <td>Error</td>
      <td>22</td>
    </tr>
    <tr>
      <td>T-FINAL-APPLY-ERROR</td>
      <td>xrandr fails on final</td>
      <td>Mock nonzero exit</td>
      <td>Warning</td>
      <td>1</td>
    </tr>
    <tr>
      <td>T-PRIMARY</td>
      <td>Largest area → primary</td>
      <td>Mixed resolutions</td>
      <td><code class="language-plaintext highlighter-rouge">--primary</code> set</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<h3 id="a2-pester-samples">A2. Pester Samples</h3>

<p><strong>tests/Docs.Tests.ps1</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Describe</span><span class="w"> </span><span class="s1">'Documentation coverage'</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'Help text exists and includes sections'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$out</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pwsh</span><span class="w"> </span><span class="nt">-NoLogo</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="o">.</span><span class="nx">/pwsh_monitor_working.ps1</span><span class="w"> </span><span class="nt">-Help</span><span class="w">
    </span><span class="nv">$out</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="o">-Match</span><span class="w"> </span><span class="s1">'OPTIONS'</span><span class="w">
    </span><span class="nv">$out</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="o">-Match</span><span class="w"> </span><span class="s1">'EXIT CODES'</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'JSON summary schema on success'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$cfg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'{"HDMI-1":"1920x1080"}'</span><span class="w">
    </span><span class="nv">$tmp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-TemporaryFile</span><span class="w">
    </span><span class="nx">Set-Content</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$tmp</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nv">$cfg</span><span class="w"> </span><span class="nt">-Encoding</span><span class="w"> </span><span class="nx">UTF8</span><span class="w">
    </span><span class="nv">$json</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pwsh</span><span class="w"> </span><span class="nt">-NoLogo</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="o">.</span><span class="nx">/pwsh_monitor_working.ps1</span><span class="w"> </span><span class="nt">-ApplySavedLayout</span><span class="w"> </span><span class="nt">-ConfigPath</span><span class="w"> </span><span class="nv">$tmp</span><span class="w">
    </span><span class="n">Remove-Item</span><span class="w"> </span><span class="nv">$tmp</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nv">$obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$json</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">
    </span><span class="nv">$obj</span><span class="o">.</span><span class="nf">ok</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-BeTrue</span><span class="w">
    </span><span class="nv">$obj</span><span class="o">.</span><span class="nf">mode</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-Be</span><span class="w"> </span><span class="s1">'apply-saved'</span><span class="w">
    </span><span class="nv">$obj</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Get-Member</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">primary</span><span class="p">,</span><span class="nx">order</span><span class="p">,</span><span class="nx">chosen</span><span class="p">,</span><span class="nx">configFile</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="o">-Not</span><span class="w"> </span><span class="nt">-BeNullOrEmpty</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>tests/XrandrParsing.Tests.ps1</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Describe</span><span class="w"> </span><span class="s1">'xrandr parsing'</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'Parses connected outputs'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Mock</span><span class="w"> </span><span class="nx">Get-XrandrLines</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">@(</span><span class="s1">'HDMI-1 connected primary 1920x1080+0+0'</span><span class="p">,</span><span class="w"> </span><span class="s1">'DP-1 connected 2560x1440+1920+0'</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">(</span><span class="n">Get-ConnectedOutputs</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-Be</span><span class="w"> </span><span class="p">@(</span><span class="s1">'HDMI-1'</span><span class="p">,</span><span class="s1">'DP-1'</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'Extracts modes for an output'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Mock</span><span class="w"> </span><span class="nx">Get-XrandrLines</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">@(</span><span class="w">
      </span><span class="s1">'HDMI-1 connected'</span><span class="p">,</span><span class="w"> </span><span class="s1">'  1920x1080 60.00*+'</span><span class="p">,</span><span class="w"> </span><span class="s1">'  1280x720 60.00'</span><span class="p">,</span><span class="w">
      </span><span class="s1">'DP-1 connected'</span><span class="p">,</span><span class="w">   </span><span class="s1">'  2560x1440 59.95*'</span><span class="p">,</span><span class="w"> </span><span class="s1">'  1920x1080 60.00'</span><span class="w">
    </span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">(</span><span class="n">Get-OutputModes</span><span class="w"> </span><span class="s1">'HDMI-1'</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-Contain</span><span class="w"> </span><span class="s1">'1920x1080'</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'Verifies geometry match'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Mock</span><span class="w"> </span><span class="nx">Get-CurrentGeometry</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">[</span><span class="n">pscustomobject</span><span class="p">]@{</span><span class="nx">W</span><span class="o">=</span><span class="mi">1920</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="mi">1080</span><span class="p">;</span><span class="nx">X</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">(</span><span class="n">Verify-OutputGeometry</span><span class="w"> </span><span class="s1">'HDMI-1'</span><span class="w"> </span><span class="s1">'1920x1080'</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-BeTrue</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>tests/ExitCodes.Tests.ps1</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Describe</span><span class="w"> </span><span class="s1">'Exit codes'</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">It</span><span class="w"> </span><span class="s1">'-ApplySavedLayout missing file =&gt; 23'</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Start-Process</span><span class="w"> </span><span class="nx">pwsh</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s1">'-File'</span><span class="p">,</span><span class="s1">'./pwsh_monitor_working.ps1'</span><span class="p">,</span><span class="s1">'-ApplySavedLayout'</span><span class="p">,</span><span class="s1">'-ConfigPath'</span><span class="p">,</span><span class="s1">'/nope.json'</span><span class="w"> </span><span class="nt">-PassThru</span><span class="w"> </span><span class="nt">-Wait</span><span class="w">
    </span><span class="nv">$p</span><span class="o">.</span><span class="nf">ExitCode</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Should</span><span class="w"> </span><span class="nt">-Be</span><span class="w"> </span><span class="nx">23</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="b-background--scope">B. Background &amp; Scope</h2>

<ul>
  <li><strong>Problem:</strong> Multi-monitor setup is error-prone across WMs and distros.</li>
  <li><strong>Goal:</strong> Interactive discovery + verification; persisted JSON; non-interactive reapply; machine-parseable success.</li>
  <li><strong>Scope:</strong> X11 <code class="language-plaintext highlighter-rouge">xrandr</code> only; Wayland not supported.</li>
</ul>

<h2 id="c-supported-environments">C. Supported Environments</h2>

<ul>
  <li>Debian/Ubuntu(+derivatives), Fedora/RHEL/CentOS, openSUSE, Arch-based; WM/terminal agnostic.</li>
  <li>Requires <code class="language-plaintext highlighter-rouge">xrandr</code>, <code class="language-plaintext highlighter-rouge">python3</code> with <code class="language-plaintext highlighter-rouge">tkinter</code>, and PowerShell 7+.</li>
</ul>

<h2 id="d-featurerequest-status-matrix">D. Feature/Request Status Matrix</h2>

<table>
  <thead>
    <tr>
      <th>Request</th>
      <th>Status</th>
      <th>Implementation Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-ConfigPath</code> override</td>
      <td>Implemented</td>
      <td>Default <code class="language-plaintext highlighter-rouge">$HOME/.config/pwsh-monitor-layout.json</code>; used in both paths</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-Help</code></td>
      <td>Implemented</td>
      <td><code class="language-plaintext highlighter-rouge">Show-Help</code> extracts header <code class="language-plaintext highlighter-rouge">&lt;# ... #&gt;</code> and exits 0</td>
    </tr>
    <tr>
      <td>One-line success JSON</td>
      <td>Implemented</td>
      <td>Both interactive and apply-saved paths emit schema</td>
    </tr>
    <tr>
      <td>Portability auto-install</td>
      <td>Implemented</td>
      <td>PM detection + root requirement</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-NoInstall</code> fast-fail</td>
      <td>Implemented</td>
      <td>Throws if missing dep; exit 2</td>
    </tr>
    <tr>
      <td>Headless explicit exit</td>
      <td>Implemented</td>
      <td><code class="language-plaintext highlighter-rouge">Assert-XSessionOrExit</code> → exit 20</td>
    </tr>
    <tr>
      <td>Autostart <code class="language-plaintext highlighter-rouge">.desktop</code></td>
      <td>Implemented</td>
      <td>Writes to <code class="language-plaintext highlighter-rouge">~/.config/autostart/</code> with proper Exec</td>
    </tr>
  </tbody>
</table>

<h2 id="e-usage">E. Usage</h2>

<ul>
  <li><strong>Interactive:</strong> <code class="language-plaintext highlighter-rouge">pwsh -File ./pwsh_monitor_working.ps1</code></li>
  <li><strong>Auto-install (root):</strong> <code class="language-plaintext highlighter-rouge">sudo pwsh -File ./pwsh_monitor_working.ps1 -AutoInstall</code></li>
  <li><strong>Apply saved:</strong> <code class="language-plaintext highlighter-rouge">pwsh -File ./pwsh_monitor_working.ps1 -ApplySavedLayout [-ConfigPath &lt;file&gt;]</code></li>
  <li><strong>Help:</strong> <code class="language-plaintext highlighter-rouge">pwsh -File ./pwsh_monitor_working.ps1 -Help</code></li>
</ul>

<h2 id="f-dependencies--authority">F. Dependencies &amp; Authority</h2>

<ul>
  <li>Ensured via <code class="language-plaintext highlighter-rouge">Ensure-Dep</code>; PMs: <code class="language-plaintext highlighter-rouge">apt</code>, <code class="language-plaintext highlighter-rouge">dnf</code>, <code class="language-plaintext highlighter-rouge">zypper</code>, <code class="language-plaintext highlighter-rouge">pacman</code>. Root required for auto-install.</li>
  <li>When root, sets <code class="language-plaintext highlighter-rouge">XAUTHORITY</code> to target user; defaults <code class="language-plaintext highlighter-rouge">DISPLAY</code> to <code class="language-plaintext highlighter-rouge">:0</code> if unset.</li>
</ul>

<h2 id="g-design--key-functions">G. Design &amp; Key Functions</h2>

<ul>
  <li>Parsing/validation (<code class="language-plaintext highlighter-rouge">Get-ConnectedOutputs</code>, <code class="language-plaintext highlighter-rouge">Get-OutputModes</code>, <code class="language-plaintext highlighter-rouge">Get-CurrentGeometry</code>, <code class="language-plaintext highlighter-rouge">Verify-OutputGeometry</code>).</li>
  <li>Application (<code class="language-plaintext highlighter-rouge">Apply-Layout</code> with cumulative width positioning; <code class="language-plaintext highlighter-rouge">--primary</code> set by area heuristic).</li>
  <li>Overlay (<code class="language-plaintext highlighter-rouge">Show-OverlayTk</code>) for visual confirmation.</li>
  <li>Persistence/autostart and summary emission.</li>
</ul>

<h2 id="h-data-model--files">H. Data Model &amp; Files</h2>

<ul>
  <li><strong>Config JSON (ordered mapping):</strong></li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"HDMI-1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1920x1080"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DP-1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2560x1440"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><strong>Success Summary (stdout, single line):</strong></li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"ok"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nl">"mode"</span><span class="p">:</span><span class="s2">"interactive"</span><span class="p">,</span><span class="nl">"primary"</span><span class="p">:</span><span class="s2">"HDMI-1"</span><span class="p">,</span><span class="nl">"order"</span><span class="p">:[</span><span class="s2">"HDMI-1"</span><span class="p">,</span><span class="s2">"DP-1"</span><span class="p">],</span><span class="nl">"chosen"</span><span class="p">:{</span><span class="nl">"HDMI-1"</span><span class="p">:</span><span class="s2">"1920x1080"</span><span class="p">,</span><span class="nl">"DP-1"</span><span class="p">:</span><span class="s2">"2560x1440"</span><span class="p">},</span><span class="nl">"configFile"</span><span class="p">:</span><span class="s2">"/home/user/.config/pwsh-monitor-layout.json"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><strong>Transcripts:</strong> <code class="language-plaintext highlighter-rouge">/tmp/pwsh_monitor_working-YYYYMMDD-HHMMSS.log</code> (fallback <code class="language-plaintext highlighter-rouge">$HOME/...</code>).</li>
  <li><strong>Autostart:</strong> <code class="language-plaintext highlighter-rouge">~/.config/autostart/pwsh_monitor_working.desktop</code>.</li>
</ul>

<h2 id="i-error-handling--exit-codes">I. Error Handling &amp; Exit Codes</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Code</th>
      <th>Meaning</th>
      <th>Typical Source</th>
      <th>Remedy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">0</td>
      <td>Success</td>
      <td>Normal completion</td>
      <td>—</td>
    </tr>
    <tr>
      <td style="text-align: right">1</td>
      <td>General/user abort/final apply failed</td>
      <td><code class="language-plaintext highlighter-rouge">Prompt-YNQ</code> quit; <code class="language-plaintext highlighter-rouge">Apply-Layout</code> fail</td>
      <td>Retry with <code class="language-plaintext highlighter-rouge">-DebugMode</code> or adjust modes</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td>Missing dep / install failure</td>
      <td><code class="language-plaintext highlighter-rouge">Ensure-Dep</code>/<code class="language-plaintext highlighter-rouge">Install-Dep</code></td>
      <td>Install packages or use <code class="language-plaintext highlighter-rouge">-AutoInstall</code> as root</td>
    </tr>
    <tr>
      <td style="text-align: right">20</td>
      <td>Headless / no X11</td>
      <td><code class="language-plaintext highlighter-rouge">Assert-XSessionOrExit</code></td>
      <td>Start X11; ensure <code class="language-plaintext highlighter-rouge">xrandr</code> works</td>
    </tr>
    <tr>
      <td style="text-align: right">21</td>
      <td>No connected monitors</td>
      <td><code class="language-plaintext highlighter-rouge">Get-ConnectedOutputs</code></td>
      <td>Check hardware/cables</td>
    </tr>
    <tr>
      <td style="text-align: right">22</td>
      <td>Invalid/empty config</td>
      <td>Apply-saved path</td>
      <td>Fix JSON</td>
    </tr>
    <tr>
      <td style="text-align: right">23</td>
      <td>Config file not found</td>
      <td>Apply-saved path</td>
      <td>Provide correct <code class="language-plaintext highlighter-rouge">-ConfigPath</code></td>
    </tr>
    <tr>
      <td style="text-align: right">24</td>
      <td>JSON parse error</td>
      <td>Apply-saved path</td>
      <td>Fix JSON syntax</td>
    </tr>
    <tr>
      <td style="text-align: right">25</td>
      <td>Permission/ownership error</td>
      <td>Autostart/config setup</td>
      <td>Correct ownership and perms</td>
    </tr>
  </tbody>
</table>

<h2 id="j-deployment--autostart">J. Deployment &amp; Autostart</h2>

<ul>
  <li>First run interactively to generate JSON; confirm overlay; verify autostart <code class="language-plaintext highlighter-rouge">.desktop</code>.</li>
  <li>For login issues, inspect latest transcript under <code class="language-plaintext highlighter-rouge">/tmp</code>.</li>
</ul>

<h2 id="k-troubleshooting">K. Troubleshooting</h2>

<ul>
  <li><strong>Overlay missing:</strong> Install <code class="language-plaintext highlighter-rouge">python3-tk</code>/<code class="language-plaintext highlighter-rouge">tk</code>; some WMs may block undecorated topmost windows.</li>
  <li><strong>Apply-saved fails:</strong> Outputs may be renamed (docks/GPUs); re-run interactive flow to refresh JSON.</li>
  <li><strong>Headless (20):</strong> Ensure <code class="language-plaintext highlighter-rouge">DISPLAY</code> and functioning X server.</li>
</ul>

<h2 id="l-versioning">L. Versioning</h2>

<ul>
  <li><strong>v0.1 (2025-10-14):</strong> Initial structured docs and tests-first plan.</li>
</ul>

<h2 id="m-causality-links-why--how-validated">M. Causality Links (Why → How Validated)</h2>

<ul>
  <li><strong>Correct ordering:</strong> User selection + overlay → Pester interactive smoke + manual confirmation.</li>
  <li><strong>Accurate geometry:</strong> Compare <code class="language-plaintext highlighter-rouge">Get-CurrentGeometry</code> against selected mode → Pester unit test for verifier.</li>
  <li><strong>Reproducibility:</strong> Persist ordered mapping; non-interactive apply → schema test; exit-code tests.</li>
  <li><strong>Robust setup:</strong> Auto-install with PM detection; guarded by root → negative test for non-root.</li>
  <li><strong>Headless clarity:</strong> Explicit exit 20 → smoke test with unset <code class="language-plaintext highlighter-rouge">DISPLAY</code>.</li>
</ul>

<section class="code-block-container" role="group" aria-label="Bash Code Block" data-filename="bash_code_block.sh" data-code="#!/usr/bin/env pwsh
&lt;# 
pwsh_monitor_working.ps1 — Interactive + non-interactive multi-monitor configurator for X11 (Linux)

TARGET: Debian/Ubuntu/Derivatives, Fedora/RHEL/CentOS, openSUSE, Arch-based (pwsh, xrandr)
WM/TERM agnostic (works with ratpoison/Alacritty etc.)

KEY CAPABILITIES
- Interactive discovery of output order (left→right) and resolution selection per monitor using xrandr.
- Verifies applied geometry; shows a Tk red-border overlay to confirm the active monitor.
- Saves chosen layout to JSON and can re-apply non-interactively on login/autostart.
- Robust logging (Start-Transcript), strict error behavior, and explicit exit codes.

NEW/REQUESTED IMPROVEMENTS
- -ConfigPath &lt;file&gt; to override default config path (default: ~/.config/pwsh-monitor-layout.json).
- -Help: Prints usage, options, examples, and exit codes then exits 0.
- Emits a one-line machine-parseable JSON summary on success for both interactive and apply-saved paths.
- Portability hardening: auto-install gated by distro/pm detection (apt-get/dnf/zypper/pacman).
- -NoInstall: disable auto-install; fail fast if dependencies missing.
- Headless handling: detect missing X11/xrandr availability and exit with explicit code.

USAGE (examples)
  # First run (interactive):
  pwsh -File ./pwsh_monitor_working.ps1

  # Auto-install missing deps (root required):
  sudo pwsh -File ./pwsh_monitor_working.ps1 -AutoInstall

  # Save config to a specific path:
  pwsh -File ./pwsh_monitor_working.ps1 -ConfigPath &quot;$HOME/.config/my-monitor-layout.json&quot;

  # Non-interactive apply of saved layout (good for autostart):
  pwsh -File ./pwsh_monitor_working.ps1 -ApplySavedLayout

  # Print help:
  pwsh -File ./pwsh_monitor_working.ps1 -Help

OPTIONS
  -DebugMode             Verbose logging during execution.
  -AutoInstall           Attempt to install dependencies via detected package manager.
  -NoInstall             Do not install; fail fast if dependencies are missing.
  -ApplySavedLayout      Apply saved layout from the config JSON and exit.
  -OverlaySeconds &lt;int&gt;  Seconds to keep the red overlay visible when testing (default: 5).
  -TargetUser &lt;string&gt;   Login user for ownership of autostart/config when run as root (default: SUDO_USER/USER/linaro).
  -ScriptInstallPath     Path to place a self-copy used by autostart (default: $HOME/pwsh_monitor_working.ps1).
  -ConfigPath            Override config JSON path (default: $HOME/.config/pwsh-monitor-layout.json).
  -Help                  Show this help and exit.

EXIT CODES
  0  Success
  1  General error / user abort / final apply failed
  2  Missing dependency and -NoInstall provided (or auto-install disabled/unsupported)
 20  Headless / no X11 session detected (no DISPLAY or xrandr unusable)
 21  No connected monitors detected
 22  Invalid/empty configuration when using -ApplySavedLayout
 23  Config file not found for -ApplySavedLayout
 24  JSON parse error for -ConfigPath
 25  Permission or ownership errors during autostart/config setup

MACHINE-PARSABLE SUMMARY
  On success, prints a single line JSON to stdout like:
  {&quot;ok&quot;:true,&quot;mode&quot;:&quot;interactive&quot;,&quot;primary&quot;:&quot;HDMI-1&quot;,&quot;order&quot;:[&quot;HDMI-1&quot;,&quot;DP-1&quot;],&quot;chosen&quot;:{&quot;HDMI-1&quot;:&quot;1920x1080&quot;,&quot;DP-1&quot;:&quot;2560x1440&quot;},&quot;configFile&quot;:&quot;/home/user/.config/pwsh-monitor-layout.json&quot;}

#&gt;

[CmdletBinding()]
param(
    [switch] $DebugMode,
    [switch] $AutoInstall,
    [switch] $NoInstall,
    [switch] $ApplySavedLayout,
    [switch] $Help,
    [int]    $OverlaySeconds = 5,
    [string] $TargetUser = ($env:SUDO_USER ?? $env:USER ?? &#39;linaro&#39;),
    [string] $ScriptInstallPath = &quot;$HOME/pwsh_monitor_working.ps1&quot;,
    [string] $ConfigPath
)

Set-StrictMode -Version Latest
$ErrorActionPreference = &#39;Stop&#39;
if ($DebugMode) { $VerbosePreference = &#39;Continue&#39; }

function Stop-TranscriptSafe { try { Stop-Transcript | Out-Null } catch {} }

# Transcript
$tsFile = &quot;/tmp/pwsh_monitor_working-$(Get-Date -Format &#39;yyyyMMdd-HHmmss&#39;).log&quot;
try { Start-Transcript -Path $tsFile -Force | Out-Null } catch {
    $tsFile = Join-Path $HOME &quot;pwsh_monitor_working-$(Get-Date -Format &#39;yyyyMMdd-HHmmss&#39;).log&quot;
    try { Start-Transcript -Path $tsFile -Force | Out-Null } catch {}
}
Write-Verbose &quot;Transcript: $tsFile&quot;

# ---------- Helpers ----------
function Show-Help {
    $path = $PSCommandPath
    if (-not $path) { $path = $MyInvocation.MyCommand.Path }
    $content = Get-Content -Raw -Path $path
    $helpBlock = [regex]::Match($content, &#39;(?s)&lt;#\s*(.*?)\s*#&gt;&#39;).Groups[1].Value
    if ([string]::IsNullOrWhiteSpace($helpBlock)) {
        Write-Output &quot;Usage: pwsh -File $path [-AutoInstall|-NoInstall] [-ApplySavedLayout] [-ConfigPath &lt;file&gt;] [-OverlaySeconds &lt;int&gt;] [-DebugMode] [-Help]&quot;
    } else {
        Write-Output $helpBlock.Trim()
    }
}

function Test-Cmd([string]$Name) { $null -ne (Get-Command -Name $Name -ErrorAction SilentlyContinue) }

function Test-IsRoot {
    try { ((&amp; id &#39;-u&#39; 2&gt;$null) -eq 0) } catch {
        try { ((&amp; whoami) -eq &#39;root&#39;) } catch { ($env:USER -eq &#39;root&#39;) }
    }
}

function Detect-PackageManager {
    if (Test-Cmd &#39;apt-get&#39;) { return &#39;apt&#39; }
    if (Test-Cmd &#39;dnf&#39;)     { return &#39;dnf&#39; }
    if (Test-Cmd &#39;zypper&#39;)  { return &#39;zypper&#39; }
    if (Test-Cmd &#39;pacman&#39;)  { return &#39;pacman&#39; }
    return $null
}

function Install-Dep([string]$pkg) {
    $pm = Detect-PackageManager
    if (-not $pm) { throw &#39;No supported package manager found.&#39; }
    if (-not (Test-IsRoot)) { throw &#39;Auto-install requires root.&#39; }

    switch ($pm) {
        &#39;apt&#39;    { &amp; apt-get update -y; &amp; apt-get install -y $pkg }
        &#39;dnf&#39;    { &amp; dnf install -y $pkg }
        &#39;zypper&#39; { &amp; zypper -n install -y $pkg }
        &#39;pacman&#39; { &amp; pacman -Sy --noconfirm $pkg }
    }
}

function Ensure-Dep([string]$cmd, [string]$pkg, [string]$friendly) {
    if (Test-Cmd $cmd) { return }
    if ($NoInstall) { throw &quot;Missing dependency &#39;$friendly&#39; and -NoInstall was specified.&quot; }
    if (-not $AutoInstall) { throw &quot;Missing dependency &#39;$friendly&#39;. Rerun with -AutoInstall or install &#39;$pkg&#39; manually.&quot; }
    Install-Dep $pkg
    if (-not (Test-Cmd $cmd)) { throw &quot;Dependency &#39;$friendly&#39; not available after install.&quot; }
}

function Test-PythonTk {
@&#39;
import sys
try:
    import tkinter as t
    root = t.Tk()
    root.withdraw()
    print(&quot;OK&quot;)
except Exception as e:
    print(&quot;ERR&quot;, e)
    sys.exit(1)
&#39;@ | Set-Content -Path ($tmp = [IO.Path]::GetTempFileName() + &#39;.py&#39;) -Encoding UTF8
    try {
        $p = Start-Process -FilePath &#39;python3&#39; -ArgumentList @($tmp) -PassThru -NoNewWindow -Wait
        return ($p.ExitCode -eq 0)
    } finally {
        try { Remove-Item $tmp -Force -ErrorAction SilentlyContinue } catch {}
    }
}

function Assert-XSessionOrExit {
    if (-not $env:DISPLAY) { $env:DISPLAY = &#39;:0&#39; }
    for ($i=0; $i -lt 6; $i++) {
        try { &amp; xrandr --current | Out-Null; return } catch { Start-Sleep -Milliseconds 300 }
    }
    Write-Error &#39;No X11 display/xrandr available (headless or X not running).&#39;
    Stop-TranscriptSafe; exit 20
}

# ---------- Dependency checks ----------
try {
    Ensure-Dep &#39;xrandr&#39;  &#39;x11-xserver-utils&#39; &#39;xrandr&#39;
    Ensure-Dep &#39;python3&#39; &#39;python3&#39;           &#39;python3&#39;
} catch {
    Write-Error $_.Exception.Message
    Stop-TranscriptSafe; exit 2
}

# ---------- X11 availability ----------
Assert-XSessionOrExit

# tkinter (package name differs by distro)
if (-not (Test-PythonTk)) {
    try {
        $pm = Detect-PackageManager
        switch ($pm) {
            &#39;apt&#39;    { Install-Dep &#39;python3-tk&#39; }
            &#39;dnf&#39;    { Install-Dep &#39;python3-tkinter&#39; }
            &#39;zypper&#39; { Install-Dep &#39;python3-tk&#39; }
            &#39;pacman&#39; { Install-Dep &#39;tk&#39; }
            default  { throw &#39;Unsupported package manager for tkinter.&#39; }
        }
    } catch {
        Write-Error &quot;Unable to install/verify tkinter: $($_.Exception.Message)&quot;
        Stop-TranscriptSafe; exit 2
    }
    if (-not (Test-PythonTk)) {
        Write-Error &#39;python3-tk/tkinter not available after installation.&#39;
        Stop-TranscriptSafe; exit 2
    }
}

# ---------- X11 env + authority ----------
$root = Test-IsRoot
$homeTarget = if ($root) { &quot;/home/$TargetUser&quot; } else { $HOME }
if (-not $env:DISPLAY) { $env:DISPLAY = &#39;:0&#39; }
if ($root) {
    $xaUser = &quot;/home/$TargetUser/.Xauthority&quot;
    if (Test-Path $xaUser) { $env:XAUTHORITY = $xaUser }
    elseif (Test-Path &#39;/root/.Xauthority&#39;) { $env:XAUTHORITY = &#39;/root/.Xauthority&#39; }
} elseif (-not $env:XAUTHORITY) {
    $env:XAUTHORITY = Join-Path $HOME &#39;.Xauthority&#39;
}

# Config path default
if (-not $ConfigPath -or [string]::IsNullOrWhiteSpace($ConfigPath)) {
    $ConfigPath = Join-Path (Join-Path $homeTarget &#39;.config&#39;) &#39;pwsh-monitor-layout.json&#39;
}

# ---------- Early exits ----------
if ($Help) { Show-Help; Stop-TranscriptSafe; exit 0 }

# ---------- xrandr helpers ----------
function Get-XrandrLines { (&amp; xrandr --query | Out-String) -split &quot;`n&quot; }

function Get-ConnectedOutputs {
    Get-XrandrLines | ForEach-Object {
        if ($_ -match &#39;^\s*(\S+)\s+connected&#39;) { $Matches[1] }
    }
}

function Sort-OutputsPreferred([string[]]$Outputs) {
    $order = @(&#39;HDMI&#39;,&#39;DP&#39;,&#39;DVI&#39;,&#39;VGA&#39;,&#39;eDP&#39;)
    $picked = [System.Collections.Generic.List[string]]::new()
    foreach ($p in $order) {
        $Outputs | Where-Object { $_ -like &quot;$p*&quot; } | ForEach-Object { [void]$picked.Add($_) }
    }
    $Outputs | Where-Object { $picked -notcontains $_ } | ForEach-Object { [void]$picked.Add($_) }
    $picked | Select-Object -Unique
}

function Get-OutputModes([string]$Output) {
    $lines = Get-XrandrLines
    $in = $false
    $modes = [System.Collections.Generic.List[string]]::new()
    foreach ($ln in $lines) {
        if (-not $in) {
            if ($ln -match &quot;^\s*$([Regex]::Escape($Output))\s+connected&quot;) { $in = $true; continue }
        } else {
            if ($ln -match &#39;^\S+\s+(connected|disconnected)&#39;) { break }
            if ($ln -match &#39;^\s+([0-9]{3,5}x[0-9]{3,5}\S*)&#39;) {
                $t = $Matches[1]
                if (-not $modes.Contains($t)) { [void]$modes.Add($t) }
            }
        }
    }
    if ($modes.Count -eq 0) { throw &quot;No modes parsed for $Output&quot; }
    return $modes.ToArray()
}

function Get-Size([string]$Token) {
    if ($Token -notmatch &#39;^(\d{3,5})x(\d{3,5})&#39;) { throw &quot;Invalid mode token: $Token&quot; }
    [pscustomobject]@{ W = [int]$Matches[1]; H = [int]$Matches[2] }
}

function Get-CurrentGeometry([string]$Output) {
    $pattern = &quot;^{0}\b&quot; -f [Regex]::Escape($Output)
    $ln = Get-XrandrLines | Where-Object { $_ -match $pattern } | Select-Object -First 1
    if (-not $ln) { return $null }
    $m = [regex]::Match($ln, &#39;(\d{3,5}x\d{3,5})\+(\d+)\+(\d+)&#39;)
    if (-not $m.Success) { return $null }
    $wxh = $m.Groups[1].Value
    $x = [int]$m.Groups[2].Value
    $y = [int]$m.Groups[3].Value
    $m2 = [regex]::Match($wxh, &#39;^(\d{3,5})x(\d{3,5})$&#39;)
    if (-not $m2.Success) { return $null }
    [pscustomobject]@{ W = [int]$m2.Groups[1].Value; H = [int]$m2.Groups[2].Value; X = $x; Y = $y }
}

function Invoke-Xrandr([string[]]$XRArgs) {
    $p = Start-Process -FilePath &#39;xrandr&#39; -ArgumentList $XRArgs -PassThru -NoNewWindow -Wait
    if ($DebugMode) { Write-Verbose (&quot;xrandr &quot; + ($XRArgs -join &#39; &#39;) + &quot; =&gt; &quot; + $p.ExitCode) }
    $p.ExitCode
}

function Apply-Layout([System.Collections.Specialized.OrderedDictionary]$Map) {
    $x = 0
    foreach ($o in $Map.Keys) {
        $tok = [string]$Map[$o]
        $code = Invoke-Xrandr @(&#39;--output&#39;, $o, &#39;--mode&#39;, $tok, &#39;--pos&#39;, (&quot;{0}x0&quot; -f $x), &#39;--rotate&#39;, &#39;normal&#39;)
        if ($code -ne 0) {
            Write-Warning (&quot;xrandr failed for {0} token {1} (exit {2})&quot; -f $o, $tok, $code)
            return $false
        }
        Start-Sleep -Milliseconds 120
        $sz = Get-Size $tok
        $x += $sz.W
    }
    Start-Sleep -Milliseconds 180
    return $true
}

function Verify-OutputGeometry([string]$Output, [string]$Token) {
    $want = Get-Size $Token
    $cur = Get-CurrentGeometry $Output
    if (-not $cur) {
        if ($DebugMode) { Write-Verbose &quot;Verify: no geometry for $Output&quot; }
        return $false
    }
    $ok = ($cur.W -eq $want.W -and $cur.H -eq $want.H)
    if ($DebugMode) {
        Write-Verbose (&quot;Verify: {0} current={1}x{2} vs want={3}x{4} =&gt; {5}&quot; -f $Output, $cur.W, $cur.H, $want.W, $want.H, $ok)
    }
    $ok
}

function Show-OverlayTk([int]$W,[int]$H,[int]$X,[int]$Y,[int]$Seconds) {
$py = @&#39;
import sys, tkinter as t
w, h, x, y, sec = map(int, sys.argv[1:6])
root = t.Tk()
root.overrideredirect(1)
root.attributes(&quot;-topmost&quot;, True)
root.geometry(f&quot;{w}x{h}+{x}+{y}&quot;)
t.Frame(root, width=w, height=h, highlightbackground=&quot;red&quot;, highlightthickness=8).pack()
root.after(sec*1000, root.destroy)
root.mainloop()
&#39;@
    $tmp = [IO.Path]::GetTempFileName() + &#39;.py&#39;
    [IO.File]::WriteAllText($tmp, $py)
    $p = Start-Process -FilePath &#39;python3&#39; -ArgumentList @($tmp, $W, $H, $X, $Y, $Seconds) -PassThru -NoNewWindow
    $timeout = [Math]::Max($Seconds + 3, 8)
    $exited = $true
    try { Wait-Process -Id $p.Id -Timeout $timeout } catch { $exited = $false }
    if (-not $exited) {
        try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue } catch {}
        Write-Warning &#39;Overlay timeout; killed.&#39;
    }
    try { Remove-Item $tmp -Force -ErrorAction SilentlyContinue } catch {}
}

function Prompt-YNQ([string]$Msg) {
    while ($true) {
        $r = Read-Host $Msg
        switch -Regex ($r) {
            &#39;^(?i)y$&#39; { return &#39;y&#39; }
            &#39;^(?i)n$&#39; { return &#39;n&#39; }
            &#39;^(?i)q$&#39; { return &#39;q&#39; }
            default   { Write-Host &#39;Please type y, n, or q.&#39; -ForegroundColor Yellow }
        }
    }
}

# ---------- Apply saved layout fast-path ----------
if ($ApplySavedLayout) {
    if (-not (Test-Path $ConfigPath)) {
        Write-Warning &quot;Config not found: $ConfigPath&quot;
        Stop-TranscriptSafe; exit 23
    }
    try {
        $raw = Get-Content -Raw -Path $ConfigPath
        $obj = $raw | ConvertFrom-Json
    } catch {
        Write-Error &quot;Failed to parse config JSON: $($_.Exception.Message)&quot;
        Stop-TranscriptSafe; exit 24
    }
    if (-not $obj) { Write-Error &#39;Empty/invalid configuration object.&#39;; Stop-TranscriptSafe; exit 22 }

    $orderedChosen = [System.Collections.Specialized.OrderedDictionary]::new()
    foreach ($p in $obj.PSObject.Properties) {
        $orderedChosen[$p.Name] = [string]$p.Value
    }

    if ($orderedChosen.Count -eq 0) { Write-Error &#39;No entries in configuration.&#39;; Stop-TranscriptSafe; exit 22 }

    if (-not (Apply-Layout $orderedChosen)) {
        Write-Warning &#39;Applying saved layout reported errors.&#39;
        Stop-TranscriptSafe; exit 1
    }

    $primary = $null; $maxA = -1
    foreach ($o in $orderedChosen.Keys) {
        $sz = Get-Size ([string]$orderedChosen[$o])
        $a  = $sz.W * $sz.H
        if ($a -gt $maxA) { $primary = $o; $maxA = $a }
    }
    $null = Invoke-Xrandr @(&#39;--output&#39;, $primary, &#39;--primary&#39;)

    $summary = [pscustomobject]@{
        ok         = $true
        mode       = &#39;apply-saved&#39;
        primary    = $primary
        order      = @($orderedChosen.Keys)
        chosen     = $orderedChosen
        configFile = $ConfigPath
    } | ConvertTo-Json -Compress
    Write-Output $summary
    Stop-TranscriptSafe; exit 0
}

# ---------- Probe outputs ----------
$outs = Get-ConnectedOutputs
if (-not $outs -or $outs.Count -eq 0) { Write-Error &#39;No connected monitors detected.&#39;; Stop-TranscriptSafe; exit 21 }

# ---------- Interactive ordering ----------
$orderedOuts = [System.Collections.Generic.List[string]]::new()
if ($outs.Count -gt 1) {
    $remaining = [System.Collections.Generic.List[string]]::new()
    $remaining.AddRange([string[]]$outs)
    Write-Host &quot;Multiple monitors detected: $($remaining -join &#39;, &#39;)&quot; -ForegroundColor Cyan
    while ($remaining.Count -gt 0) {
        if ($orderedOuts.Count -eq 0) {
            Write-Host &quot;Which monitor should be on the far left?&quot;
        } else {
            Write-Host &quot;Which monitor should be to the right of $($orderedOuts[-1])?&quot;
        }
        for ($i=0; $i -lt $remaining.Count; $i++) { Write-Host &quot;  [$($i+1)] $($remaining[$i])&quot; }
        $ans = Read-Host &quot;Enter number (1-$($remaining.Count))&quot;
        if (($ans -match &#39;^\d+$&#39;) -and ([int]$ans -ge 1) -and ([int]$ans -le $remaining.Count)) {
            $choiceIndex = [int]$ans - 1
            $orderedOuts.Add($remaining[$choiceIndex])
            $remaining.RemoveAt($choiceIndex)
        } else {
            Write-Warning &quot;Invalid selection.&quot;
        }
    }
} else {
    $orderedOuts.Add($outs[0])
}
Write-Host &quot;Final monitor order (left-to-right): $($orderedOuts -join &#39; -&gt; &#39;)&quot; -ForegroundColor Green

# ---------- Gather modes ----------
$All   = @{}
$First = @{}
foreach ($o in $orderedOuts) {
    $m = Get-OutputModes $o
    $All[$o] = $m
    $First[$o] = $m[0]
    if ($DebugMode) { Write-Verbose (&quot;Modes[{0}] (#{1}): {2}&quot; -f $o, $m.Count, ($m -join &#39; &#39;)) }
}

$Chosen = [System.Collections.Specialized.OrderedDictionary]::new()
foreach ($o in $orderedOuts) { $Chosen[$o] = $null }

# ---------- Per-output interactive selection ----------
foreach ($current in $orderedOuts) {
    Write-Host (&quot;======== Configuring {0} ========&quot; -f $current) -ForegroundColor Cyan
    $cands = @($All[$current])
    $accepted = $false

    for ($i = 0; $i -lt $cands.Count; $i++) {
        $tok = $cands[$i]
        Write-Host (&quot;---&gt; [{0}/{1}] Trying {2} for {3}&quot; -f ($i + 1), $cands.Count, $tok, $current) -ForegroundColor Green

        $proposal = [System.Collections.Specialized.OrderedDictionary]::new()
        foreach ($o in $orderedOuts) {
            if ($o -eq $current) { $proposal[$o] = $tok }
            else { $proposal[$o] = ($Chosen[$o] ?? $First[$o]) }
        }

        if (-not (Apply-Layout $proposal)) { Write-Warning (&quot;Skip {0}: xrandr exit!=0&quot; -f $tok); continue }
        if (-not (Verify-OutputGeometry $current $tok)) { Write-Warning (&quot;Skip {0}: geometry mismatch&quot; -f $tok); continue }

        $xoff = 0
        foreach ($o in $orderedOuts) {
            if ($o -eq $current) { break }
            $sz = Get-Size ([string]$proposal[$o])
            $xoff += $sz.W
        }
        $szC = Get-Size $tok
        Show-OverlayTk -W $szC.W -H $szC.H -X $xoff -Y 0 -Seconds $OverlaySeconds

        $ans = Prompt-YNQ (&quot;Was the red rectangle fully enclosed on {0} at {1}? [y=accept / n=next / q=quit]&quot; -f $current, $tok)
        if ($ans -eq &#39;y&#39;) { $Chosen[$current] = $tok; $accepted = $true; break }
        if ($ans -eq &#39;q&#39;) { Write-Warning &#39;User aborted.&#39;; Stop-TranscriptSafe; exit 1 }
    }

    if (-not $accepted) {
        $fb = $First[$current]
        Write-Warning (&quot;No accepted mode for {0}. Falling back to {1}&quot; -f $current, $fb)
        $Chosen[$current] = $fb
    }
}

# ---------- Final apply ----------
Write-Host &quot;Final configuration selected. Applying...&quot; -ForegroundColor Cyan
if (-not (Apply-Layout $Chosen)) {
    Write-Warning &#39;Final layout application reported errors.&#39;
    Stop-TranscriptSafe; exit 1
}

# choose primary as largest area
$primary = $null; $maxA = -1
foreach ($o in $orderedOuts) {
    $sz = Get-Size ([string]$Chosen[$o])
    $a  = $sz.W * $sz.H
    if ($a -gt $maxA) { $primary = $o; $maxA = $a }
}
$null = Invoke-Xrandr @(&#39;--output&#39;, $primary, &#39;--primary&#39;)

# ---------- Save config + autostart ----------
try {
    $configDir = Split-Path -Parent $ConfigPath
    if (-not (Test-Path $configDir)) {
        if ($root) { &amp; sudo -u $TargetUser mkdir -p -- $configDir }
        else       { New-Item -ItemType Directory -Path $configDir -Force | Out-Null }
    }

    $tmpChosen = [ordered]@{}
    foreach ($k in $Chosen.Keys) { $tmpChosen[$k] = [string]$Chosen[$k] }
    ($tmpChosen | ConvertTo-Json) | Set-Content -Path $ConfigPath -Encoding UTF8
    if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $ConfigPath }
    Write-Host &quot;[INFO] Configuration saved to $ConfigPath&quot; -ForegroundColor DarkCyan

    $autoDir = Join-Path $homeTarget &#39;.config/autostart&#39;
    if (-not (Test-Path $autoDir)) {
        if ($root) { &amp; sudo -u $TargetUser mkdir -p -- $autoDir }
        else       { New-Item -ItemType Directory -Path $autoDir -Force | Out-Null }
    }
    if (-not (Test-Path $ScriptInstallPath)) {
        $src = $PSCommandPath; if (-not $src) { $src = $MyInvocation.MyCommand.Path }
        Copy-Item -Path $src -Destination $ScriptInstallPath -Force
        if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $ScriptInstallPath }
        &amp; chmod +x $ScriptInstallPath
    }
    $desktopFile = Join-Path $autoDir &#39;pwsh_monitor_working.desktop&#39;
    $execLine = &quot;pwsh -File $ScriptInstallPath -ApplySavedLayout -ConfigPath `&quot;$ConfigPath`&quot;&quot;
@&quot;
[Desktop Entry]
Type=Application
Exec=$execLine
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=PwshAutoMonitor
Comment=Autoconfigure monitors layout (pwsh)
&quot;@ | Set-Content -Path $desktopFile -Encoding UTF8 -NoNewline
    if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $desktopFile }
    &amp; chmod 0644 $desktopFile
    Write-Host (&quot;[INFO] Autostart installed at {0} for user {1}&quot; -f $desktopFile, $TargetUser) -ForegroundColor DarkCyan
} catch {
    Write-Warning (&quot;Autostart/config setup issue: {0}&quot; -f $_.Exception.Message)
}

# ---------- Success summary (single-line JSON) ----------
$summary2 = [pscustomobject]@{
    ok         = $true
    mode       = &#39;interactive&#39;
    primary    = $primary
    order      = @($orderedOuts)
    chosen     = $Chosen
    configFile = $ConfigPath
} | ConvertTo-Json -Compress
Write-Output $summary2

Stop-TranscriptSafe
exit 0" data-download-link="" data-download-label="Download Bash">
  <code class="language-bash">#!/usr/bin/env pwsh
&lt;# 
pwsh_monitor_working.ps1 — Interactive + non-interactive multi-monitor configurator for X11 (Linux)

TARGET: Debian/Ubuntu/Derivatives, Fedora/RHEL/CentOS, openSUSE, Arch-based (pwsh, xrandr)
WM/TERM agnostic (works with ratpoison/Alacritty etc.)

KEY CAPABILITIES
- Interactive discovery of output order (left→right) and resolution selection per monitor using xrandr.
- Verifies applied geometry; shows a Tk red-border overlay to confirm the active monitor.
- Saves chosen layout to JSON and can re-apply non-interactively on login/autostart.
- Robust logging (Start-Transcript), strict error behavior, and explicit exit codes.

NEW/REQUESTED IMPROVEMENTS
- -ConfigPath &lt;file&gt; to override default config path (default: ~/.config/pwsh-monitor-layout.json).
- -Help: Prints usage, options, examples, and exit codes then exits 0.
- Emits a one-line machine-parseable JSON summary on success for both interactive and apply-saved paths.
- Portability hardening: auto-install gated by distro/pm detection (apt-get/dnf/zypper/pacman).
- -NoInstall: disable auto-install; fail fast if dependencies missing.
- Headless handling: detect missing X11/xrandr availability and exit with explicit code.

USAGE (examples)
  # First run (interactive):
  pwsh -File ./pwsh_monitor_working.ps1

  # Auto-install missing deps (root required):
  sudo pwsh -File ./pwsh_monitor_working.ps1 -AutoInstall

  # Save config to a specific path:
  pwsh -File ./pwsh_monitor_working.ps1 -ConfigPath &quot;$HOME/.config/my-monitor-layout.json&quot;

  # Non-interactive apply of saved layout (good for autostart):
  pwsh -File ./pwsh_monitor_working.ps1 -ApplySavedLayout

  # Print help:
  pwsh -File ./pwsh_monitor_working.ps1 -Help

OPTIONS
  -DebugMode             Verbose logging during execution.
  -AutoInstall           Attempt to install dependencies via detected package manager.
  -NoInstall             Do not install; fail fast if dependencies are missing.
  -ApplySavedLayout      Apply saved layout from the config JSON and exit.
  -OverlaySeconds &lt;int&gt;  Seconds to keep the red overlay visible when testing (default: 5).
  -TargetUser &lt;string&gt;   Login user for ownership of autostart/config when run as root (default: SUDO_USER/USER/linaro).
  -ScriptInstallPath     Path to place a self-copy used by autostart (default: $HOME/pwsh_monitor_working.ps1).
  -ConfigPath            Override config JSON path (default: $HOME/.config/pwsh-monitor-layout.json).
  -Help                  Show this help and exit.

EXIT CODES
  0  Success
  1  General error / user abort / final apply failed
  2  Missing dependency and -NoInstall provided (or auto-install disabled/unsupported)
 20  Headless / no X11 session detected (no DISPLAY or xrandr unusable)
 21  No connected monitors detected
 22  Invalid/empty configuration when using -ApplySavedLayout
 23  Config file not found for -ApplySavedLayout
 24  JSON parse error for -ConfigPath
 25  Permission or ownership errors during autostart/config setup

MACHINE-PARSABLE SUMMARY
  On success, prints a single line JSON to stdout like:
  {&quot;ok&quot;:true,&quot;mode&quot;:&quot;interactive&quot;,&quot;primary&quot;:&quot;HDMI-1&quot;,&quot;order&quot;:[&quot;HDMI-1&quot;,&quot;DP-1&quot;],&quot;chosen&quot;:{&quot;HDMI-1&quot;:&quot;1920x1080&quot;,&quot;DP-1&quot;:&quot;2560x1440&quot;},&quot;configFile&quot;:&quot;/home/user/.config/pwsh-monitor-layout.json&quot;}

#&gt;

[CmdletBinding()]
param(
    [switch] $DebugMode,
    [switch] $AutoInstall,
    [switch] $NoInstall,
    [switch] $ApplySavedLayout,
    [switch] $Help,
    [int]    $OverlaySeconds = 5,
    [string] $TargetUser = ($env:SUDO_USER ?? $env:USER ?? &#39;linaro&#39;),
    [string] $ScriptInstallPath = &quot;$HOME/pwsh_monitor_working.ps1&quot;,
    [string] $ConfigPath
)

Set-StrictMode -Version Latest
$ErrorActionPreference = &#39;Stop&#39;
if ($DebugMode) { $VerbosePreference = &#39;Continue&#39; }

function Stop-TranscriptSafe { try { Stop-Transcript | Out-Null } catch {} }

# Transcript
$tsFile = &quot;/tmp/pwsh_monitor_working-$(Get-Date -Format &#39;yyyyMMdd-HHmmss&#39;).log&quot;
try { Start-Transcript -Path $tsFile -Force | Out-Null } catch {
    $tsFile = Join-Path $HOME &quot;pwsh_monitor_working-$(Get-Date -Format &#39;yyyyMMdd-HHmmss&#39;).log&quot;
    try { Start-Transcript -Path $tsFile -Force | Out-Null } catch {}
}
Write-Verbose &quot;Transcript: $tsFile&quot;

# ---------- Helpers ----------
function Show-Help {
    $path = $PSCommandPath
    if (-not $path) { $path = $MyInvocation.MyCommand.Path }
    $content = Get-Content -Raw -Path $path
    $helpBlock = [regex]::Match($content, &#39;(?s)&lt;#\s*(.*?)\s*#&gt;&#39;).Groups[1].Value
    if ([string]::IsNullOrWhiteSpace($helpBlock)) {
        Write-Output &quot;Usage: pwsh -File $path [-AutoInstall|-NoInstall] [-ApplySavedLayout] [-ConfigPath &lt;file&gt;] [-OverlaySeconds &lt;int&gt;] [-DebugMode] [-Help]&quot;
    } else {
        Write-Output $helpBlock.Trim()
    }
}

function Test-Cmd([string]$Name) { $null -ne (Get-Command -Name $Name -ErrorAction SilentlyContinue) }

function Test-IsRoot {
    try { ((&amp; id &#39;-u&#39; 2&gt;$null) -eq 0) } catch {
        try { ((&amp; whoami) -eq &#39;root&#39;) } catch { ($env:USER -eq &#39;root&#39;) }
    }
}

function Detect-PackageManager {
    if (Test-Cmd &#39;apt-get&#39;) { return &#39;apt&#39; }
    if (Test-Cmd &#39;dnf&#39;)     { return &#39;dnf&#39; }
    if (Test-Cmd &#39;zypper&#39;)  { return &#39;zypper&#39; }
    if (Test-Cmd &#39;pacman&#39;)  { return &#39;pacman&#39; }
    return $null
}

function Install-Dep([string]$pkg) {
    $pm = Detect-PackageManager
    if (-not $pm) { throw &#39;No supported package manager found.&#39; }
    if (-not (Test-IsRoot)) { throw &#39;Auto-install requires root.&#39; }

    switch ($pm) {
        &#39;apt&#39;    { &amp; apt-get update -y; &amp; apt-get install -y $pkg }
        &#39;dnf&#39;    { &amp; dnf install -y $pkg }
        &#39;zypper&#39; { &amp; zypper -n install -y $pkg }
        &#39;pacman&#39; { &amp; pacman -Sy --noconfirm $pkg }
    }
}

function Ensure-Dep([string]$cmd, [string]$pkg, [string]$friendly) {
    if (Test-Cmd $cmd) { return }
    if ($NoInstall) { throw &quot;Missing dependency &#39;$friendly&#39; and -NoInstall was specified.&quot; }
    if (-not $AutoInstall) { throw &quot;Missing dependency &#39;$friendly&#39;. Rerun with -AutoInstall or install &#39;$pkg&#39; manually.&quot; }
    Install-Dep $pkg
    if (-not (Test-Cmd $cmd)) { throw &quot;Dependency &#39;$friendly&#39; not available after install.&quot; }
}

function Test-PythonTk {
@&#39;
import sys
try:
    import tkinter as t
    root = t.Tk()
    root.withdraw()
    print(&quot;OK&quot;)
except Exception as e:
    print(&quot;ERR&quot;, e)
    sys.exit(1)
&#39;@ | Set-Content -Path ($tmp = [IO.Path]::GetTempFileName() + &#39;.py&#39;) -Encoding UTF8
    try {
        $p = Start-Process -FilePath &#39;python3&#39; -ArgumentList @($tmp) -PassThru -NoNewWindow -Wait
        return ($p.ExitCode -eq 0)
    } finally {
        try { Remove-Item $tmp -Force -ErrorAction SilentlyContinue } catch {}
    }
}

function Assert-XSessionOrExit {
    if (-not $env:DISPLAY) { $env:DISPLAY = &#39;:0&#39; }
    for ($i=0; $i -lt 6; $i++) {
        try { &amp; xrandr --current | Out-Null; return } catch { Start-Sleep -Milliseconds 300 }
    }
    Write-Error &#39;No X11 display/xrandr available (headless or X not running).&#39;
    Stop-TranscriptSafe; exit 20
}

# ---------- Dependency checks ----------
try {
    Ensure-Dep &#39;xrandr&#39;  &#39;x11-xserver-utils&#39; &#39;xrandr&#39;
    Ensure-Dep &#39;python3&#39; &#39;python3&#39;           &#39;python3&#39;
} catch {
    Write-Error $_.Exception.Message
    Stop-TranscriptSafe; exit 2
}

# ---------- X11 availability ----------
Assert-XSessionOrExit

# tkinter (package name differs by distro)
if (-not (Test-PythonTk)) {
    try {
        $pm = Detect-PackageManager
        switch ($pm) {
            &#39;apt&#39;    { Install-Dep &#39;python3-tk&#39; }
            &#39;dnf&#39;    { Install-Dep &#39;python3-tkinter&#39; }
            &#39;zypper&#39; { Install-Dep &#39;python3-tk&#39; }
            &#39;pacman&#39; { Install-Dep &#39;tk&#39; }
            default  { throw &#39;Unsupported package manager for tkinter.&#39; }
        }
    } catch {
        Write-Error &quot;Unable to install/verify tkinter: $($_.Exception.Message)&quot;
        Stop-TranscriptSafe; exit 2
    }
    if (-not (Test-PythonTk)) {
        Write-Error &#39;python3-tk/tkinter not available after installation.&#39;
        Stop-TranscriptSafe; exit 2
    }
}

# ---------- X11 env + authority ----------
$root = Test-IsRoot
$homeTarget = if ($root) { &quot;/home/$TargetUser&quot; } else { $HOME }
if (-not $env:DISPLAY) { $env:DISPLAY = &#39;:0&#39; }
if ($root) {
    $xaUser = &quot;/home/$TargetUser/.Xauthority&quot;
    if (Test-Path $xaUser) { $env:XAUTHORITY = $xaUser }
    elseif (Test-Path &#39;/root/.Xauthority&#39;) { $env:XAUTHORITY = &#39;/root/.Xauthority&#39; }
} elseif (-not $env:XAUTHORITY) {
    $env:XAUTHORITY = Join-Path $HOME &#39;.Xauthority&#39;
}

# Config path default
if (-not $ConfigPath -or [string]::IsNullOrWhiteSpace($ConfigPath)) {
    $ConfigPath = Join-Path (Join-Path $homeTarget &#39;.config&#39;) &#39;pwsh-monitor-layout.json&#39;
}

# ---------- Early exits ----------
if ($Help) { Show-Help; Stop-TranscriptSafe; exit 0 }

# ---------- xrandr helpers ----------
function Get-XrandrLines { (&amp; xrandr --query | Out-String) -split &quot;`n&quot; }

function Get-ConnectedOutputs {
    Get-XrandrLines | ForEach-Object {
        if ($_ -match &#39;^\s*(\S+)\s+connected&#39;) { $Matches[1] }
    }
}

function Sort-OutputsPreferred([string[]]$Outputs) {
    $order = @(&#39;HDMI&#39;,&#39;DP&#39;,&#39;DVI&#39;,&#39;VGA&#39;,&#39;eDP&#39;)
    $picked = [System.Collections.Generic.List[string]]::new()
    foreach ($p in $order) {
        $Outputs | Where-Object { $_ -like &quot;$p*&quot; } | ForEach-Object { [void]$picked.Add($_) }
    }
    $Outputs | Where-Object { $picked -notcontains $_ } | ForEach-Object { [void]$picked.Add($_) }
    $picked | Select-Object -Unique
}

function Get-OutputModes([string]$Output) {
    $lines = Get-XrandrLines
    $in = $false
    $modes = [System.Collections.Generic.List[string]]::new()
    foreach ($ln in $lines) {
        if (-not $in) {
            if ($ln -match &quot;^\s*$([Regex]::Escape($Output))\s+connected&quot;) { $in = $true; continue }
        } else {
            if ($ln -match &#39;^\S+\s+(connected|disconnected)&#39;) { break }
            if ($ln -match &#39;^\s+([0-9]{3,5}x[0-9]{3,5}\S*)&#39;) {
                $t = $Matches[1]
                if (-not $modes.Contains($t)) { [void]$modes.Add($t) }
            }
        }
    }
    if ($modes.Count -eq 0) { throw &quot;No modes parsed for $Output&quot; }
    return $modes.ToArray()
}

function Get-Size([string]$Token) {
    if ($Token -notmatch &#39;^(\d{3,5})x(\d{3,5})&#39;) { throw &quot;Invalid mode token: $Token&quot; }
    [pscustomobject]@{ W = [int]$Matches[1]; H = [int]$Matches[2] }
}

function Get-CurrentGeometry([string]$Output) {
    $pattern = &quot;^{0}\b&quot; -f [Regex]::Escape($Output)
    $ln = Get-XrandrLines | Where-Object { $_ -match $pattern } | Select-Object -First 1
    if (-not $ln) { return $null }
    $m = [regex]::Match($ln, &#39;(\d{3,5}x\d{3,5})\+(\d+)\+(\d+)&#39;)
    if (-not $m.Success) { return $null }
    $wxh = $m.Groups[1].Value
    $x = [int]$m.Groups[2].Value
    $y = [int]$m.Groups[3].Value
    $m2 = [regex]::Match($wxh, &#39;^(\d{3,5})x(\d{3,5})$&#39;)
    if (-not $m2.Success) { return $null }
    [pscustomobject]@{ W = [int]$m2.Groups[1].Value; H = [int]$m2.Groups[2].Value; X = $x; Y = $y }
}

function Invoke-Xrandr([string[]]$XRArgs) {
    $p = Start-Process -FilePath &#39;xrandr&#39; -ArgumentList $XRArgs -PassThru -NoNewWindow -Wait
    if ($DebugMode) { Write-Verbose (&quot;xrandr &quot; + ($XRArgs -join &#39; &#39;) + &quot; =&gt; &quot; + $p.ExitCode) }
    $p.ExitCode
}

function Apply-Layout([System.Collections.Specialized.OrderedDictionary]$Map) {
    $x = 0
    foreach ($o in $Map.Keys) {
        $tok = [string]$Map[$o]
        $code = Invoke-Xrandr @(&#39;--output&#39;, $o, &#39;--mode&#39;, $tok, &#39;--pos&#39;, (&quot;{0}x0&quot; -f $x), &#39;--rotate&#39;, &#39;normal&#39;)
        if ($code -ne 0) {
            Write-Warning (&quot;xrandr failed for {0} token {1} (exit {2})&quot; -f $o, $tok, $code)
            return $false
        }
        Start-Sleep -Milliseconds 120
        $sz = Get-Size $tok
        $x += $sz.W
    }
    Start-Sleep -Milliseconds 180
    return $true
}

function Verify-OutputGeometry([string]$Output, [string]$Token) {
    $want = Get-Size $Token
    $cur = Get-CurrentGeometry $Output
    if (-not $cur) {
        if ($DebugMode) { Write-Verbose &quot;Verify: no geometry for $Output&quot; }
        return $false
    }
    $ok = ($cur.W -eq $want.W -and $cur.H -eq $want.H)
    if ($DebugMode) {
        Write-Verbose (&quot;Verify: {0} current={1}x{2} vs want={3}x{4} =&gt; {5}&quot; -f $Output, $cur.W, $cur.H, $want.W, $want.H, $ok)
    }
    $ok
}

function Show-OverlayTk([int]$W,[int]$H,[int]$X,[int]$Y,[int]$Seconds) {
$py = @&#39;
import sys, tkinter as t
w, h, x, y, sec = map(int, sys.argv[1:6])
root = t.Tk()
root.overrideredirect(1)
root.attributes(&quot;-topmost&quot;, True)
root.geometry(f&quot;{w}x{h}+{x}+{y}&quot;)
t.Frame(root, width=w, height=h, highlightbackground=&quot;red&quot;, highlightthickness=8).pack()
root.after(sec*1000, root.destroy)
root.mainloop()
&#39;@
    $tmp = [IO.Path]::GetTempFileName() + &#39;.py&#39;
    [IO.File]::WriteAllText($tmp, $py)
    $p = Start-Process -FilePath &#39;python3&#39; -ArgumentList @($tmp, $W, $H, $X, $Y, $Seconds) -PassThru -NoNewWindow
    $timeout = [Math]::Max($Seconds + 3, 8)
    $exited = $true
    try { Wait-Process -Id $p.Id -Timeout $timeout } catch { $exited = $false }
    if (-not $exited) {
        try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue } catch {}
        Write-Warning &#39;Overlay timeout; killed.&#39;
    }
    try { Remove-Item $tmp -Force -ErrorAction SilentlyContinue } catch {}
}

function Prompt-YNQ([string]$Msg) {
    while ($true) {
        $r = Read-Host $Msg
        switch -Regex ($r) {
            &#39;^(?i)y$&#39; { return &#39;y&#39; }
            &#39;^(?i)n$&#39; { return &#39;n&#39; }
            &#39;^(?i)q$&#39; { return &#39;q&#39; }
            default   { Write-Host &#39;Please type y, n, or q.&#39; -ForegroundColor Yellow }
        }
    }
}

# ---------- Apply saved layout fast-path ----------
if ($ApplySavedLayout) {
    if (-not (Test-Path $ConfigPath)) {
        Write-Warning &quot;Config not found: $ConfigPath&quot;
        Stop-TranscriptSafe; exit 23
    }
    try {
        $raw = Get-Content -Raw -Path $ConfigPath
        $obj = $raw | ConvertFrom-Json
    } catch {
        Write-Error &quot;Failed to parse config JSON: $($_.Exception.Message)&quot;
        Stop-TranscriptSafe; exit 24
    }
    if (-not $obj) { Write-Error &#39;Empty/invalid configuration object.&#39;; Stop-TranscriptSafe; exit 22 }

    $orderedChosen = [System.Collections.Specialized.OrderedDictionary]::new()
    foreach ($p in $obj.PSObject.Properties) {
        $orderedChosen[$p.Name] = [string]$p.Value
    }

    if ($orderedChosen.Count -eq 0) { Write-Error &#39;No entries in configuration.&#39;; Stop-TranscriptSafe; exit 22 }

    if (-not (Apply-Layout $orderedChosen)) {
        Write-Warning &#39;Applying saved layout reported errors.&#39;
        Stop-TranscriptSafe; exit 1
    }

    $primary = $null; $maxA = -1
    foreach ($o in $orderedChosen.Keys) {
        $sz = Get-Size ([string]$orderedChosen[$o])
        $a  = $sz.W * $sz.H
        if ($a -gt $maxA) { $primary = $o; $maxA = $a }
    }
    $null = Invoke-Xrandr @(&#39;--output&#39;, $primary, &#39;--primary&#39;)

    $summary = [pscustomobject]@{
        ok         = $true
        mode       = &#39;apply-saved&#39;
        primary    = $primary
        order      = @($orderedChosen.Keys)
        chosen     = $orderedChosen
        configFile = $ConfigPath
    } | ConvertTo-Json -Compress
    Write-Output $summary
    Stop-TranscriptSafe; exit 0
}

# ---------- Probe outputs ----------
$outs = Get-ConnectedOutputs
if (-not $outs -or $outs.Count -eq 0) { Write-Error &#39;No connected monitors detected.&#39;; Stop-TranscriptSafe; exit 21 }

# ---------- Interactive ordering ----------
$orderedOuts = [System.Collections.Generic.List[string]]::new()
if ($outs.Count -gt 1) {
    $remaining = [System.Collections.Generic.List[string]]::new()
    $remaining.AddRange([string[]]$outs)
    Write-Host &quot;Multiple monitors detected: $($remaining -join &#39;, &#39;)&quot; -ForegroundColor Cyan
    while ($remaining.Count -gt 0) {
        if ($orderedOuts.Count -eq 0) {
            Write-Host &quot;Which monitor should be on the far left?&quot;
        } else {
            Write-Host &quot;Which monitor should be to the right of $($orderedOuts[-1])?&quot;
        }
        for ($i=0; $i -lt $remaining.Count; $i++) { Write-Host &quot;  [$($i+1)] $($remaining[$i])&quot; }
        $ans = Read-Host &quot;Enter number (1-$($remaining.Count))&quot;
        if (($ans -match &#39;^\d+$&#39;) -and ([int]$ans -ge 1) -and ([int]$ans -le $remaining.Count)) {
            $choiceIndex = [int]$ans - 1
            $orderedOuts.Add($remaining[$choiceIndex])
            $remaining.RemoveAt($choiceIndex)
        } else {
            Write-Warning &quot;Invalid selection.&quot;
        }
    }
} else {
    $orderedOuts.Add($outs[0])
}
Write-Host &quot;Final monitor order (left-to-right): $($orderedOuts -join &#39; -&gt; &#39;)&quot; -ForegroundColor Green

# ---------- Gather modes ----------
$All   = @{}
$First = @{}
foreach ($o in $orderedOuts) {
    $m = Get-OutputModes $o
    $All[$o] = $m
    $First[$o] = $m[0]
    if ($DebugMode) { Write-Verbose (&quot;Modes[{0}] (#{1}): {2}&quot; -f $o, $m.Count, ($m -join &#39; &#39;)) }
}

$Chosen = [System.Collections.Specialized.OrderedDictionary]::new()
foreach ($o in $orderedOuts) { $Chosen[$o] = $null }

# ---------- Per-output interactive selection ----------
foreach ($current in $orderedOuts) {
    Write-Host (&quot;======== Configuring {0} ========&quot; -f $current) -ForegroundColor Cyan
    $cands = @($All[$current])
    $accepted = $false

    for ($i = 0; $i -lt $cands.Count; $i++) {
        $tok = $cands[$i]
        Write-Host (&quot;---&gt; [{0}/{1}] Trying {2} for {3}&quot; -f ($i + 1), $cands.Count, $tok, $current) -ForegroundColor Green

        $proposal = [System.Collections.Specialized.OrderedDictionary]::new()
        foreach ($o in $orderedOuts) {
            if ($o -eq $current) { $proposal[$o] = $tok }
            else { $proposal[$o] = ($Chosen[$o] ?? $First[$o]) }
        }

        if (-not (Apply-Layout $proposal)) { Write-Warning (&quot;Skip {0}: xrandr exit!=0&quot; -f $tok); continue }
        if (-not (Verify-OutputGeometry $current $tok)) { Write-Warning (&quot;Skip {0}: geometry mismatch&quot; -f $tok); continue }

        $xoff = 0
        foreach ($o in $orderedOuts) {
            if ($o -eq $current) { break }
            $sz = Get-Size ([string]$proposal[$o])
            $xoff += $sz.W
        }
        $szC = Get-Size $tok
        Show-OverlayTk -W $szC.W -H $szC.H -X $xoff -Y 0 -Seconds $OverlaySeconds

        $ans = Prompt-YNQ (&quot;Was the red rectangle fully enclosed on {0} at {1}? [y=accept / n=next / q=quit]&quot; -f $current, $tok)
        if ($ans -eq &#39;y&#39;) { $Chosen[$current] = $tok; $accepted = $true; break }
        if ($ans -eq &#39;q&#39;) { Write-Warning &#39;User aborted.&#39;; Stop-TranscriptSafe; exit 1 }
    }

    if (-not $accepted) {
        $fb = $First[$current]
        Write-Warning (&quot;No accepted mode for {0}. Falling back to {1}&quot; -f $current, $fb)
        $Chosen[$current] = $fb
    }
}

# ---------- Final apply ----------
Write-Host &quot;Final configuration selected. Applying...&quot; -ForegroundColor Cyan
if (-not (Apply-Layout $Chosen)) {
    Write-Warning &#39;Final layout application reported errors.&#39;
    Stop-TranscriptSafe; exit 1
}

# choose primary as largest area
$primary = $null; $maxA = -1
foreach ($o in $orderedOuts) {
    $sz = Get-Size ([string]$Chosen[$o])
    $a  = $sz.W * $sz.H
    if ($a -gt $maxA) { $primary = $o; $maxA = $a }
}
$null = Invoke-Xrandr @(&#39;--output&#39;, $primary, &#39;--primary&#39;)

# ---------- Save config + autostart ----------
try {
    $configDir = Split-Path -Parent $ConfigPath
    if (-not (Test-Path $configDir)) {
        if ($root) { &amp; sudo -u $TargetUser mkdir -p -- $configDir }
        else       { New-Item -ItemType Directory -Path $configDir -Force | Out-Null }
    }

    $tmpChosen = [ordered]@{}
    foreach ($k in $Chosen.Keys) { $tmpChosen[$k] = [string]$Chosen[$k] }
    ($tmpChosen | ConvertTo-Json) | Set-Content -Path $ConfigPath -Encoding UTF8
    if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $ConfigPath }
    Write-Host &quot;[INFO] Configuration saved to $ConfigPath&quot; -ForegroundColor DarkCyan

    $autoDir = Join-Path $homeTarget &#39;.config/autostart&#39;
    if (-not (Test-Path $autoDir)) {
        if ($root) { &amp; sudo -u $TargetUser mkdir -p -- $autoDir }
        else       { New-Item -ItemType Directory -Path $autoDir -Force | Out-Null }
    }
    if (-not (Test-Path $ScriptInstallPath)) {
        $src = $PSCommandPath; if (-not $src) { $src = $MyInvocation.MyCommand.Path }
        Copy-Item -Path $src -Destination $ScriptInstallPath -Force
        if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $ScriptInstallPath }
        &amp; chmod +x $ScriptInstallPath
    }
    $desktopFile = Join-Path $autoDir &#39;pwsh_monitor_working.desktop&#39;
    $execLine = &quot;pwsh -File $ScriptInstallPath -ApplySavedLayout -ConfigPath `&quot;$ConfigPath`&quot;&quot;
@&quot;
[Desktop Entry]
Type=Application
Exec=$execLine
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=PwshAutoMonitor
Comment=Autoconfigure monitors layout (pwsh)
&quot;@ | Set-Content -Path $desktopFile -Encoding UTF8 -NoNewline
    if ($root) { &amp; chown &quot;${TargetUser}:${TargetUser}&quot; $desktopFile }
    &amp; chmod 0644 $desktopFile
    Write-Host (&quot;[INFO] Autostart installed at {0} for user {1}&quot; -f $desktopFile, $TargetUser) -ForegroundColor DarkCyan
} catch {
    Write-Warning (&quot;Autostart/config setup issue: {0}&quot; -f $_.Exception.Message)
}

# ---------- Success summary (single-line JSON) ----------
$summary2 = [pscustomobject]@{
    ok         = $true
    mode       = &#39;interactive&#39;
    primary    = $primary
    order      = @($orderedOuts)
    chosen     = $Chosen
    configFile = $ConfigPath
} | ConvertTo-Json -Compress
Write-Output $summary2

Stop-TranscriptSafe
exit 0</code>
</section>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">b3 - SELL</title><link href="https://ib.bsb.br/b3-sell/" rel="alternate" type="text/html" title="b3 - SELL" /><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T20:42:20+00:00</updated><id>https://ib.bsb.br/b3-sell</id><content type="html" xml:base="https://ib.bsb.br/b3-sell/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are an AI portfolio sell-scenario planner for B3/BOVESPA. Operate deterministically, never fabricate data, and always respond in Portuguese (pt-BR). Timezone: America/Sao_Paulo.

GOAL
- Receber entradas mínimas do usuário e gerar DOIS cenários de venda que, cada um, somem ≥ target_brl em receita bruta:
  A) “Realizar lucros”: prioriza ações que foram simultaneamente fortes em 30d e 12m.
  B) “Cortar perdas”: prioriza ações que foram simultaneamente fracas em 30d e 12m.
- Vender apenas quantidades INTEIRAS, sem venda a descoberto, ignorando taxas/IR por padrão.

INTERAÇÃO (UMA ÚNICA SOLICITAÇÃO DE ENTRADA, SE NECESSÁRIO)
- Se as entradas ainda não foram fornecidas, solicitar exatamente uma vez, aceitando UM dos formatos:
  JSON:
  {
    "positions": [
      {"ticker": "PETR4", "quantity": 200},
      {"ticker": "VALE3", "quantity": 50}
    ],
    "target_brl": 5000.00
  }
  CSV (e target_brl separado):
  ticker,quantity
  PETR4,200
  VALE3,50
  target_brl=5000.00

ENTRADAS VÁLIDAS
- positions: lista de objetos com ticker (B3) e quantity (inteiro ≥ 0).
- target_brl: número &gt; 0 em BRL.

COLETA DE DADOS (ONLINE, SEM INVENTAR NÚMEROS)
- Preferência: https://www.fundamentus.com.br
- Alternativas confiáveis se a preferência estiver indisponível: site da B3 e portais financeiros reconhecidos.
- Para CADA ticker:
  - Obter: preço atual (BRL), variação 30 dias (%), variação 12 meses (%).
  - Registrar em metadata por ticker:
    - source_url: URL exata consultada
    - fetched_at: data/hora de coleta (America/Sao_Paulo)
    - metrics_available: quais métricas foram obtidas (preço, 30d, 12m)
- Se um ticker não for encontrado, estiver suspenso ou sem preço (&gt; 0), reportar e excluí-lo dos rankings; ainda assim tentar atender o alvo com os demais.

PRÉ-CÁLCULO
- Para cada ticker i:
  - ret_30d[i], ret_12m[i], price[i] (BRL), qty[i] (int)
  - position_value[i] = price[i] * qty[i]
  - Validar price[i] &gt; 0 e qty[i] ≥ 0.

FALTA DE MÉTRICAS
- Se faltar apenas uma métrica (30d OU 12m): usar a métrica disponível; desempate por position_value (desc).
- Se faltarem ambas (30d E 12m) para um ticker: excluí-lo do ranking combinado; poderá entrar ao final, apenas como recurso, se necessário para atingir o alvo (com nota de limitação).
- Se todas as ações estiverem sem métricas de desempenho, reportar impossibilidade de aplicar o critério “duplo” e oferecer alternativa baseada apenas em preço/valor de posição (sujeito a confirmação do usuário).

CENÁRIO A — REALIZAR LUCROS (FORTES EM 30D E 12M)
- Ranking combinado (50/50):
  - rank30 = rank(desc, ret_30d)
  - rank12 = rank(desc, ret_12m)
  - score_A = rank30 + rank12
  - Ordenação: score_A asc; desempates (nesta ordem):
    1) maior position_value
    2) maior price_brl
    3) ticker em ordem alfabética asc
- Seleção (gananciosa com inteiros):
  - remaining = target_brl
  - Para cada ticker na ordem:
    - need = ceil(remaining / price)
    - sell = min(need, qty)
    - Se sell &lt;= 0, pular
    - revenue += sell * price; remaining -= sell * price
    - Parar assim que remaining &lt;= 0 (não vender além do necessário)

CENÁRIO B — CORTAR PERDAS (FRACOS EM 30D E 12M)
- Ranking combinado (50/50):
  - rank30w = rank(asc, ret_30d)
  - rank12w = rank(asc, ret_12m)
  - score_B = rank30w + rank12w
  - Ordenação e desempates idênticos ao Cenário A
- Seleção: mesma regra gananciosa com inteiros até remaining &lt;= 0

CASOS-LIMITE E ERROS
- Se a soma máxima possível de venda (∑ price * qty) &lt; target_brl:
  - Reportar claramente o máximo alcançável, listar as vendas correspondentes e o gap remanescente.
- Se dados online não puderem ser obtidos para um ticker, reportar e continuar com os demais.
- Se rounding criar leve “overshoot”, manter a menor venda que fez remaining &lt;= 0; não adicionar vendas extras.
- Nunca vender quantidade superior à disponível; nunca usar frações de ação.

SAÍDA (SEMPRE EM PORTUGUÊS)
1) JSON estruturado:
{
  "scenario_A": {
    "policy": "Realizar lucros — fortes em 30d e 12m (peso igual)",
    "items": [
      {"ticker": "...", "qty_sold": 0, "price_brl": 0.00, "revenue_brl": 0.00, "pct_of_position": 0.0, "note": "justificativa breve (ex.: top em 30d e 12m)"}
    ],
    "total_revenue_brl": 0.00
  },
  "scenario_B": {
    "policy": "Cortar perdas — fracos em 30d e 12m (peso igual)",
    "items": [
      {"ticker": "...", "qty_sold": 0, "price_brl": 0.00, "revenue_brl": 0.00, "pct_of_position": 0.0, "note": "justificativa breve (ex.: bottom em 30d e 12m)"}
    ],
    "total_revenue_brl": 0.00
  },
  "metadata": {
    "target_brl": 0.00,
    "currency": "BRL",
    "timestamp": "YYYY-MM-DDTHH:MM:SS-03:00",
    "sources": [
      {"ticker": "...", "source_url": "...", "fetched_at": "YYYY-MM-DDTHH:MM:SS-03:00", "metrics_available": ["price","30d","12m"]}
    ],
    "limitations": [
      "listar limitações encontradas, se houver (ex.: métrica ausente, ticker excluído, etc.)"
    ]
  }
}
2) Tabelas Markdown para cada cenário com colunas:
   Ticker | Qtde vendida | Preço (BRL) | Receita (BRL) | % da posição | Observação
3) Notas/avisos:
   - Análise operacional baseada em dados públicos; não constitui recomendação financeira.
   - Sem taxas/IR por padrão; sem venda a descoberto; liquidez presumida.

COMPORTAMENTO
- Pedir as entradas mínimas uma única vez se ausentes; caso já fornecidas, prosseguir diretamente.
- Não adiar resultados nem prometer execução futura: realizar a busca e o cálculo na própria resposta.
- Não inventar dados; se indisponíveis após tentativa de múltiplas fontes confiáveis, declarar explicitamente.
</code></pre></div></div>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">FIFA Two‑Button Controls</title><link href="https://ib.bsb.br/fifa-twobutton-controls/" rel="alternate" type="text/html" title="FIFA Two‑Button Controls" /><published>2025-10-05T00:00:00+00:00</published><updated>2025-10-05T00:39:38+00:00</updated><id>https://ib.bsb.br/fifa-twobutton-controls</id><content type="html" xml:base="https://ib.bsb.br/fifa-twobutton-controls/"><![CDATA[<h3 id="ea-sports-fc-25--twobutton-controls-conceptual-map">EA Sports FC 25 • Two‑Button Controls (Conceptual Map)</h3>

<blockquote>
  <p>Use <strong>generic names</strong> below; hardware labels differ by platform. Typical equivalence:
<strong>PASS</strong> ≈ (PlayStation: ✕) / (Xbox: A) | <strong>SHOOT</strong> ≈ (PlayStation: ○) / (Xbox: B)</p>
</blockquote>

<p><strong>Attack</strong></p>

<ul>
  <li><strong>Move/Aim:</strong> Left Stick.</li>
  <li><strong>PASS (tap):</strong> Short ground pass.</li>
  <li><strong>PASS (hold):</strong> Longer/lofted pass or lead into space (angle with Left Stick).</li>
  <li><strong>SHOOT (tap/hold):</strong> Shoot on goal. When wide/in crossing zones, <strong>SHOOT</strong> acts as <strong>cross</strong>.</li>
  <li><strong>Clearance:</strong> Long <strong>SHOOT</strong> from deep.</li>
</ul>

<p><strong>Defense</strong></p>

<ul>
  <li><strong>PASS (tap/hold):</strong> Close down/stand tackle (contain then poke).</li>
  <li><strong>SHOOT (tap):</strong> Slide tackle (last resort).</li>
  <li><strong>SHOOT (hold):</strong> Big clearance under pressure.</li>
</ul>

<blockquote>
  <p>Why this mapping? It preserves the <strong>“stand‑tackle first, slide rarely”</strong> and <strong>“cross/finish with same strike input by context”</strong> ideas, aligning with the source’s conservative, percentage‑play philosophy.</p>
</blockquote>

<hr />

<h3 id="10second-match-plan-twobutton-edition">10‑Second Match Plan (Two‑Button edition)</h3>

<p>(Adapted from the source’s 10‑second plan while removing advanced inputs. )</p>

<ol>
  <li><strong>Tempo discipline:</strong> Glide with the Left Stick; add tiny bursts by pushing further, then settle.</li>
  <li><strong>Pattern out of defense:</strong> <strong>PASS → PASS → (angle) PASS long</strong> up the channel or <strong>SHOOT (cross)</strong> if wide.</li>
  <li><strong>Around the box:</strong> Aim with Left Stick; <strong>SHOOT</strong> with <strong>2–3 bars</strong>—still the right power discipline idea from the source.</li>
  <li><strong>Defend first by shape:</strong> Stay goal‑side with Left Stick; <strong>PASS</strong> to contain, <strong>tap PASS</strong> to poke; <strong>SHOOT</strong> slide only if the angle is clean.</li>
  <li><strong>Wing outlet:</strong> If trapped, funnel the ball wide with <strong>PASS</strong>, then <strong>SHOOT</strong> to cross.</li>
</ol>

<hr />

<h3 id="onball-microrules-twobutton-friendly">On‑Ball Micro‑Rules (Two‑Button friendly)</h3>

<ul>
  <li><strong>Change pace:</strong> walk → burst → settle (Left‑Stick pacing). Don’t “turbo everywhere”—a direct carry‑over.</li>
  <li><strong>One easy fake:</strong> <strong>Left‑Stick feint</strong>—a small lateral touch, then <strong>PASS</strong> or <strong>SHOOT</strong>.</li>
  <li>
    <p><strong>Power discipline:</strong></p>

    <ul>
      <li><strong>Shots:</strong> 2–3 bars.</li>
      <li><strong>Crosses:</strong> moderate hold on <strong>SHOOT</strong>.</li>
      <li><strong>Passes:</strong> tap/hold by distance (aim ahead of runners).
(This restates the source’s power heuristics with two buttons. )</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="defending-that-works-twobutton-edition">Defending That Works (Two‑Button edition)</h3>

<ul>
  <li><strong>Shape first:</strong> Mirror attacker with Left Stick; <strong>hold PASS</strong> to contain; add a quick <strong>tap PASS</strong> when the ball leaves their foot. Same sequencing principle as the source.</li>
  <li><strong>Block the lane:</strong> Stand between passer and runner; take a <strong>diagonal</strong> angle to cut the obvious ball (adapts “kill the through‑ball lane”).</li>
  <li><strong>Tackle timing:</strong> <strong>Tap PASS</strong> when the touch is loose. <strong>SHOOT</strong> slide only at good angles or as last resort—explicitly lifted from the source’s caution.</li>
</ul>

<hr />

<h3 id="transitions">Transitions</h3>

<ul>
  <li><strong>Won it?</strong> First idea: <strong>one‑touch PASS</strong> out of pressure, then a longer <strong>PASS (hold)</strong> into space or a <strong>SHOOT cross</strong> if wide. Mirrors “one touch out → vertical” from the PDF.</li>
  <li><strong>Lost it?</strong> Protect central space in front of your CBs; contain with <strong>PASS</strong>, don’t drag centre‑backs. (Same “select CDM, protect zone” principle, minus manual switch requirements.)</li>
</ul>

<hr />

<h3 id="setpiece-quick-wins-twobutton">Set‑Piece Quick Wins (Two‑Button)</h3>

<ul>
  <li><strong>Corners (right‑footer on left):</strong> <strong>Short PASS</strong>, immediate <strong>return PASS</strong>, then <strong>SHOOT</strong> (cross) to the near‑post run. This mirrors the source’s “short → return → low/near” pattern in a simplified way.</li>
  <li><strong>Direct Free Kicks (20–25m):</strong> Aim a touch outside far post, <strong>moderate SHOOT</strong>, or <strong>PASS short</strong> if the wall/angle is poor (adapts the source’s guidance minus finesse input).</li>
  <li><strong>Goal‑kicks/under heavy press:</strong> <strong>PASS</strong> to a full‑back or <strong>SHOOT</strong> long to reset.</li>
</ul>

<hr />

<h2 id="two-alwayson-tactics-for-muscle-memory">Two “Always‑On” Tactics for Muscle Memory</h2>

<blockquote>
  <p>The goal is <strong>repeatability</strong>: two simple blueprints you can run all match until they become automatic.</p>
</blockquote>

<h3 id="a-2pass--strike-2ps--your-breadandbutter-attack-loop">A. <strong>“2‑Pass &amp; Strike” (2PS)</strong> — your bread‑and‑butter attack loop</h3>

<p><strong>When:</strong> Any settled possession in midfield.
<strong>Loop (four beats):</strong></p>

<ol>
  <li><strong>Square up</strong>—face forward with Left Stick; don’t over‑dribble.</li>
  <li><strong>PASS</strong> to the nearest support (turn body to the target first).</li>
  <li><strong>PASS</strong> again immediately to the next forward option (or back to the first if pressure bites).</li>
  <li>
    <p>Now <strong>commit</strong>:</p>

    <ul>
      <li>If central and 20–25m: <strong>SHOOT</strong> (2–3 bars).</li>
      <li>If the ball gets wide: <strong>SHOOT</strong> for a cross.
<strong>Why it works:</strong> It compresses the source’s “look for triangles, power discipline” into a two‑button rhythm—<strong>Pass → Pass → Decide (Shoot/Cross)</strong>.</li>
    </ul>
  </li>
</ol>

<p><strong>Checklist to cue the move</strong></p>

<ul>
  <li>See a <strong>triangle</strong> (you + two teammates)? Run 2PS.</li>
  <li>If no lane after 2 passes: recycle and <em>restart</em> 2PS.</li>
  <li>Don’t take a third dribble—<strong>make the third action a finish or cross</strong>.</li>
</ul>

<hr />

<h3 id="b-funnel--break-fb--defend-smart-counter-simple">B. <strong>“Funnel &amp; Break” (F&amp;B)</strong> — defend smart, counter simple</h3>

<p><strong>When:</strong> Opponent builds through the middle.
<strong>Loop (four beats):</strong></p>

<ol>
  <li><strong>Funnel:</strong> Use Left Stick to sit <strong>goal‑side and slightly to their strong foot</strong>; <strong>hold PASS</strong> to contain—guide them wide.</li>
  <li><strong>Win it:</strong> Time a <strong>tap PASS</strong> when the touch is away from the foot.</li>
  <li><strong>First exit:</strong> <strong>Immediate PASS</strong> to a free midfielder or full‑back.</li>
  <li><strong>Break:</strong> <strong>PASS (hold)</strong> up the channel or <strong>SHOOT cross</strong> early if your wide player is free.
<strong>Why it works:</strong> It re‑uses the source’s “shape first, kill lanes, one‑touch out then vertical” without advanced defensive inputs.</li>
</ol>

<p><strong>Checklist to cue the move</strong></p>

<ul>
  <li>If they face you centrally: <strong>Funnel</strong> (shoulders angled to show outside).</li>
  <li>If you win it near touchline: <strong>early SHOOT cross</strong>—don’t dribble back inside.</li>
</ul>

<hr />

<h2 id="short-repeatable-practice-drills">Short, Repeatable Practice Drills</h2>

<blockquote>
  <p>Total: ~10 minutes to ingrain 2PS and F&amp;B.</p>
</blockquote>

<ol>
  <li>
    <p><strong>2‑Minute Triangle Rondo (solo vs CPU, Amateur):</strong></p>

    <ul>
      <li>Only <strong>PASS</strong>; every third pass must aim <strong>forward</strong>.</li>
      <li>Add one <strong>SHOOT</strong> finish every minute from the D with 2–3 bars.
(Reinforces “triangles + power discipline”.)</li>
    </ul>
  </li>
  <li>
    <p><strong>3‑Minute Wing Cross Ladder:</strong></p>

    <ul>
      <li>Receive wide → one touch inside → <strong>SHOOT cross</strong>; finish with near‑post run.</li>
      <li>Focus on <strong>moderate cross power</strong>; don’t over‑hit.</li>
    </ul>
  </li>
  <li>
    <p><strong>3‑Minute Contain Drill (Two‑Button version of the source’s “3‑minute jockey drill”):</strong></p>

    <ul>
      <li><strong>0–1 min:</strong> Left‑Stick mirror only; stay half‑step away, goal‑side.</li>
      <li><strong>1–2 min:</strong> Add <strong>PASS (hold)</strong> contain, release as you close.</li>
      <li><strong>2–3 min:</strong> <strong>Tap PASS</strong> at the loose touch; if you miss, reset shape first.
(Adapts the original drill’s progression.)</li>
    </ul>
  </li>
  <li>
    <p><strong>2‑Minute Funnel &amp; Break Reps:</strong></p>

    <ul>
      <li>Start central → guide wide (contain) → win it → <strong>PASS</strong> out → <strong>PASS (hold)</strong> long.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="troubleshooting--common-mistakes">Troubleshooting &amp; Common Mistakes</h2>

<ul>
  <li><strong>Over‑dribbling:</strong> The playbook is <strong>two passes then a decision</strong>. If you hit a third dribble, you’re likely late.</li>
  <li><strong>Shot power too high:</strong> Cap yourself to <strong>2–3 bars</strong> unless it’s a cut‑back sitter. Source emphasis retained.</li>
  <li><strong>Sliding early:</strong> If you press <strong>SHOOT</strong> before angling the run, you’ll foul or miss. Slide only on clear angles—same last‑resort warning as the source.</li>
  <li><strong>Forcing the middle:</strong> If the lane is blocked, <strong>funnel your own attack wide</strong>: PASS to the flank, <strong>SHOOT cross</strong>.</li>
</ul>

<hr />

<h2 id="optional-helpful-prematch-tweaks">Optional, Helpful Pre‑Match Tweaks</h2>

<ul>
  <li><strong>Camera:</strong> Tele Broadcast (around Height ≈ 12, Zoom ≈ 5), matching the source’s suggestion for clarity.</li>
  <li>
    <p><strong>Simple instructions to favor the patterns:</strong></p>

    <ul>
      <li>Strikers: <strong>Get In Behind</strong> (creates the forward lane for 2PS).</li>
      <li>CDM(s): <strong>Stay Back</strong> (keeps the shield for F&amp;B).
(These are the spirit of the source’s optional notes.)</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="onepage-summary-printable-text-block">One‑Page Summary (printable text block)</h2>

<p><strong>EA Sports FC 25 — Two‑Button Cheat Card (PASS + SHOOT)</strong></p>

<ul>
  <li><strong>Plan:</strong> 2PS = <strong>PASS → PASS → SHOOT/CROSS</strong>. F&amp;B = <strong>Contain → Win → PASS Out → Long PASS/Cross</strong>.</li>
  <li><strong>On ball:</strong> left‑stick pace; triangles; shots <strong>2–3 bars</strong>.</li>
  <li><strong>Defend:</strong> contain with <strong>PASS</strong>; <strong>tap PASS</strong> to poke; <strong>SHOOT</strong> slide only late/clean.</li>
  <li><strong>Transitions:</strong> one‑touch <strong>PASS</strong> out; go vertical; wide? <strong>SHOOT cross</strong>.</li>
  <li><strong>Set pieces:</strong> short <strong>PASS</strong>; return; <strong>SHOOT</strong> (cross) near post.</li>
  <li><strong>If stuck:</strong> recycle and <strong>restart 2PS</strong>; or switch wide and cross.</li>
</ul>

<hr />

<h2 id="og4--weaknesses--tradeoffs-explicit">OG4 — Weaknesses / trade‑offs (explicit)</h2>

<ul>
  <li>Two‑Button removes granular tools (e.g., manual jockey, second‑man press, finesse shots). You trade precision for <strong>simplicity + repetition</strong>. The frameworks above compensate by emphasizing <strong>angles, timing, and power discipline</strong>, all preserved from the source.</li>
</ul>

<hr />

<h2 id="og5--next-iterations">OG5 — Next iterations</h2>

<p>If you want, I can condense this into a true <strong>single‑page printable</strong> or tailor the drills to your preferred formation. For now, run <strong>2PS</strong> in possession and <strong>F&amp;B</strong> out of possession until they become automatic.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Fireworks AI - Whisper API</title><link href="https://ib.bsb.br/fireworks-ai-whisper-api/" rel="alternate" type="text/html" title="Fireworks AI - Whisper API" /><published>2025-10-05T00:00:00+00:00</published><updated>2025-10-05T19:23:54+00:00</updated><id>https://ib.bsb.br/fireworks-ai-whisper-api</id><content type="html" xml:base="https://ib.bsb.br/fireworks-ai-whisper-api/"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Whisper V3 Turbo API &amp; Playground</td>
      <td>Fireworks AI</td>
    </tr>
  </tbody>
</table>

<p>===============</p>

<p><a href="https://fireworks.ai/startup-program">Join the <strong>Fireworks Startups Program</strong> and unlock credits, expert support, and community to scale fast. Join here</a></p>

<p><a href="https://fireworks.ai/"><img src="https://cdn.sanity.io/images/pv37i0yn/production/2095949f01e1cf9cf0841096b67d547d9dbfba2e-215x24.svg" alt="Image 3: Fireworks Logo" /></a></p>

<ul>
  <li>Platform</li>
  <li>Models</li>
  <li>Developers</li>
  <li><a href="https://fireworks.ai/pricing">Pricing</a></li>
  <li>Partners</li>
  <li>Resources</li>
  <li>Company</li>
</ul>

<p><a href="https://fireworks.ai/login">Log In</a><a href="https://fireworks.ai/signup">Get Started</a></p>

<p><img src="https://cdn.sanity.io/images/pv37i0yn/production/f549e0e24c286535bc06df0b0310d270183469e8-40x40.svg" alt="Image 4: OpenAi Logo MArk" /></p>

<h1 id="whisper-v3-turbo">Whisper V3 Turbo</h1>

<p>Whisper large-v3-turbo is a finetuned version of a pruned Whisper large-v3. In other words, it’s the exact same model, except that the number of decoding layers have reduced from 32 to 4. As a result, the model is way faster, at the expense of a minor quality degradation.</p>

<p><a href="https://app.fireworks.ai/playground?model=accounts/fireworks/models/whisper-v3-turbo">Try Model</a></p>

<h2 id="fireworks-features">Fireworks Features</h2>

<h3 id="serverless">Serverless</h3>

<p>Immediately run model on pre-configured GPUs and pay-per-token</p>

<p><a href="https://docs.fireworks.ai/getting-started/quickstart">Learn More</a></p>

<h3 id="on-demand-deployment">On-demand Deployment</h3>

<p>On-demand deployments give you dedicated GPUs for Whisper V3 Turbo using Fireworks’ reliable, high-performance system with no rate limits.</p>

<p><a href="https://fireworks.ai/docs/guides/ondemand-deployments">Learn More</a></p>

<h2 id="whisper-v3-turbo-faqs">Whisper V3 Turbo FAQs</h2>

<h3 id="what-is-whisper-v3-turbo-and-who-developed-it">What is Whisper V3 Turbo and who developed it?</h3>

<h3 id="what-applications-and-use-cases-does-whisper-v3-turbo-excel-at">What applications and use-cases does Whisper V3 Turbo excel at?</h3>

<h3 id="what-is-the-maximum-context-length-for-whisper-v3-turbo">What is the maximum context length for Whisper V3 Turbo?</h3>

<h3 id="what-is-the-usable-context-window">What is the usable context window?</h3>

<h3 id="what-are-known-failure-modes-of-whisper-v3-turbo">What are known failure modes of Whisper V3 Turbo?</h3>

<h3 id="how-many-parameters-does-whisper-v3-turbo-have">How many parameters does Whisper V3 Turbo have?</h3>

<h3 id="what-license-governs-commercial-use-of-whisper-v3-turbo">What license governs commercial use of Whisper V3 Turbo?</h3>

<h2 id="info--pricing">Info &amp; Pricing</h2>

<h3 id="provider">Provider</h3>

<p>OpenAI</p>

<h3 id="model-type">Model Type</h3>

<p>Audio</p>

<h3 id="serverless-1">Serverless</h3>

<p>Available</p>

<h3 id="pricing-per-minute">Pricing Per Minute</h3>

<p>$0.0009</p>

<hr />

<p><img src="https://cdn.sanity.io/images/pv37i0yn/production/2095949f01e1cf9cf0841096b67d547d9dbfba2e-215x24.svg" alt="Image 5: Fireworks Logo" /></p>

<h3 id="platform">Platform</h3>

<p><a href="https://fireworks.ai/ai-native">AI Native</a><a href="https://fireworks.ai/enterprise">Enterprise</a><a href="https://fireworks.ai/customers">Customers</a></p>

<h3 id="use-cases">Use Cases</h3>

<p><a href="https://fireworks.ai/usecases/code-assistance">Code Assistance</a><a href="https://fireworks.ai/conversational-ai">Conversational AI</a><a href="https://fireworks.ai/usecases/agentic-systems">Agentic Systems</a><a href="https://fireworks.ai/usecases/search">Search</a><a href="https://fireworks.ai/usecases/multimedia">Multimedia</a><a href="https://fireworks.ai/usecases/enterprise-rag">Enterprise RAG</a></p>

<h3 id="developers">Developers</h3>

<p><a href="https://fireworks.ai/models">Model Library</a><a href="https://docs.fireworks.ai/getting-started/introduction">Docs</a><a href="https://docs.fireworks.ai/tools-sdks/firectl/firectl">CLI</a><a href="https://docs.fireworks.ai/api-reference/introduction">API</a><a href="https://docs.fireworks.ai/updates/changelog">Changelog</a></p>

<h3 id="pricing">Pricing</h3>

<p><a href="https://fireworks.ai/pricing#serverless-pricing">Serverless</a><a href="https://fireworks.ai/pricing#on-demand-pricing">On-Demand</a><a href="https://fireworks.ai/pricing#fine-tuning-pricing">Fine Tuning</a><a href="https://fireworks.ai/contact-reserved">Enterprise</a></p>

<h3 id="partners">Partners</h3>

<p><a href="https://fireworks.ai/partners#cloud-infra">Cloud and Infrastructure</a><a href="https://fireworks.ai/partners#consulting">Consulting and Services</a><a href="https://fireworks.ai/partners#technology">Technology</a><a href="https://fireworks.ai/startup-program">Fireworks for Startups</a></p>

<h3 id="resources">Resources</h3>

<p><a href="https://fireworks.ai/blog">Blog</a><a href="https://demos.fireworks.ai/">Demos</a><a href="https://docs.fireworks.ai/examples/introduction">Cookbooks</a></p>

<h3 id="company">Company</h3>

<p><a href="https://fireworks.ai/team">Leadership</a><a href="https://fireworks.ai/team#investors">Investors</a><a href="https://job-boards.greenhouse.io/fireworksai">Careers</a><a href="https://trust.fireworks.ai/">Trust Center</a></p>

<p>© 2025 Fireworks AI, Inc. All rights reserved.</p>

<p><a href="https://x.com/FireworksAI_HQ"></a><a href="https://www.youtube.com/@fireworksai"></a><a href="https://www.linkedin.com/company/fireworks-ai"></a><a href="https://discord.gg/fireworks"></a></p>

<p>–</p>

<h1 id="transcribe-audio">Transcribe audio</h1>

<p>&lt;CardGroup cols={1}&gt;</p>
<Card title="Try notebook" icon="rocket" href="https://colab.research.google.com/github/fw-ai/cookbook/blob/main/learn/audio/audio_prerecorded_speech_to_text/audio_prerecorded_speech_to_text.ipynb">
    Send a sample audio to get a transcription.
  </Card>
<p>&lt;/CardGroup&gt;</p>

<h3 id="request">Request</h3>

<h5 id="multi-part-form">(multi-part form)</h5>

<ParamField query="file" type="file | string" required="">
  The input audio file to transcribe or an URL to the public audio file.

  Max audio file size is 1 GB, there is no limit for audio duration. Common file formats such as mp3, flac, and wav are supported. Note that the audio will be resampled to 16kHz, downmixed to mono, and reformatted to 16-bit signed little-endian format before transcription. Pre-converting the file before sending it to the API can improve runtime performance.
</ParamField>

<ParamField query="model" type="string" default="whisper-v3" optional="">
  String name of the ASR model to use. Can be one of `whisper-v3` or `whisper-v3-turbo`. Please use the following serverless endpoints:

  * [https://audio-prod.us-virginia-1.direct.fireworks.ai](https://audio-prod.us-virginia-1.direct.fireworks.ai) (for `whisper-v3`);
  * [https://audio-turbo.us-virginia-1.direct.fireworks.ai](https://audio-turbo.us-virginia-1.direct.fireworks.ai) (for `whisper-v3-turbo`);
</ParamField>

<ParamField query="vad_model" type="string" default="silero" optional="">
  String name of the voice activity detection (VAD) model to use. Can be one of `silero`, or `whisperx-pyannet`.
</ParamField>

<ParamField query="alignment_model" type="string" default="mms_fa" optional="">
  String name of the alignment model to use. Currently supported:

  * `mms_fa` optimal accuracy for multilingual speech.
  * `tdnn_ffn` optimal accuracy for English-only speech.
  * `gentle` best accuracy for English-only speech (requires a dedicated endpoint, contact us at <a href="mailto:inquiries@fireworks.ai">[inquiries@fireworks.ai](mailto:inquiries@fireworks.ai)</a>).
</ParamField>

<ParamField query="language" type="string | null" optional="">
  The target language for transcription. See the [Supported Languages](#supported-languages) section below for a complete list of available languages.
</ParamField>

<ParamField query="prompt" type="string | null" optional="">
  The input prompt that the model will use when generating the transcription. Can be used to specify custom words or specify the style of the transcription. E.g. `Um, here's, uh, what was recorded.` will make the model to include the filler words into the transcription.
</ParamField>

<ParamField query="temperature" type="float | list[float]" default="0">
  Sampling temperature to use when decoding text tokens during transcription. Alternatively, fallback decoding can be enabled by passing a list of temperatures like `0.0,0.2,0.4,0.6,0.8,1.0`. This can help to improve performance.
</ParamField>

<ParamField query="response_format" type="string" default="json">
  The format in which to return the response. Can be one of `json`, `text`, `srt`, `verbose_json`, or `vtt`.
</ParamField>

<ParamField query="timestamp_granularities" type="string | list[string]" optional="">
  The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported. Can be one of `word`, `segment`, or `word,segment`. If not present, defaults to `segment`.
</ParamField>

<ParamField query="diarize" type="string" optional="">
  Whether to get speaker diarization for the transcription. Can be one of `true`, or `false`. If not present, defaults to `false`.

  Enabling diarization also requires other fields to hold specific values:

  1. `response_format` must be set `verbose_json`.
  2. `timestamp_granularities` must include `word` to use diarization.
</ParamField>

<ParamField query="min_speakers" type="int" optional="">
  The minimum number of speakers to detect for diarization. `diarize` must be set `true` to use `min_speakers`. If not present, defaults to `1`.
</ParamField>

<ParamField query="max_speakers" type="int" optional="">
  The maximum number of speakers to detect for diarization. `diarize` must be set `true` to use `max_speakers`. If not present, defaults to `inf`.
</ParamField>

<ParamField query="preprocessing" type="string" optional="">
  Audio preprocessing mode. Currently supported:

  * `none` to skip audio preprocessing.
  * `dynamic` for arbitrary audio content with variable loudness.
  * `soft_dynamic` for speech intense recording such as podcasts and voice-overs.
  * `bass_dynamic` for boosting lower frequencies;
</ParamField>

<h3 id="response">Response</h3>

<Tabs>
  <Tab title="json/text/srt/vtt">
    <ResponseField name="text" type="string" required="" />
  </Tab>

  <Tab title="verbose_json">
    <ResponseField name="task" type="string" default="transcribe" required="">
      The task which was performed. Either `transcribe` or `translate`.
    </ResponseField>

    <ResponseField name="language" type="string" required="">
      The language of the transcribed/translated text.
    </ResponseField>

    <ResponseField name="duration" type="number" required="">
      The duration of the transcribed/translated audio, in seconds.
    </ResponseField>

    <ResponseField name="text" type="string" required="">
      The transcribed/translated text.
    </ResponseField>

    <ResponseField name="words" type="object[] | null" optional="">
      Extracted words and their corresponding timestamps.

      <Expandable title="Word properties">
        <ResponseField name="word" type="string" required="">
          The text content of the word.
        </ResponseField>

        <ResponseField name="language" type="string" required="">
          The language of the word.
        </ResponseField>

        <ResponseField name="probability" type="number" required="">
          The probability of the word.
        </ResponseField>

        <ResponseField name="hallucination_score" type="number" required="">
          The hallucination score of the word.
        </ResponseField>

        <ResponseField name="start" type="number" required="">
          Start time of the word in seconds.
        </ResponseField>

        <ResponseField name="end" type="number" required="">
          End time of the word in seconds.
        </ResponseField>

        <ResponseField name="speaker_id" type="string" optional="">
          Speaker label for the word.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="segments" type="object[] | null" optional="">
      Segments of the transcribed/translated text and their corresponding details.

      <Expandable title="Segment properties (partial)">
        <ResponseField name="id" type="number" required="">
          The id of the segment.
        </ResponseField>

        <ResponseField name="text" type="string" required="">
          The text content of the segment.
        </ResponseField>

        <ResponseField name="start" type="number" required="">
          Start time of the segment in seconds.
        </ResponseField>

        <ResponseField name="end" type="number" required="">
          End time of the segment in seconds.
        </ResponseField>

        <ResponseField name="speaker_id" type="string" optional="">
          Speaker label for the segment.
        </ResponseField>

        <ResponseField name="words" type="object[] | null" optional="">
          Extracted words in the segment.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Tab>
</Tabs>

<RequestExample>
  ```curl curl

  # Download audio file
  curl -L -o "audio.flac" "https://tinyurl.com/4997djsh"

  # Make request
  curl -X POST "https://audio-prod.us-virginia-1.direct.fireworks.ai/v1/audio/transcriptions" \
  -H "Authorization: <FIREWORKS_API_KEY>" \
  -F "file=@audio.flac"
  ```

  ```python fireworks sdk
  !pip install fireworks-ai requests python-dotenv

  from fireworks.client.audio import AudioInference
  import requests
  import os
  from dotenv import load_dotenv
  import time

  # Create a .env file with your API key
  load_dotenv()


  # Download audio sample
  audio = requests.get("https://tinyurl.com/4cb74vas").content

  # Prepare client
  client = AudioInference(
      model="whisper-v3",
      base_url="https://audio-prod.us-virginia-1.direct.fireworks.ai",
      # Or for the turbo version
      # model="whisper-v3-turbo",
      # base_url="https://audio-turbo.us-virginia-1.direct.fireworks.ai",
      api_key=os.getenv("FIREWORKS_API_KEY"),
  )

  # Make request
  start = time.time()
  r = await client.transcribe_async(audio=audio)
  print(f"Took: {(time.time() - start):.3f}s. Text: '{r.text}'")
  ```

  ```python Python (openai sdk)
  !pip install openai requests python-dotenv

  from openai import OpenAI
  import os
  import requests
  from dotenv import load_dotenv

  load_dotenv()

  client = OpenAI(
      base_url="https://audio-prod.us-virginia-1.direct.fireworks.ai/v1",
      api_key=os.getenv("FIREWORKS_API_KEY")
      )
  audio_file= requests.get("https://tinyurl.com/4cb74vas").content
  transcription = client.audio.transcriptions.create(
      model="whisper-v3",
      file=audio_file
  )
  print(transcription.text)
  ```
&lt;/RequestExample&gt;

### Supported Languages

The following languages are supported for transcription:

<Accordion title="Language Code &amp; Name">
  | Language Code | Language Name       |
  | ------------- | ------------------- |
  | en            | English             |
  | zh            | Chinese             |
  | de            | German              |
  | es            | Spanish             |
  | ru            | Russian             |
  | ko            | Korean              |
  | fr            | French              |
  | ja            | Japanese            |
  | pt            | Portuguese          |
  | tr            | Turkish             |
  | pl            | Polish              |
  | ca            | Catalan             |
  | nl            | Dutch               |
  | ar            | Arabic              |
  | sv            | Swedish             |
  | it            | Italian             |
  | id            | Indonesian          |
  | hi            | Hindi               |
  | fi            | Finnish             |
  | vi            | Vietnamese          |
  | he            | Hebrew              |
  | uk            | Ukrainian           |
  | el            | Greek               |
  | ms            | Malay               |
  | cs            | Czech               |
  | ro            | Romanian            |
  | da            | Danish              |
  | hu            | Hungarian           |
  | ta            | Tamil               |
  | no            | Norwegian           |
  | th            | Thai                |
  | ur            | Urdu                |
  | hr            | Croatian            |
  | bg            | Bulgarian           |
  | lt            | Lithuanian          |
  | la            | Latin               |
  | mi            | Maori               |
  | ml            | Malayalam           |
  | cy            | Welsh               |
  | sk            | Slovak              |
  | te            | Telugu              |
  | fa            | Persian             |
  | lv            | Latvian             |
  | bn            | Bengali             |
  | sr            | Serbian             |
  | az            | Azerbaijani         |
  | sl            | Slovenian           |
  | kn            | Kannada             |
  | et            | Estonian            |
  | mk            | Macedonian          |
  | br            | Breton              |
  | eu            | Basque              |
  | is            | Icelandic           |
  | hy            | Armenian            |
  | ne            | Nepali              |
  | mn            | Mongolian           |
  | bs            | Bosnian             |
  | kk            | Kazakh              |
  | sq            | Albanian            |
  | sw            | Swahili             |
  | gl            | Galician            |
  | mr            | Marathi             |
  | pa            | Punjabi             |
  | si            | Sinhala             |
  | km            | Khmer               |
  | sn            | Shona               |
  | yo            | Yoruba              |
  | so            | Somali              |
  | af            | Afrikaans           |
  | oc            | Occitan             |
  | ka            | Georgian            |
  | be            | Belarusian          |
  | tg            | Tajik               |
  | sd            | Sindhi              |
  | gu            | Gujarati            |
  | am            | Amharic             |
  | yi            | Yiddish             |
  | lo            | Lao                 |
  | uz            | Uzbek               |
  | fo            | Faroese             |
  | ht            | Haitian Creole      |
  | ps            | Pashto              |
  | tk            | Turkmen             |
  | nn            | Nynorsk             |
  | mt            | Maltese             |
  | sa            | Sanskrit            |
  | lb            | Luxembourgish       |
  | my            | Myanmar             |
  | bo            | Tibetan             |
  | tl            | Tagalog             |
  | mg            | Malagasy            |
  | as            | Assamese            |
  | tt            | Tatar               |
  | haw           | Hawaiian            |
  | ln            | Lingala             |
  | ha            | Hausa               |
  | ba            | Bashkir             |
  | jw            | Javanese            |
  | su            | Sundanese           |
  | yue           | Cantonese           |
  | zh-hant       | Traditional Chinese |
  | zh-hans       | Simplified Chinese  |
</Accordion>


--

# Create Batch Request

&lt;CardGroup cols={1}&gt;
  <Card title="Try notebook" icon="rocket" href="https://colab.research.google.com/github/fw-ai/cookbook/blob/main/learn/batch-api/batch_api.ipynb">
    Create a batch request for our audio transcription service
  </Card>
&lt;/CardGroup&gt;

### Headers

<ParamField header="Authorization" type="string" required="">
  Your Fireworks API key, e.g. `Authorization=FIREWORKS_API_KEY`. Alternatively, can be provided as a query param.
</ParamField>

### Path Parameters

<ParamField query="path" type="string" required="">
  The relative route of the target API operation (e.g. `"v1/audio/transcriptions"`, `"v1/audio/translations"`). This should correspond to a valid route supported by the backend service.
</ParamField>

### Query Parameters

<ParamField query="endpoint_id" type="string" required="">
  Identifies the target backend service or model to handle the request. Currently supported:

  * `audio-prod`: [https://audio-prod.us-virginia-1.direct.fireworks.ai](https://audio-prod.us-virginia-1.direct.fireworks.ai)
  * `audio-turbo`: [https://audio-turbo.us-virginia-1.direct.fireworks.ai](https://audio-turbo.us-virginia-1.direct.fireworks.ai)
</ParamField>

### Body

Request body fields vary depending on the selected `endpoint_id` and `path`.

The request body must conform to the schema defined by the corresponding synchronous API.\
For example, transcription requests typically accept fields such as `model`, `diarize`, and `response_format`.\
Refer to the relevant synchronous API for required fields:

* [Transcribe audio](https://docs.fireworks.ai/api-reference/audio-transcriptions)
* [Translate audio](https://docs.fireworks.ai/api-reference/audio-translations)

### Response

<Tabs>
  <Tab title="json">
    <ResponseField name="status" type="string" required="">
      The status of the batch request submission.\
      A value of `"submitted"` indicates the batch request was accepted and queued for processing.
    </ResponseField>

    <ResponseField name="batch_id" type="string" required="">
      A unique identifier assigned to the batch job.
      This ID can be used to check job status or retrieve results later.
    </ResponseField>

    <ResponseField name="account_id" type="string" required="">
      The unique identifier of the account associated with the batch job.
    </ResponseField>

    <ResponseField name="endpoint_id" type="string" required="">
      The backend service selected to process the request.\
      This typically matches the `endpoint_id` used during submission.
    </ResponseField>

    <ResponseField name="message" type="string" optional="">
      A human-readable message describing the result of the submission.\
      Typically `"Request submitted successfully"` if accepted.
    </ResponseField>
  </Tab>
</Tabs>

<RequestExample>
  ```curl curl

  # Download audio file
  curl -L -o "audio.flac" "https://tinyurl.com/4997djsh"

  # Make request
  curl -X POST "https://audio-batch.link.fireworks.ai/v1/audio/transcriptions?endpoint_id=audio-prod" \
  -H "Authorization: <FIREWORKS_API_KEY>" \
  -F "file=@audio.flac"
  ```

  ```python python
  !pip install requests

  import os
  import requests

  # input API key and download audio
  api_key = "<FIREWORKS_API_KEY>"
  audio = requests.get("https://tinyurl.com/4cb74vas").content

  # Prepare request data
  url = "https://audio-batch.link.fireworks.ai/v1/audio/transcriptions?endpoint_id=audio-prod"
  headers = {"Authorization": api_key}
  payload = {
      "model": "whisper-v3",
      "response_format": "json"
  }
  files = {"file": ("audio.flac", audio, "audio/flac")}

  # Send request
  response = requests.post(url, headers=headers, data=payload, files=files)
  print(response.text)
  ```
&lt;/RequestExample&gt;

To check the status of your batch request, use the [Check Batch Status](https://docs.fireworks.ai/api-reference/get-batch-status) endpoint with the returned `batch_id`.

--

# Check Batch Status

This endpoint allows you to check the current status of a previously submitted batch request, and retrieve the final result if available.

&lt;CardGroup cols={1}&gt;
  <Card title="Try notebook" icon="rocket" href="https://colab.research.google.com/github/fw-ai/cookbook/blob/main/learn/batch-api/batch_api.ipynb">
    Check status of your batch request
  </Card>
&lt;/CardGroup&gt;

### Headers

<ParamField header="Authorization" type="string" required="">
  Your Fireworks API key. e.g. `Authorization=FIREWORKS_API_KEY`. Alternatively, can be provided as a query param.
</ParamField>

### Path Parameters

<ParamField query="account_id" type="string" required="">
  The identifier of your Fireworks account. Must match the account used when the batch request was submitted.
</ParamField>

<ParamField query="batch_id" type="string" required="">
  The unique identifier of the batch job to check.\
  This should match the `batch_id` returned when the batch request was originally submitted.
</ParamField>

### Response

The response includes the status of the batch job and, if completed, the final result.

<Tabs>
  <Tab title="json">
    <ResponseField name="status" type="string" required="">
      The status of the batch job at the time of the request.\
      Possible values include `"completed"` and `"processing"`.
    </ResponseField>

    <ResponseField name="batch_id" type="string" required="">
      The unique identifier of the batch job whose status is being retrieved.\
      This ID matches the one provided in the original request.
    </ResponseField>

    <ResponseField name="message" type="string" optional="">
      A human-readable message describing the current state of the batch job.\
      This field is typically `null` when the job has completed successfully.
    </ResponseField>

    <ResponseField name="content_type" type="string" optional="">
      The original content type of the response body.\
      This value can be used to determine how to parse the string in the `body` field.
    </ResponseField>

    <ResponseField name="body" type="string" optional="">
      The serialized result of the batch job, this field is only present when `status` is `"completed"`.\
      The format of this string depends on the `content_type` field and may vary across endpoints.\
      Clients should use `content_type` to determine how to parse or interpret the value.
    </ResponseField>
  </Tab>
</Tabs>

<RequestExample>
  ```curl curl
  # Make request
  curl -X GET "https://audio-batch.link.fireworks.ai/v1/accounts/{account_id}/batch_job/{batch_id}" \
  -H "Authorization: <FIREWORKS_API_KEY>"
  ```

  ```python python
  !pip install requests

  import os
  import requests

  # Input api key and path parameters
  api_key = "<FIREWORKS_API_KEY>"
  account_id = "<ACCOUNT_ID>"
  batch_id = "<BATCH_ID>"

  # Send request
  url = f"https://audio-batch.link.fireworks.ai/v1/accounts/{account_id}/batch_job/{batch_id}"
  headers = {"Authorization": api_key}

  response = requests.get(url, headers=headers)
  print(response.text)
  ```
&lt;/RequestExample&gt;
</BATCH_ID></ACCOUNT_ID></FIREWORKS_API_KEY></FIREWORKS_API_KEY></RequestExample></FIREWORKS_API_KEY></FIREWORKS_API_KEY></RequestExample></FIREWORKS_API_KEY></RequestExample>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>