<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-05-07T23:07:47+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">How to run `.qcow2` from Fedora CoreOS + Podman + Incus</title><link href="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/" rel="alternate" type="text/html" title="How to run `.qcow2` from Fedora CoreOS + Podman + Incus" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T19:14:50+00:00</updated><id>https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus</id><content type="html" xml:base="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/"><![CDATA[<p><strong>Understanding the Core Technology</strong></p>

<ul>
  <li><strong>Incus:</strong> Your custom OS includes Incus, a powerful system container and virtual machine manager. For VMs, Incus utilizes QEMU/KVM.</li>
  <li><strong>QEMU/KVM:</strong>
    <ul>
      <li><strong>QEMU:</strong> An open-source machine emulator and virtualizer.</li>
      <li><strong>KVM (Kernel-based Virtual Machine):</strong> A Linux kernel module that enables QEMU to use hardware virtualization extensions (Intel VT-x or AMD-V), providing near-native performance. Fedora CoreOS includes KVM support.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code>:</strong> This is a disk image format commonly used by QEMU, supporting features like copy-on-write and snapshots.</li>
</ul>

<p><strong>Methods to Run a <code class="language-plaintext highlighter-rouge">.qcow2</code> Image with Incus</strong></p>

<p>Here are a few methods, ranging from a quick one-off boot to creating a reusable Incus image:</p>

<p><strong>Prerequisites for all methods:</strong></p>

<ol>
  <li><strong>Hardware Virtualization:</strong> Ensure Intel VT-x or AMD-V is enabled in your machine’s BIOS/UEFI.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code> File:</strong> The bootable <code class="language-plaintext highlighter-rouge">.qcow2</code> file must be accessible on your custom OS’s filesystem (e.g., copied to your home directory or another accessible path).</li>
  <li><strong>Incus Initialization (One-time):</strong> If you haven’t used Incus before, you might need to initialize it. This typically involves setting up a default profile and a storage pool.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>incus admin init
</code></pre></div>    </div>
    <p>Follow the prompts. For simplicity, you can often accept the defaults. This might create a storage pool (e.g., named <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>User Permissions:</strong> While <code class="language-plaintext highlighter-rouge">incus admin init</code> requires <code class="language-plaintext highlighter-rouge">sudo</code>, many subsequent <code class="language-plaintext highlighter-rouge">incus</code> commands can be run by a user added to the <code class="language-plaintext highlighter-rouge">incus-admin</code> group (or <code class="language-plaintext highlighter-rouge">lxd</code> if you had a previous LXD installation and it was migrated). If your user is not in this group, you may need to prefix <code class="language-plaintext highlighter-rouge">incus</code> commands with <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
</ol>

<hr />

<p><strong>Method 1: Direct Boot by Attaching <code class="language-plaintext highlighter-rouge">.qcow2</code> as a Disk (Recommended for Quick/One-Off Use)</strong></p>

<p>This method is often the most straightforward for booting an existing <code class="language-plaintext highlighter-rouge">.qcow2</code> file without converting it into a formal Incus image, especially if your Incus storage pool is of type <code class="language-plaintext highlighter-rouge">dir</code>.</p>

<ol>
  <li><strong>Create a VM Instance (without a standard root disk initially):</strong>
It’s often easiest to launch a minimal VM instance using a placeholder image (like a minimal cloud image if you have one aliased, or even a standard image whose disk you’ll immediately replace).
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Launch a VM; 'images:alpine/edge' is just a small image to create the VM config.</span>
<span class="c"># We will replace its disk.</span>
incus launch images:alpine/edge my-qcow-vm <span class="nt">--vm</span> 
</code></pre></div>    </div>
    <p><em>Note: If you have a very minimal image alias or a profile designed for “empty” VMs, you can use that instead.</em></p>
  </li>
  <li><strong>Stop the VM:</strong>
The VM will likely start automatically. Stop it to modify its disk configuration.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus stop my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Remove the Default Root Disk:</strong>
The VM was created with a root disk from the placeholder image. Remove it.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device remove my-qcow-vm root
</code></pre></div>    </div>
  </li>
  <li><strong>Add Your <code class="language-plaintext highlighter-rouge">.qcow2</code> File as the New Root Disk:</strong>
This command tells Incus to use your <code class="language-plaintext highlighter-rouge">.qcow2</code> file as the primary bootable disk for the VM.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device add my-qcow-vm root disk <span class="nb">source</span><span class="o">=</span>/path/to/your/image.qcow2 boot.priority<span class="o">=</span>1
</code></pre></div>    </div>
    <p>Replace <code class="language-plaintext highlighter-rouge">/path/to/your/image.qcow2</code> with the actual path to your file.</p>
    <ul>
      <li><strong>Storage Pool Consideration:</strong> This method works best if your Incus storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>) is of type <code class="language-plaintext highlighter-rouge">dir</code>. For block-based pools (LVM, ZFS, Ceph), Incus might try to import the <code class="language-plaintext highlighter-rouge">.qcow2</code> content into a new volume in its native format, which is usually fine.</li>
    </ul>
  </li>
  <li><strong>Start the VM:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus start my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-qcow-vm
</code></pre></div>    </div>
    <p>Press <code class="language-plaintext highlighter-rouge">Ctrl+a q</code> (or <code class="language-plaintext highlighter-rouge">Ctrl+a c</code> then <code class="language-plaintext highlighter-rouge">q</code>) to detach from the console.</p>
  </li>
</ol>

<hr />

<p><strong>Method 2: Importing <code class="language-plaintext highlighter-rouge">.qcow2</code> into a Custom Storage Volume (More Robust for Block-Based Pools)</strong></p>

<p>If your storage pool is block-based (e.g., LVM, ZFS), or you want Incus to manage the disk image as a distinct volume, this method is more appropriate. It involves converting the <code class="language-plaintext highlighter-rouge">.qcow2</code> to a raw format and importing that.</p>

<ol>
  <li><strong>Identify Your Storage Pool:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage list
</code></pre></div>    </div>
    <p>Note the name of your desired storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>Convert <code class="language-plaintext highlighter-rouge">.qcow2</code> to Raw Format (if needed):</strong>
Incus’s volume import often works best with raw image files.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img convert <span class="nt">-f</span> qcow2 <span class="nt">-O</span> raw /path/to/your/image.qcow2 /tmp/image.raw
</code></pre></div>    </div>
    <p>Replace paths as necessary. Ensure you have enough space in <code class="language-plaintext highlighter-rouge">/tmp</code> or choose another location.</p>
  </li>
  <li><strong>Import the Raw Image into an Incus Custom Storage Volume:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import &lt;your-pool-name&gt; /tmp/image.raw &lt;name-for-your-volume&gt;
</code></pre></div>    </div>
    <p>For example:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import default /tmp/image.raw my-custom-boot-volume
</code></pre></div>    </div>
    <p>This creates an Incus storage volume containing the content of your bootable image.</p>
  </li>
  <li><strong>Clean up the temporary raw file:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> /tmp/image.raw
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM Using the Custom Volume:</strong>
You’ll create a VM instance and tell it to use this custom volume as its root disk.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a VM instance (similar to Method 1, using a placeholder)</span>
incus launch images:alpine/edge my-custom-vol-vm <span class="nt">--vm</span>
incus stop my-custom-vol-vm
incus config device remove my-custom-vol-vm root

<span class="c"># Add the custom volume as the root disk</span>
incus config device add my-custom-vol-vm root disk <span class="nv">pool</span><span class="o">=</span>&lt;your-pool-name&gt; <span class="nb">source</span><span class="o">=</span>&lt;name-for-your-volume&gt; boot.priority<span class="o">=</span>1
<span class="c"># Example:</span>
<span class="c"># incus config device add my-custom-vol-vm root disk pool=default source=my-custom-boot-volume boot.priority=1</span>

incus start my-custom-vol-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-custom-vol-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Method 3: Creating a Reusable Incus Image from <code class="language-plaintext highlighter-rouge">.qcow2</code> (For Frequent Use)</strong></p>

<p>If you plan to launch multiple VMs from this same <code class="language-plaintext highlighter-rouge">.qcow2</code> image, creating a proper Incus image is efficient.</p>

<ol>
  <li><strong>Prepare a <code class="language-plaintext highlighter-rouge">metadata.yaml</code> File:</strong>
This file describes your image to Incus. Create a file named <code class="language-plaintext highlighter-rouge">metadata.yaml</code> in the same directory as your <code class="language-plaintext highlighter-rouge">.qcow2</code> file (or a temporary directory where you copy the <code class="language-plaintext highlighter-rouge">.qcow2</code>):
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">architecture</span><span class="pi">:</span> <span class="s">x86_64</span>  <span class="c1"># Or your image's architecture (e.g., aarch64)</span>
<span class="na">creation_date</span><span class="pi">:</span> <span class="s">$(date +%s)</span> <span class="c1"># This will be replaced by actual date in next step</span>
<span class="na">properties</span><span class="pi">:</span>
  <span class="na">os</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyQcow2OS"</span> <span class="c1"># A friendly name for the OS</span>
  <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Bootable</span><span class="nv"> </span><span class="s">qcow2</span><span class="nv"> </span><span class="s">image"</span>
  <span class="na">architecture</span><span class="pi">:</span> <span class="s2">"</span><span class="s">x86_64"</span> <span class="c1"># Repeat architecture here</span>
<span class="c1"># Add other properties if known, like 'release', 'variant', etc.</span>
</code></pre></div>    </div>
    <p>You can generate the <code class="language-plaintext highlighter-rouge">creation_date</code> dynamically:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; metadata.yaml
architecture: </span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh"> # Or specify explicitly e.g. x86_64
creation_date: </span><span class="si">$(</span><span class="nb">date</span> +%s<span class="si">)</span><span class="sh">
properties:
  os: "MyQcow2OS"
  description: "My custom bootable qcow2"
  architecture: "</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh">" # Or specify explicitly
</span><span class="no">EOF
</span></code></pre></div>    </div>
  </li>
  <li><strong>Create a Tarball:</strong>
Package the <code class="language-plaintext highlighter-rouge">.qcow2</code> file (e.g., <code class="language-plaintext highlighter-rouge">my-image.qcow2</code>) and <code class="language-plaintext highlighter-rouge">metadata.yaml</code> into a <code class="language-plaintext highlighter-rouge">.tar.gz</code> file. The <code class="language-plaintext highlighter-rouge">.qcow2</code> file should be named <code class="language-plaintext highlighter-rouge">root.img</code> or <code class="language-plaintext highlighter-rouge">disk.img</code> inside the tarball for some Incus versions, or more generally, Incus will pick up the largest file as the root disk if it’s a qcow2. For simplicity, let’s assume your qcow2 is <code class="language-plaintext highlighter-rouge">my-os.qcow2</code>. You might need to rename it to <code class="language-plaintext highlighter-rouge">root.qcow2</code> or ensure it’s the clear candidate.
A common practice is to name the image file <code class="language-plaintext highlighter-rouge">root.qcow2</code> within the tarball.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming your qcow2 is my-os.qcow2</span>
<span class="nb">cp</span> /path/to/your/my-os.qcow2 <span class="nb">.</span> <span class="c"># Copy to current directory</span>
<span class="nb">mv </span>my-os.qcow2 root.qcow2      <span class="c"># Rename for clarity within tarball</span>
<span class="nb">tar</span> <span class="nt">-czvf</span> my-incus-image.tar.gz root.qcow2 metadata.yaml
</code></pre></div>    </div>
  </li>
  <li><strong>Import the Tarball as an Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus image import my-incus-image.tar.gz <span class="nt">--alias</span> my-bootable-qcow-image
</code></pre></div>    </div>
    <p>This makes the image available in your local Incus image store.</p>
  </li>
  <li><strong>Clean up Temporary Files:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm </span>root.qcow2 metadata.yaml my-incus-image.tar.gz
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM from the New Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus launch my-bootable-qcow-image my-new-vm <span class="nt">--vm</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-new-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Alternative: Direct QEMU/KVM (Bypassing Incus Management)</strong></p>

<p>While Incus is the recommended and integrated way on your custom OS, you <em>could</em> use QEMU/KVM directly. This gives raw access but lacks Incus’s management features (networking, storage, snapshots, etc.).</p>

<ol>
  <li><strong>Ensure QEMU/KVM Utilities are Installed:</strong>
On Fedora CoreOS, if not already present as a dependency of Incus, you might need to install them:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>rpm-ostree <span class="nb">install </span>qemu-system-x86 <span class="c"># For x86_64</span>
<span class="c"># May require a reboot</span>
<span class="c"># sudo systemctl reboot</span>
</code></pre></div>    </div>
    <p>However, <code class="language-plaintext highlighter-rouge">incus</code> typically pulls in <code class="language-plaintext highlighter-rouge">qemu-kvm</code> or similar packages.</p>
  </li>
  <li><strong>Run with <code class="language-plaintext highlighter-rouge">qemu-system-x86_64</code>:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="se">\</span>
    <span class="nt">-enable-kvm</span> <span class="se">\</span>
    <span class="nt">-m</span> 2048 <span class="se">\</span>
    <span class="nt">-smp</span> 2 <span class="se">\</span>
    <span class="nt">-hda</span> /path/to/your/image.qcow2 <span class="se">\</span>
    <span class="nt">-boot</span> d <span class="se">\</span>
    <span class="nt">-vga</span> std <span class="se">\</span>
    <span class="nt">-net</span> nic <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::2222-:22 <span class="c"># Example networking</span>
</code></pre></div>    </div>
    <p>This is more manual and generally not preferred if Incus is available.</p>
  </li>
</ol>

<p><strong>Podman’s Role</strong></p>

<p>Podman is for managing OCI/Docker-compatible <em>containers</em>, not full virtual machines from <code class="language-plaintext highlighter-rouge">.qcow2</code> images. It operates at a different level of virtualization (OS-level virtualization, sharing the host kernel) compared to the hardware virtualization used by Incus for VMs.</p>

<p><strong>Conclusion</strong></p>

<p>Your Fedora CoreOS + Podman + Incus system is well-equipped to run <code class="language-plaintext highlighter-rouge">.qcow2</code> Linux images. <strong>Using Incus (Method 1 or 2 for direct use, Method 3 for reusability) is the most integrated and recommended approach.</strong> It provides a robust management layer over QEMU/KVM, allowing you to easily launch and manage these VMs right after your system boots.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Linux Home Networking</title><link href="https://ib.bsb.br/linux-home-networking/" rel="alternate" type="text/html" title="Linux Home Networking" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T21:31:32+00:00</updated><id>https://ib.bsb.br/linux-home-networking</id><content type="html" xml:base="https://ib.bsb.br/linux-home-networking/"><![CDATA[<p>This page provides a brief introduction on how to network two Linux computers together so you can share files between machines.</p>

<p>While these techniques can be used to set up regular file sharing, a quick temporary network can be particularly useful when moving files from an old machine to a new machine when you wish to avoid the possible security threats of using intermediate cloud storage.</p>

<h2 id="connectivity">Connectivity</h2>

<p>Your first step is getting some kind of network connectivity between two machines. You have numerous options with contemporary hardware.</p>

<h3 id="wireless-router">Wireless Router</h3>

<p>If you already are networked through a wireless router, you will simply need to run <em>ifconfig</em> on both machines to get the IP addresses they got from the router.</p>

<p>$ sudo ifconfig</p>

<p>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet <strong>73.45.140.138</strong>  netmask 255.255.254.0  broadcast 255.255.255.255
        inet6 fe80::6a45:f1ff:fe6f:7b1a  prefixlen 64  scopeid 0x20
        ether 68:45:f1:6f:7b:1a  txqueuelen 1000  (Ethernet)
        RX packets 5242077  bytes 5089202364 (4.7 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3554290  bytes 1467295701 (1.3 GiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 16  memory 0xb1100000-b1120000</p>

<p>Configuration of wireless interfaces via the <a href="https://michaelminn.com/linux/home_network/#command-line-wireless">comman line is described further below.</a></p>

<p>If you are setting up a file server that you will be using on a regular basis, you will want to find a way to set the file server machine to a manual, fixed IP address that does not rely on DHCP.</p>

<h3 id="ad-hoc-wireless-network">Ad-Hoc Wireless Network</h3>

<p>If you don’t have a wireless router, you can create an <a href="https://help.ubuntu.com/community/WifiDocs/Adhoc">“Ad-Hoc” wireless network</a> to interconnect the two machines.</p>

<p>You should first find the names of the interfaces on both machines. They are usually <em>wlp1s0</em> or <em>wlp2s0</em> on contemporary machines.</p>

<p>$ sudo iw dev</p>

<p>phy#0
        Interface wlp1s0
                ifindex 3
                wdev 0x1
                addr 3c:9c:0f:46:65:3b
                type managed
                txpower 0.00 dBm</p>

<p>The following instructions should be executed on both machines to set the card into ad-hoc mode, specify a frequency, set the network name and set a WEP encryption key.</p>

<p>Note that encryption keys specified as ASCII strings (s:) <a href="http://permalink.gmane.org/gmane.linux.nernel.wireless.general/44915">must be exactly 5 or 13 characters</a>:</p>

<p>$ sudo iwconfig wlp1s0 mode Ad-Hoc
$ sudo iwconfig wlp1s0 channel 4
$ sudo iwconfig wlp1s0 essid omega
$ sudo iwconfig wlp1s0 key s:alpha</p>

<p>On the server machine, bring the interface up with the server address:</p>

<p>$ sudo ifconfig wlp1s0 192.168.1.1</p>

<p>On the client machine, bring the interface up with the client address and ping the server to verify connectivity</p>

<p>$ sudo ifconfig wlp1s0 192.168.1.2</p>

<p>$ ping 192.168.1.1</p>

<p>PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=2.21 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.445 ms</p>

<h3 id="crossover-cable">Crossover Cable</h3>

<p>You can connect two machines directly together through their ethernet ports. However, you will will need to get a <strong>crossover cable</strong>, which appears identical to a regular Ethernet cable, the connectors are wired so the outputs of one machine go to the inputs of the other. A regular ethernet cable is inappropriate for this task.</p>

<p>Once connected, you should manually set the IP addresses on the two different machines and then <em>ping</em> the opposite machine to test the connection.</p>

<p>Server machine:</p>

<p>$ sudo ifconfig eth0 192.168.1.1</p>

<p>Client machine:</p>

<p>$ sudo ifconfig eth0 192.168.1.2</p>

<p>$ ping 192.168.1.1</p>

<p>PING 192.168.1.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=0.053 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.066 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=0.071 ms</p>

<h3 id="physical-router">Physical Router</h3>

<p>It is also possible to connect multiple machines together with a physical router, although such techniques have largely been supplanted by wireless.</p>

<p>The interface configuration would be the same as with a crossover cable configuration above.</p>

<p><img src="https://michaelminn.com/linux/home_network/2021-12-22_08-25-00-thumbnail.jpg" alt="Image 1" /></p>

<p>Interconnection with a physical router</p>

<h2 id="nfs">NFS</h2>

<p>The Network File System (NFS) is the standard Linux file server.</p>

<p>Files under Network File System (NFS) are served by a server and accessed by a client.</p>

<p>If you want to provide mutual access to files between two machines you will need to set both machines up as NFS servers and clients. If only one machine is being used for file storage, you only need NFS server on the source machine and the NFS client software on the other machine.</p>

<h3 id="packages">Packages</h3>

<p>You will need two packages:</p>

<p>$ sudo apt-get install nfs-kernel-server rpcbind</p>

<p>$ sudo /etc/init.d/rpcbind start</p>

<p>$ sudo /etc/init.d/nfs-kernel-server start</p>

<h3 id="nfs-exports">NFS Exports</h3>

<p>The /etc/exports file tells NFS which directories to make visible to network systems. To make the /home directory visible to all machines with the IP addresses given above, the /etc/exports file on both machines would have one line:</p>

<p>/home 192.168.1.0/255.255.255.0(rw)</p>

<p>Export these file systems after modifying /etc/exports. The file systems will subsequently be exported each time the server is reloaded.</p>

<p>$ sudo exportfs -a -v</p>

<p>$ sudo /etc/init.d/nfs-kernel-server reload</p>

<h3 id="mount">Mount</h3>

<p>On all machines needing to mount the networked file system, create a mountpoint:</p>

<p>$ sudo mkdir /media/nfs</p>

<p>You can then mount the file system:</p>

<p>$ sudo mount -v 192.168.1.1:/home /media/nfs</p>

<p>$ ls /media/nfs</p>

<p>lost+found  user1   user2   user3</p>

<h3 id="regular-mounting">Regular Mounting</h3>

<p>If you are going to be using the network on a regular basis, you should place an entry in the <em>/etc/fstab</em> file so users will be able to access the file system without having to manually mount.</p>

<p>192.168.1.1:/home	/mnt/nfs	nfs	auto,user,exec,soft	0  0</p>

<h2 id="nfs-debugging">NFS Debugging</h2>

<p>NFS can be a MAJOR pain in the ass to get running, with cryptic error messages and strange freezes. The following are some errors I encountered and potential fixes. Some of these date from a previous experience with Fedora and they remain here for completeness. When all else fails, <a href="http://google.com/">Google</a> is your friend.</p>

<p><strong>Test the Connection</strong>: If mounting of an NFS file system is freezing or failing, you should first verify that you have connectivity to the server using ping.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping 192.168.1.1
</code></pre></div></div>

<p>Should give something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PING 192.168.1.1 (192.168.1.2) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp\_seq=0 ttl=64 time=0.895 ms
64 bytes from 192.168.1.1: icmp\_seq=1 ttl=64 time=0.435 ms
64 bytes from 192.168.1.1: icmp\_seq=2 ttl=64 time=0.430 ms
</code></pre></div></div>

<p>If you do not get ping messages, there’s a problem with the basic connection between the machines. Verify that your cables are connected properly and firmly seated all the way into their sockets. If you are using a switch, make sure it is powered up and the indicator lights confirm connection. If you are using a crossover cable, make sure it is a crossover cable and not a regular Ethernet cable.</p>

<p><strong>NFS Version</strong></p>

<p>The Linux NFS client supposedly supports NFS protocol versions 2, 3, and 4 but the server doesn’t seem quite so robust. nfsvers=2 is used above as the option on the mount command (or in /etc/fstab) to force use of NFS v2. If you fail to use explicit versioning, you may get a message like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount -v 192.168.1.1:/home /mnt/network

mount: no type was given - I'll assume nfs because of the colon
mount.nfs: timeout set for Wed Dec 29 09:20:34 2010
mount.nfs: text-based options: 'addr=192.168.1.1'
mount.nfs: mount(2): Protocol not supported
mount.nfs: trying 192.168.1.1 prog 100003 vers 3 prot UDP port 2049
mount.nfs: mount to NFS server '192.168.1.1:/home' failed: RPC Error: Success
</code></pre></div></div>

<p>By contrast, when you use explicit versioning:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount -o nfsvers=2 192.168.1.1:/home /mnt/network

mount: no type was given - I'll assume nfs because of the colon
mount.nfs: timeout set for Wed Dec 29 09:20:53 2010
mount.nfs: text-based options: 'nfsvers=2,addr=192.168.1.1'
192.168.1.1:/home on /mnt/network type nfs (rw,nfsvers=2)
</code></pre></div></div>

<p><strong>Access denied</strong>: This is likely caused because the directory you are trying to mount is not specified in /etc/exports on the NFS server. You should verify that file contains the correct info as described above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount.nfs: access denied by server while mounting 192.168.1.1:/home
</code></pre></div></div>

<p><strong>RPC Error: Program not registered</strong>: This is likely caused because NFS or rpcbind is not running on the server. Execute “/etc/init.d/unfs3 start” on the server as described above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount.nfs: mount to NFS server '192.168.1.1:/home' failed: 
RPC Error: Program not registered
</code></pre></div></div>

<p><strong>Server Is Down</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount to NFS server 'x.x.x.x' failed: server is down
</code></pre></div></div>

<p>This may, in fact, mean that the server is not running or that you do not have connectivity to the server (see above for ping). It can also be caused if the server does not have an entry in /etc/exports giving you permission to mount the requested resource (see above).</p>

<p>However, this message may also be caused by a NFS protocol version mismatch. You should use NFS version 2 as described above.</p>

<p><strong>Permission denied on mount</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>statd: Could not chdir: Permission denied
mount.nfs: rpc.statd is not running but is required for remote locking.
mount.nfs: Either use '-o nolock' to keep locks local, or start statd.
</code></pre></div></div>

<p>This is a strange one. The easiest solution was to just mount as superuser:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount /mnt/network
</code></pre></div></div>

<p>However, subsequent mounts as non-superuser worked fine, so go figure.</p>

<p><strong>Starting NFS quotas: Cannot register service</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting NFS quotas: Cannot register service: RPC: 
Unable to receive; errno = Connection refused
rpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp).
</code></pre></div></div>

<p>This is a <a href="http://forums.fedoraforum.org/showthread.php?t=186999">mysterious one</a>. Seems to magically go away if you just restart NFS.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/init.d/unfs3 restart
</code></pre></div></div>

<p><strong>Firewall - iptables</strong>: If you are running a non-Ubuntu configuration or you have iptables running as a firewall, it needs to be configured to allow the client machine(s) to access NFS. On both machines, add a new iptables rule that accepts all input on the eth0 interface from the local network (both 192.168.1.1 and 192.168.1.2). List the new table and if everything looks good, save it to the /etc/sysconfig/iptables file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo iptables -I INPUT -p ALL -i eth0 -s 192.168.1.0/255.255.255.0 -j ACCEPT
sudo iptables -L
sudo iptables-save \&gt; /etc/sysconfig/iptables
</code></pre></div></div>

<p><strong>RPC: Port mapper failure - RPC: Unable to receive</strong>: NFS uses TCP/IP port 2049. The default firewalls on many distributions may cause mounting a drive on a remote machine to fail with the message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RPC: Port mapper failure - RPC: Unable to receive
</code></pre></div></div>

<p>Solution is changing the iptable settings as described above.</p>

<p><strong>RPC: Timed out</strong></p>

<p>The firewall settings on the server or client may cause the mount to hang and eventually issue the message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RPC: Timed out
</code></pre></div></div>

<p>Solution is changing the iptable settings as described above.</p>

<p><strong>Debugging - Ports</strong>: NFS uses TCP port 2049. rpcinfo can be used to list available ports. Problems with rpcinfo indicates a machine is not accepting NFS requests.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpcinfo
</code></pre></div></div>

<p>You can also verify open ports with netstat. nfs should be listed for both tcp and udp, although only the tcp port will be in LISTEN state</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># netstat -tul

Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 \*:nfs                   \*:\*                     LISTEN      
tcp        0      0 \*:printer               \*:\*                     LISTEN      
tcp        0      0 \*:676                   \*:\*                     LISTEN      
tcp        0      0 \*:sunrpc                \*:\*                     LISTEN      
tcp        0      0 \*:x11                   \*:\*                     LISTEN      
tcp        0      0 \*:ha-cluster            \*:\*                     LISTEN      
tcp        0      0 \*:32893                 \*:\*                     LISTEN      
tcp        0      0 \*:32894                 \*:\*                     LISTEN      
udp        0      0 \*:nfs                   \*:\*                                 
udp        0      0 \*:32782                 \*:\*                                 
udp        0      0 \*:32783                 \*:\*                                 
udp        0      0 \*:673                   \*:\*                                 
udp        0      0 \*:691                   \*:\*                                 
udp        0      0 \*:bootpc                \*:\*                                 
udp        0      0 \*:727                   \*:\*                                 
udp        0      0 \*:sunrpc                \*:\*     
</code></pre></div></div>

<p><strong>iptables restart</strong>: If all else fails, you can simply stop the firewall.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo service iptables stop
</code></pre></div></div>

<p>If this solves the problem, you should look further into correcting your firewall configuration. Running without a firewall, especially with a connection to the internet exposes your machine to hacking and not recommended.</p>

<p>FYI, an important line in /etc/sysconfig/iptables on some Red Hat configurations may be rejection of port 2049, used by NFS:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-A RH-Lokkit-0-50-INPUT -p udp -m udp --dport 2049 -j REJECT
</code></pre></div></div>

<h2 id="command-line-wireless-configuration">Command Line Wireless Configuration</h2>

<p>I prefer to start and stop my networks manually, and removed the network-manager to avoid conflicts and problems encountered on other machines:</p>

<p>$ sudo apt-get remove network-manager</p>

<p>Wireless interfaces can be started with the <em>ifup</em> command:</p>

<p>$ sudo ifup wlp1s0</p>

<p>The interface can be stopped with the <em>ifdown</em> command:</p>

<p>$ sudo ifdown wlp1s0</p>

<p>Access points can be displayed with the <em>iwlist</em> command:</p>

<p>$ sudo iwlist wlp2s0 scan</p>

<p>Access points can be configured with the <em>iwconfig</em> command:</p>

<p>$ sudo iwconfig wlp2s0 essid &lt;SSID&gt;</p>

<p>If you have an access point that you regulaly connect to, you can configure the SSID and password in the <em>/etc/network/interfaces</em> file:</p>

<p>iface wlp2s0 inet dhcp
wpa-ssid “&lt;SSID&gt;”
wpa-psk “&lt;PASSWORD&gt;”</p>

<p>To have the interface start automatically on boot:</p>

<p>auto wlp2s0
iface wlp2s0 inet dhcp
wpa-ssid “&lt;SSID&gt;”
wpa-psk “&lt;PASSWORD&gt;”</p>

<h2 id="diagnostic-utilities">Diagnostic Utilities</h2>

<p>Networks always have problems and diagnosis of those problems is the primary activity of network administrators. Diagnosing and solving network problems is a black art that can only be covered superficially here, but the following are some basic utilities for diagnosing problems. Many of these programs are mentioned in more detail above and you can get further information on the command line with the “man &lt;command&gt;” command.</p>

<p><strong>ifconfig</strong>: The first step is to verify that the interface you are trying to connect to the network with is up and has a valid IP address. ifconfig with no arguments lists all the network interfaces on a system and allows configuration. If the interface is not displayed or does not have an IP address, your system cannot connect to the network through that interface. The example output given below shows the interface IP address as 192.168.1.47 and, with the given mask, the default gateway is 192.168.1.1. The “RX bytes” and “TX bytes” can be used to determine if there has been any traffic on an interface, implying that it is or was working at some point. lo is the loopback interface on every system that is, in essence, only connected to itself.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eth0      Link encap:Ethernet  HWaddr 00:0F:B0:66:40:C2  
          inet addr:192.168.1.47  Bcast:255.255.255.255  Mask:255.255.255.0
          inet6 addr: fe80::20f:b0ff:fe66:40c2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:29369 errors:0 dropped:0 overruns:0 frame:0
          TX packets:32776 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:20428276 (19.4 Mb)  TX bytes:21405541 (20.4 Mb)
          Interrupt:11 Base address:0x3000

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
     	  RX bytes:592 (592.0 b)  TX bytes:592 (592.0 b)
</code></pre></div></div>

<p><strong>ping</strong> is the second most useful network diagnostic utility. ping allows you to send echo request messages to specific IP addresses and verify that they are up. Generally, in diagnosing a connectivity problem you will first try to ping the interface, then ping the gateway (which can be inferred from the output of ifconfig), and, finally, ping the destination you are trying to reach.</p>

<p><strong>traceroute</strong> lists all the routers between you and a destination. This permits detection of the point in a route where there is a problem.</p>

<p><strong>arp</strong> allows display and modification of the ARP caches on interfaces. If you need to determine if you have the lowest level connectivity to the network, in this case through interface eth0:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/sbin/arp -a -i eth0
</code></pre></div></div>

<p><strong>iwconfig</strong> is a utility for displaying and configuring wireless-specific information that is not part of ifconfig. Looking for the connected access point ESSID (or lack thereof) is a common reason to use iwconfig.</p>

<p><strong>iwlist</strong>: When connecting to an unfamiliar network, you may want to use the iwlist command to see what access points are available. If no access point ESSID is specified, bringing a wireless interface up will connect to the most powerful AP it sees, which may not be the one you want.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/sbin/iwlist wlan0 scan
</code></pre></div></div>

<p><strong>tcpdump</strong> is a program for listing network packets. The output can be rather obtuse to the uninitiated. Useful for diagnosing problems with NFS or authentication issues. For example, to display packets in ASCII that are passing through interface eth0:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	tcpdump -s 1024 -A -i eth0
</code></pre></div></div>

<p>In some configurations the filtering used by tcpdump may be so aggressive that it yields no significant output other than ARP requests. In those cases you may need to specify the specific IP network address of the interface you’re trying to list traffic from:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	tcpdump -A -s 1024 net 192.168.1.1
</code></pre></div></div>

<p><strong>netstat</strong> lists active network connections, routing tables, interface statistics, masquerade connections, and multicast membership</p>

<ul>
  <li>netstat -r: show routing table</li>
  <li>netstat -a: list connections</li>
  <li>netstat -s: list statistics by protocol</li>
  <li>netstat -n: list port numbers</li>
</ul>

<p><strong>host</strong>, <strong>dig</strong> and <strong>nslookup</strong> are DNS lookup utilities, with dig giving the more detailed output of the bunch. If you are having trouble connecting to a named website, you can use these utilities to try to figure out if the name is getting resolved to an IP address. You can also use these utilities to lookup addresses on specific nameservers if your currently configured nameserver is having problems.</p>

<p><strong>route</strong> is a utility to list and/or manipulate the IP routing table. If you’re having problems with a browser not being able to see a network, this will show if there is a problem in your routing table.</p>

<p>Example route output with a DSL modem</p>

<p>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     *               255.255.255.0   U     0      0        0 eth0
169.254.0.0     *               255.255.0.0     U     0      0        0 eth0
default         dslrouter       0.0.0.0         UG    0      0        0 eth0</p>

<p>Example route output with a dialup modem Destination Gateway Genmask Flags Metric Ref Use Iface nas31.newyork1. * 255.255.255.255 UH 0 0 0 ppp0 default nas31.newyork1. 0.0.0.0 UG 0 0 0 ppp0</p>

<p><strong>whois</strong> queries the Internet WhoIs database to find out who a domain name is registered to. Anonymous or third-world registrations often indicate entities that you should have no dealings with. whois can also be used to list to what organization an IP address has been assigned to, although this information will often only lead you to an ISP that controls a block of IP addresses and not to the company or individual who is actually using that IP address.</p>

<p><strong>airsnort</strong>: When you need to connect to an encrypted network but do not have the encryption key, <a href="http://airsnort.shmoo.com/">AirSnort</a> can listen to traffic for a period of time and determine the key.</p>

<p><strong>nmap</strong> is a network exporation tool and security scanner. Lots of options. The -sT option is especially useful for detecting “open ports” that represent potential entry paths for invaders and the results of this scan may indicate unnecessary services you want to shut down or unnecessary permissions in your firewall.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example: scan a local address for open ports
	nmap -sT 192.168.1.1

Example: looks for hosts on a network
	nmap -sP 172.16.1.1-127
</code></pre></div></div>

<p><strong><a href="http://netdisco.org/">Netdisco</a></strong> is an open source web-based network management tool. It’s quite complex and I mention it here only as a suggestion if you’re looking for network discovery software.</p>

<p><strong>nmblookup</strong>, <strong>smbstatus</strong> and <strong>findsmb</strong> are utilities for diagnosing and establishing Samba connections to Windoze systems. They are described earlier in this document.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">How to integrate WiFi support into the SBNB bridge-based networking setup</title><link href="https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup/" rel="alternate" type="text/html" title="How to integrate WiFi support into the SBNB bridge-based networking setup" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T09:14:14+00:00</updated><id>https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup</id><content type="html" xml:base="https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup/"><![CDATA[<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># sbnb-configure-networking.sh (Revised)</span>
<span class="c"># Configures host networking for SBNB, dynamically detecting and supporting</span>
<span class="c"># the first available Ethernet and/or WiFi interface.</span>
<span class="c"># Creates a bridge interface (br0) and attaches detected interfaces.</span>
<span class="c"># Includes WPA Supplicant setup for WiFi.</span>
<span class="c"># Aims for idempotency and provides informative output.</span>
<span class="c">#</span>
<span class="c"># To integrate with SBNB, this script can be added to the ESP partition</span>
<span class="c"># as sbnb-cmds.sh during the SBNB installation process.</span>

<span class="c"># --- Configuration Variables ---</span>
<span class="c"># Adjust if wpa_supplicant is elsewhere or a different group is needed</span>
<span class="nv">WPA_SUPPLICANT_PATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">command</span> <span class="nt">-v</span> wpa_supplicant<span class="si">)</span>
<span class="nv">WPA_CTRL_GROUP</span><span class="o">=</span><span class="s2">"wheel"</span> <span class="c"># Common groups: wheel, netdev. Verify for your system.</span>
<span class="nv">WPA_CONF_DIR</span><span class="o">=</span><span class="s2">"/etc/wpa_supplicant"</span>
<span class="nv">NETWORKD_CONF_DIR</span><span class="o">=</span><span class="s2">"/etc/systemd/network"</span>

<span class="c"># Exit on error, treat unset variables as errors, and ensure pipelines fail on error</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="c"># --- Helper Functions ---</span>
log_info<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[INFO] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

log_warn<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[WARN] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

log_error<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[ERROR] </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">exit </span>1
<span class="o">}</span>

<span class="c"># Function to safely restart or reload systemd services</span>
manage_service<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">action</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="c"># e.g., restart, reload, enable</span>
    <span class="nb">local </span><span class="nv">service</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
    log_info <span class="s2">"Attempting to </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">..."</span>
    <span class="nb">set</span> +e <span class="c"># Temporarily disable exit on error</span>
    systemctl <span class="s2">"</span><span class="nv">$action</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
    <span class="nb">local </span><span class="nv">status</span><span class="o">=</span><span class="nv">$?</span>
    <span class="nb">set</span> <span class="nt">-e</span> <span class="c"># Re-enable exit on error</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$status</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_warn <span class="s2">"Command 'systemctl </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">' failed with status </span><span class="nv">$status</span><span class="s2">. Check logs ('journalctl -u </span><span class="nv">$service</span><span class="s2">')."</span>
    <span class="k">else
        </span>log_info <span class="s2">"Successfully executed 'systemctl </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">'."</span>
    <span class="k">fi
    return</span> <span class="nv">$status</span>
<span class="o">}</span>

<span class="c"># --- Main Configuration Logic ---</span>
configure_host_networking<span class="o">()</span> <span class="o">{</span>
    log_info <span class="s2">"Starting SBNB network configuration..."</span>

    <span class="c"># Check prerequisites</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$WPA_SUPPLICANT_PATH</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_error <span class="s2">"wpa_supplicant command not found. Please install it."</span>
    <span class="k">fi
    </span><span class="nb">command</span> <span class="nt">-v</span> ip <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'ip' command not found (iproute2 package?)."</span>
    <span class="nb">command</span> <span class="nt">-v</span> <span class="nb">awk</span> <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'awk' command not found."</span>
    <span class="nb">command</span> <span class="nt">-v</span> <span class="nb">cut</span> <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'cut' command not found."</span>

    <span class="c"># Ensure configuration directories exist</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$NETWORKD_CONF_DIR</span><span class="s2">"</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$WPA_CONF_DIR</span><span class="s2">"</span>

    <span class="c"># --- Bridge Configuration (br0) ---</span>
    <span class="nb">local </span><span class="nv">bridge_netdev_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.netdev"</span>
    <span class="nb">local </span><span class="nv">bridge_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.network"</span>
    <span class="nb">local </span><span class="nv">bridge_link_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.link"</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$bridge_netdev_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"Bridge br0 configuration files already exist. Skipping bridge creation."</span>
    <span class="k">else
        </span>log_info <span class="s2">"Creating bridge br0 configuration files..."</span>
        <span class="c"># systemd-networkd processes files in lexical order. Prefixes ensure correct ordering.</span>
        <span class="c"># 25-* files define the bridge device and its network settings.</span>
        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_netdev_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[NetDev]
Name=br0
Kind=bridge
</span><span class="no">EOF

</span>        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=br0

[Network]
DHCP=yes
# If static IP is needed, comment DHCP=yes and uncomment below:
# Address=192.168.1.100/24
# Gateway=192.168.1.1
# DNS=1.1.1.1
# DNS=8.8.8.8
</span><span class="no">EOF

</span>        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_link_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
# Match based on the interface name generated by the .netdev file
OriginalName=br0

[Link]
# MACAddressPolicy=none: Prevent systemd-networkd from assigning a potentially
# unstable MAC based on the bridge name. The bridge will use the MAC of the
# first enslaved interface or remain 00:00:00:00:00:00 until an interface joins.
MACAddressPolicy=none
</span><span class="no">EOF
</span>        log_info <span class="s2">"Bridge br0 configuration files created."</span>
    <span class="k">fi</span>

    <span class="c"># --- Ethernet Interface Configuration ---</span>
    <span class="c"># Find the first available Ethernet interface</span>
    <span class="nv">ETH_INTERFACE</span><span class="o">=</span><span class="si">$(</span>ip <span class="nt">-o</span> <span class="nb">link </span>show <span class="nb">type </span>ether | <span class="nb">awk</span> <span class="s1">'NR==1{print $2}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$ETH_INTERFACE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"Ethernet interface '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' detected."</span>
        <span class="nb">local </span><span class="nv">eth_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/30-</span><span class="k">${</span><span class="nv">ETH_INTERFACE</span><span class="k">}</span><span class="s2">-br0.network"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$eth_network_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Configuring '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' to join bridge br0..."</span>
            <span class="c"># 30-* file attaches the physical interface to the bridge.</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$eth_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=</span><span class="k">${</span><span class="nv">ETH_INTERFACE</span><span class="k">}</span><span class="sh">

[Network]
Bridge=br0
</span><span class="no">EOF
</span>        <span class="k">else
            </span>log_info <span class="s2">"Configuration for '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' already exists."</span>
        <span class="k">fi
    else
        </span>log_info <span class="s2">"No active Ethernet interface detected."</span>
    <span class="k">fi</span>

    <span class="c"># --- WiFi Interface Configuration ---</span>
    <span class="c"># Find the first available WiFi interface</span>
    <span class="nv">WIFI_INTERFACE</span><span class="o">=</span><span class="si">$(</span>ip <span class="nt">-o</span> <span class="nb">link </span>show <span class="nb">type </span>wlan | <span class="nb">awk</span> <span class="s1">'NR==1{print $2}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"WiFi interface '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' detected."</span>
        log_info <span class="s2">"Note: Ensure necessary WiFi drivers and firmware are loaded for '</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">'."</span>
        log_info <span class="s2">"Check 'dmesg | grep -i firmware' or 'lspci/lsusb' output if issues arise."</span>

        <span class="nb">local </span><span class="nv">wpa_conf_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WPA_CONF_DIR</span><span class="k">}</span><span class="s2">/wpa_supplicant-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.conf"</span>
        <span class="nb">local </span><span class="nv">wpa_service_file</span><span class="o">=</span><span class="s2">"/etc/systemd/system/wpa_supplicant@</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.service"</span>
        <span class="nb">local </span><span class="nv">wifi_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/35-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">-br0.network"</span>

        <span class="c"># Create WPA Supplicant configuration template if not present</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Creating WPA Supplicant configuration template at </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2">..."</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
# Configuration for </span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh"> managed by wpa_supplicant
ctrl_interface=/run/wpa_supplicant
ctrl_interface_group=</span><span class="k">${</span><span class="nv">WPA_CTRL_GROUP</span><span class="k">}</span><span class="sh">
update_config=1

network={
    ssid="YOUR_WIFI_SSID"
    psk="YOUR_WIFI_PASSWORD"
    key_mgmt=WPA-PSK
    # --- Example for WPA2/WPA3 Personal (SAE - optional) ---
    # Adjust key_mgmt as needed, e.g., key_mgmt=WPA-PSK WPA-PSK-SHA256 SAE
    # psk= can be replaced by a passphrase= for WPA3 SAE if supported
    # --- Example for WPA Enterprise (EAP-PEAP/MSCHAPv2) ---
    # For enterprise networks, comment out psk= and key_mgmt= above
    # and add appropriate settings like below (adjust as needed):
    # proto=RSN WPA
    # key_mgmt=WPA-EAP
    # pairwise=CCMP TKIP
    # group=CCMP TKIP
    # eap=PEAP
    # identity="your_username"
    # password="your_password"
    # phase1="peaplabel=0"
    # phase2="auth=MSCHAPV2"
}
</span><span class="no">EOF
</span>            <span class="nb">chmod </span>600 <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span>
            log_warn <span class="s2">"IMPORTANT: Edit </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2"> with your actual WiFi credentials."</span>
        <span class="k">else
            </span>log_info <span class="s2">"WPA Supplicant configuration already exists at </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2">."</span>
        <span class="k">fi</span>

        <span class="c"># Configure wlan interface to join bridge br0</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wifi_network_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Configuring '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' to join bridge br0..."</span>
            <span class="c"># 35-* file attaches the WiFi interface to the bridge.</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wifi_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">

[Network]
Bridge=br0
</span><span class="no">EOF
</span>        <span class="k">else
            </span>log_info <span class="s2">"Network configuration for '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' already exists."</span>
        <span class="k">fi</span>

        <span class="c"># Create systemd service for WPA Supplicant if not present</span>
        <span class="nb">local </span><span class="nv">wpa_service_name</span><span class="o">=</span><span class="s2">"wpa_supplicant@</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.service"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wpa_service_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Creating systemd service file for </span><span class="k">${</span><span class="nv">wpa_service_name</span><span class="k">}</span><span class="s2">..."</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wpa_service_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Unit]
Description=WPA Supplicant daemon for </span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">
Requires=sys-subsystem-net-devices-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">.device
After=sys-subsystem-net-devices-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">.device
Before=network.target
Wants=network.target

[Service]
Type=simple
ExecStart=</span><span class="k">${</span><span class="nv">WPA_SUPPLICANT_PATH</span><span class="k">}</span><span class="sh"> -c</span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="sh"> -i</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">
Restart=on-failure
RestartSec=1

[Install]
WantedBy=multi-user.target
</span><span class="no">EOF
</span>            systemctl daemon-reload
            manage_service <span class="s2">"enable"</span> <span class="s2">"</span><span class="nv">$wpa_service_name</span><span class="s2">"</span>
        <span class="k">else
            </span>log_info <span class="s2">"Systemd service file for </span><span class="k">${</span><span class="nv">wpa_service_name</span><span class="k">}</span><span class="s2"> already exists."</span>
        <span class="k">fi</span>
        <span class="c"># Always try to restart WPA supplicant if WiFi interface is detected and configured</span>
        manage_service “restart” “<span class="nv">$wpa_service_name</span>”

    <span class="k">else
        </span>log_info “No active WiFi interface detected.”
    <span class="k">fi</span>

    <span class="c"># — Apply Network Configuration —</span>
    log_info “Applying network configuration changes...”
    <span class="c"># Use ‘networkctl reload’ which is often sufficient and less disruptive than restarting the whole service</span>
    networkctl reload <span class="o">||</span> manage_service “restart” “systemd-networkd.service”

    log_info “SBNB network configuration script finished.”
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> “<span class="nv">$WIFI_INTERFACE</span>” <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> “<span class="nv">$wpa_conf_file</span>”.edited <span class="o">]</span><span class="p">;</span> <span class="k">then
         </span>log_warn “Remember to edit ‘<span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span>’ with your WiFi credentials <span class="k">if </span>you haven’t already.”
         <span class="c"># Simple flag to avoid repeating the warning on subsequent runs</span>
         <span class="nb">touch</span> “<span class="nv">$wpa_conf_file</span>”.edited <span class="o">&gt;</span> /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="nb">true
    </span><span class="k">fi</span>
<span class="o">}</span>

<span class="c"># — Execute Main Logic —</span>
configure_host_networking
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Live Raizo - API_Add-to-GNS3.sh</title><link href="https://ib.bsb.br/live-raizo-api-add-to-gns3sh/" rel="alternate" type="text/html" title="Live Raizo - API_Add-to-GNS3.sh" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T15:15:49+00:00</updated><id>https://ib.bsb.br/live-raizo-api_add-to-gns3sh</id><content type="html" xml:base="https://ib.bsb.br/live-raizo-api-add-to-gns3sh/"><![CDATA[<h2 id="explanations">Explanations</h2>

<ul>
  <li><strong>Add-to-GNS3.sh</strong> : API who uses a disk files from QEmu/Docker/Dynamips/VirtualBox to create VM and to add them to GNS3</li>
</ul>

<hr />

<h2 id="load-the-api">Load the API</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source/opt/raizo/api/Add-to-GNS3.sh
</code></pre></div></div>

<hr />

<h2 id="generic-functions">Generic Functions</h2>

<h2 id="vm">VM</h2>

<h3 id="modify-configvm">Modify-ConfigVM</h3>

<p>To modify the created config of VM</p>

<ul>
  <li>Modify-ConfigVM 1 2 3
    <ul>
      <li>1 : Name of file returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmdocker">Create-VMDocker</a></li>
      <li>2 : Name of the parameter to change</li>
      <li>3 : New value of the parameter to change</li>
    </ul>
  </li>
</ul>

<h3 id="add-configvm-to-gns3">Add-ConfigVM-to-GNS3</h3>

<p>To add config of VM to GNS3</p>

<ul>
  <li>Add-ConfigVM-to-GNS3 1
    <ul>
      <li>1 : Name of file returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a></li>
    </ul>
  </li>
</ul>

<p>You must create the md5sum file of the hard disk before to call Add-ConfigVM-to-GNS3</p>

<h2 id="network">Network</h2>

<h3 id="create-networkconfig">Create-NetworkConfig</h3>

<p>To create a specific network configuration</p>

<ul>
  <li>Create-NetworkConfig 1 2 3
    <ul>
      <li>1 : Number of network card</li>
      <li>2 : Template (example : enp0s)</li>
      <li>3 : Type (example : e1000)</li>
    </ul>
  </li>
  <li>Type : the value must be in $TYPES_NETWORK_CARD<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “e1000”, “i82550”, “i82551”, “i82557a”, “i82557b”, “i82557c”, “i82558a”, “i82558b”, “i82559a”, “i82559b”, “i82559c”, “i82559er”, “i82562”, “i82801”, “ne2k_pci”, “pcnet”, “rtl8139”, “virtio-net-pci”</li>
</ul>

<h3 id="modify-networkconfig">Modify-NetworkConfig</h3>

<p>To modify a specific network configuration created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a></p>

<ul>
  <li>Modify-NetworkConfig 1 2 3 4
    <ul>
      <li>1 : File with config of Network Interfaces (returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a>)</li>
      <li>2 : The network card number : 0 1 …</li>
      <li>3 : Field to modify : examples : port_name / adapter_type</li>
      <li>4 : New value of the field</li>
    </ul>
  </li>
</ul>

<h3 id="add-networkconfig-to-vm">Add-NetworkConfig-to-VM</h3>

<p>To add a specific network configuration created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a> to a VM config created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmdocker">Create-VMDocker</a></p>

<ul>
  <li>Add-NetworkConfig-to-VM 1 2
    <ul>
      <li>1 : File with config of New VM</li>
      <li>2 : File with config of Network Interfaces (returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a>)</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="qemu">QEmu</h2>

<h2 id="global-variables">Global Variables</h2>

<h3 id="to-change-parameter-of-commands">To change parameter of commands</h3>

<ul>
  <li>TYPE_HARD_DISK : To change the type of the hard disk of VM
    <ul>
      <li>Possibles values in $TYPES_HARD_DISK<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “ide”, “sata”, “scsi”, “sd”, “mtd”, “floppy”, “pflash”, “virtio”, “none”</li>
      <li>Default value in variable : DEFAULT_TYPE_HARD_DISK</li>
      <li>( Default value : sata )</li>
    </ul>
  </li>
  <li>TYPE_NETWORK_CARD : To change the type of the network interfaces of VM
    <ul>
      <li>Possibles values in $TYPES_NETWORK_CARD<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “e1000”, “i82550”, “i82551”, “i82557a”, “i82557b”, “i82557c”, “i82558a”, “i82558b”, “i82559a”, “i82559b”, “i82559c”, “i82559er”, “i82562”, “i82801”, “ne2k_pci”, “pcnet”, “rtl8139”, “virtio-net-pci”</li>
      <li>Default value in variable : DEFAULT_TYPE_NETWORK_CARD</li>
      <li>( Default value : e1000 )</li>
    </ul>
  </li>
  <li>SYMBOL_QEMU : To change the default symbol of the QEmu device in GNS3
    <ul>
      <li>Default value in variable : DEFAULT_SYMBOL_QEMU</li>
      <li>( Default value : /symbols/qemu_guest.svg )</li>
    </ul>
  </li>
  <li>
    <p>OPTION_QEMU : Option to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> : To add options to the QEmu VM</p>

    <ul>
      <li>Default value in variable : DEFAULT_OPTION_QEMU</li>
      <li>( default value : “” )</li>
      <li>Use also the read-only variables :
        <ul>
          <li>OPTION_QEMU_9P_HOSTHOME : configure the share of /home/user with the 9P protocol.</li>
          <li>OPTION_QEMU_VWIFI : configure the VHOST protocol used by vwifi-client of <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>if a variable is unset, the functions initialise it to this default value.</li>
</ul>

<h3 id="to-test-the-success-of-the-commands">To test the success of the commands</h3>

<ul>
  <li>When the commands failed because the parameters used are incorrects
    <ul>
      <li>FAST_ERROR_RAIZO is set to a value different of zero</li>
      <li>FAST_ERROR_RAIZO_LOG contains the message error</li>
    </ul>
  </li>
</ul>

<h2 id="functions">Functions</h2>

<h3 id="create-vmqemu">Create-VMQEmu</h3>

<p>To create the configuration of a Qemu VM</p>

<ul>
  <li>Create-VMQEmu 1 2 3 4 5 [6] [7] [8] [9]
    <ul>
      <li>1 : Name Of VM in GNS3</li>
      <li>2 : Number of network card</li>
      <li>3 : Size of Memory in MB</li>
      <li>4 : Type of Access : telnet / spice / spice+agent / vnc / none</li>
      <li>5 : Shutdown by ACPI : true / false</li>
      <li>6 : If exist, path of the disk file 1</li>
      <li>7 : If exist, path of the disk file 2</li>
      <li>8 : If exist, path of the disk file 3</li>
      <li>9 : If exist, path of the disk file 4</li>
    </ul>
  </li>
</ul>

<p>This function returns the name of the temporary file to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#add-configvm-to-gns3">Add-ConfigVM-to-GNS3</a></p>

<h2 id="examples"><em>Examples</em></h2>

<h3 id="windows-server-2019">Windows Server 2019</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

# Windows Server 2019

SYMBOL_QEMU="/symbols/raizo/microsoft_server.svg"

# On Processor AMD Ryzen, you should perhaps add :
# OPTION_QEMU="-cpu pentium2"

ConfigVM=$(Create-VMQEmuWin201912048spicefalse"${DIR_VDI}/windows-2019-server.vhd")
if[-n"${ConfigVM}"]
then
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<h3 id="windows-10">Windows 10</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

SYMBOL_QEMU="/symbols/raizo/microsoft_guest.svg"

# On Processor AMD Ryzen, you should perhaps add :
# OPTION_QEMU="-cpu pentium2"

ConfigVM=$(Create-VMQEmuWin1011024spicefalse"${DIR_VDI}/windows-10.vdi")
if[-n"${ConfigVM}"]
then
NetworkConfig=$(Create-NetworkConfig1"loc-area-con-"e1000)
Modify-NetworkConfig"${NetworkConfig}"0port_name"loc-area-con-2"
Add-NetworkConfig-to-VM"${ConfigVM}""${NetworkConfig}"

Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<h3 id="kali-linux">Kali Linux</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

SYMBOL_QEMU="/symbols/raizo/hacker.svg"

TYPE_HARD_DISK="IDE"

# OPTION_QEMU_9P_HOSTHOME : Use 9P to share /home/user via hosthome : mount -t 9p hosthome /mnt
# OPTION_QEMU_VWIFI : To use the virtual wifi after installing and running vwifi-client from https://github.com/Raizo62/vwifi
OPTION_QEMU="${OPTION_QEMU_9P_HOSTHOME}${OPTION_QEMU_VWIFI}"

ConfigVM=$(Create-VMQEmuKaliLinux21024spicefalse"${DIR_VDI}/linux-kali-2022.3-amd64.vmdk")
if[-n"${ConfigVM}"]
then
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi

unsetTYPE_HARD_DISKOPTION_QEMUSYMBOL_QEMU
</code></pre></div></div>

<h3 id="asa">ASA</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

TYPE_HARD_DISK='ide'
SYMBOL_QEMU='/symbols/asa.svg'
OPTION_QEMU='-no-kvm -icount auto'

ConfigVM=$(Create-VMQEmuASA61024telnetfalse"${DIR_VDI}/ASA/FLASH")
if[-n"${ConfigVM}"]
then
Modify-ConfigVM"${ConfigVM}"initrd"${DIR_VDI}/ASA/asa842-initrd.gz"
Modify-ConfigVM"${ConfigVM}"kernel_command_line'ide_generic.probe_mask=0x01 ide_core.chs=0.0:980,16,32 auto nousb console=ttyS0,9600 bigphysarea=65536 ide1=noprobe no-hlt -net nic'
Modify-ConfigVM"${ConfigVM}"kernel_image"${DIR_VDI}/ASA/asa842-vmlinuz"
Modify-ConfigVM"${ConfigVM}"port_name_format'GigaEthernet{0}'

Modify-ConfigVM"${ConfigVM}"category'firewall'

Add-ConfigVM-to-GNS3"${ConfigVM}"
fi

unsetTYPE_HARD_DISKOPTION_QEMUSYMBOL_QEMU
</code></pre></div></div>

<hr />

<h2 id="docker">Docker</h2>

<h2 id="global-variables-1">Global Variables</h2>

<h3 id="to-change-parameter-of-commands-1">To change parameter of commands</h3>

<ul>
  <li>
    <p>SYMBOL_DOCKER : To change the default symbol of the Docker device in GNS3</p>

    <ul>
      <li>Default value in variable : DEFAULT_SYMBOL_DOCKER</li>
      <li>( Default value : /symbols/docker_guest.svg )</li>
    </ul>
  </li>
  <li>
    <p>if you unset a variable, the functions initialise it to this default value.</p>
  </li>
</ul>

<h3 id="to-test-the-success-of-the-commands-1">To test the success of the commands</h3>

<ul>
  <li>When the commands failed because the parameters used are incorrects
    <ul>
      <li>FAST_ERROR_RAIZO is set to a value different of zero</li>
      <li>FAST_ERROR_RAIZO_LOG contains the message error</li>
    </ul>
  </li>
</ul>

<h2 id="functions-1">Functions</h2>

<h3 id="add-persistentfolder-to-vmdocker">Add-PersistentFolder-to-VMDocker</h3>

<p>To add a folder to the list of persistent folders of the Docker VM</p>

<ul>
  <li>Add-PersistentFolder-to-VMDocker 1 2
    <ul>
      <li>1 : File with config of New VM</li>
      <li>2 : Name of folder to set persistent</li>
    </ul>
  </li>
</ul>

<h3 id="create-vmdocker">Create-VMDocker</h3>

<p>To create the configuration of a Docker VM</p>

<ul>
  <li>Create-VMDocker 1 2 3 4
    <ul>
      <li>1 : Name Of VM in GNS3</li>
      <li>2 : Name of the Docker Image</li>
      <li>3 : Number of network card</li>
      <li>4 : Type of Access : telnet / http / https / vnc / none</li>
    </ul>
  </li>
</ul>

<p>This function returns the name of the temporary file to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#add-configvm-to-gns3">Add-ConfigVM-to-GNS3</a></p>

<h2 id="examples-1"><em>Examples</em></h2>

<h3 id="alpine">Alpine</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

# alpine :

dockerpullalpine

SYMBOL_DOCKER="/symbols/computer.svg"

ConfigVM=$(Create-VMDockeralpine"alpine:latest"1telnet)
if[-n"${ConfigVM}"]
then
Add-PersistentFolder-to-VMDocker"${ConfigVM}""/etc/ssl"
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<hr />

<h2 id="dynamips">Dynamips</h2>

<h2 id="examples-2"><em>Examples</em></h2>

<h3 id="cisco-c7200">Cisco C7200</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

cat&gt;"c7200.gns3"&lt;&lt;EOF
        {
            "name": "c7200",
            "default_name_format": "R{0}",
            "usage": "ConsoleType=Cisco",
            "image": "c7200-advipservicesk9-mz.152-4.S5.bin",
            "symbol": ":/symbols/router.svg",
            "category": "router",
            "startup_config": "/opt/raizo/user/Config/GNS3/configs/Raizo_ios_base_startup-config.txt",
            "private_config": "",
            "console_type": "telnet",
            "console_auto_start": false,
            "platform": "c7200",
            "idlepc": "0x62cf0330",
            "idlemax": 500,
            "idlesleep": 30,
            "exec_area": 64,
            "mmap": true,
            "sparsemem": true,
            "ram": 512,
            "nvram": 512,
            "mac_addr": "",
            "disk0": 0,
            "disk1": 0,
            "auto_delete_disks": true,
            "system_id": "FTX0945W0MY",
            "compute_id": "local",
            "slot0": "C7200-IO-FE",
            "slot1": "PA-2FE-TX",
            "slot2": "",
            "slot3": "",
            "slot4": "",
            "slot5": "",
            "slot6": "",
            "midplane": "vxr",
            "npe": "npe-400",
            "template_id": "8b3b55a3-3644-4fc9-a494-b525165a2603",
            "template_type": "dynamips",
            "builtin": false
        }
EOF
cp"c7200.gns3"/tmp/c7200.gns3

Add-ConfigVM-to-GNS3/tmp/c7200.gns3
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Live Raizo - Commands</title><link href="https://ib.bsb.br/live-raizo-commands/" rel="alternate" type="text/html" title="Live Raizo - Commands" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T15:21:20+00:00</updated><id>https://ib.bsb.br/live-raizo-commands</id><content type="html" xml:base="https://ib.bsb.br/live-raizo-commands/"><![CDATA[<h2 id="network">Network</h2>

<h2 id="fast-ip">fast-ip</h2>

<ul>
  <li>Configuration of IP address and eventually the gateway.</li>
  <li>fast-ip, fast-dhcp and fast-dns used together enable to setup a dynamic DNS.</li>
  <li>When it sets an interface to vlan, the mother of the interface (if it was down) is set to “manual” mode</li>
  <li>To use it, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis"><em>Synopsis</em></h3>

<ul>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] IP-ADDRESS/NET-MASK [IP-GATEWAY]</li>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] dhcp</li>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] manual</li>
</ul>

<h3 id="examples"><em>Examples</em></h3>

<ul>
  <li>fast-ip 172.16.40.17/24
    <ul>
      <li>enp1s0 : 172.16.40.17/24</li>
    </ul>
  </li>
  <li>fast-ip 1 172.16.40.17/24
    <ul>
      <li>enp1s1 : 172.16.40.17/24</li>
    </ul>
  </li>
  <li>fast-ip 2 172.16.40.17/24 172.16.40.254
    <ul>
      <li>enp1s2 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip 3 dhcp
    <ul>
      <li>enp1s3 requests an IP to a DHCP server</li>
    </ul>
  </li>
  <li>fast-ip 0.10 172.16.40.17/24 172.16.40.254
    <ul>
      <li>vlan 10 on enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip virbr0 172.16.40.17/24 172.16.40.254
    <ul>
      <li>virbr0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip enp1s0.10 172.16.40.17/24 172.16.40.254
    <ul>
      <li>vlan 10 on enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
      <li>if enp1s0 was down, enp1s0 is set to manual mode</li>
    </ul>
  </li>
  <li>fast-ip 0:1 172.16.40.17/24 172.16.40.254
    <ul>
      <li>sub interface 1 of enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-dhcp">fast-dhcp</h2>

<ul>
  <li>Configuration of a DHCP server based on the IP address of the server.</li>
  <li>fast-dhcp configures the dnsmasq server</li>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-ip">fast-ip</a>, fast-dhcp and <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dns">fast-dns</a> used together enable to setup a dynamic DNS.</li>
  <li>You can change the default domain (domain.lan.) used by fast-dhcp and <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dns">fast-dns</a> by
    <ul>
      <li>modifying the variable FAST_DOMAIN in /opt/raizo/etc/fast.conf</li>
      <li>exporting the variable FAST_DOMAIN :</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportFAST_DOMAIN="yournewdomain.org"
</code></pre></div></div>

<ul>
  <li>To use fast-dhcp, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis-1"><em>Synopsis</em></h3>

<ul>
  <li>fast-dhcp [-g] [-d] [INTERFACE-NAME]INTERFACE-NUMBER[:SUB-INTERFACE][.VLAN-NUMBER] [IP-DNS]
    <ul>
      <li>-g : the dhcp server doesn’t propagate the gateway</li>
      <li>-d : the dhcp server doesn’t propagate the DNS</li>
    </ul>
  </li>
</ul>

<p>By default :</p>

<ul>
  <li>IP-DNS is IP address of nameserver found in /etc/resolv.conf. If it doesn’t find it, it uses the IP address of INTERFACE-NUMBER</li>
  <li>The default gateway of dhcp clients is the default gateway of the network of chosen interface, or IP address of INTERFACE-NUMBER</li>
</ul>

<h3 id="examples-1"><em>Examples</em></h3>

<ul>
  <li>fast-dhcp 2 172.16.4.3
    <ul>
      <li>if IP address of enp1s2 is 192.168.33.17
        <ul>
          <li>create pool of IP addresses : 192.168.33.[10,100]/24</li>
          <li>gateway of dhcp clients can be 192.168.33.17</li>
          <li>DNS of dhcp clients will be 172.16.4.3</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>fast-dhcp enp1s2
    <ul>
      <li>if IP address of enp1s2 is 192.168.33.17
        <ul>
          <li>create pool of IP addresses : 192.168.33.[10,100]/24</li>
          <li>gateway of dhcp clients can be 192.168.33.254</li>
          <li>DNS of dhcp clients will be 192.168.33.17</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-dns">fast-dns</h2>

<ul>
  <li>Configuration of a DNS server.</li>
  <li>fast-dns configures the dnsmasq server</li>
  <li>if name is not ended by a dot, fast-dns adds to name the default domain (domain.lan.)</li>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-ip">fast-ip</a>, <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dhcp">fast-dhcp</a> and fast-dns used together enable to setup a dynamic DNS.</li>
  <li>You can change the default domain (domain.lan.) used by <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dhcp">fast-dhcp</a> and fast-dns by
    <ul>
      <li>modifying the variable FAST_DOMAIN in /opt/raizo/etc/fast.conf</li>
      <li>exporting the variable FAST_DOMAIN :</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportFAST_DOMAIN="yournewdomain.org"
</code></pre></div></div>

<ul>
  <li>To use fast-dns, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis-2"><em>Synopsis</em></h3>

<ul>
  <li>fast-dns NAME IP [NAME2 IP2 [NAME3 IP3 [NAME4 IP4…]]]
    <ul>
      <li>Creates a DNS server (if necessary), and adds the record for theirs IPs and theirs NAMEs</li>
    </ul>
  </li>
  <li>fast-dns dns
    <ul>
      <li>Clears the previous records of the DNS server and creates a new one.</li>
    </ul>
  </li>
</ul>

<h3 id="examples-2"><em>Examples</em></h3>

<ul>
  <li>fast-dns PC1 10.0.0.1
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1</li>
    </ul>
  </li>
  <li>fast-dns PC2.other.local<strong>.</strong> 10.0.0.2
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1 and PC2.other.local. has the IP 10.0.0.2</li>
    </ul>
  </li>
  <li>fast-dns PC3 10.0.0.3 PC4.other.local<strong>.</strong> 10.0.0.4
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1, PC2.other.local. has the IP 10.0.0.2, PC3.domain.lan. has the IP 10.0.0.3 and PC4.other.local. has the IP 10.0.0.4</li>
    </ul>
  </li>
  <li>fast-dns PC2.other.local<strong>.</strong> 10.0.0.4
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1, PC2.other.local. has the IP 10.0.0.4, PC3.domain.lan. has the IP 10.0.0.3 and PC4.other.local. has the IP 10.0.0.4</li>
    </ul>
  </li>
  <li>fast-dns dns
    <ul>
      <li>Reset records of the DNS server</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-rip">fast-rip</h2>

<ul>
  <li>RIPv2 router configuration for IPv4 and IPv6</li>
  <li>fast-rip configures the <a href="https://frrouting.org/">FRRouting</a> server</li>
  <li>To use it, you must be root or in the group “sudo”</li>
</ul>

<hr />

<h2 id="fast-proxy-on">fast-proxy-on</h2>

<ul>
  <li>Configure shell variables, sudo config and Docker to use the proxy</li>
  <li>Use configuration of /etc/resolv.conf to exclude networks from proxy</li>
  <li>By default, use the proxy “proxy:8080”</li>
  <li>if user is not root or in sudo group, fast-proxy-on does only the commands that doesn’t need to have root power</li>
</ul>

<h3 id="synopsis-3"><em>Synopsis</em></h3>

<ul>
  <li>fast-proxy-on [IP:PORT]
    <ul>
      <li>[IP:PORT] : use IP:PORT as proxy</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-proxy-off">fast-proxy-off</h2>

<ul>
  <li>Remove configuration of <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-proxy-on">fast-proxy-on</a></li>
  <li>if user is not root or in sudo group, fast-proxy-off does only the commands that doesn’t need to have root power</li>
</ul>

<hr />

<h2 id="fast-http">fast-http</h2>

<ul>
  <li>Start a web server on the port 80 and share a directory (by default : “/home/user”)</li>
  <li>CTRL+C to stop it</li>
</ul>

<h3 id="synopsis-4"><em>Synopsis</em></h3>

<ul>
  <li>fast-http [SharedFolder]
    <ul>
      <li>[SharedFolder] : the folder to share. By default : “/home/user”</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-vwifi">fast-vwifi</h2>

<h3 id="on-liveraizo">On LiveRaizo</h3>

<ul>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Virtual%20WIFI%20802.11/">Enable the virtual wifi 802.11</a></li>
  <li>Use and configure the program <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
  <li>The command must be start on LiveRaizo</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<ul>
  <li>fast-vwifi can’t be use in the same time as <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-wifi-docker">fast-wifi-docker</a></li>
</ul>

<h4 id="synopsis-5"><em>Synopsis</em></h4>

<ul>
  <li>fast-vwifi [NUMBER_WIFI_INTERFACE]
    <ul>
      <li>[NUMBER_WIFI_INTERFACE] : Number of wifi interfaces wlan must be created</li>
    </ul>
  </li>
</ul>

<h3 id="on-debian-vm">On Debian VM</h3>

<ul>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Virtual%20WIFI%20802.11/">Enable the virtual wifi 802.11</a></li>
  <li>Use and configure the program <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
  <li>The command must be start on each VM Debian</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
  <li>with the optional parameter “-s”, you set the IP of vwifi-server, and use the TCP protocol.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<h4 id="synopsis-6"><em>Synopsis</em></h4>

<ul>
  <li>fast-vwifi [NUMBER_WIFI_INTERFACE] -s [IP_SERVER]
    <ul>
      <li>[NUMBER_WIFI_INTERFACE] : Number of wifi interfaces wlan must be created ( &lt;= 10)</li>
      <li>-s [NUMBER_WIFI_INTERFACE] : Set the IP address of server and use the TCP protocol.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-wifi-docker">fast-wifi-docker</h2>

<ul>
  <li>Add a wlan interfaces to Docker VM</li>
  <li>The command must be start on LiveRaizo</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<ul>
  <li>fast-wifi-docker can’t be use in the same time as <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-vwifi">fast-vwifi</a></li>
</ul>

<h3 id="synopsis-7"><em>Synopsis</em></h3>

<ul>
  <li>fast-wifi-docker [-y] [-a] [-r] [-m] [-n Number] [-c NumberWlanToCreate] [NameOfVM1] [NameOfVM2] [NameOfVM3] [NameOfVM…]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>Y</td>
              <td>o</td>
              <td>O : don’t ask for confirmation from user to add wlan</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>A : select all the VMs</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-r</td>
              <td>R : set a random MAC address to wlan interfaces</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-m</td>
              <td>M : enable the monitor mode for wlan0 of LiveRaizo</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N Number : number of wlan interfaces by VM</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C NumberWlanToCreate : number of wlan interfaces to create, if it is not enough</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-3"><em>Examples</em></h3>

<ul>
  <li>fast-wifi-docker
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-wifi-docker ask for confirmation before to add a wlan interface to the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-wifi-docker do not ask for confirmation to add a wlan interface to the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-wifi-docker AP1
    <ul>
      <li>Ask for confirmation before to add a wlan interface to the Virtual Machine “AP1”.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y Client1
    <ul>
      <li>Add a wlan interface to the Virtual Machine “Client1”.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y PC1 PC2 Server5
    <ul>
      <li>Add a wlan interface to the Virtual Machines “PC1”, “PC2” and “Server5”</li>
    </ul>
  </li>
</ul>

<hr />

<hr />

<h2 id="system">System</h2>

<h2 id="fast-rescan-interfaces">fast-rescan-interfaces</h2>

<ul>
  <li>Scan to detect new plugged network interfaces, and update the files /etc/network/interfaces, history of Zsh/Bash</li>
</ul>

<hr />

<h2 id="fast-syslog">fast-syslog</h2>

<ul>
  <li>Displays in color the last 40 lines of the file /var/log/syslog</li>
</ul>

<hr />

<h2 id="fast-mount-usb">fast-mount-usb</h2>

<ul>
  <li>Mount the USB key in the directory /media/usb0. If /mnt/usb0 is already used, fast-mount-usb will use /mnt/usb1, etc</li>
</ul>

<h3 id="synopsis-8"><em>Synopsis</em></h3>

<ul>
  <li>fast-mount-usb [-q]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-q</td>
              <td>Q : quiet mode : show only the mounted point and the label</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-battery">fast-battery</h2>

<ul>
  <li>Display the percentage of energy remaining in the battery.
    <ul>
      <li>Try to bring the console windows to the front if percentage of energy remaining is less of 10%, and if the battery is detected and not charging</li>
    </ul>
  </li>
</ul>

<h3 id="synopsis-9"><em>Synopsis</em></h3>

<ul>
  <li>fast-battery [-i] [-t] [-p] [-u]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-i</td>
              <td>I : checks this percentage every 60 seconds and displays the changes</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : show this percentage in the title bar of xterm</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : do a pause before to stop the program</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-u</td>
              <td>U : test of utility. exit 0 only if usefull : battery detected</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-console-resize">fast-console-resize</h2>

<ul>
  <li>Recalculate the console size</li>
  <li>Useful with DDebian in Web-UI</li>
</ul>

<hr />

<hr />

<h2 id="laboratory">Laboratory</h2>

<h2 id="fast-save-project">fast-save-project</h2>

<ul>
  <li>Asks questions to save a GNS3 project</li>
</ul>

<h3 id="synopsis-10"><em>Synopsis</em></h3>

<ul>
  <li>fast-save-project [-h] [options]
    <ul>
      <li>-h : show usefull parameters of <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
      <li>[options] is totally used with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
    </ul>
  </li>
</ul>

<h3 id="steps"><em>Steps</em></h3>

<ol>
  <li>Show detected projects of GNS3 in /home/user/projects and ask which you want to save. For each project, it shows his current size.</li>
  <li>Launch <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-mount-usb">fast-mount-usb</a> to detect new usb keys connected</li>
  <li>Show destinations where to copy the backup of project
    <ul>
      <li>For each usb key, it shows the free space on the total space.</li>
    </ul>
  </li>
  <li>Do the backup with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
  <li>Run associated command with destination</li>
  <li>If destination is usb, ask to umount the usb key</li>
</ol>

<h3 id="your-own-commands"><em>Your own commands</em></h3>

<ul>
  <li>You can add your own destination and associated commands in /opt/raizo/etc/cmd-fast-save-project.conf</li>
  <li>Line is commented if it begins with #</li>
  <li>
    <p>Each line must be : <em>title</em> [<em>command</em> <em>options</em>]</p>

    <ul>
      <li>title : title shown by fast-save-project in the step where you must choose the destination</li>
      <li><em>command options</em> : if it is not empty, the command “<em>command options</em>” is launched after the backup</li>
      <li>In <em>command options</em>, use “%f” for name of archive</li>
    </ul>
  </li>
  <li>
    <p>You can use more functionality if title begins with “local:”, “net:” or “usb:”,</p>

    <ul>
      <li>local:<em>directory</em> : Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that <em>directory</em> exists</li>
      <li>net:<em>title</em> : Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that it has an IPv4 address</li>
      <li>usb:<em>mountPoint</em> :
        <ul>
          <li>Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that <em>mountPoint</em> is already mounted</li>
          <li>After the backup in <em>mountPoint</em>, fast-save-project asks if it musts unmount <em>mountPoint</em></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Example of /opt/raizo/etc/cmd-fast-save-project.conf</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Copy into /mnt/archive and ask to unmount /mnt/archive
usb:/mnt/archive
# Copy into /tmp and show details on archive
local:/tmpls-l%f
# Copy on the FTPs server : srvftp.domain.local
net:ftpsecho-n"Login : "&amp;&amp;readLOGIN&amp;&amp;lftp-u$LOGIN-e"set ftp:ssl-protect-data true ; put '%f'; exit"srvftp.domain.local
# Copy on the ssh server srvssh.domain.local
net:sshecho-n"Login : "&amp;&amp;readLOGIN&amp;&amp;scp%f${LOGIN}@srvssh.domain.local:
</code></pre></div></div>

<hr />

<h2 id="fast-backup-lab">fast-backup-lab</h2>

<ul>
  <li>Backup of the GNS3 project with configuration of GNS3, Qemu,….</li>
</ul>

<h3 id="synopsis-11"><em>Synopsis</em></h3>

<ul>
  <li>fast-backup-lab [-g] [-p] [-s] [-w] [-d] [-c] [-f] [-l] [-n] [-a] [-t] [-y] [DIRECTORY-PROJECT-GNS3] [DIRECTORY-DESTINATION]
    <ul>
      <li>Creates an archive of the directory “DIRECTORY-PROJECT-GNS3”. This archive is created in the directory “DIRECTORY-DESTINATION”</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-g</td>
              <td>G : exclude the configurations files of GNS3 from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : exclude the GNS3 project from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-s</td>
              <td>S : exclude the Startups files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>w</td>
              <td>W : exclude the backup of the vwifi’s state</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : ADD the Default config of devices</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C : ADD the Capture files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-f</td>
              <td>F : ADD the Firewall rules</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-l</td>
              <td>L : ADD the sysctl config</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N : ADD the network configuration</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>A : ADD the same as : -f -l -n</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : test only the config. Don’t create the archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>Y</td>
              <td>o</td>
              <td>O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-4"><em>Examples</em></h3>

<ul>
  <li>fast-backup-lab TP
    <ul>
      <li>Create an archive TP_backup_20130723_12_20_10.tar.xz</li>
    </ul>
  </li>
  <li>fast-backup-lab TP /media/usb0
    <ul>
      <li>Create an archive /media/usb0/TP_backup_20130723_12_23_05.tar.xz</li>
    </ul>
  </li>
  <li>fast-backup-lab -P<br />
+ Create an archive config_backup_20130723_12_29_43.tar.xz with only the configurations files</li>
</ul>

<hr />

<h2 id="fast-restore-lab">fast-restore-lab</h2>

<ul>
  <li>Restore a GNS3 project, which has been saved with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-save-project">fast-save-project</a></li>
  <li>By default, the GNS3 project is restored in the directory /home/user/projects</li>
  <li>fast-restore-lab refuses to restore a saved config of GNS3 if it is incompatible with the installed GNS3. This restriction can be bypassed with the “-g” option</li>
  <li>The existence of the “/opt/raizo/etc/disable_output_log.lock” file automatically activates the “-e” option</li>
</ul>

<h3 id="synopsis-12"><em>Synopsis</em></h3>

<ul>
  <li>fast-restore-lab [-g] [-p] [-s] [-w] [-d] [-c] [-f] [-l] [-n] [-v] BACKUP-PROJECT-GNS3
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-g</td>
              <td>G : don’t extract the configurations files of GNS3 from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : don’t extract the GNS3 project from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-s</td>
              <td>S : don’t extract the Startups files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>w</td>
              <td>W : exclude the startup of vwifi</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : exclude the Default config of devices</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C : exclude the Captured packets</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-f</td>
              <td>F : exclude the Firewall rules of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-l</td>
              <td>L : exclude the sysctl config of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N : don’t extract the network files of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-u</td>
              <td>U : use the current directory to receive the GNS3 project</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-e</td>
              <td>E : output only the error messages</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-v</td>
              <td>V : only verify if the current version of VMRaizo is compatible</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="example"><em>Example</em></h3>

<ul>
  <li>fast-restore-lab TP_backup_20130723_12_20_10.tar.xz
    <ul>
      <li>Restores files from the archive TP_backup_20130723_12_20_10.tar.xz</li>
    </ul>
  </li>
  <li>fast-restore-lab -s TP_backup_20130723_12_20_10.tar.xz
    <ul>
      <li>Restores files from the archive TP_backup_20130723_12_20_10.tar.xz, without restoring Startups files</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-reset-vm">fast-reset-vm</h2>

<ul>
  <li>Reset the QEmu devices :
    <ul>
      <li>The Hard Disks of the QEmu device return to their initials states</li>
    </ul>
  </li>
  <li>fast-reset-vm must be used when a project of GNS3 is open</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
</ul>

<h3 id="synopsis-13"><em>Synopsis</em></h3>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>fast-reset-vm [-a] [-y</td>
          <td>-o] [NAME-VM1] [NAME-VM2] [NAME-VM3] [NAME-VM…]</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>-A : Select all the VMs</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>-Y</td>
              <td>-o</td>
              <td>-O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>NAME-VM : reset only the VM “NAME-VM1”, “NAME-VM2”, “NAME-VM3”…</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>fast-reset-vm is case insensitive on the name “NAME-VM” if there are no doubt on the choose.</li>
</ul>

<h3 id="examples-5"><em>Examples</em></h3>

<ul>
  <li>fast-reset-vm
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-reset-vm ask for confirmation before to reset the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-reset-vm do not ask for confirmation to reset the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-reset-vm Router1
    <ul>
      <li>Ask for confirmation before to reset the Virtual Machine “Router1”.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y Server1
    <ul>
      <li>Reset the Virtual Machine “Server1”.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y PC1 PC2 Server5
    <ul>
      <li>Reset the Virtual Machines “PC1”, “PC2” and “Server5”</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-clean-crash-gns3">fast-clean-crash-gns3</h2>

<ul>
  <li>Kill all the processes used by GNS3 (in case of a crash for instance).</li>
</ul>

<h3 id="synopsis-14"><em>Synopsis</em></h3>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>fast-clean-crash-gns3 [-y</td>
          <td>-o] [-h]</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>-Y</td>
              <td>-o</td>
              <td>-O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-6"><em>Examples</em></h3>

<ul>
  <li>fast-clean-crash-gns3
    <ul>
      <li>Ask for confirmation before to kill all the processes used by GNS3.</li>
    </ul>
  </li>
  <li>fast-clean-crash-gns3 -Y
    <ul>
      <li>Kill all the processes used by GNS3.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-nat">fast-nat</h2>

<ul>
  <li>enable IP forwarding, configure an DHCP Server and an DNS Server and use NAT with packets coming out of the virbr0 interface</li>
</ul>

<h3 id="synopsis-15"><em>Synopsis</em></h3>

<ul>
  <li>fast-nat [-d] [-n] [-i] [-s] [IP-ADDRESS]
    <ul>
      <li>-d : disable the DHCP service</li>
      <li>-n : disable the DNS service</li>
      <li>-i : don’t run iptables rules</li>
      <li>-s : don’t start the sysctl config</li>
      <li>if virbr0 has an IP, and IP-ADDRESS is not defined, then fast-nat uses the IP of virbr0</li>
      <li>if virbr0 has no IP, and IP-ADDRESS is not defined, then fast-nat uses the IP 10.145.147.1</li>
      <li>if IP-ADDRESS is defined, then fast-nat uses this IP and modifies with it the IP of virbr0</li>
    </ul>
  </li>
</ul>

<h3 id="example-1"><em>Example</em></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-nat
*fast-ipvirbr010.145.147.1/24
+[/etc/network/interfaces:Addthenewconfigurationforvirbr0]
*sudoifupvirbr0
*fast-dnsdns
+[/etc/Raizo.dnsmasq.hosts:Createthefile]
+[/etc/dnsmasq.d/Raizo.DNS.conf:Configurationoftheserver]
*sudosystemctlstartdnsmasq
*sudosystemctlenablednsmasq
Synchronizingstateofdnsmasq.servicewithSysVservicescriptwith/lib/systemd/systemd-sysv-install.
Executing:/lib/systemd/systemd-sysv-installenablednsmasq
*fast-dhcpvirbr010.145.147.1
# Pool          : 10.145.147.[10,100]/24
# Gateway       : 10.145.147.1
# DNS           : 10.145.147.1
-----------------------------
*sudosystemctlstopdnsmasq
+[/etc/dnsmasq.d/Raizo.DHCP.conf:Addpool10.145.147.[10,100]/24]
*sudosystemctlstartdnsmasq
*sudosysctlnet.ipv4.ip_forward=1
net.ipv4.ip_forward=1
*sudoiptables-tmangle-IPREROUTING-ivirbr0-jMARK--set-mark0xd001
*sudoiptables-tnat-IPOSTROUTING-mmark--mark0xd001-jMASQUERADE
</code></pre></div></div>

<hr />

<h2 id="fast-vwifi-update-gns3">fast-vwifi-update-gns3</h2>

<ul>
  <li>
    <p>Update the server “vwifi” with the geographical coordinates of each VM from GNS3</p>
  </li>
  <li>
    <p>vwifi-server (<a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-vwifi">fast-vwifi</a>) must be started before</p>
  </li>
  <li>fast-vwifi-update-gns3 must be used when a project of GNS3 is open</li>
  <li>fast-vwifi-update-gns3 update only the coordinate of the VMs which use the VHOST protocol</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
</ul>

<hr />

<h2 id="fast-gns3-server">fast-gns3-server</h2>

<ul>
  <li>Start the gns3server.</li>
  <li>Without parameter, gnsserver is started in foreground. CTRL+C to stop it.</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
  <li>If gns3server is already started by gns3-gui, then gns3server becomes accessible from external IPs.</li>
</ul>

<h3 id="synopsis-16"><em>Synopsis</em></h3>

<ul>
  <li>fast-gns3-server [-r] [-s] [-d]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>r</td>
              <td>R : run the service gns3-server (sudo systemctl start gns3-server.service)</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>s</td>
              <td>S : stop the service gns3-server (sudo systemctl stop gns3-server.service)</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : display if gns3server is running</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="add-to-gns3sh"><a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/">Add-to-GNS3.sh</a></h2>

<hr />

<hr />

<h2 id="update">Update</h2>

<h2 id="fast-startup">fast-startup</h2>

<ul>
  <li>Mount automatically the USB key in /media/usb0 (or usb1, usb2..) and processes the script /media/usb0/raizo.sh.</li>
</ul>

<h3 id="synopsis-17"><em>Synopsis</em></h3>

<ul>
  <li>
    <p>fast-startup [NAME-SCRIPT]</p>

    <ul>
      <li>By default, NAME-SCRIPT is raizo.sh. NAME-SCRIPT will always be lowercase before downloading.</li>
      <li>You can modify default values in the file /opt/raizo/etc/fast-startup.conf</li>
      <li>Your script raizo.sh (or NAME-SCRIPT) can affect a value different of zero at the variable FAST_ERROR_RAIZO to indicate an error at fast-startup. You can use the variable FAST_ERROR_RAIZO_LOG to indicate also a message</li>
      <li>You can use the variable MOUNT_KEY to know where the usb key is mounted</li>
    </ul>
  </li>
</ul>

<h3 id="examples-7"><em>Examples</em></h3>

<ul>
  <li>fast-startup
    <ul>
      <li>Mount automatically the USB key in /media/usb0 and processes the script /media/usb0/raizo.sh.</li>
    </ul>
  </li>
  <li>fast-startup US
    <ul>
      <li>Mount automatically the USB key in /media/usb0 and processes the script /media/usb0/us.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-update">fast-update</h2>

<ul>
  <li>Download the file on a web server and processes it.</li>
</ul>

<h3 id="synopsis-18"><em>Synopsis</em></h3>

<ul>
  <li>
    <p>fast-update [-s WEB-SERVER] [NAME-SCRIPT]</p>

    <ul>
      <li>By default, NAME-SCRIPT is raizo.sh. NAME-SCRIPT will always be lowercase before downloading.</li>
      <li>By default, WEB-SERVER is UpdateRaizo.</li>
      <li>You can modify the default values in the file /opt/raizo/etc/fast-startup.conf</li>
      <li>Your script raizo.sh (or NAME-SCRIPT) can affect a value different of zero at the variable FAST_ERROR_RAIZO to indicate an error at fast-update. You can use the variable FAST_ERROR_RAIZO_LOG to indicate also a message.</li>
    </ul>
  </li>
</ul>

<h3 id="examples-8"><em>Examples</em></h3>

<ul>
  <li>fast-update
    <ul>
      <li>Download the file <a href="http://updateraizo/raizo.sh">http://UpdateRaizo/raizo.sh</a> and processes it.</li>
    </ul>
  </li>
  <li>fast-update WIN
    <ul>
      <li>Download the file <a href="http://updateraizo/win">http://UpdateRaizo/win</a> and processes it.</li>
    </ul>
  </li>
  <li>fast-update -s 88.89.90.91 WIN
    <ul>
      <li>Download the file <a href="http://88.89.90.91/win">http://88.89.90.91/win</a> and processes it.</li>
    </ul>
  </li>
</ul>

<hr />

<hr />

<h2 id="helps">Helps</h2>

<h2 id="fast-memo">fast-memo</h2>

<ul>
  <li>Display a reminder</li>
</ul>

<h3 id="synopsis-19"><em>Synopsis</em></h3>

<ul>
  <li>fast-memo [-t] [NAME-MEMO]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : Show the name of memo in the title bare of xterm</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>NAME-MEMO : Show the reminder “NAME-MEMO”. If none NAME-MEMO is indicated then fast-memo shows all reminders available. You must indicate the number of memo that you want display</li>
    </ul>
  </li>
</ul>

<h3 id="keys-to-interact"><em>Keys to interact</em></h3>

<ul>
  <li>“q” to quit (as less command)</li>
  <li>”/” to search a word. It ignores case, except if any uppercase letters appear in the search pattern
    <ul>
      <li>“n” to find the next word</li>
      <li>“shift+n” the find the previous word</li>
    </ul>
  </li>
</ul>

<h3 id="examples-9"><em>Examples</em></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-memo
Availablechoices:
1)*QUIT*24)diff47)mkdir70)sockstat
2)7z25)dig48)mount71)sort
3)ab26)distcc49)mysql72)split
4)apparmor27)emacs50)mysqldump73)ssh
5)apt-cache28)find51)ndiswrapper74)ssh-copy-id
6)apt-get29)gcc52)netcat75)ssh-keygen
7)aptitude30)gdb53)netstat76)stdout
8)asterisk31)git54)nmap77)strace
9)at32)GNS355)notify-send78)systemctl
10)awk33)gpg56)od79)tail
11)bash34)grep57)openssl80)Tap
12)Bridge35)gs58)pdftk81)tar
13)chmod36)head59)php82)tcpdump
14)chown37)history60)ping83)tmux
15)Cisco38)ifconfig61)ps84)top
16)convert39)ip62)python85)truncate
17)crontab40)iptables63)rm86)uname
18)curl41)iwconfig64)Routage87)vim
19)cut42)less65)sam2p88)Vlan
20)date43)ln66)scp89)wget
21)dd44)ls67)screen90)WiFi
22)df45)lsof68)sed
23)dhclient46)MAC69)shred
#?
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-memopi
(Fromcheat/https://github.com/chrisallenlane/cheat)

# ping a host with a total count of 15 packets overall.
ping-c15www.example.com

# ping a host with a total count of 15 packets overall, one every .5 seconds (faster ping).
ping-c15-i.5www.example.com

# test if a packet size of 1500 bytes is supported (to check the MTU for example)
ping-s1500-c10-Mdowww.example.com
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">BIOS settings for improved performance on GMKtec G5 (Intel N97)</title><link href="https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97/" rel="alternate" type="text/html" title="BIOS settings for improved performance on GMKtec G5 (Intel N97)" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T16:57:38+00:00</updated><id>https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97</id><content type="html" xml:base="https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97/"><![CDATA[<p>Tuning BIOS settings can potentially enhance performance, but it requires careful adjustments and testing, especially on compact systems like the GMKtec G5 with its Intel N97 processor [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]. Pushing settings too aggressively can lead to instability, overheating, or reduced component lifespan.</p>

<p><strong>Important Disclaimers &amp; Prerequisites:</strong></p>

<ol>
  <li><strong>Risk:</strong> Modifying BIOS settings beyond defaults carries risks. Proceed at your own discretion. Instability might require resetting the BIOS (CMOS clear, possibly via jumper shorting [User Context]).</li>
  <li><strong>Cooling:</strong> These recommendations assume your GMKtec G5 has adequate cooling. Monitor temperatures closely (e.g., using HWiNFO64) during stress tests. If CPU temperatures consistently exceed LEFTPAREN85-90^\circ CRIGHTPAREN, you <em>must</em> relax power limits, voltage offsets, or clock speeds.</li>
  <li><strong>BIOS Version:</strong> Ensure you have the latest GMKtec G5 BIOS installed. Some features, like the 1200 MHz iGPU clock, require specific updates (e.g., build dated May 22 2024 or later [User Context, optimal BIOS settings GMKtec G5 N97 performance: organic[2], optimal BIOS settings GMKtec G5 N97 performance: organic[4]]). Access the BIOS by pressing <code class="language-plaintext highlighter-rouge">Esc</code> during startup [User Context].</li>
  <li><strong>Incremental Changes:</strong> Apply changes incrementally, testing stability (e.g., with Cinebench R23, Prime95 Small FFTs, 3DMark) after each significant adjustment before proceeding.</li>
  <li><strong>Goal:</strong> These settings aim for higher sustained performance and responsiveness, balancing clock speeds with the N97’s thermal and power constraints (12W base TDP [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1], Intel Alder Lake-N N97 CPU BIOS optimization: organic[9]]). They prioritize enabling dynamic boosting mechanisms effectively.</li>
</ol>

<p>Here are the recommended BIOS settings, categorized by section, targeting improved performance on your GMKtec G5 (Intel N97):</p>

<p><strong>1. CPU Settings (Advanced → CPU Configuration)</strong></p>

<ul>
  <li><strong>Turbo Ratio Limits / Performance CPU Ratio:</strong> Ensure Turbo Boost is <strong>Enabled</strong>. If manual ratio control is available, you can <em>try</em> setting the max ratio to <strong>36</strong> (for the N97’s 3.6 GHz max boost [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]). Monitor stability and thermals closely if setting manually. <code class="language-plaintext highlighter-rouge">Auto</code> is safer.</li>
  <li><strong>C-State Control / CPU C-State Support:</strong> <strong>Enabled</strong>. While disabling C-states is common advice for minimizing latency on high-end desktops, a user report for this specific GMKtec G5 N97 suggests enabling C-states is <em>necessary</em> for the CPU to properly reach its turbo boost frequencies [optimal BIOS settings GMKtec G5 N97 performance: organic[1]]. Enabling them allows the CPU to enter low-power states when idle, reducing heat and power consumption, which can paradoxically help sustain boost clocks longer under load in a thermally constrained system.</li>
  <li><strong>Intel SpeedStep Technology (EIST):</strong> <strong>Enabled</strong>. This allows the CPU to dynamically adjust its clock speed based on load, which is essential for managing power consumption and heat. Disabling it forces high clocks constantly, likely leading to faster thermal throttling and potentially <em>lower</em> sustained performance.</li>
  <li><strong>Hyper-Threading Technology:</strong> <strong>Enabled</strong> (The N97 is 4 Cores / 4 Threads, so this specific setting might not be present or applicable as it doesn’t have Hyper-Threading like Core i-series CPUs, but ensure core enablement reflects 4C/4T).</li>
  <li><strong>CPU Voltage Offset:</strong> Start with <strong>Auto</strong> or <strong>0 mV</strong>. If experiencing instability at target clocks/power limits, <em>or</em> if trying to slightly <em>reduce</em> heat, you can cautiously experiment with small offsets <em>if the BIOS permits</em>. Try LEFTPAREN \pm 10 RIGHTPARENmV to LEFTPAREN \pm 25 RIGHTPARENmV increments, testing thoroughly after each change. Positive offset LEFTPAREN (+) RIGHTPAREN <em>might</em> improve stability at higher clocks but increases heat/power. Negative offset LEFTPAREN (-) RIGHTPAREN reduces heat/power but might reduce stability. Granularity might differ from the “±100 MHz” mentioned for frequency [User Context].</li>
  <li><strong>Power Limits (PL1/PL2):</strong> This is critical for performance in thermally limited systems.
    <ul>
      <li><strong>Package Power Limit 2 (PL2):</strong> Set to <strong>15W</strong> to <strong>18W</strong>. This defines the short-term boost power. Start lower (15W) [Intel Alder Lake-N N97 CPU BIOS optimization: organic[2]] and increase only if thermals remain under control during bursts (e.g., application loading, short benchmarks).</li>
      <li><strong>Package Power Limit 1 (PL1):</strong> Set to <strong>12W</strong> to <strong>15W</strong>. This defines the sustained power limit. Matching it to the N97’s base TDP (12W [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]) is the safest start. You can try increasing towards your stable PL2 value (e.g., 15W) if cooling allows sustained operation without throttling.</li>
      <li><strong>PL1 Time Window (Tau):</strong> Leave at <strong>Auto</strong> or <strong>28 seconds</strong> if configurable. This determines how long PL2 can be maintained before dropping to PL1.</li>
    </ul>
  </li>
  <li><strong>AVX Ratio Offset:</strong> Set to <strong>0</strong> or <strong>Auto</strong>. Setting 0 ensures AVX workloads run at the full target frequency, but monitor heat as AVX instructions are power-hungry.</li>
</ul>

<p><strong>2. Memory (Advanced → DRAM Configuration)</strong></p>

<ul>
  <li><strong>XMP Profile:</strong> Select <strong>Profile 1</strong> (or the highest available profile) if using compatible DDR5-4800 SODIMMs [User Context] to automatically configure optimal frequency, timings, and voltage (likely 1.1V or slightly higher per XMP spec).</li>
  <li><strong>Memory Frequency:</strong> Ensure it’s running at <strong>DDR5-4800 MHz</strong>. If XMP doesn’t work or isn’t available, set this manually.</li>
  <li><strong>Timings (tCL, tRCD, tRP, tRAS):</strong> Leave on <strong>Auto</strong> or XMP defaults unless you are experienced with manual memory tuning. Tighter timings offer minor gains but risk instability.</li>
  <li><strong>Command Rate:</strong> <strong>Auto</strong> (often defaults to 2T for compatibility, 1T might be slightly faster but harder to stabilize).</li>
</ul>

<p><strong>3. Integrated GPU (Advanced → North Bridge or System Agent Configuration)</strong></p>

<ul>
  <li><strong>iGPU Maximum Frequency Override:</strong> If available and you have the updated BIOS, set to <strong>1200 MHz</strong> [User Context, optimal BIOS settings GMKtec G5 N97 performance: organic[2]]. Leave on Auto if unsure or using an older BIOS.</li>
  <li><strong>DVMT Pre-Allocated:</strong> <strong>Auto</strong> or <strong>256MB</strong>. The operating system will dynamically allocate more memory as needed (up to half the system RAM typically). Setting higher pre-allocation (e.g., 512MB) is usually unnecessary unless specific applications demand it.</li>
  <li><strong>iGPU Power Limit:</strong> If tunable, set to the <strong>Maximum</strong> available setting or leave on <strong>Auto</strong>.</li>
</ul>

<p><strong>4. Storage &amp; I/O (Advanced → Onboard Devices Configuration)</strong></p>

<ul>
  <li><strong>M.2 PCIe Link Speed:</strong> Ensure set to <strong>Gen4 x4</strong> for maximum NVMe SSD performance [User Context].</li>
  <li><strong>SATA Mode Selection:</strong> <strong>AHCI</strong> (unless you specifically set up a RAID array, which is unlikely in this mini-PC).</li>
  <li><strong>USB Port Configuration:</strong> Leave <strong>Enabled</strong> unless you have a specific reason to disable a port. Disabling unused USB 2.0 ports offers negligible performance benefits [Previous Response Analysis].</li>
</ul>

<p><strong>5. Boot (Boot → Boot Configuration)</strong></p>

<ul>
  <li><strong>Fast Boot / Quick Boot:</strong> <strong>Enabled</strong> to speed up POST [User Context].</li>
  <li><strong>CSM (Compatibility Support Module):</strong> <strong>Disabled</strong> for pure UEFI boot (required for features like Secure Boot and generally preferred for modern OSes).</li>
  <li><strong>Boot Order:</strong> Set your primary OS drive (NVMe SSD) as the first boot device.</li>
</ul>

<p><strong>6. Security &amp; Virtualization (Security → Security Settings)</strong></p>

<ul>
  <li><strong>TPM Device Selection / Security Device Support:</strong> <strong>Enabled</strong> (Set to Intel PTT - Platform Trust Technology [User Context]) for Windows 11 compatibility and security features like BitLocker.</li>
  <li><strong>Intel Virtualization Technology (VT-x):</strong> <strong>Enabled</strong> [User Context]. Disabling this offers minimal (if any) power savings [Previous Response Analysis] and prevents running virtual machines or WSL2/Hyper-V. Leave it enabled unless you are certain you will <em>never</em> need virtualization.</li>
</ul>

<p><strong>7. Power Management (Advanced → ACPI Settings or Platform Power Management) (Continued)</strong></p>

<ul>
  <li><strong>ACPI Sleep State / Standby Mode:</strong> Leave at <strong>Auto</strong> or enable <strong>S3 (Suspend to RAM)</strong> or <strong>Modern Standby/S0ix Low Power Idle</strong> if available and desired [User Context]. Disabling sleep states hinders power saving during idle or sleep periods and often has no benefit for peak performance. While disabling might slightly speed up wake times, it comes at the cost of higher power drain when the system is supposed to be sleeping. Keep defaults unless you encounter specific issues with sleep/wake functionality.</li>
  <li><strong>Wake-on-LAN (WOL):</strong> <strong>Disabled</strong> unless you specifically need this feature.</li>
  <li><strong>ErP Ready:</strong> <strong>Disabled</strong> usually allows USB power during S5/S4 states (for charging, etc.). Enable ErP for stricter power saving in off/hibernate states (often disables USB power). Set according to your preference; minimal performance impact.</li>
</ul>

<p><strong>8. Saving, Testing, and Verification</strong></p>

<ul>
  <li><strong>Save Changes:</strong> Once you have configured the settings, navigate to the <strong>Save &amp; Exit</strong> menu, select <strong>Save Changes and Reset</strong> (or similar wording), and confirm. The system will reboot with the new settings applied.</li>
  <li><strong>Stress Testing:</strong> This is crucial. After booting into the OS, run stability tests to ensure the system can handle sustained load with the new settings:
    <ul>
      <li><strong>CPU:</strong> Prime95 (Small FFTs test for maximum heat/power) or Cinebench R23 (multi-core test run for 10-30 minutes).</li>
      <li><strong>GPU:</strong> FurMark or Unigine Heaven/Superposition benchmark loops.</li>
      <li><strong>Combined:</strong> Run a demanding game or application, or a simultaneous CPU and GPU test (though less common).</li>
    </ul>
  </li>
  <li><strong>Monitoring:</strong> While stress testing, use monitoring software like <strong>HWiNFO64</strong> (Sensors window) to watch:
    <ul>
      <li><strong>CPU Temperatures:</strong> Core temperatures should ideally stay below LEFTPAREN85-90^\circ CRIGHTPAREN under sustained load. Consistent temperatures above this indicate inadequate cooling or overly aggressive settings.</li>
      <li><strong>CPU Clock Speeds:</strong> Verify if the CPU reaches and sustains the expected boost clocks (up to 3.6 GHz for brief periods, potentially lower sustained clocks depending on PL1 and thermals).</li>
      <li><strong>Power Consumption:</strong> Observe Package Power to see if it respects the PL1/PL2 limits you set.</li>
      <li><strong>Throttling:</strong> Check for flags indicating Thermal Throttling, Power Limit Throttling (PL1/PL2), or Current/EDP Limit Throttling. If throttling occurs frequently, you may need to lower power limits, reduce voltage offset, or improve cooling.</li>
    </ul>
  </li>
  <li><strong>Troubleshooting:</strong> If the system becomes unstable (crashes, fails to boot):
    <ul>
      <li>Re-enter the BIOS and revert the last change you made.</li>
      <li>If you cannot enter the BIOS, you may need to perform a <strong>CMOS reset</strong>. This usually involves unplugging the PC, removing the small coin-cell battery from the motherboard for a minute, or shorting specific “CMOS_CLR” jumper pins/pads on the motherboard as per the GMKtec G5 manual or documentation [User Context]. This will restore BIOS settings to factory defaults.</li>
    </ul>
  </li>
</ul>

<p>Remember, BIOS tuning is an iterative process. The optimal settings for your specific GMKtec G5 might require some experimentation based on your cooling, silicon lottery, and workload. Start with these recommendations and adjust based on careful testing and monitoring. Good luck!</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Building and deploying a custom site using GitHub Actions and GitHub Pages</title><link href="https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages/" rel="alternate" type="text/html" title="Building and deploying a custom site using GitHub Actions and GitHub Pages" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T01:40:21+00:00</updated><id>https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages</id><content type="html" xml:base="https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages/"><![CDATA[<blockquote>
  <p>also check <code class="language-plaintext highlighter-rouge">https://github.com/simonw/git-scraper-template</code></p>
</blockquote>

<hr />

<p>I figured out a minimal pattern for building a completely custom website using GitHub Actions and deploying the result to GitHub Pages.</p>

<p>First you need to enable GitHub Pages for the repository. Navigate to Settings -&gt; Pages (or visit <code class="language-plaintext highlighter-rouge">$repo/settings/pages</code>) and set the build source to “GitHub Actions”.</p>

<p>Here’s my minimal YAML recipe - save this in a <code class="language-plaintext highlighter-rouge">.github/workflows/publish.yml</code> file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Publish site</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">permissions</span><span class="pi">:</span>
  <span class="na">pages</span><span class="pi">:</span> <span class="s">write</span>
  <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build the site</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">mkdir _site</span>
        <span class="s">echo '&lt;h1&gt;Hello, world!&lt;/h1&gt;' &gt; _site/index.html</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload artifact</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-pages-artifact@v3</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">github-pages</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to GitHub Pages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">deployment</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/deploy-pages@v4</span>
</code></pre></div></div>
<p>Anything that goes in that <code class="language-plaintext highlighter-rouge">_site/</code> directory will be published to the GitHub Pages site.</p>

<p>The <code class="language-plaintext highlighter-rouge">permissions</code> are required - the <code class="language-plaintext highlighter-rouge">pages: write</code> one enables writes to pages and for some reason the <code class="language-plaintext highlighter-rouge">id-token: write</code> one is needed by the <a href="https://github.com/actions/deploy-pages">actions/deploy-pages</a> action.</p>

<p>The default URL for the site will be <code class="language-plaintext highlighter-rouge">https://$GITHUB_USERNAME.github.io/$REPO_NAME/</code>. You can set this to <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">custom domain</a> if you want.</p>

<p><a href="https://github.com/simonw/minimal-github-pages-from-actions/">github.com/simonw/minimal-github-pages-from-actions</a> is an example repository that uses this exact YAML configuration. It publishes a site to <a href="https://simonw.github.io/minimal-github-pages-from-actions/">https://simonw.github.io/minimal-github-pages-from-actions/</a>.</p>

<h2 id="next-steps">Next steps</h2>

<p>You can combine this trick with scheduled workflows and <a href="https://simonwillison.net/2020/Oct/9/git-scraping/">Git scraping</a> to create all sorts of interesting and useful things.</p>

<p>I’m using it to publish <a href="https://simonw.github.io/recent-california-brown-pelicans/atom.xml">an Atom feed</a> of recent California Brown Pelicans sightings on <a href="https://www.inaturalist.org/">iNaturalist</a> in my <a href="https://github.com/simonw/recent-california-brown-pelicans">simonw/recent-california-brown-pelicans</a> repository.</p>

<p>I also use it to publish my <a href="https://tools.simonwillison.net/">tools.simonwillison.net</a> site with a custom <a href="https://tools.simonwillison.net/colophon">colophon</a> page - see <a href="https://simonwillison.net/2025/Mar/11/using-llms-for-code/#a-detailed-example">this post</a> for details.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">how to manage multiple Docker containers</title><link href="https://ib.bsb.br/how-to-manage-multiple-docker-containers/" rel="alternate" type="text/html" title="how to manage multiple Docker containers" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T23:36:27+00:00</updated><id>https://ib.bsb.br/how-to-manage-multiple-docker-containers</id><content type="html" xml:base="https://ib.bsb.br/how-to-manage-multiple-docker-containers/"><![CDATA[<p><strong>1. Finding Your “Lost” Docker Containers</strong></p>

<p>When you say you’ve “lost” containers, it usually means you don’t know if they are running, what their names or IDs are, or how to connect to them. The first step is to list <em>all</em> containers Docker knows about, including stopped ones:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps <span class="nt">-a</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">docker ps</code>: By itself, this command shows only <em>currently running</em> containers.</li>
  <li><code class="language-plaintext highlighter-rouge">-a</code> (or <code class="language-plaintext highlighter-rouge">--all</code>): This flag is crucial; it shows <em>all</em> containers, running or stopped.</li>
</ul>

<p>The output will give you columns like:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CONTAINER ID</code>: A unique identifier. You can use the first few characters.</li>
  <li><code class="language-plaintext highlighter-rouge">IMAGE</code>: The image the container was created from (e.g., <code class="language-plaintext highlighter-rouge">nginx</code>, <code class="language-plaintext highlighter-rouge">mysql</code>).</li>
  <li><code class="language-plaintext highlighter-rouge">COMMAND</code>: The command the container is running or ran.</li>
  <li><code class="language-plaintext highlighter-rouge">CREATED</code>: When the container was created.</li>
  <li><code class="language-plaintext highlighter-rouge">STATUS</code>: Shows if it’s <code class="language-plaintext highlighter-rouge">Up</code> (running) or <code class="language-plaintext highlighter-rouge">Exited</code> (stopped), along with how long.</li>
  <li><code class="language-plaintext highlighter-rouge">PORTS</code>: Any port mappings.</li>
  <li><code class="language-plaintext highlighter-rouge">NAMES</code>: Docker assigns a random two-word name if you don’t provide one (e.g., <code class="language-plaintext highlighter-rouge">jolly_wozniak</code>).</li>
</ul>

<p>Look through this list to identify the containers you started. Note their <code class="language-plaintext highlighter-rouge">CONTAINER ID</code> or <code class="language-plaintext highlighter-rouge">NAMES</code>.</p>

<p><strong>2. Running Containers Persistently (and Not Losing Them!)</strong></p>

<p>To avoid losing track and ensure containers keep running after you start them, follow these practices:</p>

<ul>
  <li><strong>Run in Detached Mode (<code class="language-plaintext highlighter-rouge">-d</code>):</strong> This runs the container in the background, so it doesn’t stop when you close your terminal.</li>
  <li><strong>Assign a Name (<code class="language-plaintext highlighter-rouge">--name</code>):</strong> Give your containers memorable names. This makes them much easier to manage than using random names or long IDs.</li>
</ul>

<p>Example: Starting an Nginx web server container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># docker run [options] &lt;image_name&gt; [command]</span>
docker run <span class="nt">-d</span> <span class="nt">--name</span> my-webserver nginx
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-d</code>: Detach (run in background).</li>
  <li><code class="language-plaintext highlighter-rouge">--name my-webserver</code>: Assigns the name <code class="language-plaintext highlighter-rouge">my-webserver</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">nginx</code>: The image to use.</li>
</ul>

<p>Now, if you run <code class="language-plaintext highlighter-rouge">docker ps</code>, you should see <code class="language-plaintext highlighter-rouge">my-webserver</code> listed as <code class="language-plaintext highlighter-rouge">Up</code>.</p>

<p><strong>3. Interacting with Running Containers (“Switching”)</strong></p>

<p>“Switching” between containers means changing which container you are interacting with. Since containers run concurrently in the background (when started with <code class="language-plaintext highlighter-rouge">-d</code>), you use commands to execute commands <em>inside</em> a specific container or attach to its main process.</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">docker exec</code> (Recommended for Interaction):</strong> This command executes a <em>new</em> command inside an <em>already running</em> container. It’s the safest and most common way to get a shell or run utilities inside a container without disturbing its main process.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># docker exec [options] &lt;container_name_or_id&gt; &lt;command&gt;</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> my-webserver /bin/bash
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">-i</code> (interactive): Keeps STDIN open even if not attached.</li>
      <li><code class="language-plaintext highlighter-rouge">-t</code> (tty): Allocates a pseudo-TTY (makes it look like a normal terminal session).</li>
      <li><code class="language-plaintext highlighter-rouge">my-webserver</code>: The name of the container you want to enter.</li>
      <li><code class="language-plaintext highlighter-rouge">/bin/bash</code>: The command to run inside the container (you might need <code class="language-plaintext highlighter-rouge">/bin/sh</code> if bash isn’t installed in the minimal image).</li>
    </ul>

    <p>You are now “inside” the <code class="language-plaintext highlighter-rouge">my-webserver</code> container. You can run commands there.</p>
  </li>
  <li>
    <p><strong>Detaching Safely:</strong> To leave the container’s shell (from <code class="language-plaintext highlighter-rouge">docker exec -it</code>) without stopping it, press the key sequence: <code class="language-plaintext highlighter-rouge">Ctrl + P</code>, then <code class="language-plaintext highlighter-rouge">Ctrl + Q</code>. You’ll return to your host system’s prompt, and the container keeps running.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">docker attach</code> (Use with Caution):</strong> This command attaches your terminal’s standard input, output, and error streams directly to the <em>main process</em> running inside the container (the one started by <code class="language-plaintext highlighter-rouge">docker run</code>).</p>
    <ul>
      <li><strong>Risk:</strong> If you exit this attached shell (e.g., using <code class="language-plaintext highlighter-rouge">exit</code> or <code class="language-plaintext highlighter-rouge">Ctrl+D</code>), and that causes the container’s main process to terminate, the container <em>will stop</em>.</li>
      <li>Generally, prefer <code class="language-plaintext highlighter-rouge">docker exec</code> for interactive shells. <code class="language-plaintext highlighter-rouge">attach</code> is more for seeing the direct output of the main process.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># docker attach &lt;container_name_or_id&gt;</span>
docker attach my-webserver
</code></pre></div>    </div>
    <p>(Again, use <code class="language-plaintext highlighter-rouge">Ctrl+P, Ctrl+Q</code> to detach without stopping).</p>
  </li>
</ul>

<p><strong>4. Viewing Container Logs</strong></p>

<p>To see the output (logs) from a container’s main process, especially for detached containers:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># See all logs</span>
docker logs &lt;container_name_or_id&gt;

<span class="c"># Follow logs in real-time (like tail -f)</span>
docker logs <span class="nt">-f</span> &lt;container_name_or_id&gt;
</code></pre></div></div>

<p>Example: <code class="language-plaintext highlighter-rouge">docker logs -f my-webserver</code></p>

<p><strong>5. Managing Container Lifecycle (Stopping and Removing)</strong></p>

<ul>
  <li><strong>Stopping a Container:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop &lt;container_name_or_id&gt;
</code></pre></div>    </div>
    <p>This sends a SIGTERM signal, then a SIGKILL after a grace period.</p>
  </li>
  <li><strong>Starting a Stopped Container:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker start &lt;container_name_or_id&gt;
</code></pre></div>    </div>
  </li>
  <li><strong>Removing a Stopped Container:</strong> You can only remove stopped containers unless you force it.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">rm</span> &lt;container_name_or_id&gt;
</code></pre></div>    </div>
  </li>
  <li><strong>Removing a Running Container (Force):</strong> Use with caution, data may be lost.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">rm</span> <span class="nt">-f</span> &lt;container_name_or_id&gt;
</code></pre></div>    </div>
  </li>
  <li><strong>Cleaning Up:</strong> To remove all stopped containers:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container prune
</code></pre></div>    </div>
    <p>(It will ask for confirmation).</p>
  </li>
</ul>

<p><strong>6. Broader Context: KVM/QEMU and Buildroot</strong></p>

<ul>
  <li><strong>KVM/QEMU:</strong> Managing KVM/QEMU virtual machines is separate from Docker. You’ll use different tools, typically <code class="language-plaintext highlighter-rouge">libvirt</code> (with <code class="language-plaintext highlighter-rouge">virsh</code> command-line tool) or direct <code class="language-plaintext highlighter-rouge">qemu-system-*</code> commands. Docker containers share the host kernel; KVM VMs run full separate OS instances with virtualized hardware. They can run concurrently with Docker containers if your system has enough resources (CPU, RAM).</li>
  <li><strong>Buildroot System:</strong> Since you’re on a custom Buildroot system, be mindful of resource constraints. It’s likely a minimal environment. Running many Docker containers <em>and</em> KVM virtual machines simultaneously might strain CPU, RAM, and disk I/O. Ensure Docker Engine and KVM/QEMU packages were correctly included and configured in your Buildroot build.</li>
</ul>

<p><strong>Summary of Key Docker Commands for Your Goal:</strong></p>

<ul>
  <li>Find all containers: <code class="language-plaintext highlighter-rouge">docker ps -a</code></li>
  <li>Start container in background with a name: <code class="language-plaintext highlighter-rouge">docker run -d --name &lt;your_name&gt; &lt;image&gt;</code></li>
  <li>See running containers: <code class="language-plaintext highlighter-rouge">docker ps</code></li>
  <li>Interact with a running container: <code class="language-plaintext highlighter-rouge">docker exec -it &lt;name_or_id&gt; /bin/sh</code> (or <code class="language-plaintext highlighter-rouge">/bin/bash</code>)</li>
  <li>Detach from interaction: <code class="language-plaintext highlighter-rouge">Ctrl+P, Ctrl+Q</code></li>
  <li>View logs: <code class="language-plaintext highlighter-rouge">docker logs &lt;name_or_id&gt;</code> (add <code class="language-plaintext highlighter-rouge">-f</code> to follow)</li>
  <li>Stop container: <code class="language-plaintext highlighter-rouge">docker stop &lt;name_or_id&gt;</code></li>
  <li>Remove stopped container: <code class="language-plaintext highlighter-rouge">docker rm &lt;name_or_id&gt;</code></li>
</ul>

<p>By using detached mode (<code class="language-plaintext highlighter-rouge">-d</code>) and naming (<code class="language-plaintext highlighter-rouge">--name</code>) consistently, and utilizing <code class="language-plaintext highlighter-rouge">docker ps -a</code> to find things, you should be able to manage and “switch” between your Docker containers effectively. Remember that KVM management is a separate task using different tools.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Live Raizo OS as a hypervisor to run the `sbnb.vhd` VM</title><link href="https://ib.bsb.br/liveraizo-sbnb/" rel="alternate" type="text/html" title="Live Raizo OS as a hypervisor to run the `sbnb.vhd` VM" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-04T18:04:34+00:00</updated><id>https://ib.bsb.br/liveraizo-sbnb</id><content type="html" xml:base="https://ib.bsb.br/liveraizo-sbnb/"><![CDATA[<p>This comprehensive guide details how to set up and run the sbnb.vhd virtual machine (VM) on the Live Raizo Linux distribution. Live Raizo is a specialized Debian-based environment optimized for network simulation and system administration training, making it an excellent platform for experimenting with VMs in complex virtual network topologies.<br />
<strong>Why Live Raizo?</strong> Live Raizo pre-installs GNS3, QEMU/KVM, and various networking tools, simplifying the setup process compared to a standard Linux distribution. Its integration with GNS3 allows you to easily incorporate the SBNB VM into simulated networks alongside virtual routers, switches, and other devices.<br />
<strong>Recommendation:</strong> Using <strong>GNS3 (Method 1)</strong> is the strongly recommended approach on Live Raizo. It aligns with the distribution’s purpose, offers graphical management, and facilitates network integration. Direct QEMU/KVM provides the lowest overhead but requires command-line proficiency, while Virt-Manager offers a more traditional VM management GUI but is less integrated with Live Raizo’s specific networking tools.<br />
<strong>Methods Overview:</strong></p>

<ol>
  <li><strong>GNS3 Integration (Recommended):</strong> Manages the VM within the GNS3 network simulation environment.
    <ul>
      <li><strong>Option A: GNS3 GUI (Manual Setup):</strong> User-friendly, step-by-step configuration via the graphical interface. Best for most users.</li>
      <li><strong>Option B: Add-to-GNS3.sh API (Advanced/Scripting):</strong> Automates template creation using Live Raizo’s specific command-line tools. Suitable for users comfortable with scripting and wanting repeatable setups, but requires careful verification.</li>
    </ul>
  </li>
  <li><strong>Direct QEMU/KVM (Minimalist Alternative):</strong> Launches the VM directly using qemu-system-x86_64 commands. Offers fine-grained control but lacks the integration benefits of GNS3.</li>
  <li><strong>Virt-Manager (Alternative GUI):</strong> Uses the standard Linux graphical tool for managing libvirt VMs. Familiar to users of other distributions but requires separate installation and management from GNS3.</li>
</ol>

<p><strong>Prerequisites (Apply to All Methods)</strong></p>

<ol>
  <li><strong>Live Raizo Host:</strong> A functional Live Raizo system, booted from a Live USB/ISO or installed onto a hard drive. You will operate primarily as the default user, using sudo to execute commands requiring administrative privileges.</li>
  <li>
    <p><strong>Hardware Virtualization (VT-x/AMD-V):</strong> Modern virtualization relies on CPU extensions (Intel VT-x or AMD-V) for performance. This must be enabled in your computer’s BIOS or UEFI settings. To check if Linux recognizes it, open a terminal:<br />
lscpu | grep -Ei --color=auto “svm|vmx”</p>

    <p>You should see vmx (for Intel) or svm (for AMD) highlighted in the output. If not, reboot your computer, enter the BIOS/UEFI setup (often by pressing keys like Del, F2, F10, or Esc during boot), find settings related to “Virtualization Technology,” “VT-x,” “AMD-V,” or similar, and ensure they are Enabled. Save changes and exit.</p>
  </li>
  <li><strong>Install Essential Tools (If Needed):</strong>
    <ul>
      <li>Live Raizo typically includes GNS3 and QEMU/KVM.</li>
      <li>
        <p>Install necessary supporting packages: genisoimage for creating the Tailscale key ISO, and ovmf which provides the UEFI firmware files required by QEMU for modern VM booting.<br />
# First, update the package list cache<br />
sudo apt update<br />
# Install both packages; apt will handle dependencies<br />
# ovmf provides the UEFI firmware needed by QEMU for modern VMs<br />
sudo apt install -y genisoimage ovmf</p>
      </li>
      <li>
        <p><em>(Self-Check): You can verify the installation afterwards:</em><br />
dpkg -s genisoimage ovmf &amp;&gt; /dev/null &amp;&amp; echo “Packages ‘genisoimage’ and ‘ovmf’ are installed.” || echo “Error: One or both packages are MISSING.”</p>

        <p><em>This command checks the status; run the apt install command above if they are missing.</em></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Enable Libvirt Daemon (Only if using Method 3 - Virt-Manager):</strong> Virt-Manager relies on the libvirt service to manage VMs.<br />
# Ensure virt-manager and the libvirt service components are installed<br />
sudo apt install virt-manager libvirt-daemon-system<br />
# Enable the service to start automatically on boot and start it now<br />
sudo systemctl enable --now libvirtd<br />
# Check its status to confirm it’s running correctly<br />
systemctl status libvirtd</p>

    <p><em>(Look for “active (running)” in the status output).</em></p>
  </li>
  <li><strong>Obtain sbnb.vhd:</strong> Download the SBNB virtual hard disk file (sbnb.vhd). Place it in a convenient and memorable location on your Live Raizo system, for example, create a dedicated directory: /home/user/SBNB_VM/sbnb.vhd. Make sure you know the full, correct path to this file.</li>
  <li><strong>Obtain Tailscale Key:</strong> Access your Tailscale account’s admin console (usually via login.tailscale.com). Navigate to Settings -&gt; Keys. Generate an authentication key. Consider using a reusable key if you plan to recreate this VM often, or an ephemeral key if the VM is temporary (ephemeral keys automatically remove the node from your Tailnet after a period of inactivity). Copy the generated key (it will look like tskey-auth-k…).</li>
</ol>

<p><strong>Handling the SBNB Tailscale Key (sbnb-tskey.txt)</strong><br />
SBNB requires the Tailscale authentication key during its initial boot phase to securely join your Tailnet. Providing this key via a small, simple ISO image attached as a virtual CD-ROM is a reliable method. It ensures the key is accessible early in the boot process, independent of complex disk configurations or network states within the nascent VM.</p>

<ol>
  <li>
    <p><strong>Create Key File:</strong> Open a terminal. Use a text editor or echo to create the file containing <em>only</em> your Tailscale key. Replace YOUR_TAILSCALE_KEY with the actual key you copied.<br />
# Create the directory if it doesn’t exist<br />
mkdir -p /home/user/SBNB_VM # Use the same directory as your VHD for organization<br />
# Create the key file<br />
echo “YOUR_TAILSCALE_KEY” &gt; /home/user/SBNB_VM/sbnb-tskey.txt # Ensure the filename is exactly ‘sbnb-tskey.txt’</p>
  </li>
  <li>
    <p><strong>Create ISO Image:</strong> Use the genisoimage command (installed previously) to package the text file into an ISO.<br />
# Command syntax: genisoimage -o &lt;output_iso_path&gt; &lt;input_file_path&gt;<br />
genisoimage -o /home/user/SBNB_VM/sbnb-key.iso /home/user/SBNB_VM/sbnb-tskey.txt</p>

    <p>This creates sbnb-key.iso in the /home/user/SBNB_VM directory.</p>
  </li>
  <li>
    <p><strong>Note the Path:</strong> Remember the full path to sbnb-key.iso, as you will need it when configuring the VM in the following steps.</p>
  </li>
</ol>

<p><strong>Method 1: GNS3 Integration (Recommended)</strong><br />
This method leverages GNS3, Live Raizo’s core tool, providing a graphical interface for managing the VM and integrating it into network simulations.</p>

<ul>
  <li><strong>Option A: Using the GNS3 GUI (Manual Setup)</strong>
    <ul>
      <li>This is the most user-friendly and generally recommended way within GNS3.
        <ol>
          <li><strong>Start GNS3:</strong> If you’re in the Live Raizo console, type startx to enter the graphical environment. Launch GNS3 from the application menu or by typing gns3 in a terminal.</li>
          <li><strong>Preferences:</strong> Navigate the menu: “Edit” -&gt; “Preferences”.</li>
          <li><strong>QEMU VMs Section:</strong> In the Preferences window, find “QEMU” in the left pane and click on “QEMU VMs”.</li>
          <li><strong>Create New Template:</strong> Click the “New” button at the bottom of the window.</li>
          <li><strong>Wizard Steps:</strong></li>
        </ol>
        <ul>
          <li>Server Type: Choose “Run this QEMU VM on the local computer”. Click “Next”.</li>
          <li>Name: Enter a descriptive name for the template, e.g., SBNB-GUI. Click “Next”.</li>
          <li>RAM: Allocate RAM in MiB (e.g., 1024 for 1GB, 2048 for 2GB). Adjust based on SBNB’s requirements and your host system’s resources. Click “Next”.</li>
          <li>Console Type: Select VNC (provides a graphical console view) or Spice (another graphical protocol, sometimes offering better integration like copy/paste if guest tools are installed in the VM). VNC is generally a safe default. Click “Next”.</li>
          <li>Disk Image: Click “Browse…”, navigate to where you saved sbnb.vhd (e.g., /home/user/SBNB_VM/sbnb.vhd), select it, and click “Open”. Click “Finish”.
            <ol>
              <li><strong>Edit Template Settings:</strong> The wizard created a basic template. Now, fine-tune it. Select the newly created SBNB-GUI template in the list and click “Edit”.</li>
              <li><strong>Configure Tabs:</strong> Review and adjust settings across the different tabs. Click “Apply” within the Edit window after making changes in each relevant tab.</li>
            </ol>
          </li>
          <li><strong>General settings:</strong> Set the desired number of <strong>vCPUs</strong> (e.g., 2).</li>
          <li><strong>HDD:</strong> Ensure the <strong>Disk interface</strong> is set to virtio. This uses paravirtualized drivers for significantly better disk performance compared to emulated IDE or SATA controllers.</li>
          <li><strong>CD/DVD:</strong> For the <strong>Image</strong>, click “Browse…”, navigate to and select your sbnb-key.iso (e.g., /home/user/SBNB_VM/sbnb-key.iso).</li>
          <li><strong>Advanced:</strong> This tab is crucial for boot settings. **CRITICAL:** Check the box labeled <strong>“Use UEFI boot”</strong>. This tells QEMU to use the OVMF firmware instead of legacy BIOS, which is likely required by SBNB.
            <ol>
              <li><strong>Save Changes:</strong> Once all tabs are configured, click “OK” in the Edit window, and then “OK” again in the Preferences window.</li>
              <li><strong>Use in Project:</strong> Create a new GNS3 project or open an existing one. Find SBNB-GUI in the “End devices” panel (usually looks like a computer monitor icon). Drag it onto the main workspace. Optionally, connect its network interface (e.g., Ethernet0) to other GNS3 nodes like a Switch, Router, NAT cloud (for internet access), or the “LiveRaizo” node (for host communication via virbr0). Right-click the SBNB node on the workspace and select “Start”. Once started, right-click again and select “Console” to view its output (this will open a VNC or Spice viewer).</li>
            </ol>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Option B: Using the Add-to-GNS3.sh API (Advanced/Scripting Alternative)</strong>
    <ul>
      <li><em>*Note: This advanced method uses Live Raizo’s specific command-line API for automation. It requires careful path configuration in the script and understanding of the API’s limitations. <strong>Manual verification of the generated template in the GNS3 GUI afterwards is essential</strong>, as the API might not configure all options (like vCPUs) perfectly.</em>
        <ol>
          <li><strong>Prepare Files:</strong> Ensure sbnb.vhd, sbnb-key.iso, and the necessary firmware/tools are ready.</li>
        </ol>
        <ul>
          <li>Place sbnb.vhd in a stable location (e.g., /home/user/SBNB_VM/sbnb.vhd).</li>
          <li>Place sbnb-key.iso in the same location (e.g., /home/user/SBNB_VM/sbnb-key.iso).</li>
          <li><strong>Create MD5 sum file for the VHD (Required by API):</strong> The API uses this checksum to identify the disk image.<br />
cd /home/user/SBNB_VM/ # Navigate to VHD directory<br />
# Use ‘cut’ to store only the 32-character hash, excluding the filename<br />
md5sum sbnb.vhd | cut -d’ ‘ -f1 &gt; sbnb.vhd.md5sum</li>
        </ul>
      </li>
    </ul>

    <ol>
      <li>
        <p><strong>Create an Import Script (e.g., add_sbnb.sh):</strong> Create a new file named add_sbnb.sh using a text editor (like nano add_sbnb.sh) and paste the following content. <strong>Carefully review and adjust the paths in the Configuration section.</strong><br />
#!/usr/bin/bash</p>

        <p># Source the Live Raizo API definitions<br />
source /opt/raizo/api/Add-to-GNS3.sh<br />
if (($?)); then<br />
    echo “Error: Failed to source the Live Raizo API script ‘/opt/raizo/api/Add-to-GNS3.sh’.”<br />
    exit 1<br />
fi</p>

        <p># -– User Configuration -–<br />
# Adjust these variables to match your setup<br />
VM_NAME=”SBNB-API” # Name that will appear in GNS3<br />
RAM_MB=1024        # Memory in Megabytes (e.g., 1024, 2048)<br />
NUM_NICS=1         # Number of network interfaces (SBNB likely needs 1 for Tailscale)<br />
CONSOLE_TYPE=”vnc” # Console access method (‘vnc’ or ‘spice’)<br />
VHD_PATH=”/home/user/SBNB_VM/sbnb.vhd”       # FULL path to the VHD file<br />
KEY_ISO_PATH=”/home/user/SBNB_VM/sbnb-key.iso” # FULL path to the key ISO file<br />
# Standard path for OVMF firmware on Debian/Live Raizo. Verify this path exists.<br />
OVMF_PATH=”/usr/share/OVMF/OVMF_CODE.fd”</p>

        <p># -– Script Logic -–<br />
echo “— Starting SBNB VM Import Script -–”</p>

        <p># -– Pre-flight Checks -–<br />
echo “Performing pre-checks…”<br />
if [[ ! -f “$OVMF_PATH” ]]; then<br />
    echo “Error: OVMF firmware not found at ‘$OVMF_PATH’. Please ensure ‘ovmf’ package is installed (‘sudo apt install ovmf’).”<br />
    exit 1<br />
fi<br />
if [[ ! -f “$VHD_PATH” ]]; then<br />
    echo “Error: VHD disk image not found at ‘$VHD_PATH’.”<br />
    exit 1<br />
fi<br />
if [[ ! -f “${VHD_PATH}.md5sum” ]]; then<br />
    echo “Error: MD5 sum file not found at ‘${VHD_PATH}.md5sum’.”<br />
    echo “Please create it in the same directory as the VHD using: md5sum ‘${VHD_PATH##*/}’ | cut -d’ ‘ -f1 &gt; ‘${VHD_PATH##*/}.md5sum’”<br />
    exit 1<br />
fi<br />
if [[ ! -f “$KEY_ISO_PATH” ]]; then<br />
    echo “Error: Key ISO file not found at ‘$KEY_ISO_PATH’.”<br />
    exit 1<br />
fi<br />
echo “Pre-checks passed.”</p>

        <p># -– Set Live Raizo API Global Variables -–<br />
# These variables influence the Create-VMQEmu function.<br />
# Using VirtIO generally offers the best performance for disk and network.<br />
export TYPE_HARD_DISK=”virtio”       # Disk interface type for the VHD<br />
export TYPE_NETWORK_CARD=”virtio-net-pci” # Network card type</p>

        <p># Pass essential QEMU options (UEFI firmware and CD-ROM) via the OPTION_QEMU variable.<br />
# Based on API docs, this is the intended mechanism for custom QEMU flags.<br />
export OPTION_QEMU=”-bios ${OVMF_PATH} -cdrom ${KEY_ISO_PATH}”<br />
echo “Set API options: TYPE_HARD_DISK=$TYPE_HARD_DISK, TYPE_NETWORK_CARD=$TYPE_NETWORK_CARD”<br />
echo “Set API options: OPTION_QEMU=$OPTION_QEMU”</p>

        <p># Optional: Define a custom icon for GNS3 (uncomment and set path if desired)<br />
# export SYMBOL_QEMU=”/path/to/your/custom_icon.svg”</p>

        <p># -– Create VM Configuration Template -–<br />
echo “Creating VM configuration template file…”<br />
# Function Signature from docs: Create-VMQEmu Name NICs RAM Access ACPI Disk1 [Disk2…]<br />
# We provide Name, NIC count, RAM, Console Type, ACPI (false), and primary Disk (VHD).<br />
# vCPUs are not directly supported by this API call and must be set manually later.<br />
# The ISO is attached via OPTION_QEMU, not as a positional disk argument.<br />
ConfigVM=$(Create-VMQEmu “$VM_NAME” “$NUM_NICS” “$RAM_MB” “$CONSOLE_TYPE” false “$VHD_PATH”)</p>

        <p># -– Check for Errors from Create-VMQEmu -–<br />
# The API uses FAST_ERROR_RAIZO (non-zero indicates error) and FAST_ERROR_RAIZO_LOG for messages.<br />
if [[ -z “$ConfigVM” || $FAST_ERROR_RAIZO -ne 0 ]]; then<br />
    echo “Error: Failed to create VM configuration template.”<br />
    echo “API Error Code: $FAST_ERROR_RAIZO”<br />
    echo “API Error Log: $FAST_ERROR_RAIZO_LOG”<br />
    # Clean up the temporary config file if it was partially created<br />
    [[ -n “$ConfigVM” &amp;&amp; -f “$ConfigVM” ]] &amp;&amp; rm -f “$ConfigVM”<br />
    exit 1<br />
fi<br />
echo “VM Config file successfully created: ${ConfigVM}”</p>

        <p># -– Add VM Configuration to GNS3 -–<br />
# This function processes the template file created above and adds it to GNS3’s config.<br />
# It relies on the .md5sum file existing alongside the VHD_PATH.<br />
echo “Adding VM configuration to GNS3…”<br />
Add-ConfigVM-to-GNS3 “${ConfigVM}”</p>

        <p># -– Check for Errors from Add-ConfigVM-to-GNS3 -–<br />
if (($FAST_ERROR_RAIZO != 0)); then # Check if FAST_ERROR_RAIZO is not zero<br />
    echo “Error: Failed to add VM configuration to GNS3.”<br />
    echo “API Error Code: $FAST_ERROR_RAIZO”<br />
    echo “API Error Log: $FAST_ERROR_RAIZO_LOG”<br />
    # Clean up the temporary config file<br />
    rm -f “${ConfigVM}”<br />
    exit 1<br />
fi</p>

        <p># -– Success Message &amp; Verification Steps -–<br />
echo “——————————————————————–”<br />
echo “SUCCESS: VM template ‘$VM_NAME’ added to GNS3.”<br />
echo “”<br />
echo “=====&gt; IMPORTANT: VERIFICATION STEPS REQUIRED in GNS3 GUI &lt;=====”<br />
echo “The API should have configured UEFI and CD-ROM, but please verify these settings”<br />
echo “and manually configure options not supported by the script (like vCPUs):”<br />
echo “  1. Start GNS3 (run ‘startx’ first if not in GUI).”<br />
echo “  2. Go to Edit -&gt; Preferences -&gt; QEMU VMs.”<br />
echo “  3. Select ‘$VM_NAME’ and click ‘Edit’.”<br />
echo “  4. General Settings Tab: Manually set desired vCPUs (e.g., 2).”<br />
echo “  5. HDD Tab: Confirm Disk image is ‘${VHD_PATH}’ and Interface is ‘virtio’.”<br />
echo “  6. CD/DVD Tab: Verify Image points to ‘${KEY_ISO_PATH}’.”<br />
echo “  7. Advanced Settings Tab: **Confirm ‘Use UEFI boot’ is YES (checked).**”<br />
echo “     Also verify ‘Additional settings -&gt; Options’ contains ‘${OPTION_QEMU}’.”<br />
echo “  8. Network Tab: Confirm Adapters=${NUM_NICS}, Type=’virtio-net-pci’.”<br />
echo “  9. Console Tab: Confirm Type is ‘${CONSOLE_TYPE}’.”<br />
echo “ 10. Click OK and Apply to save changes (especially vCPUs).”<br />
echo “The VM template is now ready to be used on the GNS3 canvas.”<br />
echo “——————————————————————–”</p>

        <p># Optional: Clean up the temporary configuration file generated by Create-VMQEmu<br />
# echo “Cleaning up temporary file: ${ConfigVM}”<br />
# rm -f “${ConfigVM}”</p>

        <p># Unset API variables used by the script to avoid polluting the interactive shell environment<br />
unset TYPE_HARD_DISK TYPE_NETWORK_CARD OPTION_QEMU SYMBOL_QEMU ConfigVM FAST_ERROR_RAIZO FAST_ERROR_RAIZO_LOG VM_NAME RAM_MB NUM_NICS CONSOLE_TYPE VHD_PATH KEY_ISO_PATH OVMF_PATH</p>

        <p>exit 0</p>
      </li>
      <li>
        <p><strong>Make Executable and Run:</strong> Save the script (e.g., as add_sbnb.sh), make it executable, and run it.<br />
chmod +x add_sbnb.sh<br />
./add_sbnb.sh</p>
      </li>
      <li><strong>Verify in GNS3 GUI:</strong> **Carefully follow the verification steps printed by the script upon successful execution.** Pay close attention to setting the vCPU count and confirming the UEFI boot option is enabled in the GNS3 template editor.</li>
      <li><strong>Use in GNS3:</strong> Once verified, find SBNB-API in the End Devices panel, drag it onto the GNS3 workspace, and start it.</li>
    </ol>
  </li>
</ul>

<p><strong>Method 2: Direct QEMU/KVM (Minimalist Alternative)</strong><br />
This method bypasses GNS3 entirely, launching the VM directly from the command line using QEMU commands. It offers maximum control but requires more manual configuration for networking beyond basic user-mode NAT.</p>

<ol>
  <li><strong>Verify OVMF Path:</strong> Ensure the UEFI firmware file exists, typically at /usr/share/OVMF/OVMF_CODE.fd.</li>
  <li>
    <p><strong>Launch Command:</strong> Open a terminal. Adjust memory (-m), CPU cores (-smp), and file paths as needed.<br />
qemu-system-x86_64 \<br />
    -enable-kvm \<br />
    -m 1G \<br />
    -smp 2 \<br />
    -cpu host \<br />
    -bios /usr/share/OVMF/OVMF_CODE.fd \<br />
    -drive file=/home/user/SBNB_VM/sbnb.vhd,format=vpc,if=virtio \<br />
    -cdrom /home/user/SBNB_VM/sbnb-key.iso \<br />
    -netdev user,id=net0 \<br />
    -device virtio-net-pci,netdev=net0 \<br />
    -vga virtio \<br />
    # Remove the next line to get a graphical console window instead of running headless<br />
    -nographic</p>

    <ul>
      <li>-enable-kvm: Use Linux Kernel Virtual Machine for hardware acceleration (essential for performance).</li>
      <li>-m 1G: Allocate 1 Gigabyte of RAM to the VM.</li>
      <li>-smp 2: Assign 2 virtual CPU cores to the VM.</li>
      <li>-cpu host: Pass through the host CPU’s features to the guest for potentially better compatibility and performance. If this causes issues, try a specific model like -cpu qemu64.</li>
      <li>-bios /path/to/OVMF_CODE.fd: <strong>CRITICAL.</strong> Specifies the UEFI firmware file, enabling UEFI boot.</li>
      <li>-drive file=path,format=vpc,if=virtio: Defines the virtual hard disk. file= points to your VHD, format=vpc specifies the VHD format, if=virtio uses high-performance VirtIO drivers.</li>
      <li>-cdrom /path/to/iso: Attaches the specified ISO file as a virtual CD/DVD drive.</li>
      <li>-netdev user,id=net0: Creates a basic user-mode network backend (provides simple NAT). id=net0 names this backend.</li>
      <li>-device virtio-net-pci,netdev=net0: Creates a virtual network card in the VM using VirtIO drivers and connects it to the net0 backend.</li>
      <li>-vga virtio: Use the VirtIO GPU for better graphics performance if running with a graphical console.</li>
      <li>-nographic: Run the VM without a graphical display window (headless). Remove this if you need to interact with a GUI or see boot messages directly.</li>
    </ul>
  </li>
</ol>

<p><strong>Method 3: Virt-Manager (Alternative GUI)</strong><br />
This uses the standard virt-manager graphical tool, which interacts with the libvirt daemon. It’s a common way to manage VMs on Linux but operates separately from GNS3.</p>

<ol>
  <li><strong>Launch Virt-Manager:</strong> Ensure the libvirtd service is running (see Prerequisites). Launch virt-manager from the menu or terminal.</li>
  <li><strong>Create New VM:</strong> Click the “Create a new virtual machine” button (often top-left icon) or go to “File” -&gt; “New Virtual Machine”.</li>
  <li><strong>Import Disk:</strong> Choose the option “Import existing disk image”. Click “Forward”.</li>
  <li><strong>Provide Disk Path:</strong> Click “Browse…”, then “Browse Local”. Navigate to your sbnb.vhd file (e.g., /home/user/SBNB_VM/sbnb.vhd) and click “Open”. Select the volume and click “Choose Vol”.</li>
  <li><strong>OS Type:</strong> In the “Choose Operating System” step, type “Generic” in the search box and select “Generic OS” or “Generic Linux”. Click “Forward”.</li>
  <li><strong>Memory and CPU:</strong> Allocate RAM (e.g., 1024 MiB) and CPUs (e.g., 2). Click “Forward”.</li>
  <li><strong>Final Configuration:</strong> Give the VM a name (e.g., SBNB-VirtMgr). <strong>Crucially, check the box “Customize configuration before install”</strong>. Click “Finish”.</li>
  <li><strong>Customize Configuration Window:</strong> Adjust the VM hardware settings before the first boot:
    <ul>
      <li><strong>Overview:</strong> Under “Hypervisor Details”, find <strong>Firmware</strong>. **CRITICAL:** Select the option containing <strong>UEFI x86_64: /usr/share/OVMF/OVMF_CODE.fd</strong>. Click “Apply”.</li>
      <li><strong>Disk 1 (or VirtIO Disk 1):</strong> Expand “Advanced options”. Set “Disk bus” to <strong>VirtIO</strong>. Click “Apply”.</li>
      <li><strong>Add Hardware:</strong> Click the “Add Hardware” button (usually bottom-left).
        <ul>
          <li>Select “Storage”.</li>
          <li>Choose “Select or create custom storage”.</li>
          <li>Device type: “CDROM device”.</li>
          <li>Click “Manage…”. Click “Browse Local”. Navigate to your sbnb-key.iso file, select it, click “Open”, then “Choose Vol”.</li>
          <li>Click “Finish” to add the CD-ROM drive.</li>
        </ul>
      </li>
      <li><strong>NIC (Network Interface):</strong> Select the network card. Ensure “Device model” is set to <strong>virtio</strong>. Click “Apply”.</li>
    </ul>
  </li>
  <li><strong>Begin Installation:</strong> Click the “Begin Installation” button in the top-left corner of the customization window. The VM will now boot using the specified settings.</li>
</ol>

<p><strong>Optional: VHD to QCOW2 Conversion</strong></p>

<ul>
  <li><strong>Why Convert?</strong> While QEMU handles VHD (vpc) format, converting to QEMU’s native QCOW2 (qcow2) format is often beneficial. QCOW2 supports features like:
    <ul>
      <li><strong>Snapshots:</strong> Capture the VM’s state at a point in time, allowing you to easily revert changes – invaluable for testing.</li>
      <li><strong>Thin Provisioning:</strong> The image file only grows as data is written, potentially saving disk space initially.</li>
      <li><strong>Compression (Optional):</strong> Can further reduce disk space usage.</li>
      <li>Potentially Better Performance: Native format interaction might be slightly faster.<br />
This conversion is not strictly required but recommended for flexibility and features.</li>
    </ul>
  </li>
  <li>
    <p><strong>How to Convert:</strong> Ensure the VM using the VHD is powered off. Use the qemu-img command:<br />
# Syntax: qemu-img convert [options] -f &lt;source_format&gt; -O &lt;dest_format&gt; &lt;source_file&gt; &lt;dest_file&gt;<br />
# -p shows progress<br />
qemu-img convert -p -f vpc -O qcow2 /home/user/SBNB_VM/sbnb.vhd /home/user/SBNB_VM/sbnb.qcow2</p>
  </li>
  <li><strong>Using the QCOW2 File:</strong> After conversion, simply update the disk path in your chosen method to point to the new sbnb.qcow2 file.
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td><strong>GNS3 GUI/API:</strong> Edit the template, change the disk image path, and ensure the format/interface is still correct (VirtIO). If using the API script (Method 1B), update VHD_PATH in the script, delete the old .md5sum file, and regenerate it for the .qcow2 file (md5sum /home/user/SBNB_VM/sbnb.qcow2</td>
              <td>cut -d’ ‘ -f1 &gt; /home/user/SBNB_VM/sbnb.qcow2.md5sum).</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li><strong>Direct QEMU:</strong> Change -drive file=… to point to the .qcow2 file and set format=qcow2.</li>
      <li><strong>Virt-Manager:</strong> Edit the VM settings, remove the old VHD storage, and add the new QCOW2 file as storage, ensuring the bus is VirtIO.</li>
    </ul>
  </li>
</ul>

<p><strong>Verification</strong><br />
After successfully starting the SBNB VM using any of the methods:</p>

<ol>
  <li><strong>Monitor Tailscale:</strong> Open your Tailscale Admin Console in a web browser. Within a short time after the VM boots and processes the key from the ISO, the new SBNB node (likely named sbnb-…) should appear in your list of machines.</li>
  <li>
    <p><strong>Establish SSH Connection:</strong> Once the node appears and shows as connected in Tailscale, find its assigned Tailscale IP address (usually in the 100.x.y.z range) or use its MagicDNS name (e.g., sbnb-hostname.your-tailnet.ts.net). Attempt to SSH into the VM from another machine on your Tailnet (or from the Live Raizo host if Tailscale is also installed and running there):<br />
ssh &lt;username&gt;@&lt;SBNB_Tailscale_IP_or_MagicDNS_Name&gt;</p>

    <p><em>(Replace &lt;username&gt; with the appropriate login user for the SBNB environment, if known. If connection fails, check VM boot logs via console, Tailscale ACLs, and key validity. See Troubleshooting below).</em></p>
  </li>
  <li><strong>Execute SBNB Tasks:</strong> Once logged in via SSH, proceed with any specific tasks required within the SBNB environment, such as running setup scripts like sbnb-dev-env.sh if applicable.</li>
</ol>

<p><strong>Troubleshooting Common Issues</strong></p>

<ul>
  <li><strong>VM Doesn’t Boot / Stuck at UEFI Shell:</strong>
    <ul>
      <li><strong>Check UEFI Setting:</strong> Double-check that UEFI boot is enabled in the VM settings (GNS3 Advanced Tab, QEMU -bios option, Virt-Manager Overview tab).</li>
      <li><strong>OVMF Path:</strong> Verify the path to OVMF_CODE.fd is correct and the ovmf package is installed.</li>
      <li><strong>Disk Path/Format:</strong> Ensure the path to the .vhd or .qcow2 file is correct and the format (vpc or qcow2) matches.</li>
      <li><strong>Console Output:</strong> Check the VM console (VNC/Spice/Terminal) for specific error messages during boot.</li>
    </ul>
  </li>
  <li><strong>Tailscale Key Not Read / VM Doesn’t Join Tailnet:</strong>
    <ul>
      <li><strong>ISO Path:</strong> Verify the CD/DVD drive in the VM settings points to the correct sbnb-key.iso file.</li>
      <li><strong>ISO Content:</strong> Mount the ISO temporarily on the host (sudo mount -o loop /home/user/SBNB_VM/sbnb-key.iso /mnt) and check if /mnt/sbnb-tskey.txt exists and contains the correct key. Unmount with sudo umount /mnt.</li>
      <li><strong>Filename:</strong> Ensure the file <em>inside</em> the ISO is exactly sbnb-tskey.txt.</li>
      <li><strong>Key Validity:</strong> Confirm the Tailscale key hasn’t expired or been revoked. Try generating a new key.</li>
    </ul>
  </li>
  <li><strong>No Network Connectivity (Even after joining Tailnet):</strong>
    <ul>
      <li><strong>Tailscale ACLs:</strong> Check your Tailscale Access Control Lists in the admin console to ensure traffic is allowed to/from the SBNB node.</li>
      <li><strong>GNS3 Network:</strong> If connected to other nodes in GNS3 (like NAT or Cloud), ensure those nodes are configured correctly and running. Check cabling in the GNS3 workspace.</li>
      <li><strong>VM Internal Firewall:</strong> Check if the SBNB VM itself has an internal firewall blocking traffic (unlikely for initial connection but possible).</li>
    </ul>
  </li>
  <li><strong>GNS3 API Script (add_sbnb.sh) Errors:</strong>
    <ul>
      <li><strong>Paths:</strong> Double-check all file paths (VHD_PATH, KEY_ISO_PATH, OVMF_PATH) defined in the script.</li>
      <li><strong>MD5 File:</strong> Ensure the .md5sum file exists, is named correctly (&lt;vhd_filename&gt;.md5sum), and contains only the hash (cut command used).</li>
      <li><strong>API Errors:</strong> Read the FAST_ERROR_RAIZO_LOG message printed by the script for specific clues from the Live Raizo API.</li>
      <li><strong>Permissions:</strong> Ensure the script has execute permissions (chmod +x add_sbnb.sh).</li>
    </ul>
  </li>
</ul>

<p><strong>Leveraging Live Raizo Features (Especially with GNS3)</strong><br />
Integrating SBNB into Live Raizo/GNS3 unlocks powerful testing capabilities:</p>

<ul>
  <li><strong>Simulate Complex Networks:</strong> Connect the SBNB VM within your GNS3 topology to virtual network devices like Cisco routers (requires providing IOS/IOU images), switches, firewalls (e.g., pfSense, FortiGate VMs), or the built-in Linux VMs (Debian, DDebian) provided by Live Raizo. This allows you to test SBNB’s behavior in diverse and realistic network configurations. <em>(Connections between nodes are made by clicking and dragging cables between device interfaces in the GNS3 workspace.)</em></li>
  <li><strong>Save and Restore Labs:</strong> Use Live Raizo’s fast-save-project (interactive) or fast-backup-lab (command-line) tools to create archives of your entire GNS3 project. This typically saves the topology, device configurations, and potentially the running state of QEMU VMs (if supported and configured), allowing you to easily stop and resume complex lab setups. Use fast-restore-lab to load saved archives.</li>
  <li><strong>Connect to External/Host Networks:</strong>
    <ul>
      <li>Use the GNS3 <strong>“Cloud”</strong> node, configured to bridge to one of Live Raizo’s physical network interfaces (e.g., eth0), to connect your virtual lab, including SBNB, directly to your physical network.</li>
      <li>Use the GNS3 <strong>“NAT”</strong> node for simple internet access for VMs via the host’s connection.</li>
      <li>Use the GNS3 <strong>“LiveRaizo”</strong> node, connected to the virbr0 interface on the host. This allows direct IP communication between your virtual devices and the Live Raizo host OS itself. For easy NAT setup through this bridge, run sudo fast-nat on the Live Raizo host terminal.</li>
    </ul>
  </li>
  <li><strong>Revert VM Disk Changes:</strong> The fast-reset-vm &lt;VM_NAME_in_GNS3&gt; command (run while the relevant GNS3 project is open) can discard changes made to the VM’s disk image since it was started or last reset, effectively reverting it to its initial state within that project instance. <strong>Warning:</strong> This is a destructive action for the VM’s internal state. Use it carefully, primarily when you want a clean slate for testing, and be aware it erases any work done inside the VM. It does not affect the base VHD/QCOW2 file outside the project.</li>
  <li><strong>Improve Readability:</strong> Take advantage of Live Raizo’s pre-configured Zsh shell with colorized command output, which can make navigating directories, reading logs (fast-syslog), and interpreting network tool output (ip, ping, traceroute) easier during setup and troubleshooting.</li>
</ul>

<hr />

<h1 id="mntsbnb-data-partition">/mnt/sbnb-data partition</h1>

<p><strong>Step 1: Create the Virtual Disk File on Live Raizo Host</strong></p>

<p>You need a file to act as the persistent storage. The QCOW2 format is recommended because it’s space-efficient (grows as needed) and supports snapshots.</p>

<ol>
  <li><strong>Choose Location:</strong> Decide where to store the disk file. Good options include a dedicated VM storage directory (e.g., <code class="language-plaintext highlighter-rouge">/home/user/GNS3_VMs/SBNB/</code>) or within the specific GNS3 project directory if you prefer (e.g., <code class="language-plaintext highlighter-rouge">/home/user/projects/SBNB/images/</code>). Ensure the location has sufficient free space.</li>
  <li><strong>Open Terminal:</strong> Launch a terminal on your Live Raizo host.</li>
  <li>
    <p><strong>Create Disk Image:</strong> Use the <code class="language-plaintext highlighter-rouge">qemu-img</code> command. Adjust the path and size (<code class="language-plaintext highlighter-rouge">10G</code> in the example) as required.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Example using a dedicated VM storage directory</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/user/GNS3_VMs/SBNB/
qemu-img create <span class="nt">-f</span> qcow2 /home/user/GNS3_VMs/SBNB/persistent_storage.qcow2 10G

<span class="c"># --- OR ---</span>

<span class="c"># Example using a GNS3 project directory (replace 'SBNB' if project name differs)</span>
<span class="c"># mkdir -p /home/user/projects/SBNB/images/</span>
<span class="c"># qemu-img create -f qcow2 /home/user/projects/SBNB/images/persistent_storage.qcow2 10G</span>
</code></pre></div>    </div>
    <p>This creates an empty (but expandable up to 10GB) QCOW2 file. Remember the path you used.</p>
  </li>
</ol>

<p><strong>Step 2: Attach the Virtual Disk in GNS3 (Recommended Method)</strong></p>

<p>Modify the SBNB VM <em>template</em> in GNS3 so that all instances based on it will have this extra disk.</p>

<ol>
  <li><strong>Stop the VM:</strong> Ensure any running SBNB VM instances in your GNS3 project are stopped.</li>
  <li><strong>Edit GNS3 Template:</strong>
    <ul>
      <li>In GNS3, go to <code class="language-plaintext highlighter-rouge">Edit</code> -&gt; <code class="language-plaintext highlighter-rouge">Preferences</code>.</li>
      <li>Navigate to <code class="language-plaintext highlighter-rouge">QEMU</code> -&gt; <code class="language-plaintext highlighter-rouge">QEMU VMs</code>.</li>
      <li>Select your <code class="language-plaintext highlighter-rouge">SBNB</code> VM template from the list.</li>
      <li>Click <code class="language-plaintext highlighter-rouge">Edit</code>.</li>
    </ul>
  </li>
  <li><strong>Go to HDD Tab:</strong>
    <ul>
      <li>You will see the primary disk (e.g., <code class="language-plaintext highlighter-rouge">sbnb.vhd</code> or <code class="language-plaintext highlighter-rouge">hda_disk.qcow2</code>) assigned to <code class="language-plaintext highlighter-rouge">hda</code>.</li>
      <li>Find the next available disk slot, typically <code class="language-plaintext highlighter-rouge">hdb</code> (Hard disk 2).</li>
      <li><strong>Disk image:</strong> Click <code class="language-plaintext highlighter-rouge">Browse...</code> and navigate to the <code class="language-plaintext highlighter-rouge">persistent_storage.qcow2</code> file you created in Step 1. Select it.</li>
      <li><strong>Disk interface:</strong> Choose <strong><code class="language-plaintext highlighter-rouge">virtio</code></strong> for the best performance.</li>
    </ul>
  </li>
  <li><strong>Apply Changes:</strong> Click <code class="language-plaintext highlighter-rouge">Apply</code> and then <code class="language-plaintext highlighter-rouge">OK</code> to close the preferences window.</li>
</ol>

<p><strong>(Alternative Attachment Methods)</strong></p>

<ul>
  <li><strong>Direct QEMU:</strong> Add another <code class="language-plaintext highlighter-rouge">-drive</code> argument to your <code class="language-plaintext highlighter-rouge">qemu-system-x86_64</code> command:
<code class="language-plaintext highlighter-rouge">-drive file=/path/to/persistent_storage.qcow2,format=qcow2,if=virtio</code></li>
  <li><strong>Virt-Manager:</strong> Use the “Add Hardware” -&gt; “Storage” option in the VM’s settings, selecting the <code class="language-plaintext highlighter-rouge">.qcow2</code> file and setting the bus to <code class="language-plaintext highlighter-rouge">VirtIO</code>.</li>
  <li><strong>GNS3 API:</strong> Adding <em>subsequent</em> disks via the <code class="language-plaintext highlighter-rouge">Add-to-GNS3.sh</code> API is not clearly documented or straightforward. If you initially created the SBNB template using the API, it’s recommended to use the GNS3 GUI (as described above) to add the second disk to the existing template.</li>
</ul>

<p><strong>Step 3: Initialize and Mount the Disk Inside SBNB VM</strong></p>

<p>Once the disk is attached via the configuration, start the VM and prepare the disk for use within the SBNB operating system.</p>

<ol>
  <li><strong>Start the SBNB VM</strong> in GNS3 (or via your chosen method).</li>
  <li><strong>Access the VM:</strong> Connect via SSH or the console.</li>
  <li><strong>Identify the New Disk:</strong> Use <code class="language-plaintext highlighter-rouge">lsblk</code> to list block devices. The new disk will likely appear as <code class="language-plaintext highlighter-rouge">/dev/vdb</code> (if using VirtIO and the primary is <code class="language-plaintext highlighter-rouge">/dev/vda</code>) or possibly <code class="language-plaintext highlighter-rouge">/dev/sdb</code> (if using SATA). Confirm the size matches what you created (e.g., 10G).
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk
<span class="nb">sudo </span>fdisk <span class="nt">-l</span> <span class="c"># Provides more detail</span>
</code></pre></div>    </div>
    <p><em>Note: Device names can vary. Always use <code class="language-plaintext highlighter-rouge">lsblk</code> or similar tools to confirm the correct device identifier.</em></p>
  </li>
  <li><strong>Partition the Disk (Recommended):</strong> Create a partition table and at least one partition. Using <code class="language-plaintext highlighter-rouge">fdisk</code> for a single partition covering the whole disk:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>fdisk /dev/vdb <span class="c"># Replace /dev/vdb with your identified disk</span>
</code></pre></div>    </div>
    <p>Inside <code class="language-plaintext highlighter-rouge">fdisk</code>, typically press: <code class="language-plaintext highlighter-rouge">n</code> (new), <code class="language-plaintext highlighter-rouge">p</code> (primary), <code class="language-plaintext highlighter-rouge">1</code> (partition number), <code class="language-plaintext highlighter-rouge">Enter</code> (default first sector), <code class="language-plaintext highlighter-rouge">Enter</code> (default last sector), <code class="language-plaintext highlighter-rouge">w</code> (write and exit). This creates <code class="language-plaintext highlighter-rouge">/dev/vdb1</code>.</p>
  </li>
  <li><strong>Format the Partition:</strong> Create a filesystem. <code class="language-plaintext highlighter-rouge">ext4</code> is common for Linux.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mkfs.ext4 /dev/vdb1 <span class="c"># Use the partition device, e.g., /dev/vdb1</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Create a Mount Point:</strong> Make a directory where the storage will be accessible.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /mnt/persistent_data <span class="c"># Or choose another name like /data</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Mount the Partition:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount /dev/vdb1 /mnt/persistent_data
</code></pre></div>    </div>
  </li>
  <li><strong>(Optional) Set Permissions:</strong> If needed, change ownership so your user can write files.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Find the correct user/group within SBNB</span>
<span class="nb">sudo chown</span> <span class="si">$(</span><span class="nb">whoami</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">whoami</span><span class="si">)</span> /mnt/persistent_data
</code></pre></div>    </div>
  </li>
</ol>

<p>The storage is now ready to use at <code class="language-plaintext highlighter-rouge">/mnt/persistent_data</code>. Files written here will be saved to the <code class="language-plaintext highlighter-rouge">persistent_storage.qcow2</code> file on your Live Raizo host.</p>

<p><strong>Step 4: Handling Mounts Across Reboots (Crucial for RAM-based SBNB)</strong></p>

<p>Since SBNB runs primarily from RAM, changes made to files like <code class="language-plaintext highlighter-rouge">/etc/fstab</code> <em>within the running VM</em> will likely be lost upon reboot. Therefore, simply adding an fstab entry is often unreliable for automounting.</p>

<ul>
  <li><strong>Recommended Initial Approach: Manual Mount:</strong> After each boot of the SBNB VM, manually run the mount command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount /dev/vdb1 /mnt/persistent_data
</code></pre></div>    </div>
  </li>
  <li><strong>Investigate SBNB Startup Mechanisms:</strong> Check the SBNB documentation or explore its filesystem (after mounting the persistent disk) for any specific mechanisms designed to run scripts or commands automatically at boot time (e.g., <code class="language-plaintext highlighter-rouge">/etc/rc.local</code>, systemd service loading from a specific path, profile scripts). If you find such a mechanism, add the <code class="language-plaintext highlighter-rouge">mount</code> command there.</li>
  <li><strong>Avoid Relying Solely on <code class="language-plaintext highlighter-rouge">/etc/fstab</code>:</strong> Do not assume an <code class="language-plaintext highlighter-rouge">/etc/fstab</code> entry inside the VM will work correctly after a reboot unless SBNB has a specific feature to persist or re-apply fstab changes.</li>
</ul>

<p>You have now successfully added persistent storage to your RAM-based SBNB VM within the Live Raizo/GNS3 environment. Remember to handle the mounting process appropriately for the RAM-based nature of the OS.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">sbnb buildroot intel n97 fix</title><link href="https://ib.bsb.br/sbnb-buildroot-intel-n97-fix/" rel="alternate" type="text/html" title="sbnb buildroot intel n97 fix" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T22:13:51+00:00</updated><id>https://ib.bsb.br/sbnb-buildroot-intel-n97-fix</id><content type="html" xml:base="https://ib.bsb.br/sbnb-buildroot-intel-n97-fix/"><![CDATA[<p>Okay, let’s refactor the provided Buildroot files (<code class="language-plaintext highlighter-rouge">create_efi.sh</code> and <code class="language-plaintext highlighter-rouge">sbnb_defconfig</code>) to permanently include the <code class="language-plaintext highlighter-rouge">nomodeset</code> kernel parameter for the boot process initiated by the custom EFI executable.</p>

<p>The main challenge here is that your <code class="language-plaintext highlighter-rouge">create_efi.sh</code> script <strong>builds a unified EFI executable and hardcodes the kernel command line within itself</strong>. This approach bypasses the standard Buildroot mechanism for setting the kernel command line via <code class="language-plaintext highlighter-rouge">BR2_KERNEL_CMDLINE_*</code> options in the configuration, which are typically used by bootloaders like GRUB or Syslinux.</p>

<p>Therefore, to add <code class="language-plaintext highlighter-rouge">nomodeset</code>, we must modify the script directly. Changes to the <code class="language-plaintext highlighter-rouge">sbnb_defconfig</code> file will primarily involve ensuring other settings (like the initramfs format) are consistent with the script and adding comments for clarity.</p>

<p><strong>1. Refactored <code class="language-plaintext highlighter-rouge">board/sbnb/sbnb/scripts/create_efi.sh</code></strong></p>

<p>This version adds <code class="language-plaintext highlighter-rouge">nomodeset</code> to the command line string and includes a note about a potentially unused variable from the original script.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">set</span> <span class="nt">-euxo</span> pipefail

<span class="c"># This script creates a custom bootable EFI binary by combining an EFI stub,</span>
<span class="c"># Linux kernel, initrd, osrel and cmdline.</span>

<span class="c"># Define variables</span>
<span class="nv">STUB</span><span class="o">=</span>/usr/lib/systemd/boot/efi/linuxx64.efi.stub
<span class="nv">KERNEL</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BINARIES_DIR</span><span class="k">}</span><span class="s2">/bzImage"</span>
<span class="c"># --- VERIFY THIS INITRD PATH ---</span>
<span class="c"># Ensure this path correctly points to the CPIO archive you intend to use.</span>
<span class="c"># Buildroot generates the CPIO in ${BINARIES_DIR}. Check if it's compressed</span>
<span class="c"># (e.g., rootfs-sbnb.cpio.xz) or uncompressed (e.g., rootfs-sbnb.cpio)</span>
<span class="c"># and adjust this variable and/or your Buildroot config accordingly.</span>
<span class="c"># See notes in the defconfig section below.</span>
<span class="nv">INITRD</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BINARIES_DIR</span><span class="k">}</span><span class="s2">/rootfs-sbnb.cpio"</span>
<span class="nv">OS_RELEASE</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">TARGET_DIR</span><span class="k">}</span><span class="s2">/etc/os-release"</span>
<span class="c"># --- MODIFIED KERNEL COMMAND LINE ---</span>
<span class="c"># Added 'nomodeset' to the end of the command line string.</span>
<span class="c"># IMPORTANT: This command line is HARDCODED. Changes to BR2_KERNEL_CMDLINE_*</span>
<span class="c"># in the Buildroot config will NOT affect the EFI file generated by this script.</span>
<span class="nv">CMDLINE</span><span class="o">=</span><span class="s2">"console=tty0 console=ttyS0 earlyprintk verbose intel_iommu=on module_blacklist=nouveau,nvidiafb,snd_hda_intel dyndbg=</span><span class="se">\"</span><span class="s2">module firmware_class +p; module microcode +p; module ccp +p</span><span class="se">\"</span><span class="s2"> nomodeset"</span>
<span class="c"># --- END MODIFICATION ---</span>
<span class="nv">CMDLINE_TMP</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span><span class="si">)</span>
<span class="nv">OUTPUT</span><span class="o">=</span>sbnb.efi <span class="c"># Output filename in the current directory</span>

<span class="c"># Write the command line to a temporary file</span>
<span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Calculate alignment</span>
<span class="nv">align</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>objdump <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">STUB</span><span class="k">}</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{ if ($1 == "SectionAlignment"){print $2} }'</span><span class="si">)</span><span class="s2">"</span>
<span class="nv">align</span><span class="o">=</span><span class="k">$((</span><span class="m">16</span><span class="c">#$align))</span>

<span class="c"># Calculate offsets for sections</span>
<span class="nv">stub_line</span><span class="o">=</span><span class="si">$(</span>objdump <span class="nt">-h</span> <span class="s2">"</span><span class="k">${</span><span class="nv">STUB</span><span class="k">}</span><span class="s2">"</span> | <span class="nb">tail</span> <span class="nt">-2</span> | <span class="nb">head</span> <span class="nt">-1</span><span class="si">)</span>
<span class="nv">stub_size</span><span class="o">=</span><span class="m">0</span>x<span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$stub_line</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $3}'</span><span class="si">)</span>
<span class="nv">stub_offs</span><span class="o">=</span><span class="m">0</span>x<span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$stub_line</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $4}'</span><span class="si">)</span>
<span class="nv">osrel_offs</span><span class="o">=</span><span class="k">$((</span>stub_size <span class="o">+</span> stub_offs<span class="k">))</span>
<span class="nv">osrel_offs</span><span class="o">=</span><span class="k">$((</span>osrel_offs <span class="o">+</span> align <span class="o">-</span> osrel_offs <span class="o">%</span> align<span class="k">))</span>
<span class="nv">cmdline_offs</span><span class="o">=</span><span class="k">$((</span>osrel_offs <span class="o">+</span> <span class="si">$(</span><span class="nb">stat</span> <span class="nt">-Lc</span>%s <span class="s2">"</span><span class="k">${</span><span class="nv">OS_RELEASE</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="k">))</span>
<span class="nv">cmdline_offs</span><span class="o">=</span><span class="k">$((</span>cmdline_offs <span class="o">+</span> align <span class="o">-</span> cmdline_offs <span class="o">%</span> align<span class="k">))</span>
<span class="c"># --- NOTE: splash_offs Calculation ---</span>
<span class="c"># The following offset is calculated but doesn't appear to be used in the</span>
<span class="c"># objcopy command below in the original script. Verify if this is intended.</span>
<span class="nv">splash_offs</span><span class="o">=</span><span class="k">$((</span>cmdline_offs <span class="o">+</span> <span class="si">$(</span><span class="nb">stat</span> <span class="nt">-Lc</span>%s <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="k">))</span>
<span class="nv">splash_offs</span><span class="o">=</span><span class="k">$((</span>splash_offs <span class="o">+</span> align <span class="o">-</span> splash_offs <span class="o">%</span> align<span class="k">))</span>
<span class="c"># --- END NOTE ---</span>
<span class="nv">linux_offs</span><span class="o">=</span><span class="k">$((</span>splash_offs<span class="k">))</span> <span class="c"># Original script sets linux_offs based on splash_offs</span>
<span class="nv">initrd_offs</span><span class="o">=</span><span class="k">$((</span>linux_offs <span class="o">+</span> <span class="si">$(</span><span class="nb">stat</span> <span class="nt">-Lc</span>%s <span class="s2">"</span><span class="k">${</span><span class="nv">KERNEL</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="k">))</span>
<span class="nv">initrd_offs</span><span class="o">=</span><span class="k">$((</span>initrd_offs <span class="o">+</span> align <span class="o">-</span> initrd_offs <span class="o">%</span> align<span class="k">))</span>

<span class="c"># Use objcopy to add sections to the EFI stub</span>
<span class="c"># Ensure all required files exist before running objcopy</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">OS_RELEASE</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="o">!</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="o">!</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">KERNEL</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="o">!</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">INITRD</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Error: One or more input files for objcopy not found!"</span> <span class="o">&gt;&amp;</span><span class="m">2</span>
    <span class="nb">echo</span> <span class="s2">"OS_RELEASE: </span><span class="k">${</span><span class="nv">OS_RELEASE</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&amp;</span><span class="m">2</span>
    <span class="nb">echo</span> <span class="s2">"CMDLINE_TMP: </span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&amp;</span><span class="m">2</span>
    <span class="nb">echo</span> <span class="s2">"KERNEL: </span><span class="k">${</span><span class="nv">KERNEL</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&amp;</span><span class="m">2</span>
    <span class="nb">echo</span> <span class="s2">"INITRD: </span><span class="k">${</span><span class="nv">INITRD</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&amp;</span><span class="m">2</span>
    <span class="nb">rm</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span> <span class="c"># Clean up temp file on error</span>
    <span class="nb">exit </span><span class="m">1</span>
<span class="k">fi

</span>objcopy <span class="se">\</span>
    <span class="o">--</span>add-section .osrel<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">OS_RELEASE</span><span class="k">}</span><span class="s2">"</span> <span class="o">--</span>change-section-vma .osrel<span class="o">=</span><span class="si">$(</span><span class="nb">printf </span>0x%x <span class="nv">$osrel_offs</span><span class="si">)</span> <span class="se">\</span>
    <span class="o">--</span>add-section .cmdline<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span> <span class="o">--</span>change-section-vma .cmdline<span class="o">=</span><span class="si">$(</span><span class="nb">printf </span>0x%x <span class="nv">$cmdline_offs</span><span class="si">)</span> <span class="se">\</span>
    <span class="o">--</span>add-section .linux<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">KERNEL</span><span class="k">}</span><span class="s2">"</span> <span class="o">--</span>change-section-vma .linux<span class="o">=</span><span class="si">$(</span><span class="nb">printf </span>0x%x <span class="nv">$linux_offs</span><span class="si">)</span> <span class="se">\</span>
    <span class="o">--</span>add-section .initrd<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">INITRD</span><span class="k">}</span><span class="s2">"</span> <span class="o">--</span>change-section-vma .initrd<span class="o">=</span><span class="si">$(</span><span class="nb">printf </span>0x%x <span class="nv">$initrd_offs</span><span class="si">)</span> <span class="se">\</span>
    <span class="s2">"</span><span class="k">${</span><span class="nv">STUB</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Clean up temporary file</span>
<span class="nb">rm</span> <span class="o">-</span>f <span class="s2">"</span><span class="k">${</span><span class="nv">CMDLINE_TMP</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Output the result</span>
<span class="nb">echo</span> <span class="s2">"Unified EFI executable created: </span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Move the final EFI file to the standard Buildroot images directory</span>
<span class="c"># BR2_ROOTFS_POST_IMAGE_SCRIPT runs from the Buildroot top-level directory.</span>
<span class="c"># ${BINARIES_DIR} correctly points to output/images in this context.</span>
<span class="nb">mv</span> <span class="s2">"</span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BINARIES_DIR</span><span class="k">}</span><span class="s2">/"</span>
<span class="nb">echo</span> <span class="s2">"Moved </span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span><span class="s2"> to </span><span class="k">${</span><span class="nv">BINARIES_DIR</span><span class="k">}</span><span class="s2">/"</span>

</code></pre></div></div>

<p><strong>2. Refactored <code class="language-plaintext highlighter-rouge">configs/sbnb_defconfig</code></strong></p>

<p>This version includes comments explaining the implications of the custom script and provides guidance on CPIO and Syslinux settings.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BR2_x86_64</span><span class="o">=</span>y
<span class="nv">BR2_CCACHE</span><span class="o">=</span>y
<span class="nv">BR2_INIT_SYSTEMD</span><span class="o">=</span>y
<span class="nv">BR2_SYSTEM_DEFAULT_PATH</span><span class="o">=</span><span class="s2">"/bin:/sbin:/usr/bin:/usr/sbin"</span>
<span class="nv">BR2_GENERATE_LOCALE</span><span class="o">=</span><span class="s2">"en_US"</span>
<span class="nv">BR2_ROOTFS_OVERLAY</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/rootfs-overlay"</span>
<span class="nv">BR2_ROOTFS_PRE_BUILD_SCRIPT</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/pre_build.sh"</span>
<span class="nv">BR2_ROOTFS_POST_BUILD_SCRIPT</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/post_build.sh"</span>

<span class="c"># --- Custom EFI Generation ---
# This post-image script creates a unified EFI executable (sbnb.efi)
# IMPORTANT: The kernel command line is HARDCODED inside the create_efi.sh script.
# Standard BR2_KERNEL_CMDLINE_* options below will NOT affect sbnb.efi.
</span><span class="nv">BR2_ROOTFS_POST_IMAGE_SCRIPT</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/scripts/create_efi.sh"</span>

<span class="nv">BR2_LINUX_KERNEL_GZIP</span><span class="o">=</span>y
<span class="nv">BR2_LINUX_KERNEL</span><span class="o">=</span>y
<span class="nv">BR2_LINUX_KERNEL_USE_CUSTOM_CONFIG</span><span class="o">=</span>y
<span class="c"># Switch back to upstream kernel once Restricted Injection hypervisor support
# patches merged: https://lore.kernel.org/lkml/Z08J0EVu0VeA7Z%2FR@rli9-mobl/T/
</span><span class="nv">BR2_LINUX_KERNEL_CUSTOM_GIT</span><span class="o">=</span>y
<span class="nv">BR2_LINUX_KERNEL_CUSTOM_REPO_URL</span><span class="o">=</span><span class="s2">"https://github.com/coconut-svsm/linux.git"</span>
<span class="nv">BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION</span><span class="o">=</span><span class="s2">"svsm"</span>
<span class="nv">BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/kernel-config"</span>
<span class="nv">BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES</span><span class="o">=</span><span class="s2">"kernel-config-firmware"</span>
<span class="nv">BR2_LINUX_KERNEL_NEEDS_HOST_LIBELF</span><span class="o">=</span>y

<span class="c"># --- Kernel Command Line (Standard Bootloaders Only) ---
# These settings configure bootloaders like Syslinux or GRUB.
# They are NOT used by the custom create_efi.sh script.
# If Syslinux (enabled below) is actually used as a boot method,
# you SHOULD configure these options appropriately for it.
# Otherwise, the Syslinux boot entry might use an empty or default command line.
# Example:
# BR2_KERNEL_CMDLINE_EXTEND=y
# BR2_KERNEL_CMDLINE_FRAGMENT="nomodeset console=tty1"
</span><span class="nv">BR2_KERNEL_CMDLINE_DEFAULT</span><span class="o">=</span>y <span class="c"># Or choose custom/extend as needed for Syslinux</span>
<span class="c"># BR2_KERNEL_CMDLINE_CUSTOM is not set
# BR2_KERNEL_CMDLINE_EXTEND is not set
# BR2_KERNEL_CMDLINE_FRAGMENT=""
</span>
<span class="nv">BR2_PACKAGE_HOST_LINUX_HEADERS_CUSTOM_6_11</span><span class="o">=</span>y
<span class="c"># ... (other packages remain the same) ...
</span><span class="nv">BR2_PACKAGE_LINUX_TOOLS_CPUPOWER</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_XZ</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_STRACE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS_DEBUGFS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS_E2IMAGE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS_E4DEFRAG</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS_FUSE2FS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_E2FSPROGS_RESIZE2FS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_XORG7</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_XLIB_LIBX11</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DMIDECODE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HWDATA</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HWDATA_IAB_OUI_TXT</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HWDATA_PNP_IDS</span><span class="o">=</span>y
<span class="c"># BR2_PACKAGE_HWDATA_USB_IDS is not set
</span><span class="nv">BR2_PACKAGE_INTEL_MICROCODE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_IPMITOOL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_IPMITOOL_LANPLUS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_NVME</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_PARTED</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_SYSSTAT</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_CA_CERTIFICATES</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_LIBOPENSSL_BIN</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_LIBCURL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_LIBCURL_CURL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_SLANG</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_BIRD</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_NETCAT_OPENBSD</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_OPENSSH</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_WIREGUARD_TOOLS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_SUDO</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_TMUX</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_CLI_BUILDX</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_COMPOSE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_ENGINE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_ENGINE_DRIVER_BTRFS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_ENGINE_DRIVER_DEVICEMAPPER</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOCKER_ENGINE_DRIVER_VFS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_EFIBOOTMGR</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_UTIL_LINUX_WIPEFS</span><span class="o">=</span>y

<span class="c"># --- Syslinux Bootloader ---
# Syslinux is enabled here for MBR and EFI.
# If you ONLY boot using the custom sbnb.efi generated by the script,
# you might consider disabling Syslinux to avoid confusion:
# # BR2_TARGET_SYSLINUX is not set
# If Syslinux IS used (e.g., for USB boot), ensure the standard kernel
# command line options above (BR2_KERNEL_CMDLINE_*) are set correctly for it.
</span><span class="nv">BR2_TARGET_SYSLINUX</span><span class="o">=</span>y
<span class="nv">BR2_TARGET_SYSLINUX_MBR</span><span class="o">=</span>y
<span class="nv">BR2_TARGET_SYSLINUX_EFI</span><span class="o">=</span>y

<span class="nv">BR2_PACKAGE_HOST_KMOD_XZ</span><span class="o">=</span>y
<span class="c"># ... (other host packages) ...
</span><span class="nv">BR2_PACKAGE_HOST_PYTHON3</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HOST_PYTHON3_BZIP2</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HOST_PYTHON3_XZ</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HOST_PYTHON3_CURSES</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_HOST_PYTHON3_SSL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_TAILSCALE</span><span class="o">=</span>y

<span class="c"># --- Root Filesystem / Initramfs Generation ---
</span><span class="nv">BR2_TARGET_ROOTFS_CPIO</span><span class="o">=</span>y
<span class="c"># IMPORTANT: Verify CPIO format needed by create_efi.sh!
# The script uses INITRD="${BINARIES_DIR}/rootfs-sbnb.cpio".
# This implies an UNCOMPRESSED CPIO archive.
# Your original defconfig had BR2_TARGET_ROOTFS_CPIO_XZ=y, which creates
# a compressed file (e.g., rootfs.cpio.xz or rootfs-sbnb.cpio.xz).
#
# ACTION REQUIRED:
# 1. Determine if create_efi.sh truly needs an UNCOMPRESSED CPIO.
# 2. If YES: Use BR2_TARGET_ROOTFS_CPIO_NONE=y below.
# 3. If NO (it needs a compressed CPIO like XZ):
#    a. Change the INITRD variable in create_efi.sh to the correct compressed filename
#       (e.g., INITRD="${BINARIES_DIR}/rootfs-sbnb.cpio.xz").
#    b. Use the corresponding compression option below (e.g., BR2_TARGET_ROOTFS_CPIO_XZ=y).
#
# Assuming UNCOMPRESSED based on script variable:
</span><span class="nv">BR2_TARGET_ROOTFS_CPIO_NONE</span><span class="o">=</span>y
<span class="c"># BR2_TARGET_ROOTFS_CPIO_GZIP is not set
# BR2_TARGET_ROOTFS_CPIO_BZIP2 is not set
# BR2_TARGET_ROOTFS_CPIO_LZMA is not set
# BR2_TARGET_ROOTFS_CPIO_LZO is not set
# BR2_TARGET_ROOTFS_CPIO_LZ4 is not set
# BR2_TARGET_ROOTFS_CPIO_XZ is not set # Make sure this is commented out if using NONE
# BR2_TARGET_ROOTFS_CPIO_ZSTD is not set
# Set the output filename to match the script variable:
</span><span class="nv">BR2_TARGET_ROOTFS_CPIO_FILENAME</span><span class="o">=</span><span class="s2">"rootfs-sbnb.cpio"</span>
<span class="nv">BR2_TARGET_ROOTFS_CPIO_OPTS</span><span class="o">=</span><span class="s2">""</span>
<span class="nv">BR2_TARGET_ROOTFS_CPIO_ARGS</span><span class="o">=</span><span class="s2">""</span>

<span class="c"># ... (rest of packages remain the same) ...
</span><span class="nv">BR2_PACKAGE_SEVCTL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_SNPGUEST</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_TPM2_TOOLS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES</span><span class="o">=</span><span class="s2">"</span><span class="p">$(</span><span class="s2">BR2_EXTERNAL_SBNB_PATH</span><span class="p">)</span><span class="s2">/board/sbnb/sbnb/busybox.fragment"</span>
<span class="nv">BR2_TARGET_ROOTFS_SQUASHFS</span><span class="o">=</span>y
<span class="nv">BR2_TARGET_ROOTFS_SQUASHFS4_XZ</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_OPENVMTOOLS</span><span class="o">=</span>y
<span class="nv">BR2_SHARED_STATIC_LIBS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_FATRESIZE</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_MOKUTIL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_TCPDUMP</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOSFSTOOLS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOSFSTOOLS_FATLABEL</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOSFSTOOLS_FSCK_FAT</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_DOSFSTOOLS_MKFS_FAT</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_PYTHON3</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_PYTHON_PIP</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_PYTHON3_ZLIB</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_PYTHON_REQUESTS</span><span class="o">=</span>y
<span class="nv">BR2_PACKAGE_JQ</span><span class="o">=</span>y

</code></pre></div></div>

<p><strong>3. Explanation of Changes and Important Considerations:</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">create_efi.sh</code>:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nomodeset</code> was added to the <code class="language-plaintext highlighter-rouge">CMDLINE</code> variable.</li>
      <li>A check was added to ensure input files exist before <code class="language-plaintext highlighter-rouge">objcopy</code> runs.</li>
      <li>A comment was added regarding the <code class="language-plaintext highlighter-rouge">INITRD</code> variable path – <strong>you must verify</strong> if your script needs a compressed (e.g., <code class="language-plaintext highlighter-rouge">.xz</code>) or uncompressed CPIO file and adjust the <code class="language-plaintext highlighter-rouge">INITRD</code> variable in the script and the CPIO settings in the defconfig accordingly.</li>
      <li>A note was added about the <code class="language-plaintext highlighter-rouge">splash_offs</code> variable, which seems calculated but unused in the <code class="language-plaintext highlighter-rouge">objcopy</code> command of the original script. You may want to investigate this.</li>
      <li>The <code class="language-plaintext highlighter-rouge">rm</code> command ensures the temporary command line file is deleted.</li>
      <li>The <code class="language-plaintext highlighter-rouge">mv</code> command ensures the final <code class="language-plaintext highlighter-rouge">sbnb.efi</code> is placed in <code class="language-plaintext highlighter-rouge">output/images/</code>.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">sbnb_defconfig</code>:</strong>
    <ul>
      <li><strong>CPIO Configuration:</strong> This is the most critical part to verify. The configuration is set up assuming the script needs an <em>uncompressed</em> CPIO named <code class="language-plaintext highlighter-rouge">rootfs-sbnb.cpio</code>, based on the script’s <code class="language-plaintext highlighter-rouge">INITRD</code> variable. If your original <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_XZ=y</code> setting was intentional and the script <em>should</em> use a compressed initrd, you need to:
        <ol>
          <li>Change <code class="language-plaintext highlighter-rouge">INITRD</code> in the script (e.g., <code class="language-plaintext highlighter-rouge">INITRD="${BINARIES_DIR}/rootfs-sbnb.cpio.xz"</code>).</li>
          <li>Change the defconfig back to <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_XZ=y</code> (and comment out <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_NONE=y</code>).</li>
          <li>Ensure <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_FILENAME</code> results in the correct name if needed (it might default correctly if compression is enabled).</li>
        </ol>
      </li>
      <li><strong>Kernel Command Line:</strong> Comments explicitly state that <code class="language-plaintext highlighter-rouge">BR2_KERNEL_CMDLINE_*</code> options are ignored by the script but <em>are</em> relevant for Syslinux. You need to decide:
        <ul>
          <li>If Syslinux is used: Configure <code class="language-plaintext highlighter-rouge">BR2_KERNEL_CMDLINE_*</code> appropriately for it.</li>
          <li>If Syslinux is NOT used: Consider disabling <code class="language-plaintext highlighter-rouge">BR2_TARGET_SYSLINUX*</code> options to avoid confusion.</li>
        </ul>
      </li>
      <li><strong>Comments:</strong> Added comments to explain the hardcoded command line, the CPIO verification need, and the Syslinux interaction.</li>
    </ul>
  </li>
</ul>

<p><strong>4. Next Steps:</strong></p>

<ol>
  <li><strong>Verify CPIO Requirement:</strong> Determine the exact initramfs file (compressed or uncompressed, exact name) that <code class="language-plaintext highlighter-rouge">create_efi.sh</code> is intended to embed.</li>
  <li><strong>Apply Changes:</strong> Replace your existing files with these refactored versions, making sure the CPIO settings in <em>both</em> the script (<code class="language-plaintext highlighter-rouge">INITRD</code> variable) and the defconfig (<code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_*</code>) are consistent with your verified requirement. Adjust Syslinux settings as needed.</li>
  <li><strong>Rebuild:</strong> Navigate to your Buildroot top-level directory and run <code class="language-plaintext highlighter-rouge">make</code>. This will rebuild the necessary components and execute the post-image script.</li>
  <li><strong>Deploy:</strong> Use the updated <code class="language-plaintext highlighter-rouge">output/images/sbnb.efi</code> file to boot your GMKtec G5.</li>
  <li><strong>Verify:</strong> After booting, log in and run <code class="language-plaintext highlighter-rouge">cat /proc/cmdline</code> to confirm that <code class="language-plaintext highlighter-rouge">nomodeset</code> is present in the kernel command line arguments.</li>
</ol>

<p><strong>5. Further Considerations / Alternatives:</strong></p>

<ul>
  <li><strong>Reading Command Line from Buildroot:</strong> Instead of hardcoding the command line in <code class="language-plaintext highlighter-rouge">create_efi.sh</code>, a more robust approach would be to modify the script to read the command line configured via Buildroot’s <code class="language-plaintext highlighter-rouge">BR2_KERNEL_CMDLINE_*</code> options. This could involve reading the generated bootloader config file (like <code class="language-plaintext highlighter-rouge">syslinux.cfg</code>) or having Buildroot write the command line to a temporary file that the script reads. This makes configuration more centralized but requires more significant script changes.</li>
  <li><strong>Script Robustness:</strong> The provided <code class="language-plaintext highlighter-rouge">create_efi.sh</code> could benefit from more robust error checking (e.g., verifying <code class="language-plaintext highlighter-rouge">objcopy</code> success).</li>
</ul>

<p>By applying these changes and carefully verifying the CPIO configuration, you should successfully embed the <code class="language-plaintext highlighter-rouge">nomodeset</code> parameter into your custom EFI boot process.</p>

<hr />

<h1 id="second-approach">second approach</h1>

<p>Okay, let’s refine the approach for adding the <code class="language-plaintext highlighter-rouge">nomodeset</code> kernel parameter to your Buildroot OS image, specifically addressing the interaction between your <code class="language-plaintext highlighter-rouge">sbnb_defconfig</code> and the custom <code class="language-plaintext highlighter-rouge">create_efi.sh</code> script.</p>

<p><strong>Understanding the Context</strong></p>

<p>Your setup uses a custom post-image script (<code class="language-plaintext highlighter-rouge">board/sbnb/sbnb/scripts/create_efi.sh</code>) to generate a unified EFI executable (<code class="language-plaintext highlighter-rouge">sbnb.efi</code>). The critical point is that, in its original form, this script <strong>hardcodes the kernel command line arguments</strong> within the script itself. This bypasses Buildroot’s standard mechanism for managing kernel parameters via the <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> variable (or older <code class="language-plaintext highlighter-rouge">BR2_KERNEL_CMDLINE_*</code> options) in the configuration (<code class="language-plaintext highlighter-rouge">defconfig</code>).</p>

<p>Therefore, simply setting <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> in your <code class="language-plaintext highlighter-rouge">sbnb_defconfig</code> will <em>not</em> affect the <code class="language-plaintext highlighter-rouge">sbnb.efi</code> file generated by the original script.</p>

<p>We need to modify the system so that <code class="language-plaintext highlighter-rouge">nomodeset</code> is included in the command line embedded within <code class="language-plaintext highlighter-rouge">sbnb.efi</code>. There are two main ways to achieve this:</p>

<ol>
  <li><strong>Solution A (Quick Fix):</strong> Modify the script to include <code class="language-plaintext highlighter-rouge">nomodeset</code> in its hardcoded command line string. This is simpler but less maintainable.</li>
  <li><strong>Solution B (Recommended):</strong> Modify the script to <em>read</em> the command line from the Buildroot environment variable <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> and define <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> in your <code class="language-plaintext highlighter-rouge">sbnb_defconfig</code>. This aligns with standard Buildroot practices and centralizes configuration.</li>
</ol>

<p>We will also ensure the Buildroot configuration correctly generates the CPIO root filesystem expected by the script.</p>

<p><strong>Rationale Recap:</strong> The <code class="language-plaintext highlighter-rouge">nomodeset</code> parameter is being added as a troubleshooting step. It tells the kernel <em>not</em> to load video drivers and attempt display mode changes during initialization. This can prevent hangs or slowdowns caused by graphics driver issues on certain hardware, like the slow console output you observed.</p>

<hr />

<p><strong>Solution A: Modify Hardcoded Command Line in Script (Quick Fix)</strong></p>

<p>This approach directly edits the <code class="language-plaintext highlighter-rouge">CMDLINE</code> variable within <code class="language-plaintext highlighter-rouge">create_efi.sh</code>.</p>

<p><strong>1. Modify <code class="language-plaintext highlighter-rouge">board/sbnb/sbnb/scripts/create_efi.sh</code>:</strong></p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">--- a/board/sbnb/sbnb/scripts/create_efi.sh
</span><span class="gi">+++ b/board/sbnb/sbnb/scripts/create_efi.sh
</span><span class="p">@@ -10,8 +10,10 @@</span>
 KERNEL="${BINARIES_DIR}/bzImage"
 INITRD="${BINARIES_DIR}/rootfs-sbnb.cpio"
 OS_RELEASE="${TARGET_DIR}/etc/os-release"
<span class="gd">-CMDLINE="console=tty0 console=ttyS0 earlyprintk verbose intel_iommu=on module_blacklist=nouveau,nvidiafb,snd_hda_intel dyndbg=\"module firmware_class +p; module microcode +p; module ccp +p\""
</span><span class="gi">+# --- MODIFIED KERNEL COMMAND LINE (Hardcoded) ---
+# Added 'nomodeset'. Note: This bypasses standard Buildroot BR2_CMDLINE config.
+CMDLINE="console=tty0 console=ttyS0 earlyprintk verbose intel_iommu=on module_blacklist=nouveau,nvidiafb,snd_hda_intel dyndbg=\"module firmware_class +p; module microcode +p; module ccp +p\" nomodeset"
+# --- END MODIFICATION ---
</span> CMDLINE_TMP=$(mktemp)
 OUTPUT=sbnb.efi
<span class="err">
</span><span class="p">@@ -41,8 +43,13 @@</span>
     --add-section .initrd="${INITRD}" --change-section-vma .initrd=$(printf 0x%x $initrd_offs) \
     "${STUB}" "${OUTPUT}"
<span class="err">
</span><span class="gi">+# Clean up temporary file
+rm -f "${CMDLINE_TMP}"
+
</span> # Output the result
 echo "Output: ${OUTPUT}"
<span class="gi">+
+# Move the final EFI file to the standard Buildroot images directory (BINARIES_DIR=output/images)
+mv "${OUTPUT}" "${BINARIES_DIR}/"
+echo "Moved ${OUTPUT} to ${BINARIES_DIR}/"
</span><span class="err">
</span></code></pre></div></div>

<ul>
  <li><strong>Change:</strong> Added <code class="language-plaintext highlighter-rouge">nomodeset</code> to the end of the <code class="language-plaintext highlighter-rouge">CMDLINE</code> variable string.</li>
  <li><strong>Added:</strong> Cleanup for the temporary file (<code class="language-plaintext highlighter-rouge">rm -f "${CMDLINE_TMP}"</code>).</li>
  <li><strong>Added:</strong> <code class="language-plaintext highlighter-rouge">mv "${OUTPUT}" "${BINARIES_DIR}/"</code> to place the final artifact in the correct Buildroot output directory (<code class="language-plaintext highlighter-rouge">output/images</code>). Buildroot provides <code class="language-plaintext highlighter-rouge">BINARIES_DIR</code> in the environment when running post-image scripts.</li>
</ul>

<p><strong>2. Modify <code class="language-plaintext highlighter-rouge">configs/sbnb_defconfig</code> (CPIO Settings &amp; Comments):</strong></p>

<p>Ensure the CPIO settings match what the script expects (<code class="language-plaintext highlighter-rouge">rootfs-sbnb.cpio</code>, likely uncompressed). Add comments clarifying the hardcoded nature.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">--- a/configs/sbnb_defconfig
</span><span class="gi">+++ b/configs/sbnb_defconfig
</span><span class="p">@@ -8,9 +8,10 @@</span>
 BR2_ROOTFS_OVERLAY="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/rootfs-overlay"
 BR2_ROOTFS_PRE_BUILD_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/pre_build.sh"
 BR2_ROOTFS_POST_BUILD_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/post_build.sh"
<span class="gi">+# This post-image script creates a unified EFI executable (sbnb.efi)
+# IMPORTANT: With Solution A, the kernel command line is HARDCODED inside create_efi.sh
+# Standard BR2_CMDLINE options will NOT affect sbnb.efi in this case.
</span> BR2_ROOTFS_POST_IMAGE_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/scripts/create_efi.sh"
<span class="gd">-BR2_LINUX_KERNEL_GZIP=y
</span> BR2_LINUX_KERNEL=y
 BR2_LINUX_KERNEL_USE_CUSTOM_CONFIG=y
 # Switch back to upstream kernel once Restricted Injection hypervisor support
<span class="p">@@ -20,6 +21,7 @@</span>
 BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION="svsm"
 BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/kernel-config"
 BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES="kernel-config-firmware"
<span class="gi">+# BR2_CMDLINE is not set here as it's bypassed by the script in Solution A
</span> BR2_LINUX_KERNEL_NEEDS_HOST_LIBELF=y
 BR2_PACKAGE_HOST_LINUX_HEADERS_CUSTOM_6_11=y
 BR2_PACKAGE_LINUX_TOOLS_CPUPOWER=y
<span class="p">@@ -75,14 +77,11 @@</span>
 BR2_PACKAGE_HOST_PYTHON3_CURSES=y
 BR2_PACKAGE_HOST_PYTHON3_SSL=y
 BR2_PACKAGE_TAILSCALE=y
<span class="gi">+# Configure CPIO rootfs generation to match the script's expectation
</span> BR2_TARGET_ROOTFS_CPIO=y
<span class="gd">-# BR2_TARGET_ROOTFS_CPIO_XZ is not set
-BR2_PACKAGE_SEVCTL=y
-BR2_PACKAGE_SNPGUEST=y
-BR2_PACKAGE_TPM2_TOOLS=y
-BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/busybox.fragment"
-BR2_TARGET_ROOTFS_SQUASHFS=y
-BR2_TARGET_ROOTFS_SQUASHFS4_XZ=y
</span><span class="gi">+# Ensure CPIO is not compressed as the script uses the base name 'rootfs-sbnb.cpio'
+BR2_TARGET_ROOTFS_CPIO_NONE=y
+BR2_TARGET_ROOTFS_CPIO_FILENAME="rootfs-sbnb.cpio"
</span> BR2_PACKAGE_OPENVMTOOLS=y
 BR2_SHARED_STATIC_LIBS=y
 BR2_PACKAGE_FATRESIZE=y
<span class="p">@@ -97,4 +96,10 @@</span>
 BR2_PACKAGE_PYTHON3_ZLIB=y
 BR2_PACKAGE_PYTHON_REQUESTS=y
 BR2_PACKAGE_JQ=y
<span class="gi">+BR2_PACKAGE_SEVCTL=y
+BR2_PACKAGE_SNPGUEST=y
+BR2_PACKAGE_TPM2_TOOLS=y
+BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/busybox.fragment"
+BR2_TARGET_ROOTFS_SQUASHFS=y
+BR2_TARGET_ROOTFS_SQUASHFS4_XZ=y
</span><span class="err">
</span></code></pre></div></div>

<ul>
  <li><strong>Changes:</strong> Added comments about the hardcoded command line. Explicitly set <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_NONE=y</code> and <code class="language-plaintext highlighter-rouge">BR2_TARGET_ROOTFS_CPIO_FILENAME="rootfs-sbnb.cpio"</code> to ensure the correct, uncompressed CPIO file is generated for the script. Removed <code class="language-plaintext highlighter-rouge">BR2_LINUX_KERNEL_GZIP=y</code> as the script uses <code class="language-plaintext highlighter-rouge">bzImage</code>, implying bzip2 compression (which is the default for x86/x86_64 <code class="language-plaintext highlighter-rouge">bzImage</code> anyway, Buildroot handles this).</li>
</ul>

<p><strong>Drawbacks of Solution A:</strong></p>
<ul>
  <li>Kernel command line configuration is hidden within a script, not in the central Buildroot configuration.</li>
  <li>Harder to maintain and modify parameters later.</li>
</ul>

<hr />

<p><strong>Solution B: Integrate Script with Buildroot <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> (Recommended)</strong></p>

<p>This approach modifies the script to use the standard <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> variable defined in the defconfig. This is the preferred method for better integration and maintainability.</p>

<p><strong>1. Modify <code class="language-plaintext highlighter-rouge">board/sbnb/sbnb/scripts/create_efi.sh</code>:</strong></p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">--- a/board/sbnb/sbnb/scripts/create_efi.sh
</span><span class="gi">+++ b/board/sbnb/sbnb/scripts/create_efi.sh
</span><span class="p">@@ -10,8 +10,10 @@</span>
 KERNEL="${BINARIES_DIR}/bzImage"
 INITRD="${BINARIES_DIR}/rootfs-sbnb.cpio"
 OS_RELEASE="${TARGET_DIR}/etc/os-release"
<span class="gd">-CMDLINE="console=tty0 console=ttyS0 earlyprintk verbose intel_iommu=on module_blacklist=nouveau,nvidiafb,snd_hda_intel dyndbg=\"module firmware_class +p; module microcode +p; module ccp +p\""
</span><span class="gi">+# --- MODIFIED KERNEL COMMAND LINE (Read from Buildroot Env) ---
+# Read command line from BR2_CMDLINE environment variable provided by Buildroot.
+CMDLINE="${BR2_CMDLINE:?Error: BR2_CMDLINE environment variable not set or empty. Check Buildroot kernel configuration (BR2_CMDLINE).}"
+# --- END MODIFICATION ---
</span> CMDLINE_TMP=$(mktemp)
 OUTPUT=sbnb.efi
<span class="err">
</span><span class="p">@@ -41,8 +43,13 @@</span>
     --add-section .initrd="${INITRD}" --change-section-vma .initrd=$(printf 0x%x $initrd_offs) \
     "${STUB}" "${OUTPUT}"
<span class="err">
</span><span class="gi">+# Clean up temporary file
+rm -f "${CMDLINE_TMP}"
+
</span> # Output the result
 echo "Output: ${OUTPUT}"
<span class="gi">+
+# Move the final EFI file to the standard Buildroot images directory (BINARIES_DIR=output/images)
+mv "${OUTPUT}" "${BINARIES_DIR}/"
+echo "Moved ${OUTPUT} to ${BINARIES_DIR}/"
</span><span class="err">
</span></code></pre></div></div>

<ul>
  <li><strong>Change:</strong> Replaced the hardcoded <code class="language-plaintext highlighter-rouge">CMDLINE</code> variable with <code class="language-plaintext highlighter-rouge">CMDLINE="${BR2_CMDLINE:?...}"</code>. This reads the command line string from the <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> environment variable, which Buildroot sets based on the defconfig. The <code class="language-plaintext highlighter-rouge">:?Error...</code> part ensures the script fails if <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> isn’t properly set in the configuration, preventing silent errors.</li>
  <li><strong>Added:</strong> Cleanup and <code class="language-plaintext highlighter-rouge">mv</code> command as in Solution A.</li>
</ul>

<p><strong>2. Modify <code class="language-plaintext highlighter-rouge">configs/sbnb_defconfig</code>:</strong></p>

<p>Define <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> with all required parameters, including <code class="language-plaintext highlighter-rouge">nomodeset</code>. Also ensure CPIO settings are correct.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">--- a/configs/sbnb_defconfig
</span><span class="gi">+++ b/configs/sbnb_defconfig
</span><span class="p">@@ -8,9 +8,9 @@</span>
 BR2_ROOTFS_OVERLAY="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/rootfs-overlay"
 BR2_ROOTFS_PRE_BUILD_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/pre_build.sh"
 BR2_ROOTFS_POST_BUILD_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/post_build.sh"
<span class="gd">-# This post-image script creates a unified EFI executable (sbnb.efi)
-# IMPORTANT: The kernel command line is HARDCODED inside create_efi.sh
-# Standard BR2_KERNEL_CMDLINE_* options will NOT affect sbnb.efi
</span><span class="gi">+# This post-image script creates a unified EFI executable (sbnb.efi).
+# With Solution B, the script reads the command line from BR2_CMDLINE below.
</span> BR2_ROOTFS_POST_IMAGE_SCRIPT="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/scripts/create_efi.sh"
<span class="gd">-BR2_LINUX_KERNEL_GZIP=y
</span> BR2_LINUX_KERNEL=y
 BR2_LINUX_KERNEL_USE_CUSTOM_CONFIG=y
 # Switch back to upstream kernel once Restricted Injection hypervisor support
<span class="p">@@ -20,6 +20,8 @@</span>
 BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION="svsm"
 BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/kernel-config"
 BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES="kernel-config-firmware"
<span class="gi">+# Define the kernel command line arguments (used by create_efi.sh in Solution B)
+BR2_CMDLINE="console=tty0 console=ttyS0 earlyprintk verbose intel_iommu=on module_blacklist=nouveau,nvidiafb,snd_hda_intel dyndbg=\"module firmware_class +p; module microcode +p; module ccp +p\" nomodeset"
</span> BR2_LINUX_KERNEL_NEEDS_HOST_LIBELF=y
 BR2_PACKAGE_HOST_LINUX_HEADERS_CUSTOM_6_11=y
 BR2_PACKAGE_LINUX_TOOLS_CPUPOWER=y
<span class="p">@@ -75,14 +77,11 @@</span>
 BR2_PACKAGE_HOST_PYTHON3_CURSES=y
 BR2_PACKAGE_HOST_PYTHON3_SSL=y
 BR2_PACKAGE_TAILSCALE=y
<span class="gi">+# Configure CPIO rootfs generation to match the script's expectation
</span> BR2_TARGET_ROOTFS_CPIO=y
<span class="gd">-# BR2_TARGET_ROOTFS_CPIO_XZ is not set
-BR2_PACKAGE_SEVCTL=y
-BR2_PACKAGE_SNPGUEST=y
-BR2_PACKAGE_TPM2_TOOLS=y
-BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/busybox.fragment"
-BR2_TARGET_ROOTFS_SQUASHFS=y
-BR2_TARGET_ROOTFS_SQUASHFS4_XZ=y
</span><span class="gi">+# Ensure CPIO is not compressed as the script uses the base name 'rootfs-sbnb.cpio'
+BR2_TARGET_ROOTFS_CPIO_NONE=y
+BR2_TARGET_ROOTFS_CPIO_FILENAME="rootfs-sbnb.cpio"
</span> BR2_PACKAGE_OPENVMTOOLS=y
 BR2_SHARED_STATIC_LIBS=y
 BR2_PACKAGE_FATRESIZE=y
<span class="p">@@ -97,4 +96,10 @@</span>
 BR2_PACKAGE_PYTHON3_ZLIB=y
 BR2_PACKAGE_PYTHON_REQUESTS=y
 BR2_PACKAGE_JQ=y
<span class="gi">+BR2_PACKAGE_SEVCTL=y
+BR2_PACKAGE_SNPGUEST=y
+BR2_PACKAGE_TPM2_TOOLS=y
+BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_SBNB_PATH)/board/sbnb/sbnb/busybox.fragment"
+BR2_TARGET_ROOTFS_SQUASHFS=y
+BR2_TARGET_ROOTFS_SQUASHFS4_XZ=y
</span><span class="err">
</span></code></pre></div></div>

<ul>
  <li><strong>Changes:</strong> Added the <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code> definition containing the full command string including <code class="language-plaintext highlighter-rouge">nomodeset</code>. Adjusted comments. Ensured CPIO settings are correct (same as Solution A). Removed <code class="language-plaintext highlighter-rouge">BR2_LINUX_KERNEL_GZIP=y</code> (same reason as Solution A).</li>
</ul>

<p><strong>Benefits of Solution B:</strong></p>
<ul>
  <li>Centralizes kernel command line configuration in the standard Buildroot <code class="language-plaintext highlighter-rouge">defconfig</code>.</li>
  <li>Easier to manage and modify parameters using <code class="language-plaintext highlighter-rouge">make menuconfig</code> (under <code class="language-plaintext highlighter-rouge">Kernel -&gt; Kernel command line string</code>).</li>
  <li>Aligns with standard Buildroot practices.</li>
</ul>

<hr />

<p><strong>Next Steps (Apply either Solution A or B):</strong></p>

<ol>
  <li><strong>Apply Changes:</strong> Replace the content of your existing <code class="language-plaintext highlighter-rouge">board/sbnb/sbnb/scripts/create_efi.sh</code> and <code class="language-plaintext highlighter-rouge">configs/sbnb_defconfig</code> with the versions from your chosen solution (Solution B is recommended).</li>
  <li><strong>Rebuild:</strong> Navigate to your Buildroot top-level directory in the terminal and run:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make
</code></pre></div>    </div>
    <p>Buildroot will rebuild the necessary components and execute the post-image script, generating a new <code class="language-plaintext highlighter-rouge">output/images/sbnb.efi</code>.</p>
  </li>
  <li><strong>Deploy:</strong> Copy the updated <code class="language-plaintext highlighter-rouge">output/images/sbnb.efi</code> to your target system’s EFI System Partition (ESP).</li>
  <li><strong>Boot:</strong> Boot your GMKtec G5 from the updated EFI file.</li>
  <li><strong>Verify:</strong> Once the system has booted (even if slowly), log in to a console and run the following command to check if <code class="language-plaintext highlighter-rouge">nomodeset</code> was actually passed to the kernel:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/cmdline
</code></pre></div>    </div>
    <p>Look for <code class="language-plaintext highlighter-rouge">nomodeset</code> within the output string.</p>
  </li>
</ol>

<p><strong>Long-Term Alternative:</strong></p>

<p>While outside the scope of simply adding <code class="language-plaintext highlighter-rouge">nomodeset</code>, you might eventually consider whether the custom <code class="language-plaintext highlighter-rouge">create_efi.sh</code> script is strictly necessary. Buildroot has built-in support for generating bootable images using standard bootloaders like GRUB2 or syslinux, which handle kernel parameters through their own configuration files managed by Buildroot based on <code class="language-plaintext highlighter-rouge">BR2_CMDLINE</code>. Migrating to a standard bootloader setup could simplify your build process further, but would require more significant changes.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>