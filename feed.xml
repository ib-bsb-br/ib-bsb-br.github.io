<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-05-27T11:31:24+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Actually Portable Executable</title><link href="https://ib.bsb.br/actually-portable-executable/" rel="alternate" type="text/html" title="Actually Portable Executable" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T02:41:56+00:00</updated><id>https://ib.bsb.br/actually-portable-executable</id><content type="html" xml:base="https://ib.bsb.br/actually-portable-executable/"><![CDATA[<p>Markdown Content:
24 aug 2020 @ <a href="https://justine.lol/index.html">justine’s web page</a></p>

<h2 id="αcτµαlly-pδrταblε-εxεcµταblε">αcτµαlly pδrταblε εxεcµταblε</h2>

<p>One day, while studying old code, I found out that it’s possible to encode Windows Portable Executable files as a UNIX Sixth Edition shell script, due to the fact that the Thompson Shell didn’t use a shebang line. Once I realized it’s possible to create a synthesis of the binary formats being used by Unix, Windows, and MacOS, I couldn’t resist the temptation of making it a reality, since it means that high-performance native code can be almost as pain-free as web apps. Here’s how it works:</p>

<p>MZqFpD=’
BIOS BOOT SECTOR’
exec 7&lt;&gt; $(command -v $0)
printf ‘\177ELF…LINKER-ENCODED-FREEBSD-HEADER’ &gt;&amp;7
exec “$0” “$@”
exec qemu-x86_64 “$0” “$@”
exit 1
REAL MODE…
ELF SEGMENTS…
OPENBSD NOTE…
NETBSD NOTE…
MACHO HEADERS…
CODE AND DATA…
ZIP DIRECTORY…</p>

<p>I started a project called <a href="https://github.com/jart/cosmopolitan">Cosmopolitan</a> which implements the <a href="https://raw.githubusercontent.com/jart/cosmopolitan/1.0/ape/ape.S">αcτµαlly pδrταblε εxεcµταblε</a> format. I chose the name because I like the idea of having the freedom to write software without restrictions that transcends traditional boundaries. My goal has been helping C become a build-once run-anywhere language, suitable for greenfield development, while avoiding any assumptions that would prevent software from being shared between tech communities. Here’s how simple it is to get started:</p>

<p>gcc -g -O -static -fno-pie -no-pie -mno-red-zone -nostdlib -nostdinc -o hello.com hello.c <br />
  -Wl,–oformat=binary -Wl,–gc-sections -Wl,-z,max-page-size=0x1000 -fuse-ld=bfd -gdwarf-4 <br />
  -Wl,-T,<a href="https://justine.lol/cosmopolitan/ape.lds">ape.lds</a> -include <a href="https://justine.lol/cosmopolitan/cosmopolitan.h">cosmopolitan.h</a> <a href="https://justine.lol/cosmopolitan/crt.o">crt.o</a> <a href="https://justine.lol/cosmopolitan/ape.o">ape.o</a> <a href="https://justine.lol/cosmopolitan/cosmopolitan.a">cosmopolitan.a</a></p>

<p>In the above one-liner, we’ve basically reconfigured the stock compiler on Linux so it outputs binaries that’ll run on MacOS, Windows, FreeBSD, OpenBSD, and NetBSD too. They also boot from the BIOS. Please note this is intended for people who don’t care about desktop GUIs, and just want stdio and sockets without devops toil.</p>

<h3 id="platform-agnostic-c--c--fortran-tooling">Platform Agnostic C / C++ / FORTRAN Tooling</h3>

<p>Who could have predicted that cross-platform native builds would be this easy? As it turns out, they’re surprisingly cheap too. Even with all the magic numbers, win32 utf-8 polyfills, and bios bootloader code, exes still end up being roughly 100x smaller than Go Hello World:</p>

<p><a href="https://justine.lol/life.com">life.com</a> is 12kb (<a href="https://worker.jart.workers.dev/life.com.dbg">symbols</a>, <a href="https://raw.githubusercontent.com/jart/cosmopolitan/1.0/examples/life.c">source</a>)</p>

<p><a href="https://justine.lol/hello.com">hello.com</a> is 16kb (<a href="https://worker.jart.workers.dev/hello.com.dbg">symbols</a>, <a href="https://raw.githubusercontent.com/jart/cosmopolitan/1.0/examples/hello.c">source</a>)</p>

<p>Please note that zsh has a minor backwards compatibility glitch with Thompson Shell [update 2021-02-15: <a href="https://github.com/zsh-users/zsh/commit/326d9c203b3980c0f841bc62b06e37134c6e51ea">zsh has now been patched</a>] so try <code class="language-plaintext highlighter-rouge">sh hello.com</code> rather than <code class="language-plaintext highlighter-rouge">./hello.com</code>. That one thing aside, if it’s this easy, why has no one done this before? The best answer I can tell is it requires a minor ABI change, where C preprocessor macros relating to system interfaces need to be symbolic. This is barely an issue, except in cases like <code class="language-plaintext highlighter-rouge">switch(errno){case EINVAL:...}</code>. If we feel comfortable bending the rules, then the GNU Linker can easily be configured to generate at linktime all the PE/Darwin data structures we need, without any special toolchains.</p>

<h3 id="pkzip-executables-make-pretty-good-containers">PKZIP Executables Make Pretty Good Containers</h3>

<p>Single-file executables are nice to have. There are a few cases where static executables depending on system files makes sense, e.g. zoneinfo. However we can’t make that assumption if we’re building binaries intended to run on multiple distros with Windows support too.</p>

<p>As it turns out, PKZIP was designed to place its magic marker at the end of file, rather than the beginning, so we can synthesize ELF/PE/MachO binaries with ZIP too! I was able to implement this efficiently in the Cosmopolitan codebase using a few lines of linker script, along with a program for incrementally compressing sections.</p>

<p>It’s possible to run <code class="language-plaintext highlighter-rouge">unzip -vl executable.com</code> to view its contents. It’s also possible on Windows 10 to change the file extension to .zip and then open it in Microsoft’s bundled ZIP GUI. Having that flexibility of being able to easily edit assets post-compilation means we can also do things like create an easily distributable JavaScript interpreter that reflectively loads interpreted sources via zip.</p>

<p><a href="https://justine.lol/hellojs.com">hellojs.com</a> is 300kb (<a href="https://worker.jart.workers.dev/hellojs.com.dbg">symbols</a>, <a href="https://github.com/jart/cosmopolitan/blob/1.0/examples/hellojs.c">source</a>)</p>

<p>Cosmopolitan also uses the ZIP format to automate compliance with the GPLv2 [update 2020-12-28: APE is now licensed ISC]. The non-commercial libre build is configured, by default, to embed any source file linked from within the hermetic make mono-repo. That makes binaries roughly 10x larger. For example:</p>

<p><a href="https://justine.lol/life2.com">life2.com</a> is 216kb (<a href="https://worker.jart.workers.dev/life2.com.dbg">symbols</a>, <a href="https://github.com/jart/cosmopolitan/blob/1.0/examples/life.c">source</a>)</p>

<p><a href="https://justine.lol/hello2.com">hello2.com</a> is 256kb (<a href="https://worker.jart.workers.dev/hello2.com.dbg">symbols</a>, <a href="https://github.com/jart/cosmopolitan/blob/1.0/examples/hello.c">source</a>)</p>

<p>Rock musicians have a love-hate relationship with dynamic range compression, since it removes a dimension of complexity from their music, but is necessary in order to sound professional. Bloat might work by the same principles, in which case, zip source file embedding could be a more socially conscious way of wasting resources in order to gain appeal with the non-classical software consumer.</p>

<h3 id="x86-64-linux-abi-makes-a-pretty-good-lingua-franca">x86-64 Linux ABI Makes a Pretty Good Lingua Franca</h3>

<p>It wasn’t until very recently in computing history that a clear shakeout occurred with hardware architectures, which is best evidenced by the <a href="https://en.wikipedia.org/w/index.php?title=TOP500&amp;oldid=966847096#Architecture_and_operating_systems">TOP 500 list</a>. Outside phones routers mainframes and cars, the consensus surrounding x86 is so strong, that I’d compare it to the Tower of Babel. Thanks to Linus Torvalds, we not only have a consensus on architecture, but we’ve come pretty close to having a consensus on the input output mechanism by which programs communicate with their host machines, via the SYSCALL instruction. He accomplished that by sitting at home in a bathrobe sending emails to huge corporations, getting them to agree to devote their resources to creating something beautifully opposite to tragedy of the commons.</p>

<p>So I think it’s really the best of times to be optimistic about systems engineering. We agree more on sharing things in common than we ever have. There are still outliers like the plans coming out of Apple and Microsoft we hear about in the news, where they’ve sought to pivot PCs towards ARM. I’m not sure why we need a C-Class Macintosh, since the x86_64 patents should expire this year. Apple could have probably made their own x86 chip without paying royalties. The free/open architecture that we’ve always dreamed of, might turn out to be the one we’re already using.</p>

<p>If a microprocessor architecture consensus finally exists, then I believe we should be focusing on building better tools that help software developers benefit from it. One of the ways I’ve been focusing on making a contribution in that area, is by building a friendlier way to visualize the impact that x86-64 execution has on memory. It should should hopefully clarify how αcτµαlly pδrταblε εxεcµταblε works.</p>

<p>You’ll notice that execution starts off by treating the Windows PE header as though it were code. For example, the ASCII string <code class="language-plaintext highlighter-rouge">"MZqFpD"</code> decodes as <code class="language-plaintext highlighter-rouge">pop %r10 ; jno 0x4a ; jo 0x4a</code> and the string <code class="language-plaintext highlighter-rouge">"\177ELF"</code> decodes as <code class="language-plaintext highlighter-rouge">jg 0x47</code>. It then hops through a mov statement which tells us the program is being run from userspace rather than being booted, and then hops to the entrypoint.</p>

<p>Magic numbers are then <a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/sysv/systemfive.S">easily unpacked</a> for the host operating system using decentralized sections and the GNU Assembler <code class="language-plaintext highlighter-rouge">.sleb128</code> directive. Low entropy data like UNICODE bit lookup tables will generally be decoded using either a <a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/str/lz4cpy.c">103 byte LZ4 decompressor</a> or a <a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/nexgen32e/rldecode.S">17 byte run-length decoder</a>, and runtime code morphing can easily be done using Intel’s <a href="https://github.com/jart/cosmopolitan/blob/1.0/third_party/xed/x86ild.greg.c">3kb x86 decoder</a>.</p>

<p>Please note that this emulator isn’t a requirement. αcτµαlly pδrταblε εxεcµταblεs work fine if you just run them on the shell, the NT command prompt, or boot them from the BIOS. This isn’t a JVM. You only use the emulator if you need it. For example, it’s helpful to be able to have cool visualizations of how program execution impacts memory.</p>

<p>It’ll be nice to know that any normal PC program we write will “just work” on Raspberry Pi and Apple ARM. All we have to do embed an ARM build of the emulator above within our x86 executables, and have them morph and re-exec appropriately, similar to how Cosmopolitan is already doing doing with qemu-x86_64, except that this wouldn’t need to be installed beforehand. The tradeoff is that, if we do this, binaries will only be 10x smaller than Go’s Hello World, instead of 100x smaller. The other tradeoff is the GCC Runtime Exception forbids code morphing, but I already took care of that for you, by rewriting the GNU runtimes.</p>

<p>The most compelling use case for making x86-64-linux-gnu as tiny as possible, with the availability of full emulation, is that it enables normal simple native programs to run everywhere including web browsers by default. Many of the solutions built in this area tend to focus too much on the interfaces that haven’t achieved consensus, like GUIs and threads, otherwise they’ll just emulate the entire operating system, like Docker or Fabrice Bellard running Windows in browsers. I think we need compatibility glue that just runs programs, ignores the systems, and treats x86_64-linux-gnu as a canonical software encoding.</p>

<h3 id="long-lifetime-without-maintenance">Long Lifetime Without Maintenance</h3>

<p>One of the reasons why I love working with a lot of these old technologies, is that I want any software work I’m involved in to stand the test of time with minimal toil. Similar to how the Super Mario Bros ROM has managed to survive all these years without needing a GitHub issue tracker.</p>

<p>I believe the best chance we have of doing that, is by gluing together the binary interfaces that’ve already achieved a decades-long consensus, and ignoring the APIs. For example, here are the <a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/sysv/consts.sh">magic numbers</a> used by Mac, Linux, BSD, and Windows distros. They’re worth seeing at least once in your life, since these numbers underpin the internals of nearly all the computers, servers, and phones you’ve used.</p>

<p>If we focus on the subset of numbers all systems share in common, and compare it to their common ancestor, Bell System Five, we can see that few things about systems engineering have changed in the last 40 years at the binary level. Magnums are boring. Platforms can’t break them without breaking themselves. Few people have proposed visions over the years on why UNIX numerology needs to change.</p>

<p><strong>download <img src="https://worker.jart.workers.dev/redbean/linux.png" alt="Image 1: [Linux]" /><img src="https://worker.jart.workers.dev/redbean/windows10.png" alt="Image 2: [Windows]" /><img src="https://worker.jart.workers.dev/redbean/msdos60.png" alt="Image 3: [DOS]" /><img src="https://worker.jart.workers.dev/redbean/macos.png" alt="Image 4: [MacOS]" /><img src="https://worker.jart.workers.dev/redbean/freebsd64.png" alt="Image 5: [FreeBSD]" /><img src="https://worker.jart.workers.dev/redbean/openbsd.png" alt="Image 6: [OpenBSD]" /><img src="https://worker.jart.workers.dev/redbean/netbsd2.png" alt="Image 7: [NetBSD]" /></strong></p>

<p><a href="https://justine.lol/emulator.com">emulator.com</a> (280k PE+ELF+MachO+ZIP+SH)</p>

<p><a href="https://justine.lol/tinyemu.com">tinyemu.com</a> (188k PE+ELF+MachO+ZIP+SH)</p>

<p><strong>source code</strong></p>

<p><a href="https://raw.githubusercontent.com/jart/cosmopolitan/1.0/ape/ape.S">ape.S</a></p>

<p><a href="https://raw.githubusercontent.com/jart/cosmopolitan/1.0/ape/ape.lds">ape.lds</a></p>

<p><a href="https://github.com/jart/cosmopolitan/blob/1.0/tool/build/blinkenlights.c">blinkenlights.c</a></p>

<p><a href="https://github.com/jart/cosmopolitan/blob/1.0/third_party/xed/x86ild.greg.c">x86ild.greg.c</a></p>

<p><a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/sysv/syscalls.sh">syscalls.sh</a></p>

<p><a href="https://github.com/jart/cosmopolitan/blob/1.0/libc/sysv/consts.sh">consts.sh</a></p>

<p><strong>programs</strong></p>

<p><a href="https://justine.lol/life.com">life.com</a> (12kb ape <a href="https://worker.jart.workers.dev/life.com.dbg">symbols</a>)</p>

<p><a href="https://justine.lol/sha256.elf">sha256.elf</a> (3kb x86_64-linux-gnu)</p>

<p><a href="https://justine.lol/hello.bin">hello.bin</a> (55b x86_64-linux-gnu)</p>

<p><strong>example</strong></p>

<p>bash hello.com              # runs it natively
./hello.com                 # runs it natively
./tinyemu.com hello.com     # just runs program
./emulator.com -t life.com  # show debugger gui
echo hello | ./emulator.com sha256.elf</p>

<p><strong>manual</strong></p>

<p>SYNOPSIS</p>

<p>./emulator.com [-?HhrRstv] [ROM] [ARGS…]</p>

<p>DESCRIPTION</p>

<p>Emulates x86 Linux Programs w/ Dense Machine State Visualization
  Please keep still and only watchen astaunished das blinkenlights</p>

<p>FLAGS</p>

<p>-h        help
  -z        zoom
  -v        verbosity
  -r        real mode
  -s        statistics
  -H        disable highlight
  -t        tui debugger mode
  -R        reactive tui mode
  -b ADDR   push a breakpoint
  -L PATH   log file location</p>

<p>ARGUMENTS</p>

<p>ROM files can be ELF or a flat αcτµαlly pδrταblε εxεcµταblε.
  It should use x86_64 in accordance with the System Five ABI.
  The SYSCALL ABI is defined as it is written in Linux Kernel.</p>

<p>FEATURES</p>

<p>8086, 8087, i386, x86_64, SSE3, SSSE3, POPCNT, MDA, CGA, TTY</p>

<p>WEBSITE</p>

<p>https://justine.lol/blinkenlights/</p>

<p><strong>credits</strong></p>

<p>Jilles Tjoelker from the FreeBSD project played an instrumental role in helping me to get the POSIX rules changed to allow binary in shell scripts, which is what made this project possible. The monospace font used on this page is called <a href="https://fsd.it/shop/fonts/pragmatapro/">PragmataPro</a> and it was was designed by <a href="https://en.wikipedia.org/wiki/Fabrizio_Schiavi">Fabrizio Schiavi</a> in Italy.</p>

<p><strong>funding</strong></p>

<p><a href="https://justine.lol/lemuria.png"><img src="https://worker.jart.workers.dev/sectorlisp2/lemuria.png" alt="Image 8: [United States of Lemuria - two dollar bill - all debts public and primate]" /></a></p>

<p>Funding for this technology was crowdsourced from Justine Tunney’s <a href="https://github.com/sponsors/jart">GitHub sponsors</a> and <a href="https://www.patreon.com/jart">Patreon subscribers</a>. Your support is what makes projects like Actually Portable Executable possible. Thank you.</p>

<p><strong>see also</strong></p>

<p><a href="https://justine.lol/">justine’s web page</a></p>

<p><img src="https://ipv4.games/claim?name=jart" alt="Image 9" /></p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">leveraging Blink with rk3588 to run x86-64 Linux command-line software</title><link href="https://ib.bsb.br/leveraging-blink-with-rk3588-to-run-x86-64-linux-command-line-software/" rel="alternate" type="text/html" title="leveraging Blink with rk3588 to run x86-64 Linux command-line software" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T03:21:04+00:00</updated><id>https://ib.bsb.br/leveraging-blink-with-rk3588-to-run-x86-64-linux-command-line-software</id><content type="html" xml:base="https://ib.bsb.br/leveraging-blink-with-rk3588-to-run-x86-64-linux-command-line-software/"><![CDATA[<p>It is definitely possible to build and run the Blink project on your arm64 rk3588 machine running Debian Bullseye (Linux 5.10, glibc 2.31). Blink is designed for portability and includes Just-In-Time (JIT) compilation support for the aarch64 architecture, which your rk3588 utilizes. The absence of the KVM kernel module is not a concern, as Blink operates as a user-mode virtual machine and does not rely on hardware-assisted virtualization like KVM for its x86-64 emulation.</p>

<p><strong>I. Core Purpose of the Blink Project</strong></p>

<p>The Blink project consists of two main components:</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">blink</code> (Headless Virtual Machine):</strong>
    <ul>
      <li>This program executes x86-64 Linux applications on diverse operating systems and hardware architectures, including your ARM64-based rk3588.</li>
      <li>It serves as a lightweight alternative to <code class="language-plaintext highlighter-rouge">qemu-x86_64</code> (user-mode QEMU), often with a smaller binary footprint and potentially better performance for certain workloads, especially ephemeral tasks like compilation.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">blinkenlights</code> (Terminal User Interface Debugger):</strong>
    <ul>
      <li>This is a TUI-based visual debugger for x86-64 Linux programs (and also supports i8086 real-mode programs).</li>
      <li>It offers unique debugging capabilities, such as visualizing memory changes in real-time using CP437 characters and supporting reverse debugging through scroll wheel interaction.</li>
    </ul>
  </li>
</ol>

<p><strong>II. Requirements for Building and Running Blink on Your RK3588</strong></p>

<p><strong>A. Build-Time Dependencies (for compiling Blink from source):</strong></p>

<p>To build Blink on your Debian Bullseye system, you will need the following:</p>

<ul>
  <li><strong>C11 Compiler:</strong> GCC (GNU Compiler Collection) version 10.x or newer, typically provided by the <code class="language-plaintext highlighter-rouge">build-essential</code> package, is recommended. Blink requires C11 features and atomics support.</li>
  <li><strong>GNU Make:</strong> Version 4.0 or newer.</li>
  <li><strong>Standard Build Utilities:</strong> Tools like <code class="language-plaintext highlighter-rouge">sh</code>, <code class="language-plaintext highlighter-rouge">uname</code>, <code class="language-plaintext highlighter-rouge">mkdir</code>, <code class="language-plaintext highlighter-rouge">cp</code>, <code class="language-plaintext highlighter-rouge">rm</code>, <code class="language-plaintext highlighter-rouge">tar</code>, <code class="language-plaintext highlighter-rouge">gzip</code>, <code class="language-plaintext highlighter-rouge">xz-utils</code>.</li>
  <li><strong>Development Libraries:</strong>
    <ul>
      <li><strong>libc6-dev:</strong> For glibc 2.31 development headers.</li>
      <li><strong>zlib1g-dev (Recommended):</strong> For gzip stream processing. Blink can use a vendored copy if this is not found.</li>
      <li><strong>pkg-config (Recommended):</strong> Helps the build system locate libraries.</li>
      <li><strong>libunwind-dev (Optional):</strong> For enhanced backtrace functionality within Blink itself (primarily for Blink developers).</li>
      <li><strong>liblzma-dev (Optional):</strong> May be a dependency of <code class="language-plaintext highlighter-rouge">libunwind-dev</code>.</li>
    </ul>

    <p>You can install most of these with:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>build-essential pkg-config curl <span class="nb">tar gzip </span>xz-utils zlib1g-dev libunwind-dev liblzma-dev
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>B. Runtime Requirements (for the Blink programs themselves):</strong></p>

<ul>
  <li><strong>ARM64 (aarch64) Architecture:</strong> Your rk3588 meets this.</li>
  <li><strong>POSIX-compliant OS:</strong> Debian Bullseye with Linux kernel 5.10.</li>
  <li><strong>glibc 2.31:</strong> As specified.</li>
  <li><strong>Sufficient RAM:</strong> Your 32 GiB is more than adequate.</li>
  <li><strong>Sufficient CPU:</strong> Your 8 CPU cores are well-suited, especially for multi-threaded guest applications.</li>
  <li><strong>No KVM Required:</strong> Blink operates entirely in userspace.</li>
</ul>

<p><strong>C. Requirements for Guest x86-64 Programs to Run Effectively under Blink:</strong></p>

<ul>
  <li><strong>Executable Format:</strong> Standard x86-64 Linux ELF (static or dynamic), Actually Portable Executables (APE), or flat binary files (ending in <code class="language-plaintext highlighter-rouge">.bin</code>, <code class="language-plaintext highlighter-rouge">.img</code>, <code class="language-plaintext highlighter-rouge">.raw</code>).</li>
  <li><strong>C Library (Guest):</strong>
    <ul>
      <li><strong>Optimal:</strong> Programs built with Cosmopolitan Libc or Musl Libc (e.g., from Alpine Linux) tend to work best due to their reliance on a more standardized syscall subset.</li>
      <li><strong>Generally Good:</strong> Statically linked Glibc programs or dynamically linked ones can also work, though Glibc sometimes uses newer or more obscure Linux-specific syscalls that Blink might not emulate.</li>
    </ul>
  </li>
  <li><strong>Syscall Usage:</strong> Guest programs should primarily use POSIX-standard syscalls and common Linux extensions.</li>
  <li><strong>Memory Management by Guest:</strong> For best compatibility across different host page sizes (though your Linux setup likely uses 4KB pages), guest programs performing direct memory mapping should ideally query the page size via <code class="language-plaintext highlighter-rouge">sysconf(_SC_PAGESIZE)</code> or <code class="language-plaintext highlighter-rouge">getauxval(AT_PAGESZ)</code>.</li>
  <li><strong>Compilation Flags for Guest (for <code class="language-plaintext highlighter-rouge">blinkenlights</code> debugging):</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">-fno-omit-frame-pointer</code></li>
      <li><code class="language-plaintext highlighter-rouge">-mno-omit-leaf-frame-pointer</code> (Helps <code class="language-plaintext highlighter-rouge">blinkenlights</code> generate better stack backtraces)</li>
    </ul>
  </li>
</ul>

<p><strong>III. Implementation Steps: Building Blink from Source</strong></p>

<ol>
  <li><strong>Ensure Dependencies are Met:</strong> Install the packages listed in section II.A.</li>
  <li><strong>Clone/Obtain Source Code:</strong> (You have provided this as context).</li>
  <li><strong>Configure the Build:</strong> Navigate to the project’s root directory and run:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure
</code></pre></div>    </div>
    <ul>
      <li>Review <code class="language-plaintext highlighter-rouge">./configure --help</code> for options. For example:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">--enable-vfs</code>: If you need more robust chroot-like behavior than the default overlay system.</li>
          <li><code class="language-plaintext highlighter-rouge">--disable-jit</code>, <code class="language-plaintext highlighter-rouge">--disable-x87</code>, etc.: To create smaller binaries by removing features (see <code class="language-plaintext highlighter-rouge">configure --help</code> and the README for details on size savings).</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Compile:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span>  <span class="c"># Uses all available CPU cores</span>
</code></pre></div>    </div>
    <p>This will produce executables like <code class="language-plaintext highlighter-rouge">o/blink/blink</code> and <code class="language-plaintext highlighter-rouge">o/blink/blinkenlights</code> (assuming the default <code class="language-plaintext highlighter-rouge">MODE</code>).</p>
  </li>
  <li><strong>Run (Optional Install):</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># To run directly from the build directory:</span>
o/blink/blink /path/to/x86-64-linux-program <span class="o">[</span>args...]
o/blink/blinkenlights /path/to/x86-64-linux-program <span class="o">[</span>args...]

<span class="c"># To install system-wide (optional):</span>
<span class="nb">sudo </span>make <span class="nb">install
</span>blink /path/to/x86-64-linux-program <span class="o">[</span>args...]
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>IV. Leveraging Your RK3588 Hardware</strong></p>

<p>Your rk3588’s specifications are well-suited for Blink:</p>

<ul>
  <li><strong>ARM64 JIT (Just-In-Time Compilation):</strong> Blink’s JIT for aarch64 is a key feature. It translates x86-64 instruction blocks into native ARM64 machine code at runtime. This significantly boosts performance over pure interpretation, making many x86-64 applications run efficiently on your ARM64 CPU.</li>
  <li><strong>32 GiB RAM:</strong> This generous amount of RAM is highly beneficial for:
    <ul>
      <li>Running larger and more memory-intensive x86-64 guest programs.</li>
      <li>Allowing Blink’s JIT to maintain a larger cache of translated code, reducing recompilation overhead.</li>
      <li>Supporting Blink’s linear memory optimization effectively, which aims to map guest memory directly.</li>
      <li>Running multiple Blink instances or other demanding applications alongside Blink without memory contention.</li>
    </ul>
  </li>
  <li><strong>8 CPU Cores:</strong>
    <ul>
      <li>While the core emulation loop for a single guest thread within Blink is single-threaded, if the x86-64 guest application itself is multi-threaded (using <code class="language-plaintext highlighter-rouge">clone()</code>, <code class="language-plaintext highlighter-rouge">fork()</code>, pthreads, etc.), Blink will emulate these threads. This allows the guest application to potentially leverage multiple cores on your RK3588, distributing its workload.</li>
      <li>The JIT compilation process itself can also benefit from available CPU resources during its analysis and code generation phases.</li>
    </ul>
  </li>
</ul>

<p><strong>V. Best Use Cases on Your RK3588 System</strong></p>

<p>Considering your hardware, Blink is ideal for:</p>

<ol>
  <li><strong>Running x86-64 Linux Command-Line Interface (CLI) Tools:</strong>
    <ul>
      <li><strong>Development &amp; Build Tools:</strong> Execute specific versions of x86-64 compilers (GCC, Clang), build systems (Make, CMake variants), or other development utilities not readily available or suitable in a native ARM64 version. Your 8 cores and 32GB RAM can handle substantial compilation tasks.</li>
      <li><strong>Scripting &amp; Interpreters:</strong> Run x86-64 versions of Python, Perl, Node.js, Ruby, etc., for compatibility or specific library needs.</li>
      <li><strong>Utilities:</strong> Use various x86-64 Linux system administration or data processing tools.</li>
    </ul>
  </li>
  <li><strong>Cross-Architecture Development and Debugging:</strong>
    <ul>
      <li>Compile and test the x86-64 Linux versions of your software directly on your ARM64 machine.</li>
      <li>Utilize <code class="language-plaintext highlighter-rouge">blinkenlights</code> for in-depth visual debugging of these x86-64 binaries, leveraging its unique features to understand program behavior without needing a separate x86-64 machine.</li>
    </ul>
  </li>
  <li><strong>Running Lightweight to Moderately Demanding x86-64 Server Applications:</strong>
    <ul>
      <li>If you have specific server software (e.g., custom daemons, specialized web services, older database versions) that are only available as x86-64 Linux binaries, Blink can host them. The performance will be less than native ARM64, but for I/O-bound or less CPU-intensive services, it can be a viable solution. Your 32GB RAM allows for more substantial server instances.</li>
    </ul>
  </li>
  <li><strong>Executing Actually Portable Executables (APEs):</strong>
    <ul>
      <li>Blink is a natural fit for running APEs, which bundle an x86-64 emulator to run on various platforms, including your ARM64 system.</li>
    </ul>
  </li>
  <li><strong>Educational and Reverse Engineering Purposes:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">blinkenlights</code> is an excellent tool for learning x86-64 assembly, understanding low-level program execution, memory layouts, and CPU states.</li>
    </ul>
  </li>
  <li><strong>Isolated x86-64 Environments:</strong>
    <ul>
      <li>Using Blink’s filesystem overlay features (or VFS if enabled during configure), you can run x86-64 programs within a chroot-like environment based on a directory from your host system, providing a degree of isolation.</li>
    </ul>
  </li>
</ol>

<p><strong>VI. Performance Considerations and Limitations</strong></p>

<ul>
  <li><strong>Emulation Overhead:</strong> While JIT significantly improves speed, emulating x86-64 on ARM64 will inherently be slower than native execution for CPU-bound tasks. The main emulation loop for a single guest thread is itself single-threaded within Blink.</li>
  <li><strong>No GUI Application Support:</strong> Blink is designed for CLI and TUI applications. It does not emulate X11, Wayland, or other graphical environments.</li>
  <li><strong>Syscall Coverage:</strong> Blink supports a broad set of POSIX and common Linux syscalls. However, applications relying heavily on very new, obscure, or highly specialized Linux-specific syscalls might encounter compatibility issues.</li>
  <li><strong>I/O Performance:</strong> Filesystem and network operations pass through Blink’s emulation layer, which can add some latency compared to native I/O.</li>
  <li><strong>Real Mode (<code class="language-plaintext highlighter-rouge">-r</code> flag with <code class="language-plaintext highlighter-rouge">blinkenlights</code>):</strong> While supported for i8086 programs, the primary strength of Blink on your system is its x86-64 long mode emulation.</li>
</ul>

<p><strong>VII. <code class="language-plaintext highlighter-rouge">blinkenlights</code> TUI Specifics</strong></p>

<ul>
  <li><strong>Terminal Emulator:</strong> A modern UTF-8 terminal emulator that properly supports ANSI escape codes is essential. Recommendations include:
    <ul>
      <li>Linux: KiTTY, Gnome Terminal, Konsole, Xterm.</li>
      <li>Windows (if accessing remotely): PuTTY, Windows Terminal.</li>
      <li>macOS (if accessing remotely): Terminal.app, iTerm2.</li>
    </ul>
  </li>
  <li><strong>Font:</strong> A good monospaced font that includes CP437 block characters is recommended for the best visual experience (e.g., PragmataPro, DejaVu Sans Mono/Bitstream Vera Sans Mono, Consolas, Menlo).</li>
  <li><strong>Mouse Support:</strong> While not strictly required, a terminal emulator that forwards mouse events (especially scroll wheel) will enhance the <code class="language-plaintext highlighter-rouge">blinkenlights</code> experience, enabling features like reverse debugging via scrolling and zooming memory panels.</li>
</ul>

<p>In conclusion, your rk3588 system is a powerful platform for leveraging Blink. You can effectively build it, run a wide array of x86-64 Linux command-line software, and utilize the <code class="language-plaintext highlighter-rouge">blinkenlights</code> TUI for debugging and educational purposes, all benefiting from Blink’s ARM64 JIT.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">mobile git issues (a-shell + git-issue)</title><link href="https://ib.bsb.br/mobile-git-issues-a-shell-git-issue/" rel="alternate" type="text/html" title="mobile git issues (a-shell + git-issue)" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T11:23:32+00:00</updated><id>https://ib.bsb.br/mobile-git-issues-a-shell-git-issue</id><content type="html" xml:base="https://ib.bsb.br/mobile-git-issues-a-shell-git-issue/"><![CDATA[<p>bibref http://news.ycombinator.com/item?id=44094980</p>

<h1 id="merge">merge</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">https://simonwillison.net/2025/May/26/notes/</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://github.com/dspinellis/git-issue</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://github.com/holzschu/a-shell/blob/master/man/man1/curl.1</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://github.com/holzschu/a-shell/blob/master/man/man1/jq.1</code></li>
</ul>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 1" /><a href="https://news.ycombinator.com/vote?id=44096473&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I used GitHub issues as a form of project management to plan my wedding many years ago. My wife was skeptical at first, but the ability to add labels, search, etc made it really easy to work together and accomplish the tasked we needed in time for the wedding. The hardest part was creating a bookmark that links directly to the issue tracker. Oh, I’ve also used GitHub issues to organize all the boxes in my most recent move. I would create an issue and the description would list all the contents of a box. Then I would write the issue number on the box. After moving, I could search GitHub to find that one thing I was looking for and know what box it was in.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 2" /><a href="https://news.ycombinator.com/vote?id=44097036&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>(Not OP) I’ve used LibraryThing for book boxes. Using smallish boxes (30-40 paperbacks each) so that carrying them is not a backbreaker. Scan the ISBN barcodes with phone app, fix old ones/whatever on web app, tag with box number written on at least two sides. No problems found so far.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 3" /><a href="https://news.ycombinator.com/vote?id=44097968&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Because you can’t search that without physically looking at each box. There could be a bunch odd reasons that many boxes remain unpacked; downsizing, temporary housing. It’d be nice to be able to finds the one thing you need (you could even label the issue with the box location!). Anyway, a fun solution but I think it’s more effort than I would have been willing to put in even if I would have appreciated the outcome.
<img src="https://news.ycombinator.com/s.gif" alt="Image 4" /><a href="https://news.ycombinator.com/vote?id=44098053&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I moved a couple weeks ago, and was quite confused when–after repeatedly searching through every kitchen box–we were missing the flour, sugar, and pasta. Turns out one kitchen box got placed at the bottom of in a pile of book boxes in the living room. If you unpack in a day, it’s no big deal, but if you spent a week unpacking, you may find yourself having to eat something other than spaghetti for lunch, which is normally fine, but not when you really want spaghetti and the lack of spaghetti merely makes you more determined to find it.
<img src="https://news.ycombinator.com/s.gif" alt="Image 5" /><a href="https://news.ycombinator.com/vote?id=44098458&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I put a colored sticker on each box, where the color corresponds to the room where the box should go. The destination rooms are marked with the same stickers during the move, so helpers have an easy time telling where to put each box. In addition, I’m numbering the boxes, and when packing them keep a list mapping the numbers to what’s in each box. So when later searching for something, I know it should be in box number <em>x</em>. This can be helpful even years later when you don’t unpack all boxes.
<img src="https://news.ycombinator.com/s.gif" alt="Image 6" /><a href="https://news.ycombinator.com/vote?id=44098683&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; This can be helpful even years later when you don’t unpack all boxes. Indeed, this is one of the biggest reasons I tracked this information to begin with.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 7" /><a href="https://news.ycombinator.com/vote?id=44101206&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I ended up buying spaghetti when I went to the store a couple days later, and now I have an abundance of spaghetti. But lunch that first day ended up being something else.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 8" /><a href="https://news.ycombinator.com/vote?id=44099826&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; If you unpack in a day, it’s no big deal I think you’re supposed to unpack 80% on day one, and keep the rest boxed up for the next move?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 9" /><a href="https://news.ycombinator.com/vote?id=44101279&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Wouldn’t a single text document have achieved the same purpose? With a heading for each box?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 10" /><a href="https://news.ycombinator.com/vote?id=44098003&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Because searching for a thing across all issues is way faster than eyeballing the list written on each box?
<img src="https://news.ycombinator.com/s.gif" alt="Image 11" /><a href="https://news.ycombinator.com/vote?id=44098712&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Correct. There’s no way you’re going to write every item inside the box on the box itself. And definitely not on every side of the box. Think cables and small items. It only makes sense if you plan on unpacking over a year but if you unpack everything in a couple days then the system is not as useful.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 12" /><a href="https://news.ycombinator.com/vote?id=44097629&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>At my last job we almost used Gitlab for all our project management. The only thing that stopped us was not being able to use references between projects. It’s very project focused, which is of course good enough for open source projects. But at my current job Gitlab could easily take over Youtrack, already took over Upsource.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 13" /><a href="https://news.ycombinator.com/vote?id=44097558&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Reminds me of: <a href="https://xkcd.com/1172/">https://xkcd.com/1172/</a> This is a fun anecdote to share, but everywhere you can find people with absurd workflows that are better dealt with using proper tools. FWIW I used Org mode to organize a move to another country. I really cannot stand the idea of feeding my personal information to Microsoft.
<img src="https://news.ycombinator.com/s.gif" alt="Image 14" /><a href="https://news.ycombinator.com/vote?id=44097960&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Sounds to me like parent used a proper tool. It just happens to be very flexible. In general, the best tool is the one that you use and makes sense to you.
<img src="https://news.ycombinator.com/s.gif" alt="Image 15" /><a href="https://news.ycombinator.com/vote?id=44098453&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>This is fun: it turns out you can paste this GraphQL query: <code class="language-plaintext highlighter-rouge">{ viewer { issueComments { totalCount } issues { totalCount } } }</code> Into <a href="https://docs.github.com/en/graphql/overview/explorer">https://docs.github.com/en/graphql/overview/explorer</a> in order to see the total number of issues and comments you’ve posted over your time on GitHub. I got 9,413 issues and 39,087 comments, for a grand total of 48,500 combined!
<img src="https://news.ycombinator.com/s.gif" alt="Image 16" /><a href="https://news.ycombinator.com/vote?id=44104761&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Years ago I was using GitHub Issues as my personal task manager But ~ 2 years ago I switched to Obsidian for that Eventually I event started used Obsidian for my project management, and ditched GitHub Issues / GitHub Projects With caveats, that I use that for the greenfield project with lots of unstructured exploration + AI agents for keeping design docs and figuring out detailed tasks For the established and legacy projects, I would probably use GitHub Issues for bugs, enhancement requests. And GitHub Projects for all reactive work (support, ops, bugs, etc.) Lastly, I disagree that it’s <em>“almost the best notebook in the world”</em>. It my might be a best ticketing system or a note taking system, but not a notebook in the sense of Jupyter or LiveBook (but nothing stopping them to make code blocks executable[1], and even add some LLMs). Also it’s easy overwrite the content of the issue, even by a single person working from different tabs (at least that was the case in the past). — 1. GitHub Blocks <a href="https://blocks.githubnext.com/">https://blocks.githubnext.com/</a>
<img src="https://news.ycombinator.com/s.gif" alt="Image 17" /><a href="https://news.ycombinator.com/vote?id=44097110&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I expected the first comment to be about privacy. I don’t keep a lot of notes but I definitely consider them even more private than even email. Not sure I want them training LLMs. Or are there actually assurances from MS around privacy for private repos?
<img src="https://news.ycombinator.com/s.gif" alt="Image 18" /><a href="https://news.ycombinator.com/vote?id=44097406&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The amount of extremely sensitive corporate secrets in GitHub issues makes me assume that their security and privacy are pretty rock solid. A lot of companies pay GitHub a <em>lot</em> of money to look after their source code and related artifacts. That’s GitHub’s business model. I don’t think they would jeopardize that trust for the sake of training a model on private data.
<img src="https://news.ycombinator.com/s.gif" alt="Image 19" /><a href="https://news.ycombinator.com/vote?id=44098086&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Where I work we don’t use GitHub, but we do use Copilot. It took a long time before it was opened up for us to be able to use it, as deals had to be struck and accounts and auth setup to use our corporate logins, which have different rules for data privacy than public use of Copilot. We are explicitly forbidden from using the public version of Copilot, or any other AI for that matter. I can only assume that companies paying for GitHub also pay for enhanced levels of privacy. Just because a company can pay GitHub not to train on their data, doesn’t mean they’re not going to train on your data that is being hosted for free. They are almost certainly crawling all free repos.
<img src="https://news.ycombinator.com/s.gif" alt="Image 20" /><a href="https://news.ycombinator.com/vote?id=44098615&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I dunno. For one thing, those companies are paying GitHub a lot of money for the enterprise version, separately hosted (right?). The data isn’t actually available to Microsoft employees or LLMs, absent some security flaw or backdoor. For another, companies that pay for this also (sample size is small, though) have automation that scans GitHub repos, issues, etc for any secrets and require them to be removed and scrubbed from history, implying that they don’t trust even the self-hosted GitHub Enterprise as much as you do.
<img src="https://news.ycombinator.com/s.gif" alt="Image 21" /><a href="https://news.ycombinator.com/vote?id=44098817&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I see secrets as a different issue. Putting those in an issue or repo exposes them to potentially hundreds of people within your own company, that’s bad practice.
<img src="https://news.ycombinator.com/s.gif" alt="Image 22" /><a href="https://news.ycombinator.com/vote?id=44099589&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I remember awhile back that they were and do train on repositories to the point that I never wanted to use GitHub for anything other than submitting bug reports to projects. Maybe the non-training only applies if you pay protection money? But then you run into the whole if it’s public there’s nothing stopping some other AI that isn’t MS from accessing the repository and training on it.
<img src="https://news.ycombinator.com/s.gif" alt="Image 23" /><a href="https://news.ycombinator.com/vote?id=44101078&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>There’s been a huge amount of speculative information floating around that GitHub are training on private repos, but I’ve never seen anything credible.
<img src="https://news.ycombinator.com/s.gif" alt="Image 24" /><a href="https://news.ycombinator.com/vote?id=44098690&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Assumptions are not sufficient when it comes to basic human rights. And my assumption is that they do or will use your data from their own interest as the likelihood that someone within Microsoft will benefit tends to 1 as time tends to infinity. privacy needs to be verifiable (Apple has show this is possible with private cloud compute)</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 25" /><a href="https://news.ycombinator.com/vote?id=44097550&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; It has excellent search How is it excellent when <em>current logs could do with a bit of redesign</em> doesn’t find the comment (requires quotes to find it) And then a tiny typo <em>“current logs could” do with a bit of redesing</em> also fails you</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 26" /><a href="https://news.ycombinator.com/vote?id=44099905&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>It’s such a wasted opportunity too. It would be so powerful to understand how a tool is used by searching for popular repositories that are already using it.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 27" /><a href="https://news.ycombinator.com/vote?id=44101804&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Maybe I have my search syntax wrong. Suppose I want to search for go projects with a flake.nix in the repo root. This finds nothing: <code class="language-plaintext highlighter-rouge">language:Go path:/flake.nix</code> I know they exist though, for instance here’s one: github.com/joerdav/xc Can you tell me where I’ve gone wrong?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 28" /><a href="https://news.ycombinator.com/vote?id=44099786&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The fact that you can’t even specify the branch or search across branches is anything but excellent
<img src="https://news.ycombinator.com/s.gif" alt="Image 29" /><a href="https://news.ycombinator.com/vote?id=44096220&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Like many I’ve been looking for the best note-taking app for years. And somehow I always come back to a bunch of markdown files inside a Git repo.
<img src="https://news.ycombinator.com/s.gif" alt="Image 30" /><a href="https://news.ycombinator.com/vote?id=44097607&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; And somehow I always come back to a bunch of markdown files inside a Git repo. Others have mentioned this but if you want to keep this workflow, the best app I’ve found is Obsidian + Git Plugin. It works fantastically well on desktop though it does require a little work to get it working on iOS.
<img src="https://news.ycombinator.com/s.gif" alt="Image 31" /><a href="https://news.ycombinator.com/vote?id=44097762&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Are there options to see the current state of the repo? What I mean is, for example, I like that in VS Code I instantly know the current state because the git sidebar icon shows a notification of uncommitted changes. If I don’t have a visual reminder, I’m more likely to not make commits when I should, and I also don’t want an auto-committer firing after each change. I find the visual reminder keeps me anchored to my git status. Heck, maybe I should just use code for notes. One plus would be web access with code server, since Obsidians only docker image that I know of uses VNC. Anyone compared these two tools and have a decent write up? The biggest item which comes to mind would be referencing other notes and the features built on top of that?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 32" /><a href="https://news.ycombinator.com/vote?id=44101013&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; Others have mentioned this but if you want to keep this workflow… If I want to keep this workflow why shouldn’t I just continue using this same workflow?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 33" /><a href="https://news.ycombinator.com/vote?id=44098353&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>There are a couple methods - I use Working Copy to manage the git stuff on iOS. Far from perfect, but it works.
<img src="https://news.ycombinator.com/s.gif" alt="Image 34" /><a href="https://news.ycombinator.com/vote?id=44098665&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>a-shell is another way you can do this. Takes a bit of finagling to set up and wire in plugins and the like but is relatively stable afterward.
<img src="https://news.ycombinator.com/s.gif" alt="Image 35" /><a href="https://news.ycombinator.com/vote?id=44096483&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Compared to something with automatic bidirectional sync between all devices, something where one has to manually commit/push/pull a new/edited note feels archaic.
<img src="https://news.ycombinator.com/s.gif" alt="Image 36" /><a href="https://news.ycombinator.com/vote?id=44097020&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>OTOH you get version history, with commit messages if you care to write them. And the full power of git to explore the history. You can edit the same file on two (offline) devices, then resolve the inevitable merge conflict. “Automatic bidirectional sync between all devices” scares me. How does it deal with merge conflicts? How am I sure I’ll be able to revert to a previous version? Can I see the full history of a file? I don’t know, perhaps it’d be ok. I certainly wouldn’t learn git just for note taking! But, I know how to use my hammer, so everything look like a nail…
<img src="https://news.ycombinator.com/s.gif" alt="Image 37" /><a href="https://news.ycombinator.com/vote?id=44097609&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>But you can still have the full power of git with Obsidian still, since they’re just MD files at the end of the day.
<img src="https://news.ycombinator.com/s.gif" alt="Image 38" /><a href="https://news.ycombinator.com/vote?id=44096799&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>You can automate commits and push on save. I had a similar setup for vimwiki before migrating to a web-based wiki system (dokuwiki).
<img src="https://news.ycombinator.com/s.gif" alt="Image 39" /><a href="https://news.ycombinator.com/vote?id=44097212&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I thought it would be a problem as well but it turns out I absolutely never edit my notes on two machines at once. The commit/push/pull is done via a simple bash script that I’m running as a build command inside VS Code.
<img src="https://news.ycombinator.com/s.gif" alt="Image 40" /><a href="https://news.ycombinator.com/vote?id=44099471&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I like it as I consciously enjoy sort of checking in. I also store in a onedrive folder for automatic sync and backup in case I have a crash before I do a git commit.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 41" /><a href="https://news.ycombinator.com/vote?id=44102739&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>No webpage. No screenshots. Not even Releases? I’m not trying this app. The readme is more about the technical details of the code than the actual features of the app. Where do I go to see what this thing can actually do? Do people expect me to run the program just to see if I want to run the program?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 42" /><a href="https://news.ycombinator.com/vote?id=44105688&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I did take a look at that, which is probably more than most people would have done, and by take a look I mean a skimmed for images because I’m not reading 2000 words of text for an app I don’t even use yet. The only images I found showed how drag and drop works. I know this is common with projects that think Github is a replacement for a website, but I genuinely wonder how does it get so bad that a 5 year project with 9000 commits and 60 contributors doesn’t have a single screenshot. Nothing personal or particular about this project specifically, just… the whole open source culture of dropping something on Github and not even doing the bare minimum to have other people get to know the project. It feels like such a waste. It could be an amazing project but who is going to bother with it if they can’t see what it looks like?
<img src="https://news.ycombinator.com/s.gif" alt="Image 43" /><a href="https://news.ycombinator.com/vote?id=44096356&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>For me, it’s the same way, except that instead of Markdown, I use plain org-mode files sprinkled with a bit of org-roam tags when needed.
<img src="https://news.ycombinator.com/s.gif" alt="Image 44" /><a href="https://news.ycombinator.com/vote?id=44098190&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I oscillate between Apple Notes and a bunch of markdown files, which is a pretty painful thing to do. I like how future proof a folder of markdown files is. But I like the design, simplicity, and deep features for capture and media support offered in Apple Notes. The more a markdown app supports extra stuff, the more proprietary it starts to feel, as any app to read it will also need to support those things. A while back I told myself I was going to stick to Apple Notes, as going back and forth to other things is painful, and doing it proactively means more pain, rather than maybe having some pain in 10 years of the app goes away. However, where I am again, in the middle of a largely manual migration back to Obsidian for my folder of markdown files. I used an export, but the formatting is so bad that I need to clean up every single note.
<img src="https://news.ycombinator.com/s.gif" alt="Image 45" /><a href="https://news.ycombinator.com/vote?id=44098638&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The inability to export, as well as the lack of anything more than the bare basic formatting options (at least at the time a few years ago) pushed me off apple notes.
<img src="https://news.ycombinator.com/s.gif" alt="Image 46" /><a href="https://news.ycombinator.com/vote?id=44099459&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I’ve been able to export since early, early iPhone. They’re just txt files. Surprisingly, Apple notes have been the most durable as Apple has migrated them from every iPhone I’ve had for the past 15-20 years or whatever. Basic formatting is a plus for me. Although now notes has really advanced formatting and even sketching.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 47" /><a href="https://news.ycombinator.com/vote?id=44102851&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I ended up using Exporter from the App Store. I didn’t work great. I have an export, but there are a lot of issues with it. I’m finding it is often easier to copy the note and use the Rich Text to Markdown action in Shortcuts, then paste into Obsidian. If I spent more time with Shortcuts there is probably a way to automate this way a bit more.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 48" /><a href="https://news.ycombinator.com/vote?id=44099863&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>There are plenty of tools for exporting, and I’ve tried to leave Notes several times and had no issue getting the notes out. But trouble free sync between machines, the ability to ‘scan’ documents, adding basic maths support, the ease… it always sucks me back in. I wish it kept the date of creation and edits readily available, and supported markdown. But it’s damn close to what I want. Why can’t Apple Mail do search as well as notes?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 49" /><a href="https://news.ycombinator.com/vote?id=44096254&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>…accessed through Obsidian (esp on mobile) – On Android, you can “Open folder as vault” Or neovim with FzfLua (on laptop)</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 50" /><a href="https://news.ycombinator.com/vote?id=44095904&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>On the last point on Apple Notes: iCloud has the “keep downloaded” option now on iOS and macOS for folders and files. This makes every app that saves into iCloud files behave like Notes, i.e. work offline with automatic online sync.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 51" /><a href="https://news.ycombinator.com/vote?id=44097658&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Not self-hosting and having a cost of zero is one of the features that makes GitHub Issues such a great solution. I don’t want to risk my notes on a configuration error or billing mishap.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 52" /><a href="https://news.ycombinator.com/vote?id=44098796&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>My protection against that is nepotism: I’m a “GitHub Star” which gets me direct access to GitHub staff, plus I know a <em>lot</em> of people who work there.
<img src="https://news.ycombinator.com/s.gif" alt="Image 53" /><a href="https://news.ycombinator.com/vote?id=44098829&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Yeah, I’m writing this for the benefit of people who want to follow your usage. It also means that your advice doesn’t generalize.
<img src="https://news.ycombinator.com/s.gif" alt="Image 54" /><a href="https://news.ycombinator.com/vote?id=44098835&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Totally fair - if you <em>don’t</em> have a deep relationship with GitHub it’s absolutely a good idea to arrange your own backups in case of your account being suspended!
<img src="https://news.ycombinator.com/s.gif" alt="Image 55" /><a href="https://news.ycombinator.com/vote?id=44099493&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I mean, there are my local clones. The odds of all my locals crashing at the same time as GitHub seem to be the same as local+github+sourcehut+whatever crashing.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 56" /><a href="https://news.ycombinator.com/vote?id=44098137&amp;how=up&amp;goto=item%3Fid%3D44094980"></a><a href="https://codeberg.org/">https://codeberg.org/</a> says “Codeberg is a non-profit, community-led effort that provides Git hosting and other services for free and open source projects.” Wouldn’t hosting my own private notes on there be against the spirit of what they’re trying to achieve? I have no problem at all freeloading off GitHub!
<img src="https://news.ycombinator.com/s.gif" alt="Image 57" /><a href="https://news.ycombinator.com/vote?id=44096607&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Totally agree. GitHub issues is probably the best bug tracker/ticketing system you can imagine. Intuitive interface, simple, clean, and fast. Just waiting for a Microsoft redesign to completely fuck it up. :P
<img src="https://news.ycombinator.com/s.gif" alt="Image 58" /><a href="https://news.ycombinator.com/vote?id=44097286&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I’ve used plenty of proprietary issue tracking systems and GitHub is missing several features that I now consider quite important though certainly not essential: * The ability to write an issue summary separate from comments. When you are debugging some hairy bug, some manager doesn’t really want to wade through all the comments to get an idea; an editable summary at the very top of the page communicates high-level points to stakeholders while others continue to comment on details. People work around this by editing the initial comment of the issue but it’s better if there’s something more dedicated. * Sophisticated access control. More than once when someone writes a bug report they are referring to a bug experienced by a single user. For user privacy reasons there needs to be a per-issue permission system to restrict access beyond the permission implied by the repo. * The ability to add personal notes to an issue without publishing it. Whether it’s a draft form of a comment or something else, it gets rid of the need to maintain your own notes.
<img src="https://news.ycombinator.com/s.gif" alt="Image 59" /><a href="https://news.ycombinator.com/vote?id=44097901&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Every experienced dev knows what happens when they are subjected to issue trackers with loads of features: some managers require all those features to be used (cause that’s what they paid for!). So instead of spending your time debugging you have to ensure the bug is properly tagged, categorized, has the right version number(s) for affected software, has the right assignee, yadda, yadda. Then some busy beaver will send you email reminding you that you haven’t filled in all the drop-downs and check boxes correctly….
<img src="https://news.ycombinator.com/s.gif" alt="Image 60" /><a href="https://news.ycombinator.com/vote?id=44097402&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>1. Summary It wouldn’t be too hard to add that with a 3rd party plugin. You could set an event hook to run through the comments, and add it to the top comment. For bonus points, you could use an LLM to summarise. Every company loves a bit of AI these days, so your manager can gloat with his manager buddies that you now have AI-powered issue tracking. 2. That sounds like an anti-pattern to me. There shouldn’t be PII in your dev issue tracking system. There problem here isn’t RBAC, it’s the workflow. If you’re in a situation where you need to make notes of sensitive information then you should store that in the same data store as the source information (eg Salesforce, et al). And I say this as someone who hates Salesforce. 3. I’ve not seen this feature in any issue tracker. Sounds like a nice feature but I wouldn’t have thought it as essential.
<img src="https://news.ycombinator.com/s.gif" alt="Image 61" /><a href="https://news.ycombinator.com/vote?id=44097569&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; That sounds like an anti-pattern to me. There shouldn’t be PII in your dev issue tracking system. Then how do you track such issues? I’ll give you a real example I’ve experienced: a high-value customer writes to support and complains that his UI is broken. None of the other people’s UIs are broken. Do you not use the issue tracking system just because you need to get that customer’s private settings and PII in order to debug the bug? It’s common to require PII to be stored elsewhere, but people will still make mistakes and copy paste PII for convenience. In the end isn’t it better for your issue tracking system to be flexible enough to store PII?
<img src="https://news.ycombinator.com/s.gif" alt="Image 62" /><a href="https://news.ycombinator.com/vote?id=44100240&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>You can say user ID is broken and define how it’s broken. You don’t have include any of their PII outside of the user ID. &gt; It’s common to require PII to be stored elsewhere, but people will still make mistakes and copy paste PII for convenience. That’s a training problem. And It’s also common for people to fuck up RBAC. The latter is a harder problem to fix with training than teaching them to keep PII out of issue tracking systems. &gt; In the end isn’t it better for your issue tracking system to be flexible enough to store PII? I’ve worked in some very sensitive domains. They managed just fine keeping customer data out of the issue tracking systems.
<img src="https://news.ycombinator.com/s.gif" alt="Image 63" /><a href="https://news.ycombinator.com/vote?id=44100936&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The user ID is a piece of email. It is PII. To define how it’s broken is to describe a list of specific actions the user did to the private information in their account causing the UI to be broken. If training is such a problem, I don’t understand why we solve the problem by obviating such training and make the issue tracking system an acceptable storage medium for PII?
<img src="https://news.ycombinator.com/s.gif" alt="Image 64" /><a href="https://news.ycombinator.com/vote?id=44101157&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Because you were the one that said you needed granular RBAC to limit who has visibility of what issues!
<img src="https://news.ycombinator.com/s.gif" alt="Image 65" /><a href="https://news.ycombinator.com/vote?id=44097507&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>3. ServiceNow incident tracking has something close called “work notes”. Work notes are for internal team members with a certain role, where comments are public and meant to communicate to the issue reporter.
<img src="https://news.ycombinator.com/s.gif" alt="Image 66" /><a href="https://news.ycombinator.com/vote?id=44097379&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; an editable summary at the very top of the page communicates high-level points to stakeholders I would hope this will soon be written by AI automatically; summing up high-level points in an issue discussion seems like a <em>perfect</em> task for an LLM.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 67" /><a href="https://news.ycombinator.com/vote?id=44098600&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>That reminds me: GitHub has a bad habit of hiding comments in a long issue. It displays the first few and the last few comments. So you can’t expect an extension to grab the entire context without it specifically being designed for GitHub. In fact even the browser’s built-in Find In Page won’t find everything.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 68" /><a href="https://news.ycombinator.com/vote?id=44097958&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Isn’t the entire purpose of Azure DevOps to be a sort of Jovian gravity well into which Microsoft marketing principles can be sucked into before they hit GitHub?
<img src="https://news.ycombinator.com/s.gif" alt="Image 69" /><a href="https://news.ycombinator.com/vote?id=44097683&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>It’s already locked up behind a login wall. You can only search for a handful of issues before being quickly rate limited.
<img src="https://news.ycombinator.com/s.gif" alt="Image 70" /><a href="https://news.ycombinator.com/vote?id=44103760&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Forgejo does almost everything Github does around issues that the OP mentioned(I think). * It doesn’t extract the title from the issue on bare linkes, instead the url will become something like: <group>/<repo>#15 Which isn't as nice. So issue #15 in repo tootie/mynotes would look like: tootie/mynotes#15 * It also doesn't do offline sync. I think that's the only thing it doesn't do. I use Git Touch on iOS and it seems decent enough, you can get to issues and update them, etc. The bonus is, assuming you run your own Forgejo, or trust whoever runs it for you(say Codeberg), you don't have the MS privacy concerns.
![Image 71](https://news.ycombinator.com/s.gif)[](https://news.ycombinator.com/vote?id=44096161&amp;how=up&amp;goto=item%3Fid%3D44094980)The missing feature is federation! In my view, centralized structures like a giant source repository such as github are something we as a developer community need to avoid. Unfortunately, features like federated merge requests in gitlab ( [https://gitlab.com/gitlab-org/gitlab/-/issues/14116](https://gitlab.com/gitlab-org/gitlab/-/issues/14116) ) are something we've been waiting for for 9 years and nothing seems to be happening there. This feature alone would enable a lot of new collaboration without forcing everyone to work on a centralized system to use git - a decentralized versioning system - with high efficiency. Last week, Microsoft cut off the email account of the chief prosecutor of the international criminal court, after being ordered to do so by the Trump administration. This is merely a week or two after Microsoft did a big PR campaign, telling the European Union how they were to stand up against this administration if the need arises. The irony! Trump isn't hiding his opinion about the EU. What's stopping him from ordering Microsoft to block the EU from accessing github one day? Right now: Nothing at all. Think about how it would impact your business and open source software in general. We must not put all our eggs in a single basket.
![Image 72](https://news.ycombinator.com/s.gif)[](https://news.ycombinator.com/vote?id=44097069&amp;how=up&amp;goto=item%3Fid%3D44094980)Absolutely. Any public institution or governmental body needs to rethink their fragile reliance on technology from countries they can longer trust. This applies to China, but the US is even more unpredictable.</repo></group></p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 73" /><a href="https://news.ycombinator.com/vote?id=44096129&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Is one of those extra steps “not pay $50 a year to have access on all your devices”, or maybe it’s “not pay $100 a year to access via the web”?
<img src="https://news.ycombinator.com/s.gif" alt="Image 74" /><a href="https://news.ycombinator.com/vote?id=44096277&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I thought it supports most file storage sync solutions? I’m using with the free iCloud level storage I believe.
<img src="https://news.ycombinator.com/s.gif" alt="Image 75" /><a href="https://news.ycombinator.com/vote?id=44096315&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Sure, but then you can’t access it on windows or android. Or the web. I’m responding more to the comment that it’s extra steps. It’s clearly not as good a solution as obsidian, but there are no extra steps for it being accessible over the web or to all your devices - not just those for the devices built in cloud provider.
<img src="https://news.ycombinator.com/s.gif" alt="Image 76" /><a href="https://news.ycombinator.com/vote?id=44097349&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I use obsidian on iphone, Mac, Windows and ipad. It syncs using icloud free tier. I don’t have to pay. icloud is available on Windows as well.
<img src="https://news.ycombinator.com/s.gif" alt="Image 77" /><a href="https://news.ycombinator.com/vote?id=44096383&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>If windows or android is a must then use something that has a client in them. I use OneDrive because it’s the cheapest in my region. It’s got terrible support from Microsoft, just lazy and terrible, but there are third party sync solutions for all platforms. I think GitHub/gitlab issues is totally viable. Obsidian/Logseq too.
<img src="https://news.ycombinator.com/s.gif" alt="Image 78" /><a href="https://news.ycombinator.com/vote?id=44096416&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Does onedrive work now for syncing obsidian on iOS? I don’t think it did when I last tried a year or so ago.
<img src="https://news.ycombinator.com/s.gif" alt="Image 79" /><a href="https://news.ycombinator.com/vote?id=44097572&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>If it doesn’t, you just need to find one that does. I use it because I don’t care about iOS. If you need one that supports iOS, macos, windows, Android and Linux and there isn’t one, then it’s justified to pay for their sync solution. Or just use GitHub/gitlab issues.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 80" /><a href="https://news.ycombinator.com/vote?id=44096150&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I have access on all my devices through my email provider WebDAV. I don’t pay anything to Obsidian for this (but I do donate to them because it actually is the best notes provider, in my opinion).
<img src="https://news.ycombinator.com/s.gif" alt="Image 81" /><a href="https://news.ycombinator.com/vote?id=44096177&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>So I guess the extra step is “not install and configure a 3rd party WebDAV plugin for all your devices while ensuring you have WebDAV support by your email provider”?
<img src="https://news.ycombinator.com/s.gif" alt="Image 82" /><a href="https://news.ycombinator.com/vote?id=44102023&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I guess so. I’m personally not getting bogged down in extra steps or not. I simply don’t trust GH to keep my personal note data for me, it’s much too valuable. It looks like it is possible to backup GH issue data… with some extra steps…
<img src="https://news.ycombinator.com/s.gif" alt="Image 83" /><a href="https://news.ycombinator.com/vote?id=44096307&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I gladly pay those fifty bucks. Creating good applications require hard work. (I wouldn’t say Obsidian is perfect, but so far I haven’t found any note-taking application that I like more.)
<img src="https://news.ycombinator.com/s.gif" alt="Image 84" /><a href="https://news.ycombinator.com/vote?id=44096328&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I’m not denying that obsidian is a better solution, just pointing out to the parent that there aren’t “extra steps” to the described solution - it is exactly what it is - but you need to add paid features (8$/m) to obsidian in order to get web access.
<img src="https://news.ycombinator.com/s.gif" alt="Image 85" /><a href="https://news.ycombinator.com/vote?id=44096666&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>No you don’t. You can use your own web-hosting or web-syncing solutions. I just use Git. There’s an excellent (and free) plugin on Obsidian exactly for this reason.
<img src="https://news.ycombinator.com/s.gif" alt="Image 86" /><a href="https://news.ycombinator.com/vote?id=44097032&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Does this plugin let me export Obsidian notes as a website? Would you happen to remember the name?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 87" /><a href="https://news.ycombinator.com/vote?id=44097299&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Also with Github you can have a private repo for free with which you can host and sync your files.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 88" /><a href="https://news.ycombinator.com/vote?id=44097294&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I never said Obsidian doesn’t require extra steps to setup sync without paying. Do you happen to know one that also allows you to save locally and have back-linking features?
<img src="https://news.ycombinator.com/s.gif" alt="Image 89" /><a href="https://news.ycombinator.com/vote?id=44096128&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Obsidian sounds like text files with extra steps, but your point remains, plain text files are great. There’s multiple solutions from keeping them available across devices.
<img src="https://news.ycombinator.com/s.gif" alt="Image 90" /><a href="https://news.ycombinator.com/vote?id=44097048&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The extra step is to open the text file in an editor, except in this case the editor is called Obsidian. Granted, you do have to install it versus using the default editor that comes with your operating system, so that is an extra step. But most people don’t use the builtin editors from their OS anyway.
<img src="https://news.ycombinator.com/s.gif" alt="Image 91" /><a href="https://news.ycombinator.com/vote?id=44096419&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Well yeah, Obsidian is basically a markdown editor with some nice extra features. And apparently a quite thriving plugin ecosystem.
<img src="https://news.ycombinator.com/s.gif" alt="Image 92" /><a href="https://news.ycombinator.com/vote?id=44096133&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>And unlike Obsidian, online only. Can you even backup GH issues? If not, that’s surely got to be a deal-breaker.
<img src="https://news.ycombinator.com/s.gif" alt="Image 93" /><a href="https://news.ycombinator.com/vote?id=44096451&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Can I host obsidian myself? I would like to use it for work, but I don’t want to expose my employer to potential data leak. I’m thinking, host it locally and just let one drive act as back up for the mark down files it produces?</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 94" /><a href="https://news.ycombinator.com/vote?id=44096838&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>As others have pointed out you don’t “host” Obsidian - it’s just a local collection of markdown files. But if you’re asking about a self-hosted alternative to “Obsidian Publish” for creating a knowledgebase that others can answer, I’m Quartz[0], a static-site generator designed to turn Obsidian markdown files into a website. I’m building and it and hosting it on Gitlab Pages at work[1]. [0]: <a href="https://quartz.jzhao.xyz/">https://quartz.jzhao.xyz/</a> [1]: <a href="https://quartz.jzhao.xyz/hosting#gitlab-pages">https://quartz.jzhao.xyz/hosting#gitlab-pages</a>
<img src="https://news.ycombinator.com/s.gif" alt="Image 95" /><a href="https://news.ycombinator.com/vote?id=44097128&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I recently went through this effort and I’d say it’s worth it. In particular, I’ve used the “Self-hosted LiveSync” plug-in + docker.io/oleduc/docker-obsidian-livesync-couchdb, and I setup all my infrastructure within a VPN (with Tailscale, this was pain-free). I knew about using just git, but having Windows, Linux, macOS, iOS and Android, it was just way easier to use this solution instead of fighting with git-like apps for each OS.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 96" /><a href="https://news.ycombinator.com/vote?id=44096481&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Ten years ago, I worked in a small non-profit development shop that used Github issues for all project management. Checkboxes were used as both subtasks and ACs. Now that I think back, it worked really well. I don’t think we even had Slack (we used Google Talk).
<img src="https://news.ycombinator.com/s.gif" alt="Image 97" /><a href="https://news.ycombinator.com/vote?id=44099555&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I’ve come to the same conclusion myself in the past 2 months (possibly driven by the AI / LLM age making me think even more in version control… writing those words make me wince). I have a small webapp too, which hoovers up issues I like to publish, from a repo with links on the web I like that I feel I would like to share (I believe the kids are calling this ‘new age curation’). Its really quite a nice, organic, process. And its so odd its taken me 15 years of note apps - every other hot note app on the market - to realise this. Love Simon’s articles, another nice insight</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 98" /><a href="https://news.ycombinator.com/vote?id=44098871&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>I always wonder when I see all these best notebooks / note taking systems, etc. why people don’t spin up any of the dozens of wiki servers. You can put it online so you can get to it anywhere You can run it off a stick to keep it with you (Tiddlywiki) You can cross link pages to be able to collect things together You can search. Some even have auto link builders so you can build a page of links to pages that match a category. Some support Markup so you have formatting the way you want.
<img src="https://news.ycombinator.com/s.gif" alt="Image 99" /><a href="https://news.ycombinator.com/vote?id=44098964&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>For me, I like to keep my life simple and not run servers unless I have to. I haven’t run a wiki in years because markdown+git is good enough and simpler. I never really need anonymous edits.
<img src="https://news.ycombinator.com/s.gif" alt="Image 100" /><a href="https://news.ycombinator.com/vote?id=44097649&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>For a typical organization, I think issues are still the most valuable part of the GitHub product stack. You can build very powerful project management abstractions on top of issues &amp; labels. If you have discipline to do a monorepo for the entire organization, your issue and code tabs are effectively the entire universe in one place. This is the only thing I’ve seen that can pull middle managers out of email - a <em>single</em> bucket that has everything of concern in it.
<img src="https://news.ycombinator.com/s.gif" alt="Image 101" /><a href="https://news.ycombinator.com/vote?id=44096065&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Broken links with 404s have been called “a feature, not a bug” of the web, but I think that for internal documentation purposes, having consistent bi-directional links is a <em>very</em> good thing to have.
<img src="https://news.ycombinator.com/s.gif" alt="Image 102" /><a href="https://news.ycombinator.com/vote?id=44098282&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The stuff that gets upvoted here… Next up: <code class="language-plaintext highlighter-rouge">- "SQLite is almost the best notebook in the world" - "Claude is almost the best notebook in the world" - "An SQLite database containing only Markdown files in a Git repo self-hosted on an SD card in my Raspberry Pi served by a Node.js web app accessible via 56k modem is almost the best notebook in the world" - "I created a startup to take the previous thing, reinvent GitHub Issues on top of it, call it AI Notes, and make almost the best notebook in the world, and it's now valued at $50B"</code></p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 103" /><a href="https://news.ycombinator.com/vote?id=44099104&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Councidentally I just started using it as my todo list. Its really neat, especially when using githubs cli gh.
<img src="https://news.ycombinator.com/s.gif" alt="Image 104" /><a href="https://news.ycombinator.com/vote?id=44097691&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Except if you lose your 2FA one day before you need your plans. Or are all plans public? Any local notebook, including pencil and paper, is better.
<img src="https://news.ycombinator.com/s.gif" alt="Image 105" /><a href="https://news.ycombinator.com/vote?id=44097708&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Pencil and paper is terrible because you can lose the paper. I want my notes backed up to the cloud, with backups replicated across at least two continents. I’ve experimented with a bunch of tools for extracting copies of my issues and pulling them down locally, which is easy thanks to the GitHub API. One that’s particularly fun is a GitHub Actions setup that copies the full contents of each issue thread into a file in the repo itself. Then I can “git pull” to fetch my backup! I still don’t have any of them running on a cron at home but I might set that up some day.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 106" /><a href="https://news.ycombinator.com/vote?id=44097154&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>the notes app… there is none. There will always be better apps, but you need to stick to an app with its flaws and limitations. I have been through this rabbit hole… (paid for Bear, IAWriter, noteplan, FSnotes and probably more that I forget) and have just stuck to local markdown files and use VS code … I even used LLMs to generate a tiny plugin to solve my micro needs.
<img src="https://news.ycombinator.com/s.gif" alt="Image 107" /><a href="https://news.ycombinator.com/vote?id=44096192&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>So GitHub notes let me do what Zim Desktop Wiki let me do since 2005 without requiring internet. But I get the OP, if you live in GitHub, it makes perfect sense.
<img src="https://news.ycombinator.com/s.gif" alt="Image 108" /><a href="https://news.ycombinator.com/vote?id=44096745&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>&gt; Free and unlimited Extremely doubtful. The fact you haven’t yet hit limits does not mean no limits. Nor does the fact the provider claims unlimited.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 109" /><a href="https://news.ycombinator.com/vote?id=44097559&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>That’s why I wrote this. The idea of using GitHub Issues as an alternative to a dedicated notes app is decidedly non-obvious. I only just realized myself that I’ve been using it that way for years.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 110" /><a href="https://news.ycombinator.com/vote?id=44097204&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Unpopular opinion: developers obsess about the format being Markdown. This is completely backwards. This is a hammer-sees-nail thing. You should care more about the UX. And that somewhere, someone wrote a parser for the file format. That’s it. You don’t have to understand every byte of it. It need not be readable text and it need not be version-control friendly. It should be a joy to use, be powerful, be easy to annotate images and pdfs. I bet none of the Markdown solutions do this as elegantly as OneNote or alternatives.
<img src="https://news.ycombinator.com/s.gif" alt="Image 111" /><a href="https://news.ycombinator.com/vote?id=44097695&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>The more time passes the <em>more</em> I care about my notes living in Markdown: - I can transform it to other formats should I need to - The GitHub variant of it (GFM) has feature like syntax highlighting for different languages which is incredibly useful to me based on the kinds of notes I take - Diffing clearly genuinely is a benefit, sometimes I want to know exactly what I changed! - I can parse it with regular expressions, so useful information doesn’t end up locked in some weird binary format - LLMs are great at reading and writing it These things may not matter to people who are not nerds. I’m a nerd!
<img src="https://news.ycombinator.com/s.gif" alt="Image 112" /><a href="https://news.ycombinator.com/vote?id=44098740&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Indeed, Markdown has become a self fulfilling prophecy of sorts: You want to use it because the toolchain and ecosystem surrounding the format is good, and the toolchain and ecosystem are good because everyone is using it.</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 113" /><a href="https://news.ycombinator.com/vote?id=44096324&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>… and why are those subscription fees so obscene? I guess too many people have too much money…</p>

<p><img src="https://news.ycombinator.com/s.gif" alt="Image 114" /><a href="https://news.ycombinator.com/vote?id=44096535&amp;how=up&amp;goto=item%3Fid%3D44094980"></a>Sure. But it’s worth it for me. It’s really great. And i have full control over my files. It’s not hosted by them. Just markdown files</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">redbean</title><link href="https://ib.bsb.br/redbean/" rel="alternate" type="text/html" title="redbean" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T06:22:16+00:00</updated><id>https://ib.bsb.br/redbean</id><content type="html" xml:base="https://ib.bsb.br/redbean/"><![CDATA[<h2 id="single-file-distributable-web-server">single-file distributable web server</h2>

<p><a href="https://redbean.dev/">redbean</a> is an open source webserver in a single-file that runs natively on six OSes for both AMD64 and ARM64. Basic idea is if you want to build a web app that runs anywhere, then you download the redbean.com file, put your .html and .lua files inside it using the zip command, and you’ve got a hermetic app you deploy and share.</p>

<p>redbean embeds <a href="https://www.lua.org/manual/5.4/manual.html#3">Lua</a>, <a href="https://www.sqlite.org/index.html">SQLite</a>, and <a href="https://tls.mbed.org/">MbedTLS</a> into a fork() driven application server that benchmarks at 5.3 million qps on Threadripper. It’s got a live <a href="https://github.com/jart/bestline">bestline</a> REPL with code completion and a <a href="https://redbean.dev/#unix">UNIX module</a> too, that lets you directly use the <a href="https://github.com/jart/cosmopolitan">Cosmopolitan Libc</a> system call interface. redbean furthermore provides sandboxing and system call tracing for security. This makes redbean a great fit for when you want to build an app that’s vertically integrated into a single tiny file that runs on nearly all PCs and servers.</p>

<h2 id="table-of-contents"><a href="https://redbean.dev/#toc">table of contents</a></h2>

<p><em>documentation</em></p>

<ul>
  <li><a href="https://redbean.dev/#download">download</a></li>
  <li><a href="https://redbean.dev/#install">installation</a></li>
  <li><a href="https://redbean.dev/#source">source code</a></li>
  <li><a href="https://redbean.dev/#tools">supplementary tools</a></li>
  <li><a href="https://redbean.dev/#features">features</a></li>
  <li><a href="https://redbean.dev/#usage">usage</a></li>
  <li><a href="https://redbean.dev/#details">details</a></li>
  <li><a href="https://redbean.dev/#lua">lua server pages</a></li>
  <li><a href="https://redbean.dev/#repl">repl interface</a></li>
  <li><a href="https://redbean.dev/#enhancements">lua enhancements</a></li>
  <li><a href="https://redbean.dev/#ops">operations</a></li>
  <li><a href="https://redbean.dev/#security">security</a>
    <ul>
      <li><a href="https://redbean.dev/#ssl">ssl</a></li>
      <li><a href="https://redbean.dev/#ddos">ddos protection</a></li>
      <li><a href="https://redbean.dev/#memory">memory safety</a></li>
      <li><a href="https://redbean.dev/#sandboxing">sandboxing</a></li>
    </ul>
  </li>
  <li><a href="https://redbean.dev/#benchmark">benchmark</a></li>
  <li><a href="https://redbean.dev/#oldversions">versions</a></li>
  <li><a href="https://redbean.dev/#funding">funding</a></li>
  <li><a href="https://redbean.dev/#seealso">see also</a></li>
  <li>
    <p><a href="https://redbean.dev/#legal">legal</a><em>modules</em></p>
  </li>
  <li><a href="https://redbean.dev/#lsqlite3">lsqlite3</a></li>
  <li><a href="https://redbean.dev/#maxmind">maxmind</a></li>
  <li><a href="https://redbean.dev/#finger">finger</a></li>
  <li><a href="https://redbean.dev/#argon2">argon2</a></li>
  <li><a href="https://redbean.dev/#path">path</a></li>
  <li><a href="https://redbean.dev/#re">re</a></li>
  <li><a href="https://redbean.dev/#re.flags">re flags</a></li>
  <li><a href="https://redbean.dev/#re.errors">re errors</a></li>
  <li><a href="https://redbean.dev/#re.Regex">re.Regex</a></li>
  <li><a href="https://redbean.dev/#unix">unix</a></li>
  <li><a href="https://redbean.dev/#unix.errno">unix errnos</a></li>
  <li><a href="https://redbean.dev/#unix.signal">unix signals</a></li>
  <li><a href="https://redbean.dev/#unix.magnums">unix magnums</a></li>
  <li><a href="https://redbean.dev/#unix.Dir">unix.Dir</a></li>
  <li><a href="https://redbean.dev/#unix.Rusage">unix.Rusage</a></li>
  <li><a href="https://redbean.dev/#unix.Stat">unix.Stat</a></li>
  <li><a href="https://redbean.dev/#unix.Statfs">unix.Statfs</a></li>
  <li><a href="https://redbean.dev/#unix.Sigset">unix.Sigset</a></li>
  <li><a href="https://redbean.dev/#unix.Errno">unix.Errno</a></li>
  <li>
    <p><a href="https://redbean.dev/#unix.Memory">unix.Memory</a><em>reference</em></p>
  </li>
  <li><a href="https://redbean.dev/#flags">cli flags</a></li>
  <li><a href="https://redbean.dev/#keyboard">keyboard</a></li>
  <li><a href="https://redbean.dev/#functions">functions</a></li>
  <li><a href="https://redbean.dev/#constants">constants</a></li>
  <li><a href="https://redbean.dev/#specials">special paths</a></li>
  <li><a href="https://redbean.dev/#globals">globals</a></li>
  <li><a href="https://redbean.dev/#hooks">hooks</a></li>
</ul>

<p><em>community</em></p>

<ul>
  <li><a href="https://github.com/pkulchenko/fullmoon">fullmoon</a></li>
  <li><a href="https://github.com/w13b3/redbean-jwt">redbean-jwt</a></li>
  <li><a href="https://github.com/ProducerMatt/redbean-template">redbean-template</a></li>
  <li><a href="https://github.com/shmup/redbean-calcpad">redbean-calcpad</a></li>
  <li><a href="https://github.com/shmup/redbean-cardgames">redbean-cardgames</a></li>
  <li><a href="https://github.com/kissgyorgy/redbean-docker">redbean-docker</a></li>
  <li><a href="https://github.com/empjustine/redbean-zipfile">redbean-zipfile</a></li>
  <li><a href="https://github.com/amreus/tiddly-bean">tiddly-bean</a></li>
  <li><a href="https://github.com/cdrubin/rig">rig</a></li>
</ul>

<h2 id="download"><a href="https://redbean.dev/#download">download</a><img src="https://worker.jart.workers.dev/redbean/linux.png" alt="Image 2: [Linux]" /><img src="https://worker.jart.workers.dev/redbean/windows10.png" alt="Image 3: [Windows]" /><img src="https://worker.jart.workers.dev/redbean/macos.png" alt="Image 4: [MacOS]" /><img src="https://worker.jart.workers.dev/redbean/freebsd64.png" alt="Image 5: [FreeBSD]" /><img src="https://worker.jart.workers.dev/redbean/openbsd.png" alt="Image 6: [OpenBSD]" /><img src="https://worker.jart.workers.dev/redbean/netbsd2.png" alt="Image 7: [NetBSD]" /></h2>

<p>redbean v3.0.0 was released on 2024-08-17.</p>

<p><a href="https://redbean.dev/redbean-3.0.0.com">redbean-3.0.0.com</a></p>

<p>5.5m - PE+ELF+MachO+ZIP+SH for AMD64 and ARM64 (<a href="https://github.com/jart/cosmopolitan/blob/redbean-3.0.0/tool/net/redbean.c">source code</a>)</p>

<p><code class="language-plaintext highlighter-rouge">382f1288bb96ace4bab5145e7df236846c33cc4f1be69233710682a9e71e7467</code></p>

<p><a href="https://redbean.dev/redbean-demo-3.0.0.com">redbean-demo-3.0.0.com</a></p>

<p>5.5m - same as redbean but includes example code</p>

<p><code class="language-plaintext highlighter-rouge">cf7b6dcef357bf1d3a08e373ffd7fa41b0f343d0b66ddc22776e0d273082f727</code></p>

<h2 id="build-from-source-"><a href="https://redbean.dev/#source1">build from source <img src="https://worker.jart.workers.dev/redbean/linux.png" alt="Image 8: [Linux]" /></a></h2>

<h1 id="build-once-run-anywhere-using-linux">build once run anywhere using linux</h1>
<p>git clone https://github.com/jart/cosmopolitan
cd cosmopolitan
make -j8 o//tool/net/redbean
o//tool/net/redbean -vv</p>

<h2 id="supplementary-tools"><a href="https://redbean.dev/#tools">supplementary tools</a></h2>

<p>On <a href="https://cosmo.zip/">cosmo.zip</a> you’ll find other command line tools, built as APE binaries, that are essential when developing software with redbean.</p>

<ul>
  <li>The <a href="https://cosmo.zip/pub/cosmos/bin/zip">zip</a> executable (Info-ZIP) is the recommended way to add ZIP files to a redbean.</li>
  <li>The <a href="https://cosmo.zip/pub/cosmos/bin/unzip">unzip</a> executable (Info-ZIP) is the recommended way to extract ZIP files from a redbean.</li>
  <li>The <a href="https://cosmo.zip/pub/cosmos/bin/sqlite3">sqlite3</a> executable may be used to maintain your redbean’s SQLite database across platforms.</li>
  <li>The <a href="https://cosmo.zip/pub/cosmos/bin/blackholed">blackholed</a> executable (<a href="https://github.com/jart/cosmopolitan/blob/master/net/turfwar/blackholed.c">source code</a>) is needed if you use redbean’s token bucket DDOS protection.</li>
  <li>The <a href="https://cosmo.zip/pub/cosmos/bin/assimilate">assimilate</a> executable (<a href="https://github.com/jart/cosmopolitan/blob/master/tool/build/assimilate.c">source code</a>) may be used to turn your redbean into a native binary, if your platform supports doing that. If you have difficulty running the APE version of this program, then the following <em>assimilated</em> assimilate binaries are provided:
    <ul>
      <li><a href="https://cosmo.zip/pub/cosmos/bin/assimilate-x86_64.elf">assimilate-x86_64.elf</a> for Linux and BSD on AMD64</li>
      <li><a href="https://cosmo.zip/pub/cosmos/bin/assimilate-aarch64.elf">assimilate-aarch64.elf</a> for Linux and BSD on ARM64</li>
      <li><a href="https://cosmo.zip/pub/cosmos/bin/assimilate-x86_64.macho">assimilate-x86_64.macho</a> for MacOS on AMD64</li>
    </ul>
  </li>
</ul>

<h2 id="features"><a href="https://redbean.dev/#features">features</a></h2>

<ul>
  <li>Lua v5.4</li>
  <li>SQLite 3.40.0</li>
  <li>TLS v1.2 / v1.1 / v1.0</li>
  <li>HTTP v1.1 / v1.0 / v0.9</li>
  <li>PKZIP Object Store</li>
  <li>Chromium-Zlib Compression</li>
  <li>Statusz Monitoring Statistics</li>
  <li>POSIX API for Linux + Mac + Windows + FreeBSD + NetBSD + OpenBSD</li>
</ul>

<h2 id="installation"><a href="https://redbean.dev/#install">installation</a></h2>

<p>redbean is designed to not need to be installed. Since there’s no dependencies, all you need to do is download the binary and run it.</p>

<p>curl https://redbean.dev/redbean-demo-latest.com &gt;redbean-demo.com
chmod +x redbean-demo.com
./redbean-demo.com -v</p>

<p>That’ll start up a command line web server with a REPL. If you’re on a desktop, it’ll also launch a tab in your browser, visiting your redbean web server. If you go to <a href="http://localhost:8080/">http://localhost:8080/</a> then you should be able to see a listing of the content, with many demo scripts.</p>

<p>Having trouble? Here are some more specific instructions for various platforms, in case the above commands don’t work.</p>

<h3 id="macos">MacOS</h3>

<p>On macOS with Apple Silicon you need to have Xcode Command Line Tools installed for redbean to be able to bootstrap itself.</p>

<p>If you use zsh and have trouble running redbean, try saying</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh -c
./redbean-demo.com
</code></pre></div></div>
<p>. This is due to a bug that was fixed in zsh 5.9+. The same is the case for Python <code class="language-plaintext highlighter-rouge">subprocess</code>, old versions of Fish, etc.</p>

<p>If you get the MacOS error <em>“… cannot be opened because the developer cannot be verified”</em> then:</p>

<ol>
  <li>Immediately launch System Settings, then go to Privacy &amp; Security. redbean should be listed at the bottom, with a button to Allow.</li>
  <li>If not, then change your command in the Terminal to be
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo
spctl --master-disable; [redbean launch command]; sudo spctl
--master-enable
</code></pre></div>    </div>
    <p>. This is because <code class="language-plaintext highlighter-rouge">--master-disable</code> disables <em>all</em> checking, so you need to turn it back on after quitting redbean.</p>
  </li>
</ol>

<h3 id="linux">Linux</h3>

<p>On some Linux systems, you might get errors relating to <code class="language-plaintext highlighter-rouge">run-detectors</code> or WINE. This is due to <code class="language-plaintext highlighter-rouge">binfmt_misc</code> registrations. You can fix that by adding an additional registration for the APE file format redbean uses:</p>

<p>sudo wget -O /usr/bin/ape https://cosmo.zip/pub/cosmos/bin/ape-$(uname -m).elf
sudo chmod +x /usr/bin/ape
sudo sh -c “echo ‘:APE:M::MZqFpD::/usr/bin/ape:’ &gt;/proc/sys/fs/binfmt_misc/register”
sudo sh -c “echo ‘:APE-jart:M::jartsr::/usr/bin/ape:’ &gt;/proc/sys/fs/binfmt_misc/register”</p>

<h3 id="windows">Windows</h3>

<p>Generally speaking with Windows, you just need to make sure the APE binary has a .exe or .com extension. To make things simple for you:</p>

<p>curl -o zip.exe https://cosmo.zip/pub/cosmos/bin/zip
curl -o redbean-demo.com https://redbean.dev/redbean-demo-latest.com
.\redbean-demo.com</p>

<p>On WSL, there are many possible gotchas. One thing that helps solve them is this:</p>

<p>[Unit]
Description=cosmopolitan APE binfmt service
After=wsl-binfmt.service</p>

<p>[Service]
Type=oneshot
ExecStart=/bin/sh -c “echo ‘:APE:M::MZqFpD::/usr/bin/ape:’ &gt;/proc/sys/fs/binfmt_misc/register”</p>

<p>[Install]
WantedBy=multi-user.target</p>

<p>Put that in <code class="language-plaintext highlighter-rouge">/etc/systemd/system/cosmo-binfmt.service</code>. You also need to download <a href="https://cosmo.zip/pub/cosmos/bin/ape-x86_64.elf">ape-x86_64.elf</a> and copy it to <code class="language-plaintext highlighter-rouge">/usr/bin/ape</code> with <code class="language-plaintext highlighter-rouge">chmod +x</code>.</p>

<p>Then run <code class="language-plaintext highlighter-rouge">sudo systemctl enable cosmo-binfmt</code>.</p>

<p>Another thing that’s helped WSL users who experience issues, is to disable the WIN32 interop feature:</p>

<p>sudo sh -c “echo -1 &gt; /proc/sys/fs/binfmt_misc/WSLInterop”</p>

<p>In the instance of getting a <code class="language-plaintext highlighter-rouge">Permission Denied</code> on disabling interop through CLI, it can be permanently disabled by adding the following in <code class="language-plaintext highlighter-rouge">/etc/wsl.conf</code>.</p>

<p>[interop]
enabled=false</p>

<h2 id="usage"><a href="https://redbean.dev/#usage">usage</a></h2>

<p>Here’s basic overview of how you’d go about using redbean alongside <a href="http://infozip.sourceforge.net/Zip.html">InfoZIP</a> which is a free tool that comes included with most UNIX systems.</p>

<p>echo ‘<b>hello</b>’ &gt;hello.html
zip redbean.com hello.html</p>

<h1 id="in-first-terminal">in first terminal</h1>
<p>$ ./redbean.com -vv
I2022-04-29T07:17:28+000767:redbean] (srvr) listen http://127.0.0.1:8080</p>
<blockquote>
  <p>: waiting for command…</p>
</blockquote>

<h1 id="in-second-terminal">in second terminal</h1>
<p>$ curl http://127.0.0.1:8080/hello.html
<b>hello</b>
$ curl -k https://127.0.0.1:8080/hello.html
<b>hello</b></p>

<h1 id="add-some-stuff-to-the-zip-executable">add some stuff to the zip executable</h1>
<p>$ echo ‘<a href="https://redbean.dev/#Write">Write</a>(“<b>hello</b>”)’ &gt;hello.lua
$ zip redbean.com hello.lua</p>

<h1 id="perform-a-naked-http-request">perform a naked http request</h1>
<p>$ printf ‘GET /hello.lua\n\n’ | nc 127.0.0.1 8080
<b>hello</b></p>

<p>One GUI-like feature redbean itself offers is the ability to <code class="language-plaintext highlighter-rouge">LaunchBrowser()</code> at startup, which can be called from your your <code class="language-plaintext highlighter-rouge">/.init.lua</code> file.</p>

<h2 id="source-build"><a href="https://redbean.dev/#source">source build</a></h2>

<p>You have greater power to customize your redbean build if you build from source. For example:</p>

<p>git clone https://github.com/jart/cosmopolitan &amp;&amp; cd cosmopolitan
make -j8 MODE=tiny o/tiny/tool/net
ls o/tiny/tool/net/redbean*.com
o/tiny/tool/net/redbean.com -vv
make -j8 MODE=tiny o/tiny/tool/net
o/tiny/tool/net/redbean.com -vv
make -j8 MODE=tinylinux o/tinylinux/tool/net
o/tinylinux/tool/net/redbean-original.com -vv</p>

<p>Some of the supported build modes are: MODE= (default), MODE=opt, rel, dbg, tiny, asan, optlinux, tinylinux, tinylinuxbsd, and tinysysv.</p>

<h2 id="details"><a href="https://redbean.dev/#details">details</a></h2>

<p>You can launch redbean in your terminal in the most verbose way possible by doing the following:</p>

<p>./redbean.com -vvmbag         # starts server verbosely
open http://127.0.0.1:8080/   # shows zip listing page
CTRL-C                        # 1x: graceful shutdown
CTRL-C                        # 2x: forceful shutdown</p>

<p>Assets can be added to the zip archive as follows:</p>

<p>zip redbean.com index.html                  # adds file
zip -r redbean.com mirrored-website         # adds directory
echo comment | zip -c redbean.com foo.html  # adds file w/ comment</p>

<p>By default, anything you add to the archive gets compressed. Sometimes you don’t want that to happen. A good example is video files. The web browser will want to send HTTP range requests to seek in the video, in which case redbean requires that the asset be uncompressed.</p>

<p>zip -0 redbean.com video.mp4  # adds file without compression</p>

<p>You can run redbean interactively in your terminal as follows:</p>

<p>redbean.com -vv
CTRL-C                        # 1x: graceful shutdown
CTRL-C                        # 2x: forceful shutdown</p>

<p>The <code class="language-plaintext highlighter-rouge">index.lua</code> and <code class="language-plaintext highlighter-rouge">index.html</code> names are special since they’re used to automatically figure out how to serve directories. Such files can appear in any directory, however the root directory is special. The default action for <code class="language-plaintext highlighter-rouge">/</code> is to show a listing page showing the contents of your zip central directory.</p>

<p>The listing page only applies to the root directory. However the default index page applies to subdirectories too. In order for it to work, there needs to be an empty directory entry in the zip. That should already be the default practice of your zip editor.</p>

<p>redbean normalizes the trailing slash for you automatically:</p>

<p>$ printf ‘GET /a.example HTTP/1.0\n\n’ | nc 127.0.0.1 8080
HTTP/1.0 307 Temporary Redirect
Location: /a.example/</p>

<p>Virtual hosting is accomplished this way too. The Host is simply prepended to the path, and if it doesn’t exist, it gets removed.</p>

<p>$ printf ‘GET / HTTP/1.1\nHost:a.example\n\n’ | nc 127.0.0.1 8080
HTTP/1.1 200 OK
Link: <a href="http://127.0.0.1/a.example/index.html">http://127.0.0.1/a.example/index.html</a>; rel="canonical"</p>

<p>If you mirror a lot of websites within your redbean then you can actually tell your browser that redbean is your proxy server, in which redbean will act as your private version of the Internet.</p>

<p>wget                     <br />
  –mirror               <br />
  –convert-links        <br />
  –adjust-extension     <br />
  –page-requisites      <br />
  –no-parent            <br />
  –no-if-modified-since <br />
  http://a.example/index.html
zip -r redbean.com a.example/  # default page for directory
printf ‘GET http://a.example HTTP/1.0\n\n’ | nc 127.0.0.1 8080
HTTP/1.0 200 OK
Link: <a href="http://127.0.0.1/a.example/index.html">http://127.0.0.1/a.example/index.html</a>; rel=”canonical”</p>

<p>If you use a reverse proxy, then redbean recognizes the following provided that the proxy forwards requests over the local network:</p>

<p>X-Forwarded-For: 203.0.113.42:31337
X-Forwarded-Host: foo.example:80</p>

<p>There’s a text/plain statistics page called /statusz that makes it easy to track and monitor the health of your redbean:</p>

<table>
  <tbody>
    <tr>
      <td>printf ‘GET /statusz\n\n’</td>
      <td>nc 127.0.0.1 8080</td>
    </tr>
  </tbody>
</table>

<p>redbean will display an error page using the /redbean.png logo by default, embedded as a bas64 data uri. You can override the custom page for various errors by adding files to the zip root.</p>

<p>zip redbean.com 404.html      # custom not found page</p>

<h2 id="flags"><a href="https://redbean.dev/#flags">flags</a></h2>

<table>
  <thead>
    <tr>
      <th>-h or -?</th>
      <th>help</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-d</td>
      <td>daemonize</td>
    </tr>
    <tr>
      <td>-u</td>
      <td>uniprocess</td>
    </tr>
    <tr>
      <td>-z</td>
      <td>print port</td>
    </tr>
    <tr>
      <td>-m</td>
      <td>log messages</td>
    </tr>
    <tr>
      <td>-i</td>
      <td>interpreter mode</td>
    </tr>
    <tr>
      <td>-b</td>
      <td>log message bodies</td>
    </tr>
    <tr>
      <td>-a</td>
      <td>log resource usage</td>
    </tr>
    <tr>
      <td>-g</td>
      <td>log handler latency</td>
    </tr>
    <tr>
      <td>-E</td>
      <td>show crash reports to public ips</td>
    </tr>
    <tr>
      <td>-j</td>
      <td>enable ssl client verify</td>
    </tr>
    <tr>
      <td>-k</td>
      <td>disable ssl fetch verify</td>
    </tr>
    <tr>
      <td>-Z</td>
      <td>log worker system calls</td>
    </tr>
    <tr>
      <td>-f</td>
      <td>log worker function calls</td>
    </tr>
    <tr>
      <td>-B</td>
      <td>only use stronger cryptography</td>
    </tr>
    <tr>
      <td>-X</td>
      <td>disable ssl server and client support</td>
    </tr>
    <tr>
      <td>-*</td>
      <td>permit self-modification of executable</td>
    </tr>
    <tr>
      <td>-J</td>
      <td>disable non-ssl server and client support</td>
    </tr>
    <tr>
      <td>-%</td>
      <td>hasten startup by not generating an rsa key</td>
    </tr>
    <tr>
      <td>-s</td>
      <td>increase silence [repeatable]</td>
    </tr>
    <tr>
      <td>-v</td>
      <td>increase verbosity [repeatable]</td>
    </tr>
    <tr>
      <td>-V</td>
      <td>increase ssl verbosity [repeatable]</td>
    </tr>
    <tr>
      <td>-S</td>
      <td>increase pledge sandboxing [repeatable]</td>
    </tr>
    <tr>
      <td>-e CODE</td>
      <td>eval Lua code in arg [repeatable]</td>
    </tr>
    <tr>
      <td>-F PATH</td>
      <td>eval Lua code in file [repeatable]</td>
    </tr>
    <tr>
      <td>-H K:V</td>
      <td>sets http header globally [repeatable]</td>
    </tr>
    <tr>
      <td>-D DIR</td>
      <td>overlay assets in local directory [repeatable]</td>
    </tr>
    <tr>
      <td>-r /X=/Y</td>
      <td>redirect X to Y [repeatable]</td>
    </tr>
    <tr>
      <td>-R /X=/Y</td>
      <td>rewrites X to Y [repeatable]</td>
    </tr>
    <tr>
      <td>-K PATH</td>
      <td>tls private key path [repeatable]</td>
    </tr>
    <tr>
      <td>-C PATH</td>
      <td>tls certificate(s) path [repeatable]</td>
    </tr>
    <tr>
      <td>-A PATH</td>
      <td>add assets with path (recursive) [repeatable]</td>
    </tr>
    <tr>
      <td>-M INT</td>
      <td>tunes max message payload size [def. 65536]</td>
    </tr>
    <tr>
      <td>-t INT</td>
      <td>timeout ms or keepalive sec if &lt;0 [def. 60000]</td>
    </tr>
    <tr>
      <td>-p PORT</td>
      <td>listen port [def. 8080; repeatable]</td>
    </tr>
    <tr>
      <td>-l ADDR</td>
      <td>listen addr [def. 0.0.0.0; repeatable]</td>
    </tr>
    <tr>
      <td>-c SEC</td>
      <td>configures static cache-control</td>
    </tr>
    <tr>
      <td>-W TTY</td>
      <td>use tty path to monitor memory pages</td>
    </tr>
    <tr>
      <td>-L PATH</td>
      <td>log file location</td>
    </tr>
    <tr>
      <td>-P PATH</td>
      <td>pid file location</td>
    </tr>
    <tr>
      <td>-U INT</td>
      <td>daemon set user id</td>
    </tr>
    <tr>
      <td>-G INT</td>
      <td>daemon set group id</td>
    </tr>
    <tr>
      <td>-w PATH</td>
      <td>launch browser on startup</td>
    </tr>
    <tr>
      <td>–strace</td>
      <td>enables system call tracing (see also -Z)</td>
    </tr>
    <tr>
      <td>–ftrace</td>
      <td>enables function call tracing (see also -f)</td>
    </tr>
  </tbody>
</table>

<h2 id="keyboard"><a href="https://redbean.dev/#keyboard">keyboard</a></h2>

<table>
  <thead>
    <tr>
      <th>ctrl-d</th>
      <th>exit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ctrl-c ctrl-c</td>
      <td>exit</td>
    </tr>
    <tr>
      <td>ctrl-e</td>
      <td>end</td>
    </tr>
    <tr>
      <td>ctrl-a</td>
      <td>start</td>
    </tr>
    <tr>
      <td>ctrl-b</td>
      <td>back</td>
    </tr>
    <tr>
      <td>ctrl-f</td>
      <td>forward</td>
    </tr>
    <tr>
      <td>ctrl-l</td>
      <td>clear</td>
    </tr>
    <tr>
      <td>ctrl-h</td>
      <td>backspace</td>
    </tr>
    <tr>
      <td>ctrl-d</td>
      <td>delete</td>
    </tr>
    <tr>
      <td>ctrl-n</td>
      <td>next history</td>
    </tr>
    <tr>
      <td>ctrl-p</td>
      <td>previous history</td>
    </tr>
    <tr>
      <td>ctrl-r</td>
      <td>search history</td>
    </tr>
    <tr>
      <td>ctrl-g</td>
      <td>cancel search</td>
    </tr>
    <tr>
      <td>alt-&lt;</td>
      <td>beginning of history</td>
    </tr>
    <tr>
      <td>alt-&gt;</td>
      <td>end of history</td>
    </tr>
    <tr>
      <td>alt-f</td>
      <td>forward word</td>
    </tr>
    <tr>
      <td>alt-b</td>
      <td>backward word</td>
    </tr>
    <tr>
      <td>ctrl-right</td>
      <td>forward word</td>
    </tr>
    <tr>
      <td>ctrl-left</td>
      <td>backward word</td>
    </tr>
    <tr>
      <td>ctrl-k</td>
      <td>kill line forwards</td>
    </tr>
    <tr>
      <td>ctrl-u</td>
      <td>kill line backwards</td>
    </tr>
    <tr>
      <td>alt-h</td>
      <td>kill word backwards</td>
    </tr>
    <tr>
      <td>ctrl-w</td>
      <td>kill word backwards</td>
    </tr>
    <tr>
      <td>ctrl-alt-h</td>
      <td>kill word backwards</td>
    </tr>
    <tr>
      <td>alt-d</td>
      <td>kill word forwards</td>
    </tr>
    <tr>
      <td>ctrl-y</td>
      <td>yank</td>
    </tr>
    <tr>
      <td>alt-y</td>
      <td>rotate kill ring and yank again</td>
    </tr>
    <tr>
      <td>ctrl-t</td>
      <td>transpose</td>
    </tr>
    <tr>
      <td>alt-t</td>
      <td>transpose word</td>
    </tr>
    <tr>
      <td>alt-u</td>
      <td>uppercase word</td>
    </tr>
    <tr>
      <td>alt-l</td>
      <td>lowercase word</td>
    </tr>
    <tr>
      <td>alt-c</td>
      <td>capitalize word</td>
    </tr>
    <tr>
      <td>ctrl-\</td>
      <td>quit process</td>
    </tr>
    <tr>
      <td>ctrl-s</td>
      <td>pause output</td>
    </tr>
    <tr>
      <td>ctrl-q</td>
      <td>unpause output (if paused)</td>
    </tr>
    <tr>
      <td>ctrl-q</td>
      <td>escaped insert</td>
    </tr>
    <tr>
      <td>ctrl-alt-f</td>
      <td>forward expr</td>
    </tr>
    <tr>
      <td>ctrl-alt-b</td>
      <td>backward expr</td>
    </tr>
    <tr>
      <td>alt-right</td>
      <td>forward expr</td>
    </tr>
    <tr>
      <td>alt-left</td>
      <td>backward expr</td>
    </tr>
    <tr>
      <td>alt-shift-b</td>
      <td>barf expr</td>
    </tr>
    <tr>
      <td>alt-shift-s</td>
      <td>slurp expr</td>
    </tr>
    <tr>
      <td>ctrl-space</td>
      <td>set mark</td>
    </tr>
    <tr>
      <td>ctrl-x ctrl-x</td>
      <td>goto mark</td>
    </tr>
    <tr>
      <td>ctrl-z</td>
      <td>suspend process</td>
    </tr>
    <tr>
      <td>alt-\</td>
      <td>squeeze adjacent whitespace</td>
    </tr>
    <tr>
      <td>protip</td>
      <td>remap caps lock to ctrl</td>
    </tr>
  </tbody>
</table>

<h2 id="lua-server-pages"><a href="https://redbean.dev/#lua">lua server pages</a></h2>

<p>Any files with the extension <code class="language-plaintext highlighter-rouge">.lua</code> will be dynamically served by redbean. Here’s the simplest possible example:</p>

<p><a href="https://redbean.dev/#Write">Write</a>(‘<b>Hello World</b>’)</p>

<p>The Lua Server Page above should be able to perform at 700,000 responses per second on a Core i9, without any sort of caching. If you want a Lua handler that can do 1,000,000 responses per second, then try adding the following global handler to your <code class="language-plaintext highlighter-rouge">/.init.lua</code> file:</p>

<p>function <a href="https://redbean.dev/#OnHttpRequest">OnHttpRequest</a>()
   <a href="https://redbean.dev/#Write">Write</a>(‘<b>Hello World</b>’)
end</p>

<p>Here’s an example of a more typical workflow for Lua Server Pages using the redbean API:</p>

<p><a href="https://redbean.dev/#SetStatus">SetStatus</a>(200)
<a href="https://redbean.dev/#SetHeader">SetHeader</a>(‘Content-Type’, ‘text/plain; charset=utf-8’)
<a href="https://redbean.dev/#Write">Write</a>(‘&lt;p&gt;Hello ‘)
<a href="https://redbean.dev/#Write">Write</a>(<a href="https://redbean.dev/#EscapeHtml">EscapeHtml</a>(<a href="https://redbean.dev/#GetParam">GetParam</a>(‘name’)))</p>

<p>We didn’t need the first two lines in the previous example, because they’re implied by redbean automatically if you don’t set them. Responses are also buffered until the script finishes executing. That enables redbean to make HTTP as easy as possible. In the future, API capabilities will be expanded to make possible things like websockets.</p>

<p>redbean embeds the <a href="https://www.lua.org/manual/5.4/manual.html#6">Lua standard library</a>. You can use packages such as <a href="https://www.lua.org/manual/5.4/manual.html#6.8"><code class="language-plaintext highlighter-rouge">io</code></a> to persist and share state across requests and connections, as well as the <a href="https://redbean.dev/#StoreAsset"><code class="language-plaintext highlighter-rouge">StoreAsset</code></a> function, and the <a href="https://redbean.dev/#lsqlite3"><code class="language-plaintext highlighter-rouge">lsqlite3</code></a> module.</p>

<p>Your Lua interpreter begins its life in the main process at startup in the <code class="language-plaintext highlighter-rouge">.init.lua</code>, which is likely where you’ll want to perform all your expensive one-time operations like importing modules. Then, as requests roll in, isolated processes are cloned from the blueprint you created.</p>

<h2 id="repl"><a href="https://redbean.dev/#repl">repl</a></h2>

<p>Your redbean displays a Read-Eval-Print-Loop that lets you modify the state of the main server process while your server is running. Any changes will propagate into forked clients.</p>

<p>Your REPL is displayed only when redbean is run as a non-daemon in a Unix terminal or the Windows 10 command prompt or PowerShell. Since the REPL is a Lua REPL it’s not included in a redbean-static builds.</p>

<p>redbean uses the same keyboard shortcuts as GNU Readline and Emacs. Some of its keyboard commands (listed in a previous section) were inspired by Paredit.</p>

<p>A history of your commands is saved to <code class="language-plaintext highlighter-rouge">~/.redbean_history</code>.</p>

<p>If you love the redbean repl and want to use it as your language interpreter then you can pass the <code class="language-plaintext highlighter-rouge">-i</code> flag to put redbean into interpreter mode.</p>

<p>redbean.com -i binarytrees.lua 15</p>

<p>When the <code class="language-plaintext highlighter-rouge">-i</code> flag is passed (for interpreter mode), redbean won’t start a web server and will instead functions like the <code class="language-plaintext highlighter-rouge">lua</code> command. The first command line argument becomes the script you want to run. If you don’t supply a script, then the repl without a web server is displayed. This is useful for testing since redbean extensions and modules for the Lua language, are still made available. You can also write redbean scripts with shebang lines:</p>

<p>#!/usr/bin/redbean -i
print(‘hello world’)</p>

<p>However UNIX operating systems usually require that interpreters be encoded in its preferred executable format. You can assimilate your redbean into the local format using the following commands:</p>

<p>$ file redbean.com
redbean.com: DOS/MBR boot sector
$ curl -o assimilate https://cosmo.zip/pub/cosmos/bin/assimilate
$ chmod +x assimilate
$ ./assimilate ./redbean.com
$ file redbean.com
redbean.com: ELF 64-bit LSB executable
$ sudo cp redbean.com /usr/bin/redbean</p>

<p>By following the above steps, redbean can be installed systemwide for multiple user accounts. It’s also possible to chmod the binary to have setuid privileges. Please note that, if you do this, the <a href="https://redbean.dev/#unix">UNIX section</a> provides further details on APIs like <a href="https://redbean.dev/#unix.setuid">unix.setuid</a> that will help you remove root privileges from the process in the appropriate manner.</p>

<h2 id="lua-enhancements"><a href="https://redbean.dev/#enhancements">lua enhancements</a></h2>

<p>We’ve made some enhancements to the Lua language that should make it more comfortable for C/C++ and Python developers. Some of these</p>

<ul>
  <li>redbean supports a printf modulus operator, like Python. For example, you can say <code class="language-plaintext highlighter-rouge">"hello %s" % {"world"}</code> instead of <code class="language-plaintext highlighter-rouge">string.format("hello %s", "world")</code>.</li>
  <li>redbean supports a string multiply operator, like Python. For example, you can say <code class="language-plaintext highlighter-rouge">"hi" * 2</code> instead of <code class="language-plaintext highlighter-rouge">string.rep("hi", 2)</code>.</li>
  <li>redbean supports octal (base 8) integer literals. For example <code class="language-plaintext highlighter-rouge">0644 == 420</code> is the case in redbean, whereas in upstream Lua <code class="language-plaintext highlighter-rouge">0644 == 644</code> would be the case.</li>
  <li>redbean supports binary (base 2) integer literals. For example <code class="language-plaintext highlighter-rouge">0b1010 == 10</code> is the case in redbean, whereas in upstream Lua <code class="language-plaintext highlighter-rouge">0b1010</code> would result in an error.</li>
  <li>redbean supports the GNU syntax for the ASCII ESC character in string literals. For example, <code class="language-plaintext highlighter-rouge">"\e"</code> is the same as <code class="language-plaintext highlighter-rouge">"\x1b"</code>.</li>
</ul>

<h2 id="special-paths"><a href="https://redbean.dev/#specials">special paths</a></h2>

<p>/  redbean will generate a zip central directory listing for this page, and this page only, but only if there isn’t an <code class="language-plaintext highlighter-rouge">/index.lua</code> or <code class="language-plaintext highlighter-rouge">/index.html</code> file defined. <a href="https://redbean.dev/#init">/.init.lua</a> This script is run once in the main process at startup. This lets you modify the state of the Lua interpreter before connection processes are forked off. For example, it’s a good idea to do expensive one-time computations here. You can also use this file to call the <code class="language-plaintext highlighter-rouge">ProgramFOO()</code> functions below. The init module load happens after redbean’s arguments and zip assets have been parsed, but before calling functions like <a href="https://redbean.dev/#unix.socket">socket</a>() and <a href="https://redbean.dev/#unix.fork">fork</a>(). Note that this path is a hidden file so that it can’t be unintentionally run by the network client. <a href="https://redbean.dev/#reload">/.reload.lua</a> (deprecated; use <a href="https://redbean.dev/#OnServerReload">OnServerReload</a> instead)  This script is run from the main process when SIGHUP is received. This only applies to redbean when running in daemon mode. Any changes that are made to the Lua interpreter state will be inherited by future forked connection processes. Note that this path is a hidden file so that it can’t be unintentionally run by the network client. <a href="https://redbean.dev/#dotlua">/.lua/…</a> Your Lua modules go in this directory. The way it works is redbean sets Lua’s <code class="language-plaintext highlighter-rouge">package.path</code> to <code class="language-plaintext highlighter-rouge">/zip/.lua/?.lua;/zip/.lua/?/init.lua</code> by default. Cosmopolitan Libc lets system calls like <code class="language-plaintext highlighter-rouge">open</code> read from the ZIP structure, if the filename is prefixed with <code class="language-plaintext highlighter-rouge">/zip/</code>. So this works like magic. /redbean.png  If it exists, it’ll be used as the <code class="language-plaintext highlighter-rouge">/</code> listing page icon, embedded as a base64 URI. /usr/share/zoneinfo  This directory contains a subset of the timezone database. Your <code class="language-plaintext highlighter-rouge">TZ</code> environment variable controls which one of these files is used by functions such as <a href="https://redbean.dev/#unix.localtime">unix.localtime</a>(). /usr/share/ssl/root  This directory contains your root certificate authorities. It is needed so the <a href="https://redbean.dev/#Fetch">Fetch</a>() HTTPS client API can verify that a remote certificate was signed by a third party. You can add your own certificate files to this directory within the ZIP executable. If you enable HTTPS client verification then redbean will check that HTTPS clients (a) have a certificate and (b) it was signed. /.args  Specifies default command-line arguments. 
There’s one argument per line. Trailing newline is ignored. If the special argument <code class="language-plaintext highlighter-rouge">...</code> is <em>not</em> encountered, then the replacement will only happen if <em>no</em> CLI args are specified. If the special argument <code class="language-plaintext highlighter-rouge">...</code><em>is</em> encountered, then it’ll be replaced with whatever CLI args were specified by the user.</p>

<p>For example, you might want to use redbean.com in interpreter mode, where your script file is inside the zip. Then, if your redbean is run, what you want is to have the default behavior be running your script. In that case, you might:</p>

<p>$ cat «‘EOF’ &gt;.args
-i
/zip/hello.lua
EOF</p>

<p>$ cat «‘EOF’ &gt;hello.lua
print(“hello world”)
EOF</p>

<p>$ zip redbean.com .args hello.lua
$ ./redbean.com
hello world</p>

<p>Please note that if you ran:</p>

<p>$ ./redbean.com -vv</p>

<p>Then the default mode of redbean will kick back in. To prevent that from happening, simply add the magic arg <code class="language-plaintext highlighter-rouge">...</code> to the end of your <code class="language-plaintext highlighter-rouge">.args</code> file.</p>

<h2 id="globals"><a href="https://redbean.dev/#globals">globals</a></h2>

<p><a href="https://redbean.dev/#arg">arg</a>: array[str]  Array of command line arguments, excluding those parsed by getopt() in the C code, which stops parsing at the first non-hyphenated arg. In some cases you can use the magic – argument to delimit C from Lua arguments. 
For example, if you launch your redbean as follows:</p>

<p>redbean -v arg1 arg2</p>

<p>Then your <code class="language-plaintext highlighter-rouge">/.init.lua</code> file will have the <code class="language-plaintext highlighter-rouge">arg</code> array like:</p>

<p>arg[-1] = ‘/usr/bin/redbean’
arg[ 0] = ‘/zip/.init.lua’
arg[ 1] = ‘arg1’
arg[ 2] = ‘arg2’</p>

<p>If you launch redbean in interpreter mode (rather than web server) mode, then an invocation like this:</p>

<p>./redbean.com -i script.lua arg1 arg2</p>

<p>Would have an <code class="language-plaintext highlighter-rouge">arg</code> array like this:</p>

<p>arg[-1] = ‘./redbean.com’
arg[ 0] = ‘script.lua’
arg[ 1] = ‘arg1’
arg[ 2] = ‘arg2’</p>

<h2 id="hooks"><a href="https://redbean.dev/#hooks">hooks</a></h2>

<p><a href="https://redbean.dev/#OnHttpRequest">OnHttpRequest</a>()  If this function is defined in the global scope by your <code class="language-plaintext highlighter-rouge">/.init.lua</code> then redbean will call it at the earliest possible moment to hand over control for all messages (with the exception of <code class="language-plaintext highlighter-rouge">OPTIONS *</code>). See functions like <a href="https://redbean.dev/#Route"><code class="language-plaintext highlighter-rouge">Route</code></a> which asks redbean to do its default thing from the handler. <a href="https://redbean.dev/#OnError">OnError</a>(status:int, message:string)  If this function is defined and if any errors occurs in OnHttpRequest() then this method will be called instead of displaying the default error page. Useful if you need to display the error page using your specific code or send it to any tier service. <a href="https://redbean.dev/#OnClientConnection">OnClientConnection</a>(ip:int, port:int, serverip:int, serverport:int) → bool  If this function is defined it’ll be called from the main process each time redbean accepts a new client connection. If it returns <code class="language-plaintext highlighter-rouge">true</code> then redbean will close the connection without calling fork. <a href="https://redbean.dev/#OnLogLatency">OnLogLatency</a>(reqtimeus:int, contimeus:int)  If this function is defined it’ll be called from the child worker process each time redbean completes the handling of a request, but before the response is sent. The handler receives the time (in µs) since the request handling and connection handling started. <a href="https://redbean.dev/#OnProcessCreate">OnProcessCreate</a>(pid:int, ip:int, port:int, serverip:int, serverport:int)  If this function is defined it’ll be called from the main process each time redbean forks a connection handler worker process. The ip/port of the remote client is provided, along with the ip/port of the listening interface that accepted the connection. This may be used to create a server activity dashboard, in which case the data provider handler should set <code class="language-plaintext highlighter-rouge">SetHeader('Connection','Close')</code>. This won’t be called in uniprocess mode. <a href="https://redbean.dev/#OnProcessDestroy">OnProcessDestroy</a>(pid:int)  If this function is defined it’ll be called from the main process each time redbean reaps a child connection process using wait4(). This won’t be called in uniprocess mode. <a href="https://redbean.dev/#OnServerHeartbeat">OnServerHeartbeat</a>()  If this function is defined it’ll be called from the main process on each server heartbeat. The heartbeat interval is configurable with ProgramHeartbeatInterval. <a href="https://redbean.dev/#OnServerListen">OnServerListen</a>(socketdescriptor:int, serverip:int, serverport:int) → bool  If this function is defined it’ll be called from the main process before redbean starts listening on a port. This hook can be used to modify socket configuration to set <code class="language-plaintext highlighter-rouge">SO_REUSEPORT</code>, for example. If it returns <code class="language-plaintext highlighter-rouge">true</code>, redbean will not listen to that ip/port. <a href="https://redbean.dev/#OnServerReload">OnServerReload</a>(reindex:bool)  If this function is defined it’ll be called from the main process on each server reload triggered by SIGHUP (for daemonized) and SIGUSR1 (for all) redbean instances. reindex indicates if redbean assets have been re-indexed following the signal. <a href="https://redbean.dev/#OnServerStart">OnServerStart</a>()  If this function is defined it’ll be called from the main process right before the main event loop starts. <a href="https://redbean.dev/#OnServerStop">OnServerStop</a>()  If this function is defined it’ll be called from the main process after all the connection processes have been reaped and exit() is ready to be called. <a href="https://redbean.dev/#OnWorkerStart">OnWorkerStart</a>()  If this function is defined it’ll be called from the child worker process after it’s been forked and before messages are handled. This won’t be called in uniprocess mode. <a href="https://redbean.dev/#OnWorkerStop">OnWorkerStop</a>()  If this function is defined it’ll be called from the child worker process once _exit() is ready to be called. This won’t be called in uniprocess mode. 
<a href="https://redbean.dev/#functions">functions</a>
——————————————-</p>

<p><a href="https://redbean.dev/#Write">Write</a>(data:str)  Appends data to HTTP response payload buffer. This is buffered independently of headers. <a href="https://redbean.dev/#SetStatus">SetStatus</a>(code:int[, reason:str])  Starts an HTTP response, specifying the parameters on its first line. <code class="language-plaintext highlighter-rouge">reason</code> is optional since redbean can fill in the appropriate text for well-known magic numbers, e.g. <code class="language-plaintext highlighter-rouge">200</code>, <code class="language-plaintext highlighter-rouge">404</code>, etc. This method will reset the response and is therefore mutually exclusive with <code class="language-plaintext highlighter-rouge">ServeAsset</code> and other Serve* functions. If a status setting function isn’t called, then the default behavior is to send <code class="language-plaintext highlighter-rouge">200 OK</code>.  Appends HTTP header to response header buffer. <code class="language-plaintext highlighter-rouge">name</code> is case-insensitive and restricted to non-space ASCII. <code class="language-plaintext highlighter-rouge">value</code> is a UTF-8 string that must be encodable as ISO-8859-1. Leading and trailing whitespace is trimmed automatically. Overlong characters are canonicalized. C0 and C1 control codes are forbidden, with the exception of tab. This function automatically calls <code class="language-plaintext highlighter-rouge">SetStatus(200, "OK")</code> if a status has not yet been set. As SetStatus and Serve* functions reset the response, SetHeader needs to be called after SetStatus and Serve* functions are called. The header buffer is independent of the payload buffer. Neither is written to the wire until the Lua Server Page has finished executing. This function disallows the setting of certain headers such as and <code class="language-plaintext highlighter-rouge">Content-Range</code> which are abstracted by the transport layer. In such cases, consider calling <code class="language-plaintext highlighter-rouge">ServeAsset</code>. <a href="https://redbean.dev/#SetCookie">SetCookie</a>(name:str, value:str[, options:table])  Appends Set-Cookie HTTP header to the response header buffer. Several Set-Cookie headers can be added to the same response. <code class="language-plaintext highlighter-rouge">__Host-</code> and <code class="language-plaintext highlighter-rouge">__Secure-</code> prefixes are supported and may set or overwrite some of the options (for example, specifying <code class="language-plaintext highlighter-rouge">__Host-</code> prefix sets the Secure option to true, sets the path to “/”, and removes the Domain option). The following options can be used (their lowercase equivalents are supported as well):</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Expires</code> sets the maximum lifetime of the cookie as an HTTP-date timestamp. Can be specified as a Date in the RFC1123 (string) format or as a UNIX timestamp (number of seconds).</li>
  <li><code class="language-plaintext highlighter-rouge">MaxAge</code> sets number of seconds until the cookie expires. A zero or negative number will expire the cookie immediately. If both Expires and MaxAge are set, MaxAge has precedence.</li>
  <li><code class="language-plaintext highlighter-rouge">Domain</code> sets the host to which the cookie will be sent.</li>
  <li><code class="language-plaintext highlighter-rouge">Path</code> sets the path that must be present in the request URL, or the client will not send the Cookie header.</li>
  <li><code class="language-plaintext highlighter-rouge">Secure</code> (bool) requests the cookie to be only send to the server when a request is made with the https: scheme.</li>
  <li><code class="language-plaintext highlighter-rouge">HttpOnly</code> (bool) forbids JavaScript from accessing the cookie.</li>
  <li><code class="language-plaintext highlighter-rouge">SameSite</code> (Strict, Lax, or None) controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.</li>
</ul>

<p><a href="https://redbean.dev/#GetParam">GetParam</a>(name:str) → value:str  Returns first value associated with name. <code class="language-plaintext highlighter-rouge">name</code> is handled in a case-sensitive manner. This function checks Request-URL parameters first. Then it checks <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code> from the message body, if it exists, which is common for HTML forms sending <code class="language-plaintext highlighter-rouge">POST</code> requests. If a parameter is supplied matching name that has no value, e.g. <code class="language-plaintext highlighter-rouge">foo</code> in <code class="language-plaintext highlighter-rouge">?foo&amp;bar=value</code>, then the returned value will be <code class="language-plaintext highlighter-rouge">nil</code>, whereas for <code class="language-plaintext highlighter-rouge">?foo=&amp;bar=value</code> it would be <code class="language-plaintext highlighter-rouge">""</code>. To differentiate between no-equal and absent, use the <code class="language-plaintext highlighter-rouge">HasParam</code> function. The returned value is decoded from ISO-8859-1 (only in the case of Request-URL) and we assume that percent-encoded characters were supplied by the client as UTF-8 sequences, which are returned exactly as the client supplied them, and may therefore may contain overlong sequences, control codes, <code class="language-plaintext highlighter-rouge">NUL</code> characters, and even numbers which have been banned by the IETF. It is the responsibility of the caller to impose further restrictions on validity, if they’re desired. <a href="https://redbean.dev/#EscapeHtml">EscapeHtml</a>(str) → str  Escapes HTML entities: The set of entities is <code class="language-plaintext highlighter-rouge">&amp;&gt;&lt;"'</code> which become <code class="language-plaintext highlighter-rouge">&amp;amp;&amp;gt;&amp;lt;&amp;quot;&amp;#39;</code>. This function is charset agnostic and will not canonicalize overlong encodings. It is assumed that a UTF-8 string will be supplied. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/escapehtml.c">escapehtml.c</a>. <a href="https://redbean.dev/#LaunchBrowser">LaunchBrowser</a>([path:str])  Launches web browser on local machine with URL to this redbean server. It is the responsibility of the caller to escape the path with <code class="language-plaintext highlighter-rouge">EscapePath</code> if needed, as it’s not escaped automatically. This function may be called from your <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#CategorizeIp">CategorizeIp</a>(ip:uint32) → str  Returns a string describing an IP address. This is currently Class A granular. It can tell you if traffic originated from private networks, ARIN, APNIC, DOD, etc. <a href="https://redbean.dev/#DecodeLatin1">DecodeLatin1</a>(iso-8859-1:str) → utf-8:str  Turns ISO-8859-1 string into UTF-8. <a href="https://redbean.dev/#EncodeHex">EncodeHex</a>(binary:str) → ascii:str  Turns binary into ASCII base-16 hexadecimal lowercase string. <a href="https://redbean.dev/#DecodeHex">DecodeHex</a>(ascii:str) → binary:str  Turns ASCII base-16 hexadecimal byte string into binary string, case-insensitively. Non-hex characters may not appear in string. <a href="https://redbean.dev/#DecodeBase32">DecodeBase32</a>(ascii:str[, alphabet:str]) → binary:str  Turns ASCII into binary using provided alphabet. The default decoding uses Crockford’s base32 alphabet in a permissive way that ignores whitespaces and dash (‘-‘) and stops at the first character outside of the alphabet. <a href="https://redbean.dev/#EncodeBase32">EncodeBase32</a>(binary:str[, alphabet:str]) → ascii:str  Turns binary into ASCII using provided alphabet (using Crockford’s base32 encoding by default). Any alphabet that has a power of 2 length (up to 128) may be supplied for encoding and decoding, which allows to provide alternative base32 encodings. <a href="https://redbean.dev/#DecodeBase64">DecodeBase64</a>(ascii:str) → binary:str  Turns ASCII into binary, in a permissive way that ignores characters outside the base64 alphabet, such as whitespace. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/decodebase64.c">decodebase64.c</a>. <a href="https://redbean.dev/#EncodeBase64">EncodeBase64</a>(binary:str) → ascii:str  Turns binary into ASCII. This can be used to create HTML <code class="language-plaintext highlighter-rouge">data:</code> URIs that do things like embed a PNG file in a web page. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/encodebase64.c">encodebase64.c</a>. <a href="https://redbean.dev/#DecodeJson">DecodeJson</a>(input:str)</p>

<p>├─→ int64</p>

<p>├─→ string</p>

<p>├─→ double</p>

<p>├─→ array</p>

<p>├─→ object</p>

<p>├─→ false</p>

<p>├─→ true</p>

<p>├─→ nil</p>

<p>└─→ nil, error:str  Turns JSON string into a Lua data structure. 
This is a generally permissive parser, in the sense that like v8, it permits scalars as top-level values. Therefore we must note that this API can be thought of as special, in the sense</p>

<p>val = assert(DecodeJson(str))</p>

<p>will usually do the right thing, except in cases where false or null are the top-level value. In those cases, it’s needed to check the second value too in order to discern from error</p>

<p>val, err = DecodeJson(str)
if not val then
   if err then
      print(‘bad json’, err)
   elseif val == nil then
      print(‘val is null’)
   elseif val == false then
      print(‘val is false’)
   end
end</p>

<p>This parser supports 64-bit signed integers. If an overflow happens, then the integer is silently coerced to double, as consistent with v8. If a double overflows into Infinity, we coerce it to <code class="language-plaintext highlighter-rouge">null</code> since that’s what v8 does, and the same goes for underflows which, like v8, are coerced to 0.0.</p>

<p>When objects are parsed, your Lua object can’t preserve the original ordering of fields. As such, they’ll be sorted by EncodeJson() and may not round-trip with original intent</p>

<p>This parser has perfect conformance with JSONTestSuite.</p>

<p>This parser validates utf-8 and utf-16.</p>

<p><a href="https://redbean.dev/#EncodeJson">EncodeJson</a>(value[, options:table])</p>

<p>├─→ json:str</p>

<p>├─→ true [if useoutput]</p>

<p>└─→ nil, error:str  Turns Lua data structure into JSON string. 
Since Lua tables are both hashmaps and arrays, we use a simple fast algorithm for telling the two apart. Tables with non-zero length (as reported by <code class="language-plaintext highlighter-rouge">#</code>) are encoded as arrays, and any non-array elements are ignored. For example:</p>

<blockquote>
  <dl>
    <dt>: EncodeJson({2})</dt>
    <dt>“[2]”</dt>
    <dd>EncodeJson({[1]=2, [“hi”]=1})
“[2]”</dd>
  </dl>
</blockquote>

<p>If there are holes in your array, then the serialized array will exclude everything after the first hole. If the beginning of your array is a hole, then an error is returned.</p>

<blockquote>
  <dl>
    <dt>: EncodeJson({[1]=1, [3]=3})</dt>
    <dt>“[1]”</dt>
    <dd>EncodeJson({[2]=1, [3]=3})
“[]”</dd>
    <dd>EncodeJson({[2]=1, [3]=3})
nil     “json objects must only use string keys”</dd>
  </dl>
</blockquote>

<p>If the raw length of a table is reported as zero, then we check for the magic element <code class="language-plaintext highlighter-rouge">[0]=false</code>. If it’s present, then your table will be serialized as empty array <code class="language-plaintext highlighter-rouge">[]</code>. An entry is inserted by <a href="https://redbean.dev/#DecodeJson">DecodeJson</a>() automatically, only when encountering empty arrays, and it’s necessary in order to make empty arrays round-trip. If raw length is zero and <code class="language-plaintext highlighter-rouge">[0]=false</code> is absent, then your table will be serialized as an iterated object.</p>

<blockquote>
  <dl>
    <dt>: EncodeJson({})</dt>
    <dt>”{}”</dt>
    <dd>EncodeJson({[0]=false})
“[]”</dd>
    <dd>EncodeJson({[“hi”]=1})
“{"hi":1}”</dd>
    <dd>EncodeJson({[“hi”]=1, [0]=false})
“[]”</dd>
    <dd>EncodeJson({[“hi”]=1, [7]=false})
nil     “json objects must only use string keys”</dd>
  </dl>
</blockquote>

<p>The following options may be used:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">useoutput</code>: (bool=false) encodes the result directly to the output buffer and returns <code class="language-plaintext highlighter-rouge">nil</code> value. This option is ignored if used outside of request handling code.</li>
  <li><code class="language-plaintext highlighter-rouge">sorted</code>: (bool=true) Lua uses hash tables so the order of object keys is lost in a Lua table. So, by default, we use <code class="language-plaintext highlighter-rouge">strcmp</code> to impose a deterministic output order. If you don’t care about ordering then setting <code class="language-plaintext highlighter-rouge">sorted=false</code> should yield a performance boost in serialization.</li>
  <li><code class="language-plaintext highlighter-rouge">pretty</code>: (bool=false) Setting this option to true will cause tables with more than one entry to be formatted across multiple lines for readability.</li>
  <li><code class="language-plaintext highlighter-rouge">indent</code>: (str=<code class="language-plaintext highlighter-rouge">" "</code>) This option controls the indentation of pretty formatting. This field is ignored if <code class="language-plaintext highlighter-rouge">pretty</code> isn’t true.</li>
  <li><code class="language-plaintext highlighter-rouge">maxdepth</code>: (int=64) This option controls the maximum amount of recursion the serializer is allowed to perform. The max is 32767. You might not be able to set it that high if there isn’t enough C stack memory. Your serializer checks for this and will return an error rather than crashing.</li>
</ul>

<p>This function will return an error if:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> is cyclic</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> has depth greater than 64</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> contains functions, user data, or threads</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> is table that blends string / non-string keys</li>
  <li>Your serializer runs out of C heap memory (setrlimit)</li>
</ul>

<p>We assume strings in <code class="language-plaintext highlighter-rouge">value</code> contain UTF-8. This serializer currently does not produce UTF-8 output. The output format is right now ASCII. Your UTF-8 data will be safely transcoded to <code class="language-plaintext highlighter-rouge">\uXXXX</code> sequences which are UTF-16. Overlong encodings in your input strings will be canonicalized rather than validated.</p>

<p>NaNs are serialized as <code class="language-plaintext highlighter-rouge">null</code> and Infinities are <code class="language-plaintext highlighter-rouge">null</code> which is consistent with the v8 behavior.</p>

<p><a href="https://redbean.dev/#EncodeLua">EncodeLua</a>(value[, options:table])</p>

<p>├─→ luacode:str</p>

<p>├─→ true [if useoutput]</p>

<p>└─→ nil, error:str  Turns Lua data structure into Lua code string. 
Since Lua uses tables as both hashmaps and arrays, tables will only be serialized as an array with determinate order, if it’s an array in the strictest possible sense.</p>

<ol>
  <li>for all 𝑘=𝑣 in table, 𝑘 is an integer ≥1</li>
  <li>no holes exist between MIN(𝑘) and MAX(𝑘)</li>
  <li>if non-empty, MIN(𝑘) is 1</li>
</ol>

<p>In all other cases, your table will be serialized as an object which is iterated and displayed as a list of (possibly) sorted entries that have equal signs.</p>

<blockquote>
  <dl>
    <dt>: EncodeLua({3, 2})</dt>
    <dt>“{3, 2}”</dt>
    <dd>EncodeLua({[1]=3, [2]=3})
“{3, 2}”</dd>
    <dd>EncodeLua({[1]=3, [3]=3})
“{[1]=3, [3]=3}”</dd>
    <dd>EncodeLua({[“hi”]=1, [1]=2})
“{[1]=2, hi=1}”</dd>
  </dl>
</blockquote>

<p>The following options may be used:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">useoutput</code>: (bool=false) encodes the result directly to the output buffer and returns <code class="language-plaintext highlighter-rouge">nil</code> value. This option is ignored if used outside of request handling code.</li>
  <li><code class="language-plaintext highlighter-rouge">sorted</code>: (bool=true) Lua uses hash tables so the order of object keys is lost in a Lua table. So, by default, we use <code class="language-plaintext highlighter-rouge">strcmp</code> to impose a deterministic output order. If you don’t care about ordering then setting <code class="language-plaintext highlighter-rouge">sorted=false</code> should yield a performance boost in serialization.</li>
  <li><code class="language-plaintext highlighter-rouge">pretty</code>: (bool=false) Setting this option to true will cause tables with more than one entry to be formatted across multiple lines for readability.</li>
  <li><code class="language-plaintext highlighter-rouge">indent</code>: (str=<code class="language-plaintext highlighter-rouge">" "</code>) This option controls the indentation of pretty formatting. This field is ignored if <code class="language-plaintext highlighter-rouge">pretty</code> isn’t true.</li>
  <li><code class="language-plaintext highlighter-rouge">maxdepth</code>: (int=64) This option controls the maximum amount of recursion the serializer is allowed to perform. The max is 32767. You might not be able to set it that high if there isn’t enough C stack memory. Your serializer checks for this and will return an error rather than crashing.</li>
</ul>

<p>If a user data object has a <code class="language-plaintext highlighter-rouge">__repr</code> or <code class="language-plaintext highlighter-rouge">__tostring</code> meta method, then that’ll be used to encode the Lua code.</p>

<p>This serializer is designed primarily to describe data. For example, it’s used by the REPL where we need to be able to ignore errors when displaying data structures, since showing most things imperfectly is better than crashing. Therefore this isn’t the kind of serializer you’d want to use to persist data in prod. Try using the JSON serializer for that purpose.</p>

<p>Non-encodable value types (e.g. threads, functions) will be represented as a string literal with the type name and pointer address. The string description is of an unspecified format that could most likely change. This encoder detects cyclic tables; however instead of failing, it embeds a string of unspecified layout describing the cycle.</p>

<p>Integer literals are encoded as decimal. However if the int64 number is ≥256 and has a population count of 1 then we switch to representating the number in hexadecimal, for readability. Hex numbers have leading zeroes added in order to visualize whether the number fits in a uint16, uint32, or int64. Also some numbers can only be encoded expressionally. For example, NaNs are serialized as <code class="language-plaintext highlighter-rouge">0/0</code>, and Infinity is <code class="language-plaintext highlighter-rouge">math.huge</code>.</p>

<blockquote>
  <dl>
    <dt>: 7000</dt>
    <dt>7000</dt>
    <dd>0x100
0x0100</dd>
    <dd>0x10000
0x00010000</dd>
    <dd>0x100000000
0x0000000100000000</dd>
    <dd>0/0
0/0</dd>
    <dd>1.5e+9999
math.huge</dd>
    <dd>-9223372036854775807 - 1
-9223372036854775807 - 1</dd>
  </dl>
</blockquote>

<p>The only failure return condition currently implemented is when C runs out of heap memory.</p>

<table>
  <tbody>
    <tr>
      <td><a href="https://redbean.dev/#EncodeLatin1">EncodeLatin1</a>(utf-8:str[, flags:int]) → iso-8859-1:str  Turns UTF-8 into ISO-8859-1 string. <a href="https://redbean.dev/#EscapeFragment">EscapeFragment</a>(str) → str  Escapes URL <code class="language-plaintext highlighter-rouge">#fragment</code>. The allowed characters are <code class="language-plaintext highlighter-rouge">-/?.~_@:!$&amp;'()*+,;=0-9A-Za-z</code> and everything else gets <code class="language-plaintext highlighter-rouge">%XX</code> encoded. Please note that <code class="language-plaintext highlighter-rouge">'&amp;</code> can still break HTML and that <code class="language-plaintext highlighter-rouge">'()</code> can still break CSS URLs. This function is charset agnostic and will not canonicalize overlong encodings. It is assumed that a UTF-8 string will be supplied. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapefragment.S">kescapefragment.S</a>. <a href="https://redbean.dev/#EscapeHost">EscapeHost</a>(str) → str  Escapes URL host. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapeauthority.S">kescapeauthority.S</a><a href="https://redbean.dev/#EscapeLiteral">EscapeLiteral</a>(str) → str  Escapes JavaScript or JSON string literal content. The caller is responsible for adding the surrounding quotation marks. This implementation <code class="language-plaintext highlighter-rouge">\uxxxx</code> sequences for all non-ASCII sequences. HTML entities are also encoded, so the output doesn’t need <code class="language-plaintext highlighter-rouge">EscapeHtml</code>. This function assumes UTF-8 input. Overlong encodings are canonicalized. Invalid input sequences are assumed to be ISO-8859-1. The output is UTF-16 since that’s what JavaScript uses. For example, some individual codepoints such as emoji characters will encode as multiple <code class="language-plaintext highlighter-rouge">\uxxxx</code> sequences. Ints that are impossible to encode as UTF-16 are substituted with the <code class="language-plaintext highlighter-rouge">\xFFFD</code> replacement character. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/escapejsstringliteral.c">escapejsstringliteral.c</a>. <a href="https://redbean.dev/#EscapeParam">EscapeParam</a>(str) → str  Escapes URL parameter name or value. The allowed characters are <code class="language-plaintext highlighter-rouge">-.*_0-9A-Za-z</code> and everything else gets <code class="language-plaintext highlighter-rouge">%XX</code> encoded. This function is charset agnostic and will not canonicalize overlong encodings. It is assumed that a UTF-8 string will be supplied. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapeparam.S">kescapeparam.S</a>. <a href="https://redbean.dev/#EscapePass">EscapePass</a>(str) → str  Escapes URL password. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapeauthority.S">kescapeauthority.S</a>. <a href="https://redbean.dev/#EscapePath">EscapePath</a>(str) → str  Escapes URL path. This is the same as <code class="language-plaintext highlighter-rouge">EscapeSegment</code> except slash is allowed. The allowed characters are <code class="language-plaintext highlighter-rouge">-.~_@:!$&amp;'()*+,;=0-9A-Za-z/</code> and everything else gets <code class="language-plaintext highlighter-rouge">%XX</code> encoded. Please note that <code class="language-plaintext highlighter-rouge">'&amp;</code> can still break HTML, so the output may need <code class="language-plaintext highlighter-rouge">EscapeHtml</code> too. Also note that <code class="language-plaintext highlighter-rouge">'()</code> can still break CSS URLs. This function is charset agnostic and will not canonicalize overlong encodings. It is assumed that a UTF-8 string will be supplied. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapepath.S">kescapepath.S</a>. <a href="https://redbean.dev/#EscapeSegment">EscapeSegment</a>(str) → str  Escapes URL path segment. This is the same as <code class="language-plaintext highlighter-rouge">EscapePath</code> except slash isn’t allowed. The allowed characters are <code class="language-plaintext highlighter-rouge">-.~_@:!$&amp;'()*+,;=0-9A-Za-z</code> and everything else gets <code class="language-plaintext highlighter-rouge">%XX</code> encoded. Please note that <code class="language-plaintext highlighter-rouge">'&amp;</code> can still break HTML, so the output may need <code class="language-plaintext highlighter-rouge">EscapeHtml</code> too. Also note that <code class="language-plaintext highlighter-rouge">'()</code> can still break CSS URLs. This function is charset agnostic and will not canonicalize overlong encodings. It is assumed that a UTF-8 string will be supplied. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapesegment.S">kescapesegment.S</a>. <a href="https://redbean.dev/#EscapeUser">EscapeUser</a>(str) → str  Escapes URL username. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/kescapeauthority.S">kescapeauthority.S</a>. <a href="https://redbean.dev/#EvadeDragnetSurveillance">EvadeDragnetSurveillance</a>(bool)  If this option is programmed then redbean will not transmit a Server Name Indicator (SNI) when performing <a href="https://redbean.dev/#Fetch">Fetch</a>() requests. This function is not available in unsecure mode. <a href="https://redbean.dev/#UuidV4">UuidV4</a>() -&gt; str  Returns a uuid v4 string. <a href="https://redbean.dev/#UuidV7">UuidV7</a>() -&gt; str  Returns a uuid v7 string. <a href="https://redbean.dev/#Fetch">Fetch</a>(url:str[, body:str</td>
      <td>{method=value:str, body=value:str, headers=table,…,…}])</td>
    </tr>
  </tbody>
</table>

<p>├─→ status:int, {header:str=value:str,…}, body:str</p>

<p>└─→ nil, error:str  Sends an HTTP/HTTPS request to the specified URL. If only the URL is provided, then a GET request is sent. If both URL and body parameters are specified, then a POST request is sent. If any other method needs to be specified (for example, PUT or DELETE), then passing a table as the second value allows setting method and body values as well other options:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">method</code> (default: <code class="language-plaintext highlighter-rouge">"GET"</code>): sets the method to be used for the request. The specified method is converted to uppercase.</li>
  <li><code class="language-plaintext highlighter-rouge">body</code> (default: <code class="language-plaintext highlighter-rouge">""</code>): sets the body value to be sent.</li>
  <li><code class="language-plaintext highlighter-rouge">headers</code> sets headers for the request using the key/value pairs from this table. Only string keys are used and all the values are converted to strings.</li>
  <li><code class="language-plaintext highlighter-rouge">followredirect</code> (default: <code class="language-plaintext highlighter-rouge">true</code>): forces temporary and permanent redirects to be followed. This behavior can be disabled by passing <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">maxredirects</code> (default: <code class="language-plaintext highlighter-rouge">5</code>): sets the number of allowed redirects to minimize looping due to misconfigured servers. When the number is exceeded, the result of the last redirect is returned.</li>
  <li><code class="language-plaintext highlighter-rouge">keepalive</code> (default: <code class="language-plaintext highlighter-rouge">false</code>): configures each request to keep the connection open (unless closed by the server) and reuse for the next request to the same host. This option is disabled when SSL connection is used. The mapping of hosts and their sockets is stored in a table assigned to the <code class="language-plaintext highlighter-rouge">keepalive</code> field itself, so it can be passed to the next call. If the table includes the <code class="language-plaintext highlighter-rouge">close</code> field set to a true value, then the connection is closed after the request is made and the host is removed from the mapping table.</li>
</ul>

<p>When the redirect is being followed, the same method and body values are being sent in all cases except when 303 status is returned. In that case the method is set to GET and the body is removed before the redirect is followed. Note that if these (method/body) values are provided as table fields, they will be modified in place. <a href="https://redbean.dev/#FormatHttpDateTime">FormatHttpDateTime</a>(seconds:int) → rfc1123:str  Converts UNIX timestamp to an RFC1123 string that looks like this: <code class="language-plaintext highlighter-rouge">Mon, 29 Mar 2021 15:37:13 GMT</code>. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/formathttpdatetime.c">formathttpdatetime.c</a>. <a href="https://redbean.dev/#FormatIp">FormatIp</a>(uint32) → str  Turns integer like 0x01020304 into a string like 1.2.3.4. See also <a href="https://redbean.dev/#ParseIp"><code class="language-plaintext highlighter-rouge">ParseIp</code></a> for the inverse operation. <a href="https://redbean.dev/#Curve25519">Curve25519</a>(secret:str, public_or_basepoint:str) -&gt; str  Returns the shared key for the specified secret and public values. The second argument can be either a public key or a basepoint, used for generating a shared or public key. 
Here a small usage sample:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      &gt;: secret1 = GetRandomBytes(32)
      &gt;: public1 = Curve25519(secret1, "\9")
      &gt;: secret2 = GetRandomBytes(32)
      &gt;: public2 = Curve25519(secret2, "\9")
      &gt;: shared_key1 = Curve25519(secret1, public2)
      &gt;: shared_key2 = Curve25519(secret2, public1)
      &gt;: shared_key1 == shared_key2
      true [GetRemoteAddr](https://redbean.dev/#GetRemoteAddr)()
</code></pre></div></div>

<p>├─→ ip:uint32,port:uint16</p>

<p>└─→ nil  Returns client ip4 address and port, e.g. <code class="language-plaintext highlighter-rouge">0x01020304,31337</code> would represent <code class="language-plaintext highlighter-rouge">1.2.3.4:31337</code>. This is the same as <a href="https://redbean.dev/#GetClientAddr">GetClientAddr</a> except it will use the ip:port from the <code class="language-plaintext highlighter-rouge">X-Forwarded-For</code> header when the IP returned by GetClientAddr is a trusted IP (returns true when checked against IsTrustedIp). When multiple addresses are present in the header, the last/right-most address is used. Returns <code class="language-plaintext highlighter-rouge">nil</code> if the address doesn’t parse as IPv4 value (e.g. because it is misformatted or an IPv6 address). <a href="https://redbean.dev/#GetResponseBody">GetResponseBody</a>()</p>

<p>├─→ body:str</p>

<p>└─→ nil, error:str  Returns the (uncompressed) response message body if present or an empty string. May also return a partial or empty string during streaming, as the full content may not be known at the call time. Returns an error when decompression fails. <a href="https://redbean.dev/#GetClientAddr">GetClientAddr</a>() → ip:uint32, port:uint16  Returns client socket ip4 address and port, e.g. <code class="language-plaintext highlighter-rouge">0x01020304,31337</code> would represent <code class="language-plaintext highlighter-rouge">1.2.3.4:31337</code>. Please consider using <a href="https://redbean.dev/#GetRemoteAddr">GetRemoteAddr</a> instead, since the latter takes into consideration reverse proxy scenarios. <a href="https://redbean.dev/#GetServerAddr">GetServerAddr</a>() → ip:uint32, port:uint16  Returns address to which listening server socket is bound, e.g. <code class="language-plaintext highlighter-rouge">0x01020304,8080</code> would represent <code class="language-plaintext highlighter-rouge">1.2.3.4:8080</code>. If <code class="language-plaintext highlighter-rouge">-p 0</code> was supplied as the listening port, then the port in this string will be whatever number the operating system assigned. <a href="https://redbean.dev/#GetDate">GetDate</a>() → seconds:int  Returns date associated with request that’s used to generate the <code class="language-plaintext highlighter-rouge">Date</code> header, which is now, give or take a second. The returned value is a UNIX timestamp.  Returns HTTP header. <code class="language-plaintext highlighter-rouge">name</code> is case-insensitive. The header <code class="language-plaintext highlighter-rouge">value</code> is returned as a canonical UTF-8 string, with leading and trailing whitespace trimmed, which was decoded from ISO-8859-1, which is guaranteed to not have C0/C1 control sequences, with the exception of the tab character. Leading and trailing whitespace is automatically removed. In the event that the client suplies raw UTF-8 in the HTTP message headers, the original UTF-8 sequence can be losslessly restored by counter-intuitively recoding the returned string back to Latin1. If the requested header is defined by the RFCs as storing comma-separated values (e.g. Allow, Accept-Encoding) and the field name occurs multiple times in the message, then this function will fold those multiple entries into a single string.  Returns HTTP headers as dictionary mapping header key strings to their UTF-8 decoded values. The ordering of headers from the request message is not preserved. Whether or not the same key can repeat depends on whether or not it’s a standard header, and if so, if it’s one of the ones that the RFCs define as repeatable. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/khttprepeatable.c">khttprepeatable.c</a>. Those headers will not be folded. Standard headers which aren’t on that list, will be overwritten with the last-occurring one during parsing. Extended headers are always passed through exactly as they’re received. Please consider using <code class="language-plaintext highlighter-rouge">GetHeader</code> API if possible since it does a better job abstracting these issues. <a href="https://redbean.dev/#GetLogLevel">GetLogLevel</a>() → int  Returns logger verbosity level. Likely return values are <code class="language-plaintext highlighter-rouge">kLogDebug</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogVerbose</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogInfo</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogWarn</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogError</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogFatal</code>. <a href="https://redbean.dev/#GetHost">GetHost</a>() → str  Returns host associated with request. This will be the Host header, if it’s supplied. Otherwise it’s the bind address. <a href="https://redbean.dev/#GetHostOs">GetHostOs</a>() → str  Returns string that describes the host OS. 
This can return:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"LINUX"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"METAL"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"WINDOWS"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"XNU"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"NETBSD"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"FREEBSD"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"OPENBSD"</code></li>
</ul>

<p><a href="https://redbean.dev/#GetHostIsa">GetHostIsa</a>() → str  Returns string describing host instruction set architecture. 
This can return:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"X86_64"</code> for Intel and AMD systems</li>
  <li><code class="language-plaintext highlighter-rouge">"AARCH64"</code> for ARM64, M1, and Raspberry Pi systems</li>
  <li><code class="language-plaintext highlighter-rouge">"POWERPC64"</code> for OpenPOWER Raptor Computing Systems</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><a href="https://redbean.dev/#GetMonospaceWidth">GetMonospaceWidth</a>(str</td>
      <td>char) → int  Returns monospace display width of string. This is useful for fixed-width formatting. For example, CJK characters typically take up two cells. This function takes into consideration combining characters, which are discounted, as well as control codes and ANSI escape sequences. <a href="https://redbean.dev/#GetMethod">GetMethod</a>() → str  Returns HTTP method. Normally this will be <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">HEAD</code>, or <code class="language-plaintext highlighter-rouge">POST</code> in which case redbean normalizes this value to its uppercase form. Anything else that the RFC classifies as a “token” string is accepted too, which might contain characters like <code class="language-plaintext highlighter-rouge">&amp;"</code>. <a href="https://redbean.dev/#GetParams">GetParams</a>() → {{name:str[, value:str]},…}  Returns name=value parameters from Request-URL and <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code> message body in the order they were received. This may contain duplicates. The inner array will have either one or two items, depending on whether or not the equals sign was used. <a href="https://redbean.dev/#GetPath">GetPath</a>() → str  Returns the Request-URL path. This is guaranteed to begin with <code class="language-plaintext highlighter-rouge">"/"</code>. It is further guaranteed that no <code class="language-plaintext highlighter-rouge">"//"</code> or <code class="language-plaintext highlighter-rouge">"/."</code> exists in the path. The returned value is returned as a UTF-8 string which was decoded from ISO-8859-1. We assume that percent-encoded characters were supplied by the client as UTF-8 sequences, which are returned exactly as the client supplied them, and may therefore may contain overlong sequences, control codes, <code class="language-plaintext highlighter-rouge">NUL</code> characters, and even numbers which have been banned by the IETF. redbean takes those things into consideration when performing path safety checks. It is the responsibility of the caller to impose further restrictions on validity, if they’re desired. <a href="https://redbean.dev/#GetEffectivePath">GetEffectivePath</a>() → str  Returns path as it was resolved by the routing algorithms, which might contain the virtual host prepended if used. <a href="https://redbean.dev/#GetScheme">GetScheme</a>() → str  Returns scheme from Request-URL, if any. <a href="https://redbean.dev/#GetPayload">GetPayload</a>() → str  Returns the request message payload, or empty string if there isn’t one. <a href="https://redbean.dev/#GetStatus">GetStatus</a>() → int  Returns current status (as set by an earlier <code class="language-plaintext highlighter-rouge">SetStatus</code> call) or <code class="language-plaintext highlighter-rouge">nil</code> if the status hasn’t been set yet. <a href="https://redbean.dev/#GetTime">GetTime</a>() → seconds:number  Returns current time as a UNIX timestamp with 0.0001s precision. <a href="https://redbean.dev/#GetUrl">GetUrl</a>() → str Returns the effective Request-URL as an ASCII string, where illegal characters or UTF-8 is guaranteed to be percent encoded, and has been normalized to include either the <code class="language-plaintext highlighter-rouge">Host</code> or <code class="language-plaintext highlighter-rouge">X-Forwarded-Host</code> headers, if they exist, and possibly a scheme too if redbean is being used as an HTTP proxy server. In the future this API might change to return an object instead. <a href="https://redbean.dev/#GetHttpVersion">GetHttpVersion</a>() → int  Returns the request HTTP protocol version, which can be <code class="language-plaintext highlighter-rouge">9</code> for <code class="language-plaintext highlighter-rouge">HTTP/0.9</code>, <code class="language-plaintext highlighter-rouge">10</code> for <code class="language-plaintext highlighter-rouge">HTTP/1.0</code>, or <code class="language-plaintext highlighter-rouge">11</code> for <code class="language-plaintext highlighter-rouge">HTTP/1.1</code>.</td>
    </tr>
  </tbody>
</table>

<p>also available under the deprecated name GetVersion<a href="https://redbean.dev/#GetHttpReason">GetHttpReason</a>(code:int) → str  Returns a string describing the HTTP reason phrase. See <a href="https://github.com/jart/cosmopolitan/blob/master/net/http/gethttpreason.c">gethttpreason.c</a><a href="https://redbean.dev/#GetRandomBytes">GetRandomBytes</a>([length:int]) → str  Returns string with the specified number of random bytes (1..256). If no length is specified, then a string of length 16 is returned. <a href="https://redbean.dev/#GetRedbeanVersion">GetRedbeanVersion</a>() → int  Returns the Redbean version in the format 0xMMmmpp, with major (MM), minor (mm), and patch (pp) versions encoded. The version value 1.4 would be represented as 0x010400. <a href="https://redbean.dev/#GetZipPaths">GetZipPaths</a>([prefix:str]) → {path:str,…} Returns paths of all assets in the zip central directory, prefixed by a slash. If prefix parameter is provided, then only paths that start with the prefix (case sensitive) are returned. <a href="https://redbean.dev/#HasParam">HasParam</a>(name:str) → bool Returns true if parameter with name was supplied in either the Request-URL or an <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code> message body. <a href="https://redbean.dev/#HidePath">HidePath</a>(prefix:str) Programs redbean <code class="language-plaintext highlighter-rouge">/</code> listing page to not display any paths beginning with prefix. This function should only be called from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#IsHiddenPath">IsHiddenPath</a>(path:str) → bool Returns true if the prefix of the given path is set with HidePath. <a href="https://redbean.dev/#IsPublicIp">IsPublicIp</a>(uint32) → bool Returns true if IP address is not a private network (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) and is not localhost (127.0.0.0/8). Note: we intentionally regard TEST-NET IPs as public. <a href="https://redbean.dev/#IsPrivateIp">IsPrivateIp</a>(uint32) → bool Returns true if IP address is part of a private network (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). <a href="https://redbean.dev/#IsLoopbackClient">IsLoopbackClient</a>() → bool  Returns true if the client IP address (returned by <a href="https://redbean.dev/#GetRemoteAddr">GetRemoteAddr</a>) is part of the localhost network (127.0.0.0/8). <a href="https://redbean.dev/#IsLoopbackIp">IsLoopbackIp</a>(uint32) → bool Returns true if IP address is part of the localhost network (127.0.0.0/8). <a href="https://redbean.dev/#IsAssetCompressed">IsAssetCompressed</a>(path:str) → bool Returns true if ZIP artifact at path is stored on disk using DEFLATE compression. also available under the deprecated name <code class="language-plaintext highlighter-rouge">IsCompressed</code><a href="https://redbean.dev/#IndentLines">IndentLines</a>(str[, int]) → str Adds spaces to beginnings of multiline string. If the int parameter is not supplied then 1 space will be added. <a href="https://redbean.dev/#LoadAsset">LoadAsset</a>(path:str) → str Returns contents of file as string. The asset may be sourced from either the zip (decompressed) or the local filesystem if the <code class="language-plaintext highlighter-rouge">-D</code> flag was used. If slurping large file into memory is a concern, then consider using <code class="language-plaintext highlighter-rouge">ServeAsset</code> which can serve directly off disk. <a href="https://redbean.dev/#StoreAsset">StoreAsset</a>(path:str, data:str[, mode:int])  Stores asset to executable’s ZIP central directory. This currently happens in an append-only fashion and is still largely in the proof-of-concept stages. Currently only supported on Linux, XNU, and FreeBSD. In order to use this feature, the -* flag must be passed. <a href="https://redbean.dev/#Log">Log</a>(level:int, message:str) Emits message string to log, if level is less than or equal to <code class="language-plaintext highlighter-rouge">GetLogLevel</code>. If redbean is running in interactive mode, then this will log to the console. If redbean is running as a daemon or the <code class="language-plaintext highlighter-rouge">-L LOGFILE</code> flag is passed, then this will log to the file. Reasonable values for <code class="language-plaintext highlighter-rouge">level</code> are <code class="language-plaintext highlighter-rouge">kLogDebug</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogVerbose</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogInfo</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogWarn</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogError</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogFatal</code>. The logger emits timestamps in the local timezone with microsecond precision. If log entries are emitted more frequently than once per second, then the log entry will display a delta timestamp, showing how much time has elapsed since the previous log entry. This behavior is useful for quickly measuring how long various portions of your code take to execute. <a href="https://redbean.dev/#ParseHttpDateTime">ParseHttpDateTime</a>(rfc1123:str) → seconds:int Converts RFC1123 string that looks like this: <code class="language-plaintext highlighter-rouge">Mon, 29 Mar 2021 15:37:13 GMT</code> to a UNIX timestamp. See <a href="https://github.com/jart/cosmopolitan/blob/42b34c26f8099658386fc867c49b0b8e59993415/net/http/parsehttpdatetime.c">parsehttpdatetime.c</a>. <a href="https://redbean.dev/#ParseUrl">ParseUrl</a>(str) → URL  Parses URL. 
An object containing the following fields is returned:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">scheme</code> is a string, e.g. <code class="language-plaintext highlighter-rouge">"http"</code> - <code class="language-plaintext highlighter-rouge">user</code> is the username string, or nil if absent - <code class="language-plaintext highlighter-rouge">pass</code> is the password string, or nil if absent - <code class="language-plaintext highlighter-rouge">host</code> is the hostname string, or nil if <code class="language-plaintext highlighter-rouge">url</code> was a path - <code class="language-plaintext highlighter-rouge">port</code> is the port string, or nil if absent - <code class="language-plaintext highlighter-rouge">path</code> is the path string, or nil if absent - <code class="language-plaintext highlighter-rouge">params</code> is the URL paramaters, e.g. <code class="language-plaintext highlighter-rouge">/?a=b&amp;c</code> would be represented as the data structure <code class="language-plaintext highlighter-rouge">{{"a", "b"}, {"c"}, ...}</code> - <code class="language-plaintext highlighter-rouge">fragment</code> is the stuff after the <code class="language-plaintext highlighter-rouge">#</code> character</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">flags</code> may have:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kUrlPlus</code> to turn <code class="language-plaintext highlighter-rouge">+</code> into space - <code class="language-plaintext highlighter-rouge">kUrlLatin1</code> to transcode ISO-8859-1 input into UTF-8</li>
</ul>

<p>This parser is charset agnostic. Percent encoded bytes are decoded for all fields. Returned values might contain things like NUL characters, spaces, control codes, and non-canonical encodings. Absent can be discerned from empty by checking if the pointer is set.</p>

<p>There’s no failure condition for this routine. This is a permissive parser. This doesn’t normalize path segments like <code class="language-plaintext highlighter-rouge">.</code> or <code class="language-plaintext highlighter-rouge">..</code> so use IsAcceptablePath() to check for those. No restrictions are imposed beyond that which is strictly necessary for parsing. All the data that is provided will be consumed to the one of the fields. Strict conformance is enforced on some fields more than others, like scheme, since it’s the most non-deterministically defined field of them all.</p>

<p>Please note this is a URL parser, not a URI parser. Which means we support everything the URI spec says we should do except for the things we won’t do, like tokenizing path segments into an array and then nesting another array beneath each of those for storing semicolon parameters. So this parser won’t make SIP easy. What it can do is parse HTTP URLs and most URIs like data:opaque, better in fact than most things which claim to be URI parsers.</p>

<p><a href="https://redbean.dev/#IsAcceptablePath">IsAcceptablePath</a>(str) → bool Returns true if path doesn’t contain <code class="language-plaintext highlighter-rouge">"."</code>, <code class="language-plaintext highlighter-rouge">".."</code> or <code class="language-plaintext highlighter-rouge">"//"</code> segments See <a href="https://github.com/jart/cosmopolitan/blob/master/net/http/isacceptablepath.c">isacceptablepath.c</a><a href="https://redbean.dev/#IsReasonablePath">IsReasonablePath</a>(str) → bool Returns true if path doesn’t contain <code class="language-plaintext highlighter-rouge">"."</code> or <code class="language-plaintext highlighter-rouge">".."</code> segments See <a href="https://github.com/jart/cosmopolitan/blob/master/net/http/isreasonablepath.c">isreasonablepath.c</a><a href="https://redbean.dev/#EncodeUrl">EncodeUrl</a>(URL) → str This function is the inverse of <a href="https://redbean.dev/#ParseUrl"><code class="language-plaintext highlighter-rouge">ParseUrl</code></a>. The output will always be correctly formatted. The exception is if illegal characters are supplied in the scheme field, since there’s no way of escaping those. Opaque parts are escaped as though they were paths, since many URI parsers won’t understand things like an unescaped question mark in path. <a href="https://redbean.dev/#ParseIp">ParseIp</a>(str) → int  Converts IPv4 address string to integer, e.g. <code class="language-plaintext highlighter-rouge">"1.2.3.4" → 0x01020304</code>, or returns <code class="language-plaintext highlighter-rouge">-1</code> for invalid inputs. See also <a href="https://redbean.dev/#FormatIp"><code class="language-plaintext highlighter-rouge">FormatIp</code></a> for the inverse operation.  Returns comment text associated with asset in the ZIP central directory. Also available as <code class="language-plaintext highlighter-rouge">GetComment</code> (deprecated). <a href="https://redbean.dev/#GetAssetLastModifiedTime">GetAssetLastModifiedTime</a>(path:str) → seconds:number  Returns UNIX timestamp for modification time of a ZIP asset (or local file if the -D flag is used). If both a file and a ZIP asset are present, then the file is used. Also available as <code class="language-plaintext highlighter-rouge">GetLastModifiedTime</code> (deprecated). <a href="https://redbean.dev/#GetAssetMode">GetAssetMode</a>(path:str) → int  Returns UNIX-style octal mode for ZIP asset (or local file if the <code class="language-plaintext highlighter-rouge">-D</code> flag is used) <a href="https://redbean.dev/#GetAssetSize">GetAssetSize</a>(path:str) → int  Returns byte size of uncompressed contents of ZIP asset (or local file if the <code class="language-plaintext highlighter-rouge">-D</code> flag is used) <a href="https://redbean.dev/#GetBody">GetBody</a>() → str  Returns the request message body if present or an empty string.</p>

<p>also available under the deprecated name GetPayload<a href="https://redbean.dev/#GetCookie">GetCookie</a>(name:str) → str  Returns cookie value. <a href="https://redbean.dev/#Md5">Md5</a>(str) → str  Computes MD5 checksum, returning 16 bytes of binary. <a href="https://redbean.dev/#Sha1">Sha1</a>(str) → str  Computes SHA1 checksum, returning 20 bytes of binary. <a href="https://redbean.dev/#Sha224">Sha224</a>(str) → str  Computes SHA224 checksum, returning 28 bytes of binary. <a href="https://redbean.dev/#Sha256">Sha256</a>(str) → str  Computes SHA256 checksum, returning 32 bytes of binary. <a href="https://redbean.dev/#Sha384">Sha384</a>(str) → str  Computes SHA384 checksum, returning 48 bytes of binary. <a href="https://redbean.dev/#Sha512">Sha512</a>(str) → str  Computes SHA512 checksum, returning 64 bytes of binary. <a href="https://redbean.dev/#GetCryptoHash">GetCryptoHash</a>(name:str, payload:str[, key:str]) → str  Returns value of the specified cryptographic hash function. If the key is provided, then HMAC value of the same function is returned. The name can be one of the following strings: MD5, SHA1, SHA224, SHA256, SHA384, SHA512, and BLAKE2B256. <a href="https://redbean.dev/#IsDaemon">IsDaemon</a>() → bool  Returns true if <code class="language-plaintext highlighter-rouge">-d</code> flag was passed to redbean. <a href="https://redbean.dev/#ProgramAddr">ProgramAddr</a>(str) ProgramAddr(ip:int)  Configures the address on which to listen. This can be called multiple times to set more than one address. If an integer is provided then it should be a word-encoded IPv4 address, such as the ones returned by ResolveIp(). If a string is provided, it will first be passed to ParseIp() to see if it’s an IPv4 address. If it isn’t, then a HOSTS.TXT lookup is performed, with fallback to the system-configured DNS resolution service. Please note that in MODE=tiny the HOSTS.TXT and DNS resolution isn’t included, and therefore an IP must be provided. <a href="https://redbean.dev/#ProgramGid">ProgramGid</a>(int)  Same as the <code class="language-plaintext highlighter-rouge">-G</code> flag if called from .init.lua for <a href="https://redbean.dev/#unix.setgid">setgid</a>() <a href="https://redbean.dev/#ProgramDirectory">ProgramDirectory</a>([directory:str]) → {directory, …}  Same as the <code class="language-plaintext highlighter-rouge">-D</code> flag if called from .init.lua for overlaying local file system directories. This may be called multiple times. The first directory programmed is preferred. These currently do not show up in the index page listing. 
This call also modifies <code class="language-plaintext highlighter-rouge">package.path</code> value to either prepend the added directory in front of the default path (if found) or to append it (in all other cases). If no directory is provided, then a table with previously set directories is returned.</p>

<p><a href="https://redbean.dev/#ProgramLogMessages">ProgramLogMessages</a>(bool)  Same as the <code class="language-plaintext highlighter-rouge">-m</code> flag if called from .init.lua for logging message headers only. <a href="https://redbean.dev/#ProgramLogBodies">ProgramLogBodies</a>(bool)  Same as the <code class="language-plaintext highlighter-rouge">-b</code> flag if called from .init.lua for logging message bodies as part of POST / PUT / etc. requests. <a href="https://redbean.dev/#ProgramLogPath">ProgramLogPath</a>(bool)  Same as the <code class="language-plaintext highlighter-rouge">-L</code> flag if called from .init.lua for setting the log file path on the local file system. It’s created if it doesn’t exist. This is called before de-escalating the user / group id. The file is opened in append only mode. If the disk runs out of space then redbean will truncate the log file if has access to change the log file after daemonizing. <a href="https://redbean.dev/#ProgramPidPath">ProgramPidPath</a>(str)  Same as the <code class="language-plaintext highlighter-rouge">-P</code> flag if called from .init.lua for setting the pid file path on the local file system. It’s useful for reloading daemonized redbean using <code class="language-plaintext highlighter-rouge">kill -HUP $(cat /var/run/redbean.pid)</code> or terminating redbean with <code class="language-plaintext highlighter-rouge">kill $(cat /var/run/redbean.pid)</code> which will gracefully terminate all clients. Sending the TERM signal twice will cause a forceful shutdown, which might make someone with a slow internet connection who’s downloading big files unhappy. <a href="https://redbean.dev/#ProgramUniprocess">ProgramUniprocess</a>([bool]) → bool  Same as the -u flag if called from .init.lua. Can be used to configure the uniprocess mode. The current value is returned. <a href="https://redbean.dev/#Slurp">Slurp</a>(filename:str[, i:int[, j:int]])</p>

<p>├─→ data:str</p>

<p>└─→ nil, unix.Errno  Reads all data from file the easy way. 
This function reads file data from local file system. Zip file assets can be accessed using the <code class="language-plaintext highlighter-rouge">/zip/...</code> prefix.</p>

<p><code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> may be used to slice a substring in <code class="language-plaintext highlighter-rouge">filename</code>. These parameters are 1-indexed and behave consistently with Lua’s string.sub() API. For example:</p>

<p>assert(Barf(‘x.txt’, ‘abc123’))
assert(assert(Slurp(‘x.txt’, 2, 3)) == ‘bc’)</p>

<p>This function is uninterruptible so <code class="language-plaintext highlighter-rouge">unix.EINTR</code> errors will be ignored. This should only be a concern if you’ve installed signal handlers. Use the UNIX API if you need to react to it.</p>

<p><a href="https://redbean.dev/#Barf">Barf</a>(filename:str, data:str[, mode:int[, flags:int[, offset:int]]])</p>

<p>├─→ true</p>

<p>└─→ nil, unix.Errno  Writes all data to file the easy way. 
This function writes to the local file system.</p>

<p><code class="language-plaintext highlighter-rouge">mode</code> defaults to <code class="language-plaintext highlighter-rouge">0644</code>. This parameter is ignored when <code class="language-plaintext highlighter-rouge">flags</code> doesn’t have <code class="language-plaintext highlighter-rouge">unix.O_CREAT</code>.</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> defaults to <code class="language-plaintext highlighter-rouge">unix.O_TRUNC | unix.O_CREAT</code>.</p>

<p><code class="language-plaintext highlighter-rouge">offset</code> is 1-indexed and may be used to overwrite arbitrary slices within a file when used in conjunction with <code class="language-plaintext highlighter-rouge">flags=0</code>. For example:</p>

<p>assert(Barf(‘x.txt’, ‘abc123’))
assert(Barf(‘x.txt’, ‘XX’, 0, 0, 3))
assert(assert(Slurp(‘x.txt’, 1, 6)) == ‘abXX23’)
<a href="https://redbean.dev/#ProgramContentType">ProgramContentType</a>(ext:str[, contenttype:str]) → str  Sets or returns content type associated with a file extension.  Appends HTTP header to the header buffer for all responses (whereas SetHeader only appends a header to the current response buffer). name is case-insensitive and restricted to non-space ASCII. value is a UTF-8 string that must be encodable as ISO-8859-1. Leading and trailing whitespace is trimmed automatically. Overlong characters are canonicalized. C0 and C1 control codes are forbidden, with the exception of tab. The header buffer is independent of the payload buffer. This function disallows the setting of certain headers such as Content-Range and Date, which are abstracted by the transport layer. <a href="https://redbean.dev/#ProgramHeartbeatInterval">ProgramHeartbeatInterval</a>([milliseconds:int])  Sets the heartbeat interval (in milliseconds). 5000ms is the default and 100ms is the minimum. If <code class="language-plaintext highlighter-rouge">milliseconds</code> is not specified, then the current interval is returned. <a href="https://redbean.dev/#ProgramTimeout">ProgramTimeout</a>(milliseconds:int|seconds:int) Default timeout is 60000ms. Minimal value of timeout is 10(ms). Negative values (&lt;0) sets the keepalive in seconds. This function should only be called from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#ProgramSslTicketLifetime">ProgramSslTicketLifetime</a>(seconds:int)  Defaults to 86400 (24 hours). This may be set to ≤0 to disable SSL tickets. It’s a good idea to use these since it increases handshake performance 10x and eliminates a network round trip. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramBrand">ProgramBrand</a>(str) Changes HTTP <code class="language-plaintext highlighter-rouge">Server</code> header, as well as the <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> title on the <code class="language-plaintext highlighter-rouge">/</code> listing page. The brand string needs to be a UTF-8 value that’s encodable as ISO-8859-1. If the brand is changed to something other than redbean, then the promotional links will be removed from the listing page too. This function should only be called from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#ProgramCache">ProgramCache</a>(seconds:int[, directive:string]) Configures <code class="language-plaintext highlighter-rouge">Cache-Control</code> and <code class="language-plaintext highlighter-rouge">Expires</code> header generation for static asset serving. A negative value will disable the headers. Zero means don’t cache. Greater than zero asks public proxies and browsers to cache for a given number of seconds. The directive value is added to the Cache-Control header when specified (with “must-revalidate” provided by default) and can be set to an empty string to remove the default value. This function should only be called from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#ProgramPort">ProgramPort</a>(uint16) Hard-codes the port number on which to listen, which can be any number in the range 1..65535, or alternatively 0 to ask the operating system to choose a port, which may be revealed later on by <code class="language-plaintext highlighter-rouge">GetServerAddr</code> or the <code class="language-plaintext highlighter-rouge">-z</code> flag to stdout. <a href="https://redbean.dev/#ProgramMaxPayloadSize">ProgramMaxPayloadSize</a>(int) Sets the maximum HTTP message payload size in bytes. The default is very conservatively set to 65536 so this is something many people will want to increase. This limit is enforced at the transport layer, before any Lua code is called, because right now redbean stores and forwards messages. (Use the UNIX API for raw socket streaming.) Setting this to a very high value can be useful if you’re less concerned about rogue clients and would rather have your Lua code be granted more control to bounce unreasonable messages. If a value less than 1450 is supplied, it’ll automatically be increased to 1450, since that’s the size of ethernet frames. This function can only be called from .init.lua. <a href="https://redbean.dev/#ProgramRedirect">ProgramRedirect</a>(code:int, src:str, location:str) Configures fallback routing for paths which would otherwise return 404 Not Found. If code is 0 then the path is rewritten internally as an accelerated redirect. If code is <code class="language-plaintext highlighter-rouge">301</code>, <code class="language-plaintext highlighter-rouge">302</code>, <code class="language-plaintext highlighter-rouge">307</code>, or <code class="language-plaintext highlighter-rouge">308</code> then a redirect response will be sent to the client. This function should only be called from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. <a href="https://redbean.dev/#ProgramCertificate">ProgramCertificate</a>(pem:str)  This function is the same as the <code class="language-plaintext highlighter-rouge">-C</code> flag if called from <code class="language-plaintext highlighter-rouge">.init.lua</code>, e.g. <code class="language-plaintext highlighter-rouge">ProgramCertificate(LoadAsset("/.sign.crt"))</code> for zip loading or <code class="language-plaintext highlighter-rouge">ProgramCertificate(Slurp("/etc/letsencrypt.lol/fullchain.pem"))</code> for local file system only. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramMaxWorkers">ProgramMaxWorkers</a>(int)  Limits the number of workers forked by redbean. If that number is reached, the server continues polling until the number of workers is reduced or the value is updated. Setting it to 0 removes the limit (this is the default). <a href="https://redbean.dev/#ProgramPrivateKey">ProgramPrivateKey</a>(pem:str)  This function is the same as the <code class="language-plaintext highlighter-rouge">-K</code> flag if called from <code class="language-plaintext highlighter-rouge">.init.lua</code>, e.g. <code class="language-plaintext highlighter-rouge">ProgramPrivateKey(LoadAsset("/.sign.key"))</code> for zip loading or <code class="language-plaintext highlighter-rouge">ProgramPrivateKey(Slurp("/etc/letsencrypt/privkey.pem"))</code> for local file system only. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramSslPresharedKey">ProgramSslPresharedKey</a>(key:str, identity:str)  This function can be used to enable the PSK ciphersuites which simplify SSL and enhance its performance in controlled environments. <code class="language-plaintext highlighter-rouge">key</code> may contain 1..32 bytes of random binary data and identity is usually a short plaintext string. The first time this function is called, the preshared key will be added to both the client and the server SSL configs. If it’s called multiple times, then the remaining keys will be added to the server, which is useful if you want to assign separate keys to each client, each of which needs a separate identity too. If this function is called multiple times with the same identity string, then the latter call will overwrite the prior. If a preshared key is supplied and no certificates or key-signing-keys are programmed, then redbean won’t bother auto-generating any serving certificates and will instead use only PSK ciphersuites. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramSslFetchVerify">ProgramSslFetchVerify</a>(enabled:bool)  May be used to disable the verification of certificates for remote hosts when using the Fetch() API. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramSslClientVerify">ProgramSslClientVerify</a>(enabled:bool)  Enables the verification of certificates supplied by the HTTP clients that connect to your redbean. This has the same effect as the <code class="language-plaintext highlighter-rouge">-j</code> flag. Tuning this option alone does not preclude the possibility of unsecured HTTP clients, which can be disabled using <a href="https://redbean.dev/#ProgramSslRequired">ProgramSslRequired</a>(). This function can only be called from <code class="language-plaintext highlighter-rouge">.init.lua</code>. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramSslRequired">ProgramSslRequired</a>(mandatory:bool)  Enables the blocking of HTTP so that all inbound clients and must use the TLS transport layer. This has the same effect as the <code class="language-plaintext highlighter-rouge">-J</code> flag. <a href="https://redbean.dev/#Fetch">Fetch</a>() is still allowed to make outbound HTTP requests. This function can only be called from <code class="language-plaintext highlighter-rouge">.init.lua</code>. This function is not available in unsecure mode. <a href="https://redbean.dev/#ProgramSslCiphersuite">ProgramSslCiphersuite</a>(name:str)  This function may be called multiple times to specify the subset of available ciphersuites you want to use in both the HTTPS server and the <a href="https://redbean.dev/#Fetch">Fetch</a>() client. The default list, ordered by preference, is as follows: ECDHE-ECDSA-AES256-GCM-SHA384
ECDHE-ECDSA-AES128-GCM-SHA256
ECDHE-ECDSA-CHACHA20-POLY1305-SHA256
ECDHE-PSK-AES256-GCM-SHA384
ECDHE-PSK-AES128-GCM-SHA256
ECDHE-PSK-CHACHA20-POLY1305-SHA256
ECDHE-RSA-AES256-GCM-SHA384
ECDHE-RSA-AES128-GCM-SHA256
ECDHE-RSA-CHACHA20-POLY1305-SHA256
DHE-RSA-AES256-GCM-SHA384
DHE-RSA-AES128-GCM-SHA256
DHE-RSA-CHACHA20-POLY1305-SHA256
ECDHE-ECDSA-AES128-CBC-SHA256
ECDHE-RSA-AES256-CBC-SHA384
ECDHE-RSA-AES128-CBC-SHA256
DHE-RSA-AES256-CBC-SHA256
DHE-RSA-AES128-CBC-SHA256
ECDHE-PSK-AES256-CBC-SHA384
ECDHE-PSK-AES128-CBC-SHA256
ECDHE-ECDSA-AES256-CBC-SHA
ECDHE-ECDSA-AES128-CBC-SHA
ECDHE-RSA-AES256-CBC-SHA
ECDHE-RSA-AES128-CBC-SHA
DHE-RSA-AES256-CBC-SHA
DHE-RSA-AES128-CBC-SHA
ECDHE-PSK-AES256-CBC-SHA
ECDHE-PSK-AES128-CBC-SHA
RSA-AES256-GCM-SHA384
RSA-AES128-GCM-SHA256
RSA-AES256-CBC-SHA256
RSA-AES128-CBC-SHA256
RSA-AES256-CBC-SHA
RSA-AES128-CBC-SHA
PSK-AES256-GCM-SHA384
PSK-AES128-GCM-SHA256
PSK-CHACHA20-POLY1305-SHA256
PSK-AES256-CBC-SHA384
PSK-AES128-CBC-SHA256
PSK-AES256-CBC-SHA
PSK-AES128-CBC-SHA
ECDHE-RSA-3DES-EDE-CBC-SHA
DHE-RSA-3DES-EDE-CBC-SHA
ECDHE-PSK-3DES-EDE-CBC-SHA
RSA-3DES-EDE-CBC-SHA
PSK-3DES-EDE-CBC-SHA</p>

<p>When redbean is run on an old (or low-power) CPU that doesn’t have the AES-NI instruction set (Westmere c. 2010) then the default ciphersuite is tuned automatically to favor the ChaCha20 Poly1305 suites.</p>

<p>The names above are canonical to redbean. They were programmatically simplified from the official IANA names. This function will accept the IANA names too. In most cases it will accept the OpenSSL and GnuTLS naming convention as well.</p>

<p>This function is not available in unsecure mode.</p>

<p><a href="https://redbean.dev/#Route">Route</a>([host:str,[path:str]])  Instructs redbean to follow the normal HTTP serving path. This function is useful when writing an <code class="language-plaintext highlighter-rouge">OnHttpRequest</code> handler, since that overrides the serving path entirely. So if the handler decides it doesn’t want to do anything, it can simply call this function, to hand over control back to the redbean core. By default, the host and path arguments are supplied from the resolved GetUrl value. This handler always resolves, since it will generate a 404 Not Found response if redbean couldn’t find an appropriate endpoint. <a href="https://redbean.dev/#Sleep">Sleep</a>(seconds:number)  Sleeps the specified number of seconds (can be fractional). The smallest interval is a microsecond. <a href="https://redbean.dev/#RouteHost">RouteHost</a>([host:str,[path:str]]) → bool  This is the same as <code class="language-plaintext highlighter-rouge">Route</code>, except it only implements the subset of request routing needed for serving virtual-hosted assets, where redbean tries to prefix the path with the hostname when looking up a file. This function returns true if the request was resolved. If it was resolved, then your OnHttpRequest request handler can still set additional headers. <a href="https://redbean.dev/#RoutePath">RoutePath</a>([path:str]) → bool  This is the same as <code class="language-plaintext highlighter-rouge">Route</code>, except it only implements the subset of request routing needed for serving assets. This function returns true if the request was resolved. If it was resolved, then your <a href="https://redbean.dev/#OnHttpRequest">OnHttpRequest</a> request handler can still set additional headers. <a href="https://redbean.dev/#ServeAsset">ServeAsset</a>(path:str)  Instructs redbean to serve static asset at path. This function causes what would normally happen outside a dynamic handler to happen. The asset can be sourced from either the zip or local filesystem if <code class="language-plaintext highlighter-rouge">-D</code> is used. This function is mutually exclusive with <code class="language-plaintext highlighter-rouge">SetStatus</code> and <code class="language-plaintext highlighter-rouge">ServeError</code>. <a href="https://redbean.dev/#ServeError">ServeError</a>(code:int[, reason:str])  Instructs redbean to serve a boilerplate error page. This takes care of logging the error, setting the reason phrase, and adding a payload. This function is mutually exclusive with <code class="language-plaintext highlighter-rouge">SetStatus</code> and <code class="language-plaintext highlighter-rouge">ServeAsset</code>. <a href="https://redbean.dev/#SetLogLevel">SetLogLevel</a>(level:int)  Sets logger verbosity. Reasonable values for <code class="language-plaintext highlighter-rouge">level</code> are <code class="language-plaintext highlighter-rouge">kLogDebug</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogVerbose</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogInfo</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogWarn</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogError</code><code class="language-plaintext highlighter-rouge">&gt;</code><code class="language-plaintext highlighter-rouge">kLogFatal</code>. <a href="https://redbean.dev/#VisualizeControlCodes">VisualizeControlCodes</a>(str) → str  Replaces C0 control codes and trojan source characters with descriptive UNICODE pictorial representation. This function also canonicalizes overlong encodings. C1 control codes are replaced with a JavaScript-like escape sequence. <a href="https://redbean.dev/#Underlong">Underlong</a>(str) → str  Canonicalizes overlong encodings. <a href="https://redbean.dev/#Bsf">Bsf</a>(x:int) → int  Returns position of first bit set. Passing 0 will raise an error. Same as the Intel x86 instruction BSF. <a href="https://redbean.dev/#Bsr">Bsr</a>(x:int) → int  Returns binary logarithm of 𝑥. Passing 0 will raise an error. Same as the Intel x86 instruction BSR. <a href="https://redbean.dev/#Crc32">Crc32</a>(initial:int, data:str) → int  Computes Phil Katz CRC-32 used by zip/zlib/gzip/etc. <a href="https://redbean.dev/#Crc32c">Crc32c</a>(initial:int, data:str) → int  Computes 32-bit Castagnoli Cyclic Redundancy Check. <a href="https://redbean.dev/#Popcnt">Popcnt</a>(x:int) → int  Returns number of bits set in integer. <a href="https://redbean.dev/#Rdtsc">Rdtsc</a>() → int  Returns CPU timestamp counter. <a href="https://redbean.dev/#Lemur64">Lemur64</a>() → int  Returns fastest pseudorandom non-cryptographic random number. This linear congruential generator passes practrand and bigcrush. <a href="https://redbean.dev/#Rand64">Rand64</a>() → int  Returns nondeterministic pseudorandom non-cryptographic number. This linear congruential generator passes practrand and bigcrush. This generator is safe across <a href="https://redbean.dev/#unix.fork">fork</a>(), threads, and signal handlers. <a href="https://redbean.dev/#Rdrand">Rdrand</a>() → int  Returns 64-bit hardware random integer from RDRND instruction, with automatic fallback to getrandom() if not available. <a href="https://redbean.dev/#Rdseed">Rdseed</a>() → int  Returns 64-bit hardware random integer from RDSEED instruction, with automatic fallback to RDRND and getrandom() if not available. <a href="https://redbean.dev/#GetCpuCount">GetCpuCount</a>() → int  Returns CPU core count or 0 if it couldn’t be determined. <a href="https://redbean.dev/#GetCpuCore">GetCpuCore</a>() → int  Returns 0-indexed CPU core on which process is currently scheduled. <a href="https://redbean.dev/#GetCpuNode">GetCpuNode</a>() → int  Returns 0-indexed NUMA node on which process is currently scheduled. <a href="https://redbean.dev/#Decimate">Decimate</a>(str) → str  Shrinks byte buffer in half using John Costella’s magic kernel. This downscales data 2x using an eight-tap convolution, e.g. &gt;: Decimate(‘\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00’)
“\xff\x00\xff\x00\xff\x00”</p>

<p>This is very fast if SSSE3 is available (Intel 2004+ / AMD 2011+).</p>

<p><a href="https://redbean.dev/#MeasureEntropy">MeasureEntropy</a>(data) → float  Returns Shannon entropy of array. This gives you an idea of the density of information. Cryptographic random should be in the ballpark of 7.9 whereas plaintext will be more like 4.5. <a href="https://redbean.dev/#Deflate">Deflate</a>(uncompressed:str[, level:int])</p>

<p>├─→ compressed:str</p>

<p>└─→ nil, error:str  Compresses data. &gt;: Deflate(“hello”)
“\xcbH\xcd\xc9\xc9\x07\x00”</p>
<blockquote>
  <p>: Inflate(“\xcbH\xcd\xc9\xc9\x07\x00”, 5)
“hello”</p>
</blockquote>

<p>The output format is raw DEFLATE that’s suitable for embedding into formats like a ZIP file. It’s recommended that, like ZIP, you also store separately a Crc32() checksum in addition to the original uncompressed size.</p>

<p><code class="language-plaintext highlighter-rouge">level</code> is the compression level, which defaults to 7. The max is 9. Lower numbers go faster (4 for instance is a sweet spot) and higher numbers go slower but have better compression.</p>

<p><a href="https://redbean.dev/#Inflate">Inflate</a>(compressed:str, maxoutsize:int)</p>

<p>├─→ uncompressed:str</p>

<p>└─→ nil, error:str  Decompresses data. 
This function performs the inverse of Deflate(). It’s recommended that you perform a Crc32() check on the output string after this function succeeds.</p>

<p><code class="language-plaintext highlighter-rouge">maxoutsize</code> is the uncompressed size, which should be known. However, it is permissable (although not advised) to specify some large number in which case (on success) the byte length of the output string may be less than <code class="language-plaintext highlighter-rouge">maxoutsize</code>.</p>

<p><a href="https://redbean.dev/#Benchmark">Benchmark</a>(func[, count[, maxattempts]])</p>

<p>└─→ nanos:real, ticks:int, overhead-ticks:int, tries:int  Performs microbenchmark. 
The first value returned is the average number of nanoseconds that <code class="language-plaintext highlighter-rouge">func</code> needed to execute. Nanoseconds are computed from RDTSC tick counts, using an approximation that’s measured beforehand with the unix.<a href="https://redbean.dev/#unix.clock_gettime">clock_gettime</a>() function.</p>

<p>The <code class="language-plaintext highlighter-rouge">ticks</code> result is the canonical average number of clock ticks.</p>

<p>This subroutine will subtract whatever the overhead happens to be for benchmarking a function that does nothing. This overhead value will be reported in the result.</p>

<p><code class="language-plaintext highlighter-rouge">tries</code> indicates if your microbenchmark needed to be repeated, possibly because your system is under load and the benchmark was preempted by the operating system, or moved to a different core.</p>

<p><a href="https://redbean.dev/#oct">oct</a>(int) → str  Formats string as octal integer literal string. If the provided value is zero, the result will be <code class="language-plaintext highlighter-rouge">"0"</code>. Otherwise the resulting value will be the zero-prefixed octal string. The result is currently modulo 2^64. Negative numbers are converted to unsigned. <a href="https://redbean.dev/#hex">hex</a>(int) → str  Formats string as hexadecimal integer literal string. If the provided value is zero, the result will be <code class="language-plaintext highlighter-rouge">"0"</code>. Otherwise the resulting value will be the <code class="language-plaintext highlighter-rouge">"0x"</code>-prefixed hex string. The result is currently modulo 2^64. Negative numbers are converted to unsigned. <a href="https://redbean.dev/#bin">bin</a>(int) → str  Formats string as binary integer literal string. If the provided value is zero, the result will be <code class="language-plaintext highlighter-rouge">"0"</code>. Otherwise the resulting value will be the <code class="language-plaintext highlighter-rouge">"0b"</code>-prefixed binary str. The result is currently modulo 2^64. Negative numbers are converted to unsigned. <a href="https://redbean.dev/#ResolveIp">ResolveIp</a>(hostname:str)</p>

<p>├─→ ip:uint32</p>

<p>└─→ nil, error:str  Gets IP address associated with hostname. 
This function first checks if hostname is already an IP address, in which case it returns the result of <a href="https://redbean.dev/#ParseIp"><code class="language-plaintext highlighter-rouge">ParseIp</code></a>. Otherwise, it checks HOSTS.TXT on the local system and returns the first IPv4 address associated with hostname. If no such entry is found, a DNS lookup is performed using the system configured (e.g. /etc/resolv.conf) DNS resolution service. If the service returns multiple IN A records then only the first one is returned.</p>

<p>The returned address is word-encoded in host endian order. For example, 1.2.3.4 is encoded as 0x01020304. The <a href="https://redbean.dev/#FormatIp"><code class="language-plaintext highlighter-rouge">FormatIp</code></a> function may be used to turn this value back into a string.</p>

<p>If no IP address could be found, then nil is returned alongside a string of unspecified format describing the error. Calls to this function may be wrapped in <code class="language-plaintext highlighter-rouge">assert()</code> if an exception is desired.</p>

<p><a href="https://redbean.dev/#IsTrustedIp">IsTrustedIp</a>(ip:int)</p>

<p>└─→ bool  Returns true if IP address is trustworthy. 
If the <a href="https://redbean.dev/#ProgramTrustedIp">ProgramTrustedIp</a>() function has NOT been called then redbean will consider the networks 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 to be trustworthy too. If ProgramTrustedIp() HAS been called at some point earlier in your redbean’s lifecycle, then it’ll trust the IPs and network subnets you specify instead.</p>

<p>The network interface addresses used by the host machine are always considered trustworthy, e.g. 127.0.0.1. This may change soon, if we decide to export a GetHostIps() API which queries your NIC devices.</p>

<p><a href="https://redbean.dev/#ProgramTrustedIp">ProgramTrustedIp</a>(ip:int[, cidr:int])  Trusts an IP address or network. 
This function may be used to configure the IsTrustedIp() function which is how redbean determines if a client is allowed to send us headers like X-Forwarded-For (cf <a href="https://redbean.dev/#GetRemoteAddr">GetRemoteAddr</a> vs. <a href="https://redbean.dev/#GetClientAddr">GetClientAddr</a>) without them being ignored. Trusted IPs is also how redbean turns off token bucket rate limiting selectively, so be careful. Here’s an example of how you could trust all of Cloudflare’s IPs:</p>

<p>ProgramTrustedIp(ParseIp(“103.21.244.0”), 22);
ProgramTrustedIp(ParseIp(“103.22.200.0”), 22);
ProgramTrustedIp(ParseIp(“103.31.4.0”), 22);
ProgramTrustedIp(ParseIp(“104.16.0.0”), 13);
ProgramTrustedIp(ParseIp(“104.24.0.0”), 14);
ProgramTrustedIp(ParseIp(“108.162.192.0”), 18);
ProgramTrustedIp(ParseIp(“131.0.72.0”), 22);
ProgramTrustedIp(ParseIp(“141.101.64.0”), 18);
ProgramTrustedIp(ParseIp(“162.158.0.0”), 15);
ProgramTrustedIp(ParseIp(“172.64.0.0”), 13);
ProgramTrustedIp(ParseIp(“173.245.48.0”), 20);
ProgramTrustedIp(ParseIp(“188.114.96.0”), 20);
ProgramTrustedIp(ParseIp(“190.93.240.0”), 20);
ProgramTrustedIp(ParseIp(“197.234.240.0”), 22);
ProgramTrustedIp(ParseIp(“198.41.128.0”), 17);</p>

<p>Although you might want consider trusting redbean’s open source freedom embracing solution to DDOS protection instead!</p>

<p><a href="https://redbean.dev/#ProgramTokenBucket">ProgramTokenBucket</a>([replenish:num[, cidr:int[, reject:int[, ignore:int[, ban:int]]]]])  Enables DDOS protection. 
Imagine you have 2 32 buckets, one for each IP address. Each bucket can hold about 127 tokens. Every second a background worker puts one token in each bucket. When a TCP client socket is opened, it takes a token from its bucket, and then proceeds. If the bucket holds only a third of its original tokens, then redbean sends them a 429 warning. If the client ignores this warning and keeps sending requests, until there’s no tokens left, then the banhammer finally comes down.</p>

<p>function OnServerStart()
    ProgramTokenBucket()
    ProgramTrustedIp(ParseIp(‘x.x.x.x’), 32)
    assert(unix.setrlimit(unix.RLIMIT_NPROC, 1000, 1000))
end</p>

<p>This model of network rate limiting generously lets people “burst” a tiny bit. For example someone might get a strong craving for content and smash the reload button in Chrome 64 times in a few seconds. But since the client only get 1 new token per second, they’d better cool their heels for a few minutes after doing that. This amount of burst can be altered by choosing the <code class="language-plaintext highlighter-rouge">reject</code> / <code class="language-plaintext highlighter-rouge">ignore</code> / <code class="language-plaintext highlighter-rouge">ban</code> threshold arguments. For example, if the <code class="language-plaintext highlighter-rouge">reject</code> parameter is set to 126 then no bursting is allowed, which probably isn’t a good idea.</p>

<p>redbean is programmed to acquire a token immediately after accept() is called from the main server process, which is well before fork() or read() or any Lua code happens. redbean then takes action, based on the token count, which can be accept / reject / ignore / ban. If redbean determines a ban is warrented, then 4-byte datagram is sent to the unix domain socket <code class="language-plaintext highlighter-rouge">/var/run/blackhole.sock</code> which should be operated using the blackholed program we distribute separately.</p>

<p>The trick redbean uses on Linux for example is insert rules in your raw prerouting table. redbean is very fast at the application layer so the biggest issue we’ve encountered in production is are kernels themselves, and programming the raw prerouting table dynamically is how we solved that.</p>

<p><code class="language-plaintext highlighter-rouge">replenish</code> is the number of times per second a token should be added to each bucket. The default value is 1 which means one token is granted per second to all buckets. The minimum value is 1/3600 which means once per hour. The maximum value for this setting is 1e6, which means once every microsecond.</p>

<p><code class="language-plaintext highlighter-rouge">cidr</code> is the specificity of judgement. Since creating 2^32 buckets would need 4GB of RAM, redbean defaults this value to 24 which means filtering applies to class c network blocks (i.e. x.x.x.*), and your token buckets only take up 2^24 bytes of RAM (16MB). This can be set to any number on the inclusive interval [8,32], where having a lower number means you use less ram/cpu, but splash damage applies more to your clients; whereas higher numbers means more ram/cpu usage, while ensuring rate limiting only applies to specific compromised actors.</p>

<p><code class="language-plaintext highlighter-rouge">reject</code> is the token count or treshold at which redbean should send 429 Too Many Request warnings to the client. Permitted values can be anywhere between -1 and 126 inclusively. The default value is 30 and -1 means to disable (assuming AcquireToken() will be used).</p>

<p><code class="language-plaintext highlighter-rouge">ignore</code> is the token count or treshold, at which redbean should try simply ignoring clients and close the connection without logging any kind of warning, and without sending any response. The default value for this setting is <code class="language-plaintext highlighter-rouge">MIN(reject / 2, 15)</code>. This must be less than or equal to the <code class="language-plaintext highlighter-rouge">reject</code> setting. Allowed values are [-1,126] where you can use -1 as a means of disabling <code class="language-plaintext highlighter-rouge">ignore</code>.</p>

<p><code class="language-plaintext highlighter-rouge">ban</code> is the token count at which redbean should report IP addresses to the blackhole daemon via a unix-domain socket datagram so they’ll get banned in the kernel routing tables. redbean’s default value for this setting is <code class="language-plaintext highlighter-rouge">MIN(ignore / 10, 1)</code>. Permitted values are [-1,126] where -1 may be used as a means of disabling the <code class="language-plaintext highlighter-rouge">ban</code> feature.</p>

<p>This function throws an exception if the constraints described above are not the case. Warnings are logged should redbean fail to connect to the blackhole daemon, assuming it hasn’t been disabled. It’s safe to use load balancing tools when banning is enabled, since you can’t accidentally ban your own network interface addresses, loopback ips, or ProgramTrustedIp() addresses where these rate limits don’t apply.</p>

<p>It’s assumed will be called from the .init.lua global scope although it could be used in interpreter mode, or from a forked child process in which case the only processes that’ll have ability to use it will be that same process, and any descendent processes. This function is only able to be called once.</p>

<p>This feature is not available in unsecure mode.</p>

<p><a href="https://redbean.dev/#AcquireToken">AcquireToken</a>([ip:uint32])</p>

<p>└─→ int8  Atomically acquires token. 
This routine atomically acquires a single token for an <code class="language-plaintext highlighter-rouge">ip</code> address. The return value is the token count before the subtraction happened. No action is taken based on the count, since the caller will decide.</p>

<p><code class="language-plaintext highlighter-rouge">ip</code> should be an IPv4 address and this defaults to GetClientAddr(), although other interpretations of its meaning are possible.</p>

<p>Your token buckets are stored in shared memory so this can be called from multiple forked processes. which operate on the same values.</p>

<p><a href="https://redbean.dev/#Blackhole">Blackhole</a>([ip:uint32])</p>

<p>└─→ bool  Sends IP address to blackholed service. 
<a href="https://redbean.dev/#ProgramTokenBucket">ProgramTokenBucket</a>() needs to be called beforehand. The default settings will blackhole automatically, during the accept() loop based on the banned threshold. However if your Lua code calls <a href="https://redbean.dev/#AcquireToken">AcquireToken</a>() manually, then you’ll need this function to take action on the returned values.</p>

<p>This function returns true if a datagram could be sent sucessfully. Otherwise false is returned, which can happen if blackholed isn’t running, or if a lot of processes are sending messages to it and the operation would have blocked.</p>

<p>It’s assumed that the blackholed service is running locally in the background.</p>

<h2 id="lsqlite3-module"><a href="https://redbean.dev/#lsqlite3">lsqlite3 module</a></h2>

<p>Please refer to the <a href="http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki">LuaSQLite3 Documentation</a>.</p>

<p>For example, you could put the following in your /.init.lua file:</p>

<p>sqlite3 = require ‘lsqlite3’
db = sqlite3.open_memory()
db:exec[[ CREATE TABLE test ( id INTEGER PRIMARY KEY, content TEXT ); INSERT INTO test (content) VALUES (‘Hello World’); INSERT INTO test (content) VALUES (‘Hello Lua’); INSERT INTO test (content) VALUES (‘Hello Sqlite3’); ]]</p>

<p>Then, your Lua server pages or OnHttpRequest handler may perform SQL queries by accessing the db global. The performance is good too, at about 400k qps.</p>

<p>for row in db:nrows(“SELECT * FROM test”) do
   Write(row.id..” “..row.content..”<br />”)
end</p>

<p><strong>Warning</strong>: Please read <a href="https://www.sqlite.org/howtocorrupt.html">How To Corrupt An SQLite Database File</a> because those same rules apply to redbean. One recommendation worth paying attention to is that SQLite connections can’t cross fork() boundaries, and redbean is a forking web server. The simplest solution to solving this, is to create your database handles inside your <code class="language-plaintext highlighter-rouge">OnWorkerStart()</code> hook.</p>

<p>The above example is only appropriate for read-only databases. When setting up a mutable SQLite database, it’s important to consider that redbean is a forking web server, and SQLite handles shouldn’t cross fork boundaries. That means you need to create your SQLite database object lazily from within the client process, and SQLite makes this very fast. One approach that’s worked well for us on Linux, is to do that using the write-ahead log. For example:</p>

<p>re = require ‘re’
sqlite3 = require ‘lsqlite3’
reNumberPath = re.compile[[^/([0-9][0-9]*)$]]
function SetupSql()
   if not db then
      db = sqlite3.open(‘redbean.sqlite3’)
      db:busy_timeout(1000)
      db:exec[[PRAGMA journal_mode=WAL]]
      db:exec[[PRAGMA synchronous=NORMAL]]
      getBarStmt = db:prepare[[ SELECT foo FROM Bar WHERE id = ? ]]
   end
end
local function GetBar(id)
   if not getBarStmt then
      Log(kLogWarn, ‘prepare failed: ‘ .. db:errmsg())
      return nil
   end
   getBarStmt:reset()
   getBarStmt:bind(1, id)
   for bar in getBarStmt:nrows() do
      return bar
   end
   return nil
end
function OnHttpRequest()
   SetupSql()
   _, id = reNumberPath:search(GetPath())
   if id then
      bar = GetBar(id)
      SetHeader(‘Content-Type’, ‘text/plain; charset=utf-8’)
      Write(string(bar.foo))
      return
   end
   Route()
   SetHeader(‘Content-Language’, ‘en-US’)
end</p>

<p>redbean supports a subset of what’s defined in the upstream LuaSQLite3 project. Most of the unsupported APIs relate to pointers and database notification hooks.</p>

<h2 id="re-module"><a href="https://redbean.dev/#re">re module</a></h2>

<p>This module exposes an API for <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html">POSIX regular expressions</a> which enable you to validate input, search for substrings, extract pieces of strings, etc. Here’s a usage example:</p>

<h1 id="example-ipv4-address-regular-expression-see-also-parseip">Example IPv4 Address Regular Expression (see also <a href="https://redbean.dev/#ParseIP"><code class="language-plaintext highlighter-rouge">ParseIP</code></a>)</h1>
<p>p = assert(re.compile([[^([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})$]]))
m,a,b,c,d = assert(p:search(𝑠))
if m then
  print(“ok”, tonumber(a), tonumber(b), tonumber(c), tonumber(d))
else
  print(“not ok”)
end
<a href="https://redbean.dev/#re.search">re.search</a>(regex:str, text:str[, flags:int])</p>

<p>├─→ match:str[, group1:str, …]</p>

<p>└─→ nil, re.Errno  Searches for regular expression match in text. 
This is a shorthand notation roughly equivalent to:</p>

<p>preg = re.compile(regex)
patt = preg:search(re, text)</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> defaults to zero and may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">re.BASIC</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.ICASE</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NEWLINE</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NOSUB</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NOTBOL</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NOTEOL</code></li>
</ul>

<p>This has exponential complexity. Please use re.compile() to compile your regular expressions once from <code class="language-plaintext highlighter-rouge">/.init.lua</code>. This API exists for convenience. This isn’t recommended for prod.</p>

<p>This uses POSIX extended syntax by default.</p>

<p><a href="https://redbean.dev/#re.compile">re.compile</a>(regex:str[, flags:int])</p>

<p>├─→ preg:re.Regex</p>

<p>└─→ nil, re.Errno  Compiles regular expression. 
<code class="language-plaintext highlighter-rouge">flags</code> defaults to zero and may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">re.BASIC</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.ICASE</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NEWLINE</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NOSUB</code></li>
</ul>

<p>This has an O(2^𝑛) cost. Consider compiling regular expressions once from your <code class="language-plaintext highlighter-rouge">/.init.lua</code> file.</p>

<p>If <code class="language-plaintext highlighter-rouge">regex</code> is an untrusted user value, then <code class="language-plaintext highlighter-rouge">unix.setrlimit</code> should be used to impose cpu and memory quotas for security.</p>

<p>This uses POSIX extended syntax by default.</p>

<h3 id="reregex-object"><a href="https://redbean.dev/#re.Regex">re.Regex Object</a></h3>

<p><a href="https://redbean.dev/#regex_search">re.Regex:search</a>(text:str[, flags:int])</p>

<p>├─→ match:str[, group1:str, …]</p>

<p>└─→ nil, re.Errno  Executes precompiled regular expression. 
Returns nothing (nil) if the pattern doesn’t match anything. Otherwise it pushes the matched substring and any parenthesis-captured values too. Flags may contain re.NOTBOL or <code class="language-plaintext highlighter-rouge">re.NOTEOL</code> to indicate whether or not text should be considered at the start and/or end of a line.</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> defaults to zero and may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">re.NOTBOL</code></li>
  <li><code class="language-plaintext highlighter-rouge">re.NOTEOL</code></li>
</ul>

<p>This has an O(𝑛) cost.</p>

<h3 id="reerrno-object"><a href="https://redbean.dev/#re.Errno">re.Errno Object</a></h3>

<p><a href="https://redbean.dev/#re.Errno:errno">re.Errno:errno</a>()</p>

<p>└─→ errno:int  Returns regex error number. <a href="https://redbean.dev/#re.Errno:doc">re.Errno:doc</a>()</p>

<p>└─→ description:str  Returns English string describing error code. <a href="https://redbean.dev/#re.Errno:__tostring">re.Errno:__tostring</a>()</p>

<p>└─→ str  Delegates to <a href="https://redbean.dev/#re.Errno:doc"><code class="language-plaintext highlighter-rouge">re.Errno:doc()</code></a></p>
<h3 id="re-flags"><a href="https://redbean.dev/#re.flags">re flags</a></h3>

<p><a href="https://redbean.dev/#re.basic">re.BASIC</a> Use this flag if you prefer the default POSIX regex syntax. We use extended regex notation by default. For example, an extended regular expression for matching an IP address might look like <code class="language-plaintext highlighter-rouge">([0-9]*)\.([0-9]*)\.([0-9]*)\.([0-9]*)</code> whereas with basic syntax it would look like <code class="language-plaintext highlighter-rouge">\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)</code>. This flag may only be used with <a href="https://redbean.dev/#re.compile"><code class="language-plaintext highlighter-rouge">re.compile</code></a> and <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a>. <a href="https://redbean.dev/#re.icase">re.ICASE</a> Use this flag to make your pattern case ASCII case-insensitive. This means <code class="language-plaintext highlighter-rouge">[a-z]</code> will mean the same thing as <code class="language-plaintext highlighter-rouge">[A-Za-z]</code>. This flag may only be used with <a href="https://redbean.dev/#re.compile"><code class="language-plaintext highlighter-rouge">re.compile</code></a> and <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a>. <a href="https://redbean.dev/#re.newline">re.NEWLINE</a> Use this flag to change the handling of NEWLINE (\x0a) characters. When this flag is set, (1) a NEWLINE shall not be matched by a “.” or any form of a non-matching list, (2) a “^” shall match the zero-length string immediately after a NEWLINE (regardless of re.NOTBOL), and (3) a “$” shall match the zero-length string immediately before a NEWLINE (regardless of re.NOTEOL). <a href="https://redbean.dev/#re.nosub">re.NOSUB</a> Causes <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a> to only report success and failure. This is reported via the API by returning empty string for success. This flag may only be used with <a href="https://redbean.dev/#re.compile"><code class="language-plaintext highlighter-rouge">re.compile</code></a> and <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a>. <a href="https://redbean.dev/#re.notbol">re.NOTBOL</a> The first character of the string pointed to by string is not the beginning of the line. This flag may only be used with <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a> and <a href="https://redbean.dev/#regex_search"><code class="language-plaintext highlighter-rouge">regex_t*:search</code></a>. <a href="https://redbean.dev/#re.noteol">re.NOTEOL</a> The last character of the string pointed to by string is not the end of the line. This flag may only be used with <a href="https://redbean.dev/#re.search"><code class="language-plaintext highlighter-rouge">re.search</code></a> and <a href="https://redbean.dev/#regex_search"><code class="language-plaintext highlighter-rouge">regex_t*:search</code></a>.</p>
<h3 id="re-errors"><a href="https://redbean.dev/#re.errors">re errors</a></h3>

<p><a href="https://redbean.dev/#re.NOMATCH">re.NOMATCH</a> No match <a href="https://redbean.dev/#re.BADPAT">re.BADPAT</a> Invalid regex <a href="https://redbean.dev/#re.ECOLLATE">re.ECOLLATE</a> Unknown collating element <a href="https://redbean.dev/#re.ECTYPE">re.ECTYPE</a> Unknown character class name <a href="https://redbean.dev/#re.EESCAPE">re.EESCAPE</a> Trailing backslash <a href="https://redbean.dev/#re.ESUBREG">re.ESUBREG</a> Invalid back reference <a href="https://redbean.dev/#re.EBRACK">re.EBRACK</a> Missing <code class="language-plaintext highlighter-rouge">]</code><a href="https://redbean.dev/#re.EPAREN">re.EPAREN</a> Missing <code class="language-plaintext highlighter-rouge">)</code><a href="https://redbean.dev/#re.EBRACE">re.EBRACE</a> Missing <code class="language-plaintext highlighter-rouge">}</code><a href="https://redbean.dev/#re.BADBR">re.BADBR</a> Invalid contents of <code class="language-plaintext highlighter-rouge">{}</code><a href="https://redbean.dev/#re.ERANGE">re.ERANGE</a> Invalid character range. <a href="https://redbean.dev/#re.ESPACE">re.ESPACE</a> Out of memory <a href="https://redbean.dev/#re.BADRPT">re.BADRPT</a> Repetition not preceded by valid expression 
<a href="https://redbean.dev/#path">path module</a>
—————————————-</p>

<p>The path module may be used to manipulate unix paths.</p>

<p>Note that we use unix paths on Windows. For example, if you have a path like <code class="language-plaintext highlighter-rouge">C:\foo\bar</code> then it should be <code class="language-plaintext highlighter-rouge">/c/foo/bar</code> with redbean. It should also be noted the unix module is more permissive when using Windows paths, where translation to win32 is very light.</p>

<p><a href="https://redbean.dev/#path.dirname">path.dirname</a>(str)</p>

<p>└─→ str  Strips final component of path, e.g. path      │ dirname
───────────────────
.         │ .
..        │ .
/         │ /
usr       │ .
/usr/     │ /
/usr/lib  │ /usr
/usr/lib/ │ /usr
<a href="https://redbean.dev/#path.basename">path.basename</a>(str)</p>

<p>└─→ str  Returns final component of path, e.g. path      │ basename
─────────────────────
.         │ .
..        │ ..
/         │ /
usr       │ usr
/usr/     │ usr
/usr/lib  │ lib
/usr/lib/ │ lib
<a href="https://redbean.dev/#path.join">path.join</a>(str)</p>

<p>└─→ str  Concatenates path components, e.g. x         │ y        │ joined
─────────────────────────────────
/         │ /        │ /
/usr      │ lib      │ /usr/lib
/usr/     │ lib      │ /usr/lib
/usr/lib  │ /lib     │ /lib</p>

<p>You may specify 1+ arguments.</p>

<p>Specifying no arguments will raise an error. If nil arguments are specified, then they’re skipped over. If exclusively nil arguments are passed, then nil is returned. Empty strings behave similarly to nil, but unlike nil may coerce a trailing slash.</p>

<p><a href="https://redbean.dev/#path.exists">path.exists</a>(path:str)</p>

<p>└─→ bool  Returns true if path exists. 
This function is inclusive of regular files, directories, and special files. Symbolic links are followed are resolved. On error, false is returned.</p>

<p><a href="https://redbean.dev/#path.isfile">path.isfile</a>(path:str)</p>

<p>└─→ bool  Returns true if path exists and is regular file. 
Symbolic links are not followed. On error, false is returned.</p>

<p><a href="https://redbean.dev/#path.isdir">path.isdir</a>(path:str)</p>

<p>└─→ bool  Returns true if path exists and is directory. 
Symbolic links are not followed. On error, false is returned.</p>

<p><a href="https://redbean.dev/#path.islink">path.islink</a>(path:str)</p>

<p>└─→ bool  Returns true if path exists and is symbolic link. 
Symbolic links are not followed. On error, false is returned.</p>

<h2 id="maxmind-module"><a href="https://redbean.dev/#maxmind">maxmind module</a></h2>

<p>This module may be used to get city/country/asn/etc from IPs, e.g.</p>

<p>– .init.lua
maxmind = require ‘maxmind’
asndb = maxmind.open(‘/usr/local/share/maxmind/GeoLite2-ASN.mmdb’)</p>

<p>– request handler
as = asndb:lookup(GetRemoteAddr())
if as then
    asnum = as:get(‘autonomous_system_number’)
    asorg = as:get(‘autonomous_system_organization’)
    Write(EscapeHtml(asnum))
    Write(‘ ‘)
    Write(EscapeHtml(asorg))
end</p>

<p>The database file is distributed by MaxMind. You need to sign up on their website to get a free copy. The database has a generalized structure. For a concrete example of how this module may be used, please see maxmind.lua in redbean-demo.com.</p>

<h2 id="finger-module">finger module</h2>

<p>This is an experimental module that, like the maxmind module, gives you insight into what kind of device is connecting to your redbean. This module can help you protect your redbean because it provides tools for identifying clients that misrepresent themselves. For example the User-Agent header might report itself as a Windows computer when the SYN packet says it’s a Linux computer.</p>

<p>function OnServerListen(fd, ip, port)
   unix.setsockopt(fd, unix.SOL_TCP, unix.TCP_SAVE_SYN, true)
   return false
end</p>

<p>function OnClientConnection(ip, port, serverip, serverport)
   fd = GetClientFd()
   syn = unix.getsockopt(fd, unix.SOL_TCP, unix.TCP_SAVED_SYN)
end</p>

<p>function OnHttpRequest()
   Log(kLogInfo, “client is running %s and reports %s” % {
          finger.GetSynFingerOs(finger.FingerSyn(syn)),
          GetHeader(‘User-Agent’)})
   Route()
end</p>

<p>The following functions are provided.</p>

<p><a href="https://redbean.dev/#finger.FingerSyn">finger.FingerSyn</a>(syn_packet_bytes:str)</p>

<p>├─→ synfinger:uint32</p>

<p>└─→ nil, error:str  Fingerprints IP+TCP SYN packet. 
This returns a hash-like magic number that reflects the SYN packet structure, e.g. ordering of options, maximum segment size, etc. We make no guarantees this hashing algorithm won’t change as we learn more about the optimal way to fingerprint, so be sure to save your syn packets too if you’re using this feature, in case they need to be rehashed in the future.</p>

<p>This function is nil/error propagating.</p>

<p><a href="https://redbean.dev/#finger.GetSynFingerOs">finger.GetSynFingerOs</a>(synfinger:uint32)</p>

<p>├─→ osname:str</p>

<p>└─→ nil, error:str  Fingerprints IP+TCP SYN packet. 
If <code class="language-plaintext highlighter-rouge">synfinger</code> is a known hard-coded magic number, then one of the following strings may be returned:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"LINUX"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"WINDOWS"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"XNU"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"NETBSD"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"FREEBSD"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"OPENBSD"</code></li>
</ul>

<p>If this function returns nil, then one thing you can do to help is file an issue and share with us your SYN packet specimens. The way we prefer to receive them is in EncodeLua(syn_packet_bytes) format along with details on the operating system which you must know.</p>

<p><a href="https://redbean.dev/#finger.DescribeSyn">finger.DescribeSyn</a>(syn_packet_bytes:str)</p>

<p>├─→ description:str</p>

<p>└─→ nil, error:str  Describes IP+TCP SYN packet. 
The layout looks as follows:</p>

<p>TTL:OPTIONS:WSIZE:MSS</p>

<p>The <code class="language-plaintext highlighter-rouge">TTL</code>, <code class="language-plaintext highlighter-rouge">WSIZE</code>, and <code class="language-plaintext highlighter-rouge">MSS</code> fields are unsigned decimal fields.</p>

<p>The <code class="language-plaintext highlighter-rouge">OPTIONS</code> field communicates the ordering of the commonly used subset of tcp options. The following character mappings are defined. TCP options not on this list will be ignored.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">E</code>: End of Option list</li>
  <li><code class="language-plaintext highlighter-rouge">N</code>: No-Operation</li>
  <li><code class="language-plaintext highlighter-rouge">M</code>: Maxmimum Segment Size</li>
  <li><code class="language-plaintext highlighter-rouge">K</code>: Window Scale</li>
  <li><code class="language-plaintext highlighter-rouge">O</code>: SACK Permitted</li>
  <li><code class="language-plaintext highlighter-rouge">A</code>: SACK</li>
  <li><code class="language-plaintext highlighter-rouge">e</code>: Echo (obsolete)</li>
  <li><code class="language-plaintext highlighter-rouge">r</code>: Echo reply (obsolete)</li>
  <li><code class="language-plaintext highlighter-rouge">T</code>: Timestamps</li>
</ul>

<p>This function is nil/error propagating.</p>

<h2 id="argon2-module">argon2 module</h2>

<p>This module implements a password hashing algorithm based on blake2b that won the Password Hashing Competition.</p>

<p>It can be used to securely store user passwords in your SQLite database, in a way that destroys the password, but can be verified by regenerating the hash again the next time the user logs in. Destroying the password is important, since if your database is compromised, the bad guys won’t be able to use rainbow tables to recover the plain text of the passwords.</p>

<p>Argon2 achieves this security by being expensive to compute. Care should be taken in choosing parameters, since an HTTP endpoint that uses Argon2 can just as easily become a denial of service vector. For example, you may want to consider throttling your login endpoint.</p>

<p><a href="https://redbean.dev/#argon2.hash_encoded">argon2.hash_encoded</a>(pass:str, salt:str[, config:table])</p>

<p>├─→ ascii:str</p>

<p>└─→ nil, error:str  Hashes password. 
This is consistent with the README of the reference implementation:</p>

<blockquote>
  <p>: assert(argon2.hash_encoded(“password”, “somesalt”, {
       variant = argon2.variants.argon2_i,
       m_cost = 65536,
       hash_len = 24,
       parallelism = 4,
       t_cost = 2,
     }))
“$argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$RdescudvJCsgt3ub+b+dWRWJTmaaJObG”</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">pass</code> is the secret value to be encoded.</p>

<p><code class="language-plaintext highlighter-rouge">salt</code> is a nonce value used to hash the string.</p>

<p><code class="language-plaintext highlighter-rouge">config.m_cost</code> is the memory hardness in kibibytes, which defaults to 4096 (4 mibibytes). It’s recommended that this be tuned upwards.</p>

<p><code class="language-plaintext highlighter-rouge">config.t_cost</code> is the number of iterations, which defaults to 3.</p>

<p><code class="language-plaintext highlighter-rouge">config.parallelism</code> is the parallelism factor, which defaults to 1.</p>

<p><code class="language-plaintext highlighter-rouge">config.hash_len</code> is the number of desired bytes in hash output, which defaults to 32.</p>

<p><code class="language-plaintext highlighter-rouge">config.variant</code> may be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">argon2.variants.argon2_id</code> blend of other two methods [default]</li>
  <li><code class="language-plaintext highlighter-rouge">argon2.variants.argon2_i</code> maximize resistance to side-channel attacks</li>
  <li><code class="language-plaintext highlighter-rouge">argon2.variants.argon2_d</code> maximize resistance to gpu cracking attacks</li>
</ul>

<p><a href="https://redbean.dev/#argon2.verify">argon2.verify</a>(encoded:str, pass:str)</p>

<p>├─→ ok:bool</p>

<p>└─→ nil, error:str  Verifies password, e.g. &gt;: argon2.verify(“$argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$RdescudvJCsgt3ub+b+dWRWJTmaaJObG”, “password”)
true</p>

<h2 id="unix-module"><a href="https://redbean.dev/#unix">unix module</a></h2>

<p>This module exposes the low-level System Five system call interface. This module works on all supported platforms, including Windows NT.</p>

<p><a href="https://redbean.dev/#unix.open">unix.open</a>(path:str[, flags:int[, mode:int[, dirfd:int]]])</p>

<p>├─→ fd:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Opens file. 
Returns a file descriptor integer that needs to be closed, e.g.</p>

<p>fd = assert(unix.open(‘/etc/passwd’, unix.O_RDONLY))
print(unix.<a href="https://redbean.dev/#unix.read">read</a>(fd))
unix.<a href="https://redbean.dev/#unix.close">close</a>(fd)</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> should have one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_RDONLY</code>: open for reading (default)</li>
  <li><code class="language-plaintext highlighter-rouge">O_WRONLY</code>: open for writing</li>
  <li><code class="language-plaintext highlighter-rouge">O_RDWR</code>: open for reading and writing</li>
</ul>

<p>The following values may also be OR’d into <code class="language-plaintext highlighter-rouge">flags</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_CREAT</code> create file if it doesn’t exist</li>
  <li><code class="language-plaintext highlighter-rouge">O_TRUNC</code> automatic <a href="https://redbean.dev/#unix.ftruncate">ftruncate</a>(fd,0) if exists</li>
  <li><code class="language-plaintext highlighter-rouge">O_CLOEXEC</code> automatic <a href="https://redbean.dev/#unix.close">close</a>() upon <a href="https://redbean.dev/#unix.execve">execve</a>()</li>
  <li><code class="language-plaintext highlighter-rouge">O_EXCL</code> exclusive access (see below)</li>
  <li><code class="language-plaintext highlighter-rouge">O_APPEND</code> open file for append only</li>
  <li><code class="language-plaintext highlighter-rouge">O_NONBLOCK</code> asks read/write to fail with <a href="https://redbean.dev/#unix.EAGAIN">EAGAIN</a> rather than block</li>
  <li><code class="language-plaintext highlighter-rouge">O_DIRECT</code> it’s complicated (not supported on Apple and OpenBSD)</li>
  <li><code class="language-plaintext highlighter-rouge">O_DIRECTORY</code> useful for <a href="https://redbean.dev/#unix.stat">stat</a>‘ing (hint on UNIX but required on NT)</li>
  <li><code class="language-plaintext highlighter-rouge">O_NOFOLLOW</code> fail if it’s a symlink (zero on Windows)</li>
  <li><code class="language-plaintext highlighter-rouge">O_DSYNC</code> it’s complicated (zero on non-Linux/Apple)</li>
  <li><code class="language-plaintext highlighter-rouge">O_RSYNC</code> it’s complicated (zero on non-Linux/Apple)</li>
  <li><code class="language-plaintext highlighter-rouge">O_PATH</code> it’s complicated (zero on non-Linux)</li>
  <li><code class="language-plaintext highlighter-rouge">O_VERIFY</code> it’s complicated (zero on non-FreeBSD)</li>
  <li><code class="language-plaintext highlighter-rouge">O_SHLOCK</code> it’s complicated (zero on non-BSD)</li>
  <li><code class="language-plaintext highlighter-rouge">O_EXLOCK</code> it’s complicated (zero on non-BSD)</li>
  <li><code class="language-plaintext highlighter-rouge">O_NOATIME</code> don’t record access time (zero on non-Linux)</li>
  <li><code class="language-plaintext highlighter-rouge">O_RANDOM</code> hint random access intent (zero on non-Windows)</li>
  <li><code class="language-plaintext highlighter-rouge">O_SEQUENTIAL</code> hint sequential access intent (zero on non-Windows)</li>
  <li><code class="language-plaintext highlighter-rouge">O_COMPRESSED</code> ask fs to abstract compression (zero on non-Windows)</li>
  <li><code class="language-plaintext highlighter-rouge">O_INDEXED</code> turns on that slow performance (zero on non-Windows)</li>
</ul>

<p>There are three regular combinations for the above flags:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_RDONLY</code>: Opens existing file for reading. If it doesn’t exist then nil is returned and errno will be <code class="language-plaintext highlighter-rouge">ENOENT</code> (or in some other cases <code class="language-plaintext highlighter-rouge">ENOTDIR</code>).</li>
  <li><code class="language-plaintext highlighter-rouge">O_WRONLY|O_CREAT|O_TRUNC</code>: Creates file. If it already exists, then the existing copy is destroyed and the opened file will start off with a length of zero. This is the behavior of the traditional creat() system call.</li>
  <li><code class="language-plaintext highlighter-rouge">O_WRONLY|O_CREAT|O_EXCL</code>: Create file only if doesn’t exist already. If it does exist then <code class="language-plaintext highlighter-rouge">nil</code> is returned along with <code class="language-plaintext highlighter-rouge">errno</code> set to <code class="language-plaintext highlighter-rouge">EEXIST</code>.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">dirfd</code> defaults to to <code class="language-plaintext highlighter-rouge">unix.AT_FDCWD</code> and may optionally be set to a directory file descriptor to which <code class="language-plaintext highlighter-rouge">path</code> is relative.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">ENOENT</code> if <code class="language-plaintext highlighter-rouge">path</code> doesn’t exist.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">ENOTDIR</code> if <code class="language-plaintext highlighter-rouge">path</code> contained a directory component that wasn’t a directory.</p>

<p><a href="https://redbean.dev/#unix.close">unix.close</a>(fd:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Closes file descriptor. 
This function should never be called twice for the same file descriptor, regardless of whether or not an error happened. The file descriptor is always gone after close is called. So it technically always succeeds, but that doesn’t mean an error should be ignored. For example, on NFS a close failure could indicate data loss.</p>

<p>Closing does not mean that scheduled i/o operations have been completed. You’d need to use fsync() or fdatasync() beforehand to ensure that. You shouldn’t need to do that normally, because our close implementation guarantees a consistent view, since on systems where it isn’t guaranteed (like Windows) close will implicitly sync.</p>

<p>File descriptors are automatically closed on exit().</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> wasn’t valid.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EINTR</code> possibly maybe.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EIO</code> if an i/o error occurred.</p>

<p><a href="https://redbean.dev/#unix.read">unix.read</a>(fd:int[, bufsiz:str[, offset:int]])</p>

<p>├─→ data:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Reads from file descriptor. 
This function returns empty string on end of file. The exception is if <code class="language-plaintext highlighter-rouge">bufsiz</code> is zero, in which case an empty returned string means the file descriptor works.</p>

<p><a href="https://redbean.dev/#unix.write">unix.write</a>(fd:int, data:str[, offset:int])</p>

<p>├─→ wrotebytes:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Writes to file descriptor. <a href="https://redbean.dev/#unix.exit">unix.exit</a>([exitcode:int])</p>

<p>└─→ ⊥ Invokes <code class="language-plaintext highlighter-rouge">_Exit(exitcode)</code> on the process. This will immediately halt the current process. Memory will be freed. File descriptors will be closed. Any open connections it owns will be reset. This function never returns. <a href="https://redbean.dev/#unix.environ">unix.environ</a>()</p>

<p>└─→ {str,…}  Returns raw environment variables. 
This allocates and constructs the C/C++ <code class="language-plaintext highlighter-rouge">environ</code> variable as a Lua table consisting of string keys and string values.</p>

<p>This data structure preserves casing. On Windows NT, by convention, environment variable keys are treated in a case-insensitive way. It is the responsibility of the caller to consider this.</p>

<p>This data structure preserves valueless variables. It’s possible on both UNIX and Windows to have an environment variable without an equals, even though it’s unusual.</p>

<p>This data structure preserves duplicates. For example, on Windows, there’s some irregular uses of environment variables such as how the command prompt inserts multiple environment variables with empty string as keys, for its internal bookkeeping.</p>

<p><a href="https://redbean.dev/#unix.fork">unix.fork</a>()</p>

<p>├─┬─→ 0</p>

<p>│ └─→ childpid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates a new process mitosis style. 
This system call returns twice. The parent process gets the nonzero pid. The child gets zero.</p>

<p>Here’s a simple usage example of creating subprocesses, where we fork off a child worker from a main process hook callback to do some independent chores, such as sending an HTTP request back to redbean.</p>

<p>– as soon as server starts, make a fetch to the server
– then signal redbean to shutdown when fetch is complete
local onServerStart = function()
   if assert(unix.fork()) == 0 then
      local ok, headers, body = <a href="https://redbean.dev/#Fetch">Fetch</a>(‘http://127.0.0.1:8080/test’)
      unix.<a href="https://redbean.dev/#unix.kill">kill</a>(unix.<a href="https://redbean.dev/#unix.getppid">getppid</a>(), unix.<a href="https://redbean.dev/#unix.SIGTERM">SIGTERM</a>)
      unix.<a href="https://redbean.dev/#unix.exit">exit</a>(0)
   end
end
OnServerStart = onServerStart</p>

<p>We didn’t need to use wait() here, because (a) we want redbean to go back to what it was doing before as the Fetch() completes, and (b) redbean’s main process already has a zombie collector. However it’s a moot point, since once the fetch is done, the child process then asks redbean to gracefully shutdown by sending SIGTERM its parent.</p>

<p>This is actually a situation where we <em>must</em> use fork, because the purpose of the main redbean process is to call accept() and create workers. So if we programmed redbean to use the main process to send a blocking request to itself instead, then redbean would deadlock and never be able to accept() the client.</p>

<p>While deadlocking is an extreme example, the truth is that latency issues can crop up for the same reason that just cause jitter instead, and as such, can easily go unnoticed. For example, if you do something that takes longer than a few milliseconds from inside your redbean heartbeat, then that’s a few milliseconds in which redbean is no longer concurrent, and tail latency is being added to its ability to accept new connections. fork() does a great job at solving this.</p>

<p>If you’re not sure how long something will take, then when in doubt, fork off a process. You can then report its completion to something like SQLite. Redbean makes having lots of processes cheap. On Linux they’re about as lightweight as what heavyweight environments call greenlets. You can easily have 10,000 Redbean workers on one PC.</p>

<p>Here’s some benchmarks for fork() performance across platforms:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                     cycles      nanos  environ Linux 5.4 fork           97,200     31,395  [metal] FreeBSD 12 fork         236,089     78,841  [vmware] Darwin 20.6 fork        295,325     81,738  [metal] NetBSD 9 fork         5,832,027  1,947,899  [vmware] OpenBSD 6.8 fork     13,241,940  4,422,103  [vmware] Windows10 fork       18,802,239  6,360,271  [metal]
</code></pre></div></div>

<p>One of the benefits of using fork() is it creates an isolation barrier between the different parts of your app. This can lead to enhanced reliability and security. For example, redbean uses fork so it can wipe your ssl keys from memory before handing over control to request handlers that process untrusted input. It also ensures that if your Lua app crashes, it won’t take down the server as a whole. Hence it should come as no surprise that fork() would go slower on operating systems that have more security features. So depending on your use case, you can choose the operating system that suits you.</p>

<p><a href="https://redbean.dev/#unix.commandv">unix.commandv</a>(prog:str)</p>

<p>├─→ path:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Performs <code class="language-plaintext highlighter-rouge">$PATH</code> lookup of executable. unix = require ‘unix’
prog = assert(unix.<a href="https://redbean.dev/#unix.commandv">commandv</a>(‘ls’))
unix.<a href="https://redbean.dev/#unix.execve">execve</a>(prog, {prog, ‘-hal’, ‘.’}, {‘PATH=/bin’})
unix.<a href="https://redbean.dev/#unix.exit">exit</a>(127)</p>

<p>If <code class="language-plaintext highlighter-rouge">prog</code> is an absolute path, then it’s returned as-is. If <code class="language-plaintext highlighter-rouge">prog</code> contains slashes then it’s not path searched either and will be returned if it exists. On Windows, it’s recommended that you install programs from cosmos to c:/bin/ without any .exe or .com suffix, so they can be discovered like they would on UNIX. If you want to find a program like notepad on the $PATH using this function, then you need to specify “notepad.exe” so it includes the extension.</p>

<p><a href="https://redbean.dev/#unix.execve">unix.execve</a>(prog:str[, args:List&lt;<em>&gt;, env:List&lt;</em>&gt;])</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Exits current process, replacing it with a new instance of the specified program. <code class="language-plaintext highlighter-rouge">prog</code> needs to be an absolute path, see <a href="https://redbean.dev/#unix.commandv">commandv</a>(). <code class="language-plaintext highlighter-rouge">env</code> defaults to to the current <code class="language-plaintext highlighter-rouge">environ()</code>. Here’s a basic usage example: unix.<a href="https://redbean.dev/#unix.execve">execve</a>(‘/bin/ls’, {‘/bin/ls’, ‘-hal’}, {‘PATH=/bin’})
unix.<a href="https://redbean.dev/#unix.exit">exit</a>(127)</p>

<p><code class="language-plaintext highlighter-rouge">prog</code> needs to be the resolved pathname of your executable. You can use <a href="https://redbean.dev/#unix.commandv">commandv</a>() to search your <code class="language-plaintext highlighter-rouge">PATH</code>.</p>

<p><code class="language-plaintext highlighter-rouge">args</code> is a string list table. The first element in <code class="language-plaintext highlighter-rouge">args</code> should be <code class="language-plaintext highlighter-rouge">prog</code>. Values are coerced to strings. This parameter defaults to <code class="language-plaintext highlighter-rouge">{prog}</code>.</p>

<p><code class="language-plaintext highlighter-rouge">env</code> is a string list table. Values are coerced to strings. No ordering requirement is imposed. By convention, each string has its key and value separated by an equals sign without spaces. If this parameter is not specified, it’ll default to the C/C++ <code class="language-plaintext highlighter-rouge">environ</code> variable which is inherited from the shell that launched redbean. It’s the responsibility of the user to supply a sanitized environ when spawning untrusted processes.</p>

<p>execve() is normally called after <a href="https://redbean.dev/#unix.fork">fork</a>() returns 0. If that isn’t the case, then your redbean worker will be destroyed.</p>

<p>This function never returns on success.</p>

<p><code class="language-plaintext highlighter-rouge">unix.EAGAIN</code> is returned if you’ve enforced a max number of processes using <code class="language-plaintext highlighter-rouge">setrlimit(unix.RLIMIT_NPROC)</code>.</p>

<p><a href="https://redbean.dev/#unix.dup">unix.dup</a>(oldfd:int[, newfd:int[, flags:int[, lowest:int]]])</p>

<p>├─→ newfd:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Duplicates file descriptor. 
<code class="language-plaintext highlighter-rouge">newfd</code> may be specified to choose a specific number for the new file descriptor. If it’s already open, then the preexisting one will be silently closed. <code class="language-plaintext highlighter-rouge">EINVAL</code> is returned if <code class="language-plaintext highlighter-rouge">newfd</code> equals <code class="language-plaintext highlighter-rouge">oldfd</code>.</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> can have <code class="language-plaintext highlighter-rouge">unix.O_CLOEXEC</code> which means the returned file descriptors will be automatically closed upon <a href="https://redbean.dev/#unix.execve">execve</a>().</p>

<p><code class="language-plaintext highlighter-rouge">lowest</code> defaults to zero and defines the lowest numbered file descriptor that’s acceptable to use. If <code class="language-plaintext highlighter-rouge">newfd</code> is specified then <code class="language-plaintext highlighter-rouge">lowest</code> is ignored. For example, if you wanted to duplicate standard input, then:</p>

<p>stdin2 = assert(unix.dup(0, nil, unix.O_CLOEXEC, 3))</p>

<p>Will ensure that, in the rare event standard output or standard error are closed, you won’t accidentally duplicate standard input to those numbers.</p>

<p><a href="https://redbean.dev/#unix.pipe">unix.pipe</a>([flags:int])</p>

<p>├─→ reader:int, writer:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates fifo which enables communication between processes. 
<code class="language-plaintext highlighter-rouge">flags</code> can have any of</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_CLOEXEC</code>: Automatically close file descriptor upon <a href="https://redbean.dev/#unix.execve">execve</a>()</li>
  <li><code class="language-plaintext highlighter-rouge">O_NONBLOCK</code>: Request <code class="language-plaintext highlighter-rouge">EAGAIN</code> be raised rather than blocking</li>
  <li><code class="language-plaintext highlighter-rouge">O_DIRECT</code>: Enable packet mode w/ atomic reads and writes, so long as they’re no larger than <code class="language-plaintext highlighter-rouge">PIPE_BUF</code> (guaranteed to be 512+ bytes) with support limited to Linux, Windows NT, FreeBSD, and NetBSD.</li>
</ul>

<p>Returns two file descriptors: one for reading and one for writing.</p>

<p>Here’s an example of how <a href="https://redbean.dev/#unix.pipe">pipe</a>(), <a href="https://redbean.dev/#unix.fork">fork</a>(), <a href="https://redbean.dev/#unix.dup">dup</a>(), etc. may be used to serve an HTTP response containing the output of a subprocess.</p>

<p>local unix = require ‘unix’
ls = assert(unix.<a href="https://redbean.dev/#unix.commandv">commandv</a>(‘ls’))
reader, writer = assert(unix.<a href="https://redbean.dev/#unix.pipe">pipe</a>())
if assert(unix.<a href="https://redbean.dev/#unix.fork">fork</a>()) == 0 then
   unix.<a href="https://redbean.dev/#unix.close">close</a>(1)
   unix.<a href="https://redbean.dev/#unix.dup">dup</a>(writer)
   unix.<a href="https://redbean.dev/#unix.close">close</a>(writer)
   unix.<a href="https://redbean.dev/#unix.close">close</a>(reader)
   unix.<a href="https://redbean.dev/#unix.execve">execve</a>(ls, {ls, ‘-Shal’})
   unix.<a href="https://redbean.dev/#unix.exit">exit</a>(127)
else
   unix.<a href="https://redbean.dev/#unix.close">close</a>(writer)
   <a href="https://redbean.dev/#SetHeader">SetHeader</a>(‘Content-Type’, ‘text/plain’)
   while true do
      data, err = unix.<a href="https://redbean.dev/#unix.read">read</a>(reader)
      if data then
         if data ~= ‘’ then
            <a href="https://redbean.dev/#Write">Write</a>(data)
         else
            break
         end
      elseif err:<a href="https://redbean.dev/#unix.Errno:errno">errno</a>() ~= <a href="https://redbean.dev/#unix.EINTR">EINTR</a> then
         <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogWarn">kLogWarn</a>, tostring(err))
         break
      end
   end
   assert(unix.<a href="https://redbean.dev/#unix.close">close</a>(reader))
   assert(unix.<a href="https://redbean.dev/#unix.wait">wait</a>())
end
<a href="https://redbean.dev/#unix.wait">unix.wait</a>([pid:int[, options:int]])</p>

<p>├─→ pid:int, wstatus:int, <a href="https://redbean.dev/#unix.Rusage">unix.Rusage</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Waits for subprocess to terminate. 
<code class="language-plaintext highlighter-rouge">pid</code> defaults to <code class="language-plaintext highlighter-rouge">-1</code> which means any child process. Setting <code class="language-plaintext highlighter-rouge">pid</code> to <code class="language-plaintext highlighter-rouge">0</code> is equivalent to <code class="language-plaintext highlighter-rouge">-getpid()</code>. If <code class="language-plaintext highlighter-rouge">pid &lt; -1</code> then that means wait for any pid in the process group <code class="language-plaintext highlighter-rouge">-pid</code>. Then lastly if <code class="language-plaintext highlighter-rouge">pid &gt; 0</code> then this waits for a specific process id</p>

<p>Options may have <code class="language-plaintext highlighter-rouge">WNOHANG</code> which means don’t block, check for the existence of processes that are already dead (technically speaking zombies) and if so harvest them immediately.</p>

<p>Returns the process id of the child that terminated. In other cases, the returned <code class="language-plaintext highlighter-rouge">pid</code> is nil and <code class="language-plaintext highlighter-rouge">errno</code> is non-nil.</p>

<p>The returned <code class="language-plaintext highlighter-rouge">wstatus</code> contains information about the process exit status. It’s a complicated integer and there’s functions that can help interpret it. For example:</p>

<p>– wait for zombies
– traditional technique for <a href="https://redbean.dev/#unix.SIGCHLD">SIGCHLD</a> handlers
while true do
   pid, status = unix.<a href="https://redbean.dev/#unix.wait">wait</a>(-1, unix.WNOHANG)
   if pid then
      if unix.<a href="https://redbean.dev/#unix.WIFEXITED">WIFEXITED</a>(status) then
         print(‘child’, pid, ‘exited with’,
               unix.<a href="https://redbean.dev/#unix.WEXITSTATUS">WEXITSTATUS</a>(status))
      elseif unix.<a href="https://redbean.dev/#unix.WIFSIGNALED">WIFSIGNALED</a>(status) then
         print(‘child’, pid, ‘crashed with’,
               unix.<a href="https://redbean.dev/#unix.strsignal">strsignal</a>(unix.<a href="https://redbean.dev/#unix.WTERMSIG">WTERMSIG</a>(status)))
      end
   elseif status:<a href="https://redbean.dev/#unix.Errno:errno">errno</a>() == unix.ECHILD then
      <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogDebug">kLogDebug</a>, ‘no more zombies’)
      break
   else
      <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogWarn">kLogWarn</a>, <a href="https://redbean.dev/#unix.Errno:__tostring">tostring</a>(status))
      break
   end
end
<a href="https://redbean.dev/#unix.WIFEXITED">unix.WIFEXITED</a>(wstatus:int)</p>

<p>└─→ bool  Returns true if process exited cleanly. <a href="https://redbean.dev/#unix.WEXITSTATUS">unix.WEXITSTATUS</a>(wstatus:int)</p>

<p>└─→ exitcode:uint8  Returns code passed to <code class="language-plaintext highlighter-rouge">exit()</code> assuming <code class="language-plaintext highlighter-rouge">WIFEXITED(wstatus)</code> is true. <a href="https://redbean.dev/#unix.WIFSIGNALED">unix.WIFSIGNALED</a>(wstatus:int)</p>

<p>└─→ bool  Returns true if process terminated due to a signal. <a href="https://redbean.dev/#unix.WTERMSIG">unix.WTERMSIG</a>(wstatus:int)</p>

<p>└─→ sig:uint8  Returns signal that caused process to terminate assuming <code class="language-plaintext highlighter-rouge">WIFSIGNALED(wstatus)</code> is true. <a href="https://redbean.dev/#unix.getpid">unix.getpid</a>()</p>

<p>└─→ pid:int  Returns process id of current process. 
This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.getppid">unix.getppid</a>()</p>

<p>└─→ pid:int  Returns process id of parent process. 
This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.kill">unix.kill</a>(pid:int, sig:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sends signal to process(es). 
The impact of this action can be terminating the process, or interrupting it to request something happen.</p>

<p><code class="language-plaintext highlighter-rouge">pid</code> can be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pid &gt; 0</code> signals one process by id</li>
  <li><code class="language-plaintext highlighter-rouge">== 0</code> signals all processes in current process group</li>
  <li><code class="language-plaintext highlighter-rouge">-1</code> signals all processes possible (except init)</li>
  <li><code class="language-plaintext highlighter-rouge">&lt; -1</code> signals all processes in -pid process group</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">sig</code> can be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code> checks both if pid exists and we can signal it</li>
  <li><code class="language-plaintext highlighter-rouge">SIGINT</code> sends ctrl-c keyboard interrupt</li>
  <li><code class="language-plaintext highlighter-rouge">SIGQUIT</code> sends backtrace and exit signal</li>
  <li><code class="language-plaintext highlighter-rouge">SIGTERM</code> sends shutdown signal</li>
  <li>etc.</li>
</ul>

<p>Windows NT only supports the kill() signals required by the ANSI C89 standard, which are <code class="language-plaintext highlighter-rouge">SIGINT</code> and <code class="language-plaintext highlighter-rouge">SIGQUIT</code>. All other signals on the Windows platform that are sent to another process via kill() will be treated like <code class="language-plaintext highlighter-rouge">SIGKILL</code>.</p>

<p><a href="https://redbean.dev/#unix.raise">unix.raise</a>(sig:int)</p>

<p>├─→ rc:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Triggers signal in current process. 
This is pretty much the same as <code class="language-plaintext highlighter-rouge">kill(getpid(), sig)</code>.</p>

<p><a href="https://redbean.dev/#unix.access">unix.access</a>(path:str, how:int[, flags:int[, dirfd:int]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Checks if effective user of current process has permission to access file. <code class="language-plaintext highlighter-rouge">how</code> can be <code class="language-plaintext highlighter-rouge">R_OK</code>, <code class="language-plaintext highlighter-rouge">W_OK</code>, <code class="language-plaintext highlighter-rouge">X_OK</code>, or <code class="language-plaintext highlighter-rouge">F_OK</code> to check for read, write, execute, and existence respectively. 
<code class="language-plaintext highlighter-rouge">flags</code> may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AT_SYMLINK_NOFOLLOW</code>: do not follow symbolic links.</li>
</ul>

<p><a href="https://redbean.dev/#unix.mkdir">unix.mkdir</a>(path:str[, mode:int[, dirfd:int]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Makes directory. 
<code class="language-plaintext highlighter-rouge">path</code> is the path of the directory you wish to create.</p>

<p><code class="language-plaintext highlighter-rouge">mode</code> is octal permission bits, e.g. <code class="language-plaintext highlighter-rouge">0755</code>.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">EEXIST</code> if <code class="language-plaintext highlighter-rouge">path</code> already exists, whether it be a directory or a file.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">ENOENT</code> if the parent directory of the directory you want to create doesn’t exist. For making <code class="language-plaintext highlighter-rouge">a/really/long/path/</code> consider using <a href="https://redbean.dev/#unix.makedirs">makedirs</a>() instead.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">ENOTDIR</code> if a parent directory component existed that wasn’t a directory.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">EACCES</code> if the parent directory doesn’t grant write permission to the current user.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">ENAMETOOLONG</code> if the path is too long.</p>

<p><a href="https://redbean.dev/#unix.makedirs">unix.makedirs</a>(path:str[, mode:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Makes directories. 
Unlike <a href="https://redbean.dev/#unix.mkdir">mkdir</a>() this convenience wrapper will automatically create parent parent directories as needed. If the directory already exists then, unlike mkdir() which returns <a href="https://redbean.dev/#unix.EEXIST">EEXIST</a>, the makedirs() function will return success.</p>

<p><code class="language-plaintext highlighter-rouge">path</code> is the path of the directory you wish to create.</p>

<p><code class="language-plaintext highlighter-rouge">mode</code> is octal permission bits, e.g. <code class="language-plaintext highlighter-rouge">0755</code>.</p>

<p><a href="https://redbean.dev/#unix.chdir">unix.chdir</a>(path:str)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes current directory to <code class="language-plaintext highlighter-rouge">path</code>. <a href="https://redbean.dev/#unix.unlink">unix.unlink</a>(path:str[, dirfd:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Removes file at <code class="language-plaintext highlighter-rouge">path</code>. 
If <code class="language-plaintext highlighter-rouge">path</code> refers to a symbolic link, the link is removed.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EISDIR</code> if <code class="language-plaintext highlighter-rouge">path</code> refers to a directory. See rmdir().</p>

<p><a href="https://redbean.dev/#unix.rmdir">unix.rmdir</a>(path:str[, dirfd:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Removes empty directory at <code class="language-plaintext highlighter-rouge">path</code>. 
Returns <code class="language-plaintext highlighter-rouge">ENOTDIR</code> if <code class="language-plaintext highlighter-rouge">path</code> isn’t a directory, or a path component in <code class="language-plaintext highlighter-rouge">path</code> exists yet wasn’t a directory.</p>

<p><a href="https://redbean.dev/#unix.rename">unix.rename</a>(oldpath:str, newpath:str[, olddirfd:int, newdirfd:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Renames file or directory. <a href="https://redbean.dev/#unix.link">unix.link</a>(existingpath:str, newpath:str[, flags:int[, olddirfd, newdirfd]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates hard link, so your underlying inode has two names. <a href="https://redbean.dev/#unix.symlink">unix.symlink</a>(target:str, linkpath:str[, newdirfd:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates symbolic link. 
On Windows NT a symbolic link is called a “reparse point” and can only be created from an administrator account. Your redbean will automatically request the appropriate permissions.</p>

<p><a href="https://redbean.dev/#unix.readlink">unix.readlink</a>(path:str[, dirfd:int])</p>

<p>├─→ content:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Reads contents of symbolic link. 
Note that broken links are supported on all platforms. A symbolic link can contain just about anything. It’s important to not assume that <code class="language-plaintext highlighter-rouge">content</code> will be a valid filename.</p>

<p>On Windows NT, this function transliterates <code class="language-plaintext highlighter-rouge">\</code> to <code class="language-plaintext highlighter-rouge">/</code> and furthermore prefixes <code class="language-plaintext highlighter-rouge">//?/</code> to WIN32 DOS-style absolute paths, thereby assisting with simple absolute filename checks in addition to enabling one to exceed the traditional 260 character limit.</p>

<p><a href="https://redbean.dev/#unix.rmrf">unix.rmrf</a>(path:str)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Recursively removes filesystem path. 
Like unix.makedirs() this function isn’t actually a system call but rather is a Libc convenience wrapper. It’s intended to be equivalent to using the UNIX shell’s <code class="language-plaintext highlighter-rouge">rm -rf path</code> command.</p>

<p><code class="language-plaintext highlighter-rouge">path</code> is the file or directory path you wish to destroy.</p>

<p><a href="https://redbean.dev/#unix.realpath">unix.realpath</a>(path:str)</p>

<p>├─→ path:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns absolute path of filename, with <code class="language-plaintext highlighter-rouge">.</code> and <code class="language-plaintext highlighter-rouge">..</code> components removed, and symlinks will be resolved. <a href="https://redbean.dev/#unix.utimensat">unix.utimensat</a>(path[, asecs, ananos, msecs, mnanos[, dirfd[, flags]]])</p>

<p>├─→ 0</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes access and/or modified timestamps on file. 
<code class="language-plaintext highlighter-rouge">path</code> is a string with the name of the file.</p>

<p>The <code class="language-plaintext highlighter-rouge">asecs</code> and <code class="language-plaintext highlighter-rouge">ananos</code> parameters set the access time. If they’re none or nil, the current time will be used.</p>

<p>The <code class="language-plaintext highlighter-rouge">msecs</code> and <code class="language-plaintext highlighter-rouge">mnanos</code> parameters set the modified time. If they’re none or nil, the current time will be used.</p>

<p>The nanosecond parameters (<code class="language-plaintext highlighter-rouge">ananos</code> and <code class="language-plaintext highlighter-rouge">mnanos</code>) must be on the interval [0,1000000000) or <code class="language-plaintext highlighter-rouge">unix.EINVAL</code> is raised. On XNU this is truncated to microsecond precision. On Windows NT, it’s truncated to hectonanosecond precision. These nanosecond parameters may also be set to one of the following special values:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.UTIME_NOW</code>: Fill this timestamp with current time. This feature is not available on old versions of Linux, e.g. RHEL5.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.UTIME_OMIT</code>: Do not alter this timestamp. This feature is not available on old versions of Linux, e.g. RHEL5.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">dirfd</code> is a file descriptor integer opened with <code class="language-plaintext highlighter-rouge">O_DIRECTORY</code> that’s used for relative path names. It defaults to <code class="language-plaintext highlighter-rouge">unix.AT_FDCWD</code>.</p>

<p><code class="language-plaintext highlighter-rouge">flags</code> may have have any of the following flags bitwise or’d</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AT_SYMLINK_NOFOLLOW</code>: Do not follow symbolic links. This makes it possible to edit the timestamps on the symbolic link itself, rather than the file it points to.</li>
</ul>

<p><a href="https://redbean.dev/#unix.futimens">unix.futimens</a>(fd:int[, asecs, ananos, msecs, mnanos])</p>

<p>├─→ 0</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes access and/or modified timestamps on file descriptor. 
<code class="language-plaintext highlighter-rouge">fd</code> is the file descriptor of a file opened with <code class="language-plaintext highlighter-rouge">unix.open</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">asecs</code> and <code class="language-plaintext highlighter-rouge">ananos</code> parameters set the access time. If they’re none or nil, the current time will be used.</p>

<p>The <code class="language-plaintext highlighter-rouge">msecs</code> and <code class="language-plaintext highlighter-rouge">mnanos</code> parameters set the modified time. If they’re none or nil, the current time will be used.</p>

<p>The nanosecond parameters (<code class="language-plaintext highlighter-rouge">ananos</code> and <code class="language-plaintext highlighter-rouge">mnanos</code>) must be on the interval [0,1000000000) or <code class="language-plaintext highlighter-rouge">unix.EINVAL</code> is raised. On XNU this is truncated to microsecond precision. On Windows NT, it’s truncated to hectonanosecond precision. These nanosecond parameters may also be set to one of the following special values:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.UTIME_NOW</code>: Fill this timestamp with current time.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.UTIME_OMIT</code>: Do not alter this timestamp.</li>
</ul>

<p>This system call is currently not available on very old versions of Linux, e.g. RHEL5.</p>

<p><a href="https://redbean.dev/#unix.chown">unix.chown</a>(path:str, uid:int, gid:int[, flags:int[, dirfd:int]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes user and group on file. 
Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT.</p>

<p><a href="https://redbean.dev/#unix.chmod">unix.chmod</a>(path:str, mode:int[, flags:int[, dirfd:int]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes mode bits on file. 
On Windows NT the chmod system call only changes the read-only status of a file.</p>

<p><a href="https://redbean.dev/#unix.getcwd">unix.getcwd</a>()</p>

<p>├─→ path:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns current working directory. 
On Windows NT, this function transliterates <code class="language-plaintext highlighter-rouge">\</code> to <code class="language-plaintext highlighter-rouge">/</code> and furthermore prefixes <code class="language-plaintext highlighter-rouge">//?/</code> to WIN32 DOS-style absolute paths, thereby assisting with simple absolute filename checks in addition to enabling one to exceed the traditional 260 character limit.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_GETFD">unix.fcntl</a>(fd:int, unix.F_GETFD)</p>

<p>├─→ flags:int</p>

<p>└─→ nil, unix.Errno  Returns file descriptor flags. 
The returned <code class="language-plaintext highlighter-rouge">flags</code> may include any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.FD_CLOEXEC</code> if <code class="language-plaintext highlighter-rouge">fd</code> was opened with <code class="language-plaintext highlighter-rouge">unix.O_CLOEXEC</code>.</li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t open.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_SETFD">unix.fcntl</a>(fd:int, unix.F_SETFD, flags:int)</p>

<p>├─→ true</p>

<p>└─→ nil, unix.Errno  Sets file descriptor flags. 
<code class="language-plaintext highlighter-rouge">flags</code> may include any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.FD_CLOEXEC</code> to re-open <code class="language-plaintext highlighter-rouge">fd</code> with <code class="language-plaintext highlighter-rouge">unix.O_CLOEXEC</code>.</li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t open.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_GETFL">unix.fcntl</a>(fd:int, unix.F_GETFL)</p>

<p>├─→ flags:int</p>

<p>└─→ nil, unix.Errno  Returns file descriptor status flags. 
<code class="language-plaintext highlighter-rouge">flags &amp; unix.O_ACCMODE</code> includes one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_RDONLY</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_WRONLY</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_RDWR</code></li>
</ul>

<p>Examples of values <code class="language-plaintext highlighter-rouge">flags &amp; ~unix.O_ACCMODE</code> may include:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_NONBLOCK</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_APPEND</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_SYNC</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_ASYNC</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_NOATIME</code> on Linux</li>
  <li><code class="language-plaintext highlighter-rouge">O_RANDOM</code> on Windows</li>
  <li><code class="language-plaintext highlighter-rouge">O_SEQUENTIAL</code> on Windows</li>
  <li><code class="language-plaintext highlighter-rouge">O_DIRECT</code> on Linux/FreeBSD/NetBSD/Windows</li>
</ul>

<p>Examples of values <code class="language-plaintext highlighter-rouge">flags &amp; ~unix.O_ACCMODE</code> won’t include:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_CREAT</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_TRUNC</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_EXCL</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_NOCTTY</code></li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t open.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_SETFL">unix.fcntl</a>(fd:int, unix.F_SETFL, flags:int)</p>

<p>├─→ true</p>

<p>└─→ nil, unix.Errno  Changes file descriptor status flags. 
Examples of values <code class="language-plaintext highlighter-rouge">flags</code> may include:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_NONBLOCK</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_APPEND</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_SYNC</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_ASYNC</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_NOATIME</code> on Linux</li>
  <li><code class="language-plaintext highlighter-rouge">O_RANDOM</code> on Windows</li>
  <li><code class="language-plaintext highlighter-rouge">O_SEQUENTIAL</code> on Windows</li>
  <li><code class="language-plaintext highlighter-rouge">O_DIRECT</code> on Linux/FreeBSD/NetBSD/Windows</li>
</ul>

<p>These values should be ignored:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">O_RDONLY</code>, <code class="language-plaintext highlighter-rouge">O_WRONLY</code>, <code class="language-plaintext highlighter-rouge">O_RDWR</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_CREAT</code>, <code class="language-plaintext highlighter-rouge">O_TRUNC</code>, <code class="language-plaintext highlighter-rouge">O_EXCL</code></li>
  <li><code class="language-plaintext highlighter-rouge">O_NOCTTY</code></li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t open.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_SETLK">unix.fcntl</a>(fd:int, unix.F_SETLK[, type[, start[, len[, whence]]]]) <a href="https://redbean.dev/#unix.fcntl.F_SETLKW">unix.fcntl</a>(fd:int, unix.F_SETLKW[, type[, start[, len[, whence]]]])</p>

<p>├─→ true</p>

<p>└─→ nil, unix.Errno  Acquires lock on file interval. 
POSIX Advisory Locks allow multiple processes to leave voluntary hints to each other about which portions of a file they’re using.</p>

<p>The command may be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">F_SETLK</code> to acquire lock if possible</li>
  <li><code class="language-plaintext highlighter-rouge">F_SETLKW</code> to wait for lock if necessary</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">fd</code> is file descriptor of open() file.</p>

<p><code class="language-plaintext highlighter-rouge">type</code> may be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">F_RDLCK</code> for read lock (default)</li>
  <li><code class="language-plaintext highlighter-rouge">F_WRLCK</code> for read/write lock</li>
  <li><code class="language-plaintext highlighter-rouge">F_UNLCK</code> to unlock</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">start</code> is 0-indexed byte offset into file. The default is zero.</p>

<p><code class="language-plaintext highlighter-rouge">len</code> is byte length of interval. Zero is the default and it means until the end of the file.</p>

<p><code class="language-plaintext highlighter-rouge">whence</code> may be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SEEK_SET</code> start from beginning (default)</li>
  <li><code class="language-plaintext highlighter-rouge">SEEK_CUR</code> start from current position</li>
  <li><code class="language-plaintext highlighter-rouge">SEEK_END</code> start from end</li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EAGAIN</code> if lock couldn’t be acquired. POSIX says this theoretically could also be <code class="language-plaintext highlighter-rouge">EACCES</code> but we haven’t seen this behavior on any of our supported platforms.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> wasn’t open.</p>

<p><a href="https://redbean.dev/#unix.fcntl.F_GETLK">unix.fcntl</a>(fd:int, unix.F_GETLK[, type[, start[, len[, whence]]]])</p>

<p>├─→ unix.F_UNLCK</p>

<p>├─→ type, start, len, whence, pid</p>

<p>└─→ nil, unix.Errno  Acquires information about POSIX advisory lock on file. 
This function accepts the same parameters as fcntl(F_SETLK) and tells you if the lock acquisition would be successful for a given range of bytes. If locking would have succeeded, then F_UNLCK is returned. If the lock would not have succeeded, then information about a conflicting lock is returned.</p>

<p>Returned <code class="language-plaintext highlighter-rouge">type</code> may be <code class="language-plaintext highlighter-rouge">F_RDLCK</code> or <code class="language-plaintext highlighter-rouge">F_WRLCK</code>.</p>

<p>Returned <code class="language-plaintext highlighter-rouge">pid</code> is the process id of the current lock owner.</p>

<p>This function is currently not supported on Windows.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> wasn’t open.</p>

<p><a href="https://redbean.dev/#unix.getsid">unix.getsid</a>(pid:int)</p>

<p>├─→ sid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets session id. <a href="https://redbean.dev/#unix.getpgrp">unix.getpgrp</a>()</p>

<p>├─→ pgid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets process group id. <a href="https://redbean.dev/#unix.setpgrp">unix.setpgrp</a>()</p>

<p>├─→ pgid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets process group id. This is the same as <code class="language-plaintext highlighter-rouge">setpgid(0,0)</code>. <a href="https://redbean.dev/#unix.setpgid">unix.setpgid</a>(pid:int, pgid:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets process group id the modern way. <a href="https://redbean.dev/#unix.getpgid">unix.getpgid</a>(pid:int)</p>

<p>├─→ pgid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets process group id the modern way. <a href="https://redbean.dev/#unix.setsid">unix.setsid</a>()</p>

<p>├─→ sid:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets session id. 
This function can be used to create daemons.</p>

<p>Fails with <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT.</p>

<p><a href="https://redbean.dev/#unix.getuid">unix.getuid</a>()</p>

<p>└─→ uid:int  Gets real user id. 
On Windows this system call is polyfilled by running GetUserNameW() through Knuth’s multiplicative hash.</p>

<p>This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.getgid">unix.getgid</a>()</p>

<p>└─→ gid:int  Sets real group id. 
On Windows this system call is polyfilled as getuid().</p>

<p>This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.geteuid">unix.geteuid</a>()</p>

<p>└─→ uid:int  Gets effective user id. 
For example, if your redbean is a setuid binary, then getuid() will return the uid of the user running the program, and geteuid() shall return zero which means root, assuming that’s the file owning user.</p>

<p>On Windows this system call is polyfilled as getuid().</p>

<p>This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.getegid">unix.getegid</a>()</p>

<p>└─→ gid:int  Gets effective group id. 
On Windows this system call is polyfilled as getuid().</p>

<p>This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.chroot">unix.chroot</a>(path:str)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes root directory. 
Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT.</p>

<p><a href="https://redbean.dev/#unix.setuid">unix.setuid</a>(uid:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets user id. 
One use case for this function is dropping root privileges. Should you ever choose to run redbean as root and decide not to use the <code class="language-plaintext highlighter-rouge">-G</code> and <code class="language-plaintext highlighter-rouge">-U</code> flags, you can replicate that behavior in the Lua processes you spawn as follows:</p>

<p>ok, err = unix.<a href="https://redbean.dev/#unix.setgid">setgid</a>(1000)  – check your /etc/groups
if not ok then <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogFatal">kLogFatal</a>, tostring(err)) end
ok, err = unix.<a href="https://redbean.dev/#unix.setuid">setuid</a>(1000)  – check your /etc/passwd
if not ok then <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogFatal">kLogFatal</a>, tostring(err)) end</p>

<p>If your goal is to relinquish privileges because redbean is a setuid binary, then things are more straightforward:</p>

<p>ok, err = unix.<a href="https://redbean.dev/#unix.setgid">setgid</a>(unix.<a href="https://redbean.dev/#unix.getgid">getgid</a>())
if not ok then <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogFatal">kLogFatal</a>, tostring(err)) end
ok, err = unix.<a href="https://redbean.dev/#unix.setuid">setuid</a>(unix.<a href="https://redbean.dev/#unix.getuid">getuid</a>())
if not ok then <a href="https://redbean.dev/#Log">Log</a>(<a href="https://redbean.dev/#kLogFatal">kLogFatal</a>, tostring(err)) end</p>

<p>See also the setresuid() function and be sure to refer to your local system manual about the subtleties of changing user id in a way that isn’t restorable.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT if <code class="language-plaintext highlighter-rouge">uid</code> isn’t <code class="language-plaintext highlighter-rouge">getuid()</code>.</p>

<p><a href="https://redbean.dev/#unix.setgid">unix.setgid</a>(gid:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets group id. 
Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT if <code class="language-plaintext highlighter-rouge">gid</code> isn’t <code class="language-plaintext highlighter-rouge">getgid()</code>.</p>

<p><a href="https://redbean.dev/#unix.setresuid">unix.setresuid</a>(real:int, effective:int, saved:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets real, effective, and saved user ids. 
If any of the above parameters are -1, then it’s a no-op.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT. Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Macintosh and NetBSD if <code class="language-plaintext highlighter-rouge">saved</code> isn’t -1.</p>

<p><a href="https://redbean.dev/#unix.setresgid">unix.setresgid</a>(real:int, effective:int, saved:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sets real, effective, and saved group ids. 
If any of the above parameters are -1, then it’s a no-op.</p>

<p>Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Windows NT. Returns <code class="language-plaintext highlighter-rouge">ENOSYS</code> on Macintosh and NetBSD if <code class="language-plaintext highlighter-rouge">saved</code> isn’t -1.</p>

<p><a href="https://redbean.dev/#unix.umask">unix.umask</a>(newmask:int)</p>

<p>└─→ oldmask:int  Sets file permission mask and returns the old one. 
This is used to remove bits from the <code class="language-plaintext highlighter-rouge">mode</code> parameter of functions like <a href="https://redbean.dev/#unix.open">open</a>() and <a href="https://redbean.dev/#unix.mkdir">mkdir</a>(). The masks typically used are 027 and 022. Those masks ensure that, even if a file is created with 0666 bits, it’ll be turned into 0640 or 0644 so that users other than the owner can’t modify it.</p>

<p>To read the mask without changing it, try doing this:</p>

<p>mask = unix.<a href="https://redbean.dev/#unix.umask">umask</a>(027)
unix.<a href="https://redbean.dev/#unix.umask">umask</a>(mask)</p>

<p>On Windows NT this is a no-op and <code class="language-plaintext highlighter-rouge">mask</code> is returned.</p>

<p>This function does not fail.</p>

<p><a href="https://redbean.dev/#unix.syslog">unix.syslog</a>(priority:int, msg:str)  Generates a log message, which will be distributed by syslogd. 
<code class="language-plaintext highlighter-rouge">priority</code> is a bitmask containing the facility value and the level value. If no facility value is ORed into priority, then the default value set by openlog() is used. If set to NULL, the program name is used. Level is one of <code class="language-plaintext highlighter-rouge">LOG_EMERG</code>, <code class="language-plaintext highlighter-rouge">LOG_ALERT</code>, <code class="language-plaintext highlighter-rouge">LOG_CRIT</code>, <code class="language-plaintext highlighter-rouge">LOG_ERR</code>, <code class="language-plaintext highlighter-rouge">LOG_WARNING</code>, <code class="language-plaintext highlighter-rouge">LOG_NOTICE</code>, <code class="language-plaintext highlighter-rouge">LOG_INFO</code>, <code class="language-plaintext highlighter-rouge">LOG_DEBUG</code>.</p>

<p>This function currently works on Linux, Windows, and NetBSD. On WIN32 it uses the ReportEvent() facility.</p>

<p><a href="https://redbean.dev/#unix.clock_gettime">unix.clock_gettime</a>([clock:int])</p>

<p>├─→ seconds:int, nanos:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns nanosecond precision timestamp from system, e.g. &gt;: unix.clock_gettime()
1651137352      774458779</p>
<blockquote>
  <p>: Benchmark(unix.clock_gettime)
126     393     571     1</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">clock</code> can be any one of of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_REALTIME</code>: universally supported</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_REALTIME_FAST</code>: ditto but faster on freebsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_REALTIME_PRECISE</code>: ditto but better on freebsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_REALTIME_COARSE</code>: like <code class="language-plaintext highlighter-rouge">CLOCK_REALTIME_FAST</code> but needs Linux 2.6.32+</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC</code>: universally supported</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC_PRECISE</code>: ditto but faster on freebsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC_COARSE</code>: like <code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC_FAST</code> but needs Linux 2.6.32+</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC_RAW</code>: actually monotonic but needs Linux 2.6.28+</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_PROCESS_CPUTIME_ID</code>: linux and bsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_THREAD_CPUTIME_ID</code>: linux and bsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_PROF</code>: linux and netbsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_BOOTTIME</code>: linux and openbsd</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_REALTIME_ALARM</code>: linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_BOOTTIME_ALARM</code>: linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">CLOCK_TAI</code>: linux-only</li>
</ul>

<p>Returns <code class="language-plaintext highlighter-rouge">EINVAL</code> if clock isn’t supported on platform.</p>

<p>This function only fails if <code class="language-plaintext highlighter-rouge">clock</code> is invalid.</p>

<p>This function goes fastest on Linux and Windows.</p>

<p><a href="https://redbean.dev/#unix.nanosleep">unix.nanosleep</a>(seconds:int[, nanos:int])</p>

<p>├─→ remseconds:int, remnanos:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Sleeps with nanosecond precision. 
Returns <code class="language-plaintext highlighter-rouge">EINTR</code> if a signal was received while waiting.</p>

<p><a href="https://redbean.dev/#unix.sync">unix.sync</a>() <a href="https://redbean.dev/#unix.fsync">unix.fsync(fd:int)</a></p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a><a href="https://redbean.dev/#unix.fdatasync">unix.fdatasync(fd:int)</a></p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> These functions are used to make programs slower by asking the operating system to flush data to the physical medium. <a href="https://redbean.dev/#unix.lseek">unix.lseek</a>(fd:int, offset:int[, whence:int])</p>

<p>├─→ newposbytes:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Seeks to file position. 
<code class="language-plaintext highlighter-rouge">whence</code> can be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SEEK_SET</code>: Sets the file position to <code class="language-plaintext highlighter-rouge">offset</code></li>
  <li><code class="language-plaintext highlighter-rouge">SEEK_CUR</code>: Sets the file position to <code class="language-plaintext highlighter-rouge">position + offset</code></li>
  <li><code class="language-plaintext highlighter-rouge">SEEK_END</code>: Sets the file position to <code class="language-plaintext highlighter-rouge">filesize + offset</code></li>
</ul>

<p>Returns the new position relative to the start of the file.</p>

<p><a href="https://redbean.dev/#unix.truncate">unix.truncate</a>(path:str[, length:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Reduces or extends underlying physical medium of file. If file was originally larger, content &gt;length is lost. 
<code class="language-plaintext highlighter-rouge">length</code> defaults to zero.</p>

<p><a href="https://redbean.dev/#unix.ftruncate">unix.ftruncate</a>(fd:int[, length:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Reduces or extends underlying physical medium of open file. If file was originally larger, content &gt;length is lost. 
<code class="language-plaintext highlighter-rouge">length</code> defaults to zero.</p>

<p><a href="https://redbean.dev/#unix.socket">unix.socket</a>([family:int[, type:int[, protocol:int]]])</p>

<p>├─→ fd:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates socket endpoint for process communication. 
<code class="language-plaintext highlighter-rouge">family</code> defaults to <code class="language-plaintext highlighter-rouge">AF_INET</code> and can be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AF_UNIX</code></li>
  <li><code class="language-plaintext highlighter-rouge">AF_INET</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">type</code> defaults to <code class="language-plaintext highlighter-rouge">SOCK_STREAM</code> and can be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOCK_STREAM</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_DGRAM</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_RAW</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_RDM</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_SEQPACKET</code></li>
</ul>

<p>You may bitwise or any of the following into <code class="language-plaintext highlighter-rouge">type</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOCK_CLOEXEC</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_NONBLOCK</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">protocol</code> defaults to <code class="language-plaintext highlighter-rouge">IPPROTO_TCP</code> and can be:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">IPPROTO_IP</code></li>
  <li><code class="language-plaintext highlighter-rouge">IPPROTO_ICMP</code></li>
  <li><code class="language-plaintext highlighter-rouge">IPPROTO_TCP</code></li>
  <li><code class="language-plaintext highlighter-rouge">IPPROTO_UDP</code></li>
  <li><code class="language-plaintext highlighter-rouge">IPPROTO_RAW</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.socketpair">unix.socketpair</a>([family:int[, type:int[, protocol:int]]])</p>

<p>├─→ fd1:int, fd2:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Creates bidirectional pipe. 
<code class="language-plaintext highlighter-rouge">family</code> defaults to <code class="language-plaintext highlighter-rouge">AF_UNIX</code>.</p>

<p><code class="language-plaintext highlighter-rouge">type</code> defaults to <code class="language-plaintext highlighter-rouge">SOCK_STREAM</code> and can be:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOCK_STREAM</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_DGRAM</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_SEQPACKET</code></li>
</ul>

<p>You may bitwise or any of the following into <code class="language-plaintext highlighter-rouge">type</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOCK_CLOEXEC</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_NONBLOCK</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">protocol</code> defaults to <code class="language-plaintext highlighter-rouge">0</code>.</p>

<p><a href="https://redbean.dev/#unix.bind">unix.bind</a>(fd:int[, ip:uint32, port:uint16])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Binds socket. 
<code class="language-plaintext highlighter-rouge">ip</code> and <code class="language-plaintext highlighter-rouge">port</code> are in host endian order. For example, if you wanted to listen on <code class="language-plaintext highlighter-rouge">1.2.3.4:31337</code> you could do any of these</p>

<p>unix.bind(sock, 0x01020304, 31337)
unix.bind(sock, ParseIp(‘1.2.3.4’), 31337)
unix.bind(sock, 1 « 24 | 0 « 16 | 0 « 8 | 1, 31337)</p>

<p><code class="language-plaintext highlighter-rouge">ip</code> and <code class="language-plaintext highlighter-rouge">port</code> both default to zero. The meaning of bind(0, 0) is to listen on all interfaces with a kernel-assigned ephemeral port number, that can be retrieved and used as follows:</p>

<p>sock = assert(unix.socket())  – create ipv4 tcp socket
assert(unix.bind(sock))       – all interfaces ephemeral port
ip, port = assert(unix.getsockname(sock))
print(‘listening on ip’, FormatIp(ip), ‘port’, port)
assert(unix.listen(sock))
assert(unix.accept(sock))
while true do
   client, clientip, clientport = assert(unix.accept(sock))
   print(‘got client ip’, FormatIp(clientip), ‘port’, clientport)
   unix.<a href="https://redbean.dev/#unix.close">close</a>(client)
end</p>

<p>Further note that calling <code class="language-plaintext highlighter-rouge">unix.bind(sock)</code> is equivalent to not calling bind() at all, since the above behavior is the default.</p>

<p><a href="https://redbean.dev/#unix.siocgifconf">unix.siocgifconf</a>()</p>

<p>├─→ {{name:str, ip:uint32, netmask:uint32}, …}</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns list of network adapter addresses. <a href="https://redbean.dev/#unix.getsockopt">unix.getsockopt</a>(fd:int, level:int, optname:int) → … <a href="https://redbean.dev/#unix.setsockopt">unix.setsockopt</a>(fd:int, level:int, optname:int, …) → ok:bool, unix.Errno 
Tunes networking parameters.</p>

<p><code class="language-plaintext highlighter-rouge">level</code> and <code class="language-plaintext highlighter-rouge">optname</code> may be one of the following pairs. The ellipses type signature above changes depending on which options are used.</p>

<p><code class="language-plaintext highlighter-rouge">optname</code> is the option feature magic number. The constants for these will be set to <code class="language-plaintext highlighter-rouge">0</code> if the option isn’t supported on the host platform.</p>

<p>Raises <code class="language-plaintext highlighter-rouge">ENOPROTOOPT</code> if your <code class="language-plaintext highlighter-rouge">level</code> / <code class="language-plaintext highlighter-rouge">optname</code> combination isn’t valid, recognized, or supported on the host platform.</p>

<p>Raises <code class="language-plaintext highlighter-rouge">ENOTSOCK</code> if <code class="language-plaintext highlighter-rouge">fd</code> is valid but isn’t a socket.</p>

<p>Raises <code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t valid.</p>

<p>unix.getsockopt(fd:int, level:int, optname:int)
    ├─→ value:int
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a>
unix.setsockopt(fd:int, level:int, optname:int, value:bool)
    ├─→ true
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_TYPE</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_DEBUG</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_ACCEPTCONN</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_BROADCAST</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_REUSEADDR</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_REUSEPORT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_KEEPALIVE</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_DONTROUTE</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_NODELAY</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_CORK</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_QUICKACK</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_FASTOPEN_CONNECT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_DEFER_ACCEPT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_IP</code>, <code class="language-plaintext highlighter-rouge">IP_HDRINCL</code></li>
</ul>

<p>unix.getsockopt(fd:int, level:int, optname:int)
    ├─→ value:int
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a>
unix.setsockopt(fd:int, level:int, optname:int, value:int)
    ├─→ true
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_SNDBUF</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_RCVBUF</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_RCVLOWAT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_SNDLOWAT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_KEEPIDLE</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_KEEPINTVL</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_FASTOPEN</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_KEEPCNT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_MAXSEG</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_SYNCNT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_NOTSENT_LOWAT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_TCP</code>, <code class="language-plaintext highlighter-rouge">TCP_WINDOW_CLAMP</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_IP</code>, <code class="language-plaintext highlighter-rouge">IP_TOS</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_IP</code>, <code class="language-plaintext highlighter-rouge">IP_MTU</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOL_IP</code>, <code class="language-plaintext highlighter-rouge">IP_TTL</code></li>
</ul>

<p>unix.getsockopt(fd:int, level:int, optname:int)
    ├─→ secs:int, nsecs:int
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a>
unix.setsockopt(fd:int, level:int, optname:int, secs:int[, nanos:int])
    ├─→ true
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_RCVTIMEO</code>: If this option is specified then your stream socket will have a <a href="https://redbean.dev/#unix.read">read</a>() / <a href="https://redbean.dev/#unix.recv">recv</a>() timeout. If the specified interval elapses without receiving data, then <code class="language-plaintext highlighter-rouge">EAGAIN</code> shall be returned by read. If this option is used on listening sockets, it’ll be inherited by accepted sockets. Your redbean already does this for <a href="https://redbean.dev/#GetClientFd">GetClientFd</a>() based on the <code class="language-plaintext highlighter-rouge">-t</code> flag.</li>
  <li><code class="language-plaintext highlighter-rouge">SOL_SOCKET</code>, <code class="language-plaintext highlighter-rouge">SO_SNDTIMEO</code>: This is the same as <code class="language-plaintext highlighter-rouge">SO_RCVTIMEO</code> but it applies to the write() / send() functions.</li>
</ul>

<p>unix.getsockopt(fd:int, unix.SOL_SOCKET, unix.SO_LINGER)
    ├─→ seconds:int, enabled:bool
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a>
unix.setsockopt(fd:int, unix.SOL_SOCKET, unix.SO_LINGER, secs:int, enabled:bool)
    ├─→ true
    └─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a>
 This <code class="language-plaintext highlighter-rouge">SO_LINGER</code> parameter can be used to make close() a blocking call. Normally when the kernel returns immediately when it receives close(). Sometimes it’s desirable to have extra assurance on errors happened, even if it comes at the cost of performance. unix.setsockopt(serverfd:int, unix.SOL_TCP, unix.TCP_SAVE_SYN, enabled:int)
    ├─→ true
    └─→ nil, unix.Errno
unix.getsockopt(clientfd:int, unix.SOL_TCP, unix.TCP_SAVED_SYN)
    ├─→ syn_packet_bytes:str
    └─→ nil, unix.Errno</p>

<p>This <code class="language-plaintext highlighter-rouge">TCP_SAVED_SYN</code> option may be used to retrieve the bytes of the TCP SYN packet that the client sent when the connection for <code class="language-plaintext highlighter-rouge">fd</code> was opened. In order for this to work, <code class="language-plaintext highlighter-rouge">TCP_SAVE_SYN</code> must have been set earlier on the listening socket. This is Linux-only. You can use the <code class="language-plaintext highlighter-rouge">OnServerListen</code> hook to enable SYN saving in your Redbean. When the <code class="language-plaintext highlighter-rouge">TCP_SAVE_SYN</code> option isn’t used, this may return empty string.</p>

<p><a href="https://redbean.dev/#unix.poll">unix.poll</a>({[fd:int]=events:int, …}[, timeoutms:int[, mask:unix.Sigset]])</p>

<p>├─→ {[fd:int]=revents:int, …}</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Checks for events on a set of file descriptors. 
The table of file descriptors to poll uses sparse integer keys. Any pairs with non-integer keys will be ignored. Pairs with negative keys are ignored by poll(). The returned table will be a subset of the supplied file descriptors.</p>

<p><code class="language-plaintext highlighter-rouge">events</code> and <code class="language-plaintext highlighter-rouge">revents</code> may be any combination (using bitwise OR) of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">POLLIN</code> (events, revents): There is data to read.</li>
  <li><code class="language-plaintext highlighter-rouge">POLLOUT</code> (events, revents): Writing is now possible, although may still block if available space in a socket or pipe is exceeded (unless <code class="language-plaintext highlighter-rouge">O_NONBLOCK</code> is set).</li>
  <li><code class="language-plaintext highlighter-rouge">POLLPRI</code> (events, revents): There is some exceptional condition (for example, out-of-band data on a TCP socket).</li>
  <li><code class="language-plaintext highlighter-rouge">POLLRDHUP</code> (events, revents): Stream socket peer closed connection, or shut down writing half of connection.</li>
  <li><code class="language-plaintext highlighter-rouge">POLLERR</code> (revents): Some error condition.</li>
  <li><code class="language-plaintext highlighter-rouge">POLLHUP</code> (revents): Hang up. When reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.</li>
  <li><code class="language-plaintext highlighter-rouge">POLLNVAL</code> (revents): Invalid request.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">timeoutms</code> is the number of milliseconds to block. The default is -1 which means block indefinitely until there’s an event or an interrupt. If the timeout elapses without any such events, an empty table is returned. A timeout of zero means non-blocking. 
<code class="language-plaintext highlighter-rouge">mask</code> serves the purpose of enabling poll to listen for both file descriptor events and signals. It’s equivalent to saying:</p>

<p>oldmask = unix.sigprocmask(unix.SIG_SETMASK, mask);
unix.poll(fds, timeout);
unix.sigprocmask(unix.SIG_SETMASK, oldmask);</p>

<p>Except it’ll happen atomically on supported platforms. The only exceptions are MacOS and NetBSD where this behavior is simulated by the polyfill. Atomicity is helpful for unit testing signal behavior.</p>

<p><code class="language-plaintext highlighter-rouge">EINTR</code> is returned if the kernel decided to deliver a signal to a signal handler instead during your call. This is a @norestart system call that always returns <code class="language-plaintext highlighter-rouge">EINTR</code> even if <code class="language-plaintext highlighter-rouge">SA_RESTART</code> is in play.</p>

<p><a href="https://redbean.dev/#unix.gethostname">unix.gethostname</a>()</p>

<p>├─→ host:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns hostname of system. <a href="https://redbean.dev/#unix.listen">unix.listen</a>(fd:int[, backlog:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Begins listening for incoming connections on a socket. <a href="https://redbean.dev/#unix.accept">unix.accept</a>(serverfd:int[, flags:int])</p>

<p>├─→ clientfd:int, ip:uint32, port:uint16</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Accepts new client socket descriptor for a listening tcp socket. 
<code class="language-plaintext highlighter-rouge">flags</code> can have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOCK_CLOEXEC</code></li>
  <li><code class="language-plaintext highlighter-rouge">SOCK_NONBLOCK</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.connect">unix.connect</a>(fd:int, ip:uint32, port:uint16)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Connects a TCP socket to a remote host. 
With TCP this is a blocking operation. For a UDP socket it simply remembers the intended address so that send() or write() may be used rather than <a href="https://redbean.dev/#unix.sendto">sendto</a>().</p>

<p><a href="https://redbean.dev/#unix.getsockname">unix.getsockname</a>(fd:int)</p>

<p>├─→ ip:uint32, port:uint16</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Retrieves the local address of a socket. <a href="https://redbean.dev/#unix.getpeername">unix.getpeername</a>(fd:int)</p>

<p>├─→ ip:uint32, port:uint16</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Retrieves the remote address of a socket. <a href="https://redbean.dev/#unix.recv">unix.recv</a>(fd:int[, bufsiz:int[, flags:int]])</p>

<p>├─→ data:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Receives message from a socket. 
<code class="language-plaintext highlighter-rouge">flags</code> can have:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MSG_WAITALL</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_DONTROUTE</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_PEEK</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_OOB</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.recvfrom">unix.recvfrom</a>(fd:int[, bufsiz:int[, flags:int]])</p>

<p>├─→ data:str, ip:uint32, port:uint16</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Receives message from a socket. 
<code class="language-plaintext highlighter-rouge">flags</code> can have:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MSG_WAITALL</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_DONTROUTE</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_PEEK</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_OOB</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.send">unix.send</a>(fd:int, data:str[, flags:int])</p>

<p>├─→ sent:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> This is the same as <code class="language-plaintext highlighter-rouge">write</code> except it has a <code class="language-plaintext highlighter-rouge">flags</code> argument that’s intended for sockets. 
<code class="language-plaintext highlighter-rouge">flags</code> may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MSG_OOB</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_DONTROUTE</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_NOSIGNAL</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.sendto">unix.sendto</a>(fd:int, data:str, ip:uint32, port:uint16[, flags:int])</p>

<p>├─→ sent:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> This is useful for sending messages over UDP sockets to specific addresses. 
<code class="language-plaintext highlighter-rouge">flags</code> may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MSG_OOB</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_DONTROUTE</code></li>
  <li><code class="language-plaintext highlighter-rouge">MSG_NOSIGNAL</code></li>
</ul>

<p><a href="https://redbean.dev/#unix.shutdown">unix.shutdown</a>(fd:int, how:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Partially closes socket. 
<code class="language-plaintext highlighter-rouge">how</code> is set to one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SHUT_RD</code>: sends a tcp half close for reading</li>
  <li><code class="language-plaintext highlighter-rouge">SHUT_WR</code>: sends a tcp half close for writing</li>
  <li><code class="language-plaintext highlighter-rouge">SHUT_RDWR</code></li>
</ul>

<p>This system call currently has issues on Macintosh, so portable code should log rather than assert failures reported by shutdown().</p>

<p><a href="https://redbean.dev/#unix.sigprocmask">unix.sigprocmask</a>(how:int, newmask:<a href="https://redbean.dev/#unix.Sigset">Sigset</a>)</p>

<p>├─→ oldmask:<a href="https://redbean.dev/#unix.Sigset">unix.Sigset</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Manipulates bitset of signals blocked by process. 
<code class="language-plaintext highlighter-rouge">how</code> can be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SIG_BLOCK</code>: bitwise ors <code class="language-plaintext highlighter-rouge">mask</code> into set of blocked signals</li>
  <li><code class="language-plaintext highlighter-rouge">SIG_UNBLOCK</code>: removes bits in <code class="language-plaintext highlighter-rouge">mask</code> from set of blocked signals</li>
  <li><code class="language-plaintext highlighter-rouge">SIG_SETMASK</code>: replaces process signal mask with <code class="language-plaintext highlighter-rouge">mask</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">mask</code> is a <a href="https://redbean.dev/#unix.Sigset">unix.Sigset</a>() object (see section below).</p>

<p>For example, to temporarily block <code class="language-plaintext highlighter-rouge">SIGTERM</code> and <code class="language-plaintext highlighter-rouge">SIGINT</code> so critical work won’t be interrupted, sigprocmask() can be used as follows:</p>

<p>newmask = unix.<a href="https://redbean.dev/#unix.Sigset">Sigset</a>(unix.<a href="https://redbean.dev/#unix.SIGTERM">SIGTERM</a>)
oldmask = assert(unix.sigprocmask(unix.SIG_BLOCK, newmask))
– do something…
assert(unix.sigprocmask(unix.SIG_SETMASK, oldmask))
<a href="https://redbean.dev/#unix.sigaction">unix.sigaction</a>(sig:int[, handler:func|int[, flags:int[, mask:<a href="https://redbean.dev/#unix.Sigset">Sigset</a>]]])</p>

<table>
  <tbody>
    <tr>
      <td>├─→ oldhandler:func</td>
      <td>int, flags:int, mask:<a href="https://redbean.dev/#unix.Sigset">unix.Sigset</a></td>
    </tr>
  </tbody>
</table>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes action taken upon receipt of a specific signal. 
<code class="language-plaintext highlighter-rouge">sig</code> can be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SIGINT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SIGQUIT</code></li>
  <li><code class="language-plaintext highlighter-rouge">SIGTERM</code></li>
  <li>etc.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">handler</code> can be:</p>

<ul>
  <li>Lua function</li>
  <li><code class="language-plaintext highlighter-rouge">unix.SIG_IGN</code></li>
  <li><code class="language-plaintext highlighter-rouge">unix.SIG_DFL</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">flags</code> can have:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.SA_RESTART</code>: Enables BSD signal handling semantics. Normally i/o entrypoints check for pending signals to deliver. If one gets delivered during an i/o call, the normal behavior is to cancel the i/o operation and return -1 with <code class="language-plaintext highlighter-rouge">EINTR</code> in errno. If you use the <code class="language-plaintext highlighter-rouge">SA_RESTART</code> flag then that behavior changes, so that any function that’s been annotated with @restartable will not return <code class="language-plaintext highlighter-rouge">EINTR</code> and will instead resume the i/o operation. This makes coding easier but it can be an anti-pattern if not used carefully, since poor usage can easily result in latency issues. It also requires one to do more work in signal handlers, so special care needs to be given to which C library functions are @asyncsignalsafe.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.SA_RESETHAND</code>: Causes signal handler to be single-shot. This means that, upon entry of delivery to a signal handler, it’s reset to the <code class="language-plaintext highlighter-rouge">SIG_DFL</code> handler automatically. You may use the alias <code class="language-plaintext highlighter-rouge">SA_ONESHOT</code> for this flag, which means the same thing.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.SA_NODEFER</code>: Disables the reentrancy safety check on your signal handler. Normally that’s a good thing, since for instance if your <code class="language-plaintext highlighter-rouge">SIGSEGV</code> signal handler happens to segfault, you’re going to want your process to just crash rather than looping endlessly. But in some cases it’s desirable to use <code class="language-plaintext highlighter-rouge">SA_NODEFER</code> instead, such as at times when you wish to <code class="language-plaintext highlighter-rouge">longjmp()</code> out of your signal handler and back into your program. This is only safe to do across platforms for non-crashing signals such as <code class="language-plaintext highlighter-rouge">SIGCHLD</code> and <code class="language-plaintext highlighter-rouge">SIGINT</code>. Crash handlers should use Xed instead to recover execution, because on Windows a <code class="language-plaintext highlighter-rouge">SIGSEGV</code> or <code class="language-plaintext highlighter-rouge">SIGTRAP</code> crash handler might happen on a separate stack and/or a separate thread. You may use the alias <code class="language-plaintext highlighter-rouge">SA_NOMASK</code> for this flag, which means the same thing.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.SA_NOCLDWAIT</code>: Changes <code class="language-plaintext highlighter-rouge">SIGCHLD</code> so the zombie is gone and you can’t call wait() anymore; similar but may still deliver the SIGCHLD.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.SA_NOCLDSTOP</code>: Lets you set <code class="language-plaintext highlighter-rouge">SIGCHLD</code> handler that’s only notified on exit/termination and not notified on <code class="language-plaintext highlighter-rouge">SIGSTOP</code>, <code class="language-plaintext highlighter-rouge">SIGTSTP</code>, <code class="language-plaintext highlighter-rouge">SIGTTIN</code>, <code class="language-plaintext highlighter-rouge">SIGTTOU</code>, or <code class="language-plaintext highlighter-rouge">SIGCONT</code>.</li>
</ul>

<p>Example:</p>

<p>function OnSigUsr1(sig)
  gotsigusr1 = true
end
gotsigusr1 = false
oldmask = assert(unix.sigprocmask(unix.SIG_BLOCK, unix.Sigset(unix.SIGUSR1)))
assert(unix.sigaction(unix.SIGUSR1, OnSigUsr1))
assert(unix.raise(unix.SIGUSR1))
assert(not gotsigusr1)
ok, err = unix.sigsuspend(oldmask)
assert(not ok)
assert(err:errno() == unix.EINTR)
assert(gotsigusr1)
assert(unix.sigprocmask(unix.SIG_SETMASK, oldmask))</p>

<p>It’s a good idea to not do too much work in a signal handler.</p>

<p><a href="https://redbean.dev/#unix.sigsuspend">unix.sigsuspend</a>([mask:unix.Sigset])</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Waits for signal to be delivered. 
The signal mask is temporarily replaced with <code class="language-plaintext highlighter-rouge">mask</code> during this system call. <code class="language-plaintext highlighter-rouge">mask</code> specifies which signals should be blocked.</p>

<p><a href="https://redbean.dev/#unix.setitimer">unix.setitimer</a>(which[, intervalsec, intns, valuesec, valuens])</p>

<p>├─→ intervalsec:int, intervalns:int, valuesec:int, valuens:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Causes <code class="language-plaintext highlighter-rouge">SIGALRM</code> signals to be generated at some point(s) in the future. The <code class="language-plaintext highlighter-rouge">which</code> parameter should be <code class="language-plaintext highlighter-rouge">ITIMER_REAL</code>. 
Here’s an example of how to create a 400 ms interval timer:</p>

<p>ticks = 0
assert(unix.sigaction(unix.SIGALRM, function(sig)
   print(‘tick no. %d’ % {ticks})
   ticks = ticks + 1
end))
assert(unix.setitimer(unix.ITIMER_REAL, 0, 400e6, 0, 400e6))
while true do
   unix.sigsuspend()
end</p>

<p>Here’s how you’d do a single-shot timeout in 1 second:</p>

<p>unix.<a href="https://redbean.dev/#unix.sigaction">sigaction</a>(unix.<a href="https://redbean.dev/#unix.SIGALRM">SIGALRM</a>, MyOnSigAlrm, unix.SA_RESETHAND)
unix.<a href="https://redbean.dev/#unix.setitimer">setitimer</a>(unix.ITIMER_REAL, 0, 0, 1, 0)
<a href="https://redbean.dev/#unix.strsignal">unix.strsignal</a>(sig:int) → str</p>

<p>Turns platform-specific <code class="language-plaintext highlighter-rouge">sig</code> code into its symbolic name. 
For example:</p>

<blockquote>
  <dl>
    <dt>: unix.strsignal(9)</dt>
    <dt>“SIGKILL”</dt>
    <dd>unix.strsignal(unix.SIGKILL)
“SIGKILL”</dd>
  </dl>
</blockquote>

<p>Please note that signal numbers are normally different across supported platforms, and the constants should be preferred.</p>

<p><a href="https://redbean.dev/#unix.setrlimit">unix.setrlimit</a>(resource:int, soft:int[, hard:int])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Changes resource limit. 
<code class="language-plaintext highlighter-rouge">resource</code> may be one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RLIMIT_AS</code> limits the size of the virtual address space. This will work on all platforms. It’s emulated on XNU and Windows which means it won’t propagate across execve() currently.</li>
  <li><code class="language-plaintext highlighter-rouge">RLIMIT_CPU</code> causes <code class="language-plaintext highlighter-rouge">SIGXCPU</code> to be sent to the process when the soft limit on CPU time is exceeded, and the process is destroyed when the hard limit is exceeded. It works everywhere but Windows where it should be possible to poll getrusage() with setitimer()</li>
  <li><code class="language-plaintext highlighter-rouge">RLIMIT_FSIZE</code> causes <code class="language-plaintext highlighter-rouge">SIGXFSZ</code> to sent to the process when the soft limit on file size is exceeded and the process is destroyed when the hard limit is exceeded. It works everywhere but Windows</li>
  <li><code class="language-plaintext highlighter-rouge">RLIMIT_NPROC</code> limits the number of simultaneous processes and it should work on all platforms except Windows. Please be advised it limits the process, with respect to the activities of the user id as a whole.</li>
  <li><code class="language-plaintext highlighter-rouge">RLIMIT_NOFILE</code> limits the number of open file descriptors and it should work on all platforms except Windows (TODO)</li>
</ul>

<p>If a limit isn’t supported by the host platform, it’ll be set to 127. On most platforms these limits are enforced by the kernel and as such are inherited by subprocesses.</p>

<p><code class="language-plaintext highlighter-rouge">hard</code> defaults to whatever was specified in <code class="language-plaintext highlighter-rouge">soft</code>.</p>

<p><a href="https://redbean.dev/#unix.getrlimit">unix.getrlimit</a>(resource:int)</p>

<p>├─→ soft:int, hard:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns information about resource limits for current process. <a href="https://redbean.dev/#unix.getrusage">unix.getrusage</a>([who:int])</p>

<p>├─→ <a href="https://redbean.dev/#unix.Rusage">unix.Rusage</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns information about resource usage for current process, e.g. &gt;: unix.getrusage()
{utime={0, 53644000}, maxrss=44896, minflt=545, oublock=24, nvcsw=9}</p>

<p><code class="language-plaintext highlighter-rouge">who</code> defaults to <code class="language-plaintext highlighter-rouge">RUSAGE_SELF</code> and can be any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RUSAGE_SELF</code>: current process</li>
  <li><code class="language-plaintext highlighter-rouge">RUSAGE_THREAD</code>: current thread</li>
  <li><code class="language-plaintext highlighter-rouge">RUSAGE_CHILDREN</code>: not supported on Windows NT</li>
  <li><code class="language-plaintext highlighter-rouge">RUSAGE_BOTH</code>: not supported on non-Linux</li>
</ul>

<p>See the <a href="https://redbean.dev/#unix.Rusage">unix.Rusage</a> section below for details on returned fields.</p>

<p><a href="https://redbean.dev/#unix.pledge">unix.pledge</a>([promises:str[, execpromises:str[, mode:int]]])</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Restrict system operations. 
This can be used to sandbox your redbean workers. It allows finer customization compared to the <code class="language-plaintext highlighter-rouge">-S</code> flag.</p>

<p>Pledging causes most system calls to become unavailable. If a forbidden system call is used, then the process will be killed. In that case, on OpenBSD, your system log will explain which promise you need. On Linux, we report the promise to stderr, with one exception: reporting is currently not possible if you pledge exec.</p>

<p>Using pledge is irreversible. On Linux it causes PR_SET_NO_NEW_PRIVS to be set on your process.</p>

<p>By default exit and exit_group are always allowed. This is useful for processes that perform pure computation and interface with the parent via shared memory.</p>

<p>Once pledge is in effect, the chmod functions (if allowed) will not permit the sticky/setuid/setgid bits to change. Linux will EPERM here and OpenBSD should ignore those three bits rather than crashing.</p>

<p>User and group IDs also can’t be changed once pledge is in effect. OpenBSD should ignore the chown functions without crashing. Linux will just EPERM.</p>

<p>Root access isn’t required. Support is limited to OpenBSD and Linux 2.6.23+ (i.e. RHEL6 c. 2012) so long as Redbean is running directly on the host system, i.e. not running in a userspace emulator like Blink or Qemu. If your environment isn’t supported, then pledge() will return 0 and do nothing, rather than raising ENOSYS, so the apps you share with others will err on the side of not breaking. If a functionality check is needed, please use <code class="language-plaintext highlighter-rouge">unix.pledge(nil, nil)</code> which is a no-op that will fail appropriately when the necessary system support isn’t available to impose security restrictions.</p>

<p><code class="language-plaintext highlighter-rouge">promises</code> is a string that may include any of the following groups delimited by spaces. This list has been curated to focus on the system calls for which this module provides wrappers. See the Cosmopolitan Libc pledge() documentation for a comprehensive and authoritative list of raw system calls. Having the raw system call list may be useful if you’re executing foreign programs.</p>

<p>stdio  Allows read, write, send, recv, recvfrom, close, clock_getres, clock_gettime, dup, fchdir, fstat, fsync, fdatasync, ftruncate, getdents, getegid, getrandom, geteuid, getgid, getgroups, getitimer, getpgid, getpgrp, getpid, hgetppid, getresgid, getresuid, getrlimit, getsid, gettimeofday, getuid, lseek, madvise, brk, mmap/mprotect (PROT_EXEC isn’t allowed), msync, munmap, gethostname, nanosleep, pipe, pipe2, poll, setitimer, shutdown, sigaction, sigsuspend, sigprocmask, socketpair, umask, wait4, getrusage, ioctl(FIONREAD), ioctl(FIONBIO), ioctl(FIOCLEX), ioctl(FIONCLEX), fcntl(F_GETFD), fcntl(F_SETFD), fcntl(F_GETFL), fcntl(F_SETFL), raise, kill(getpid()).  rpath (read path ops)  Allows chdir, getcwd, open, stat, fstat, access, readlink, chmod, chmod, fchmod.  wpath (write path ops)  Allows getcwd, open, stat, fstat, access, readlink, chmod, fchmod.  cpath (create path ops)  Allows rename, link, symlink, unlink, mkdir, rmdir.  fattr  Allows chmod, fchmod, utimensat, futimens.  flock  Allows flock, fcntl(F_GETLK), fcntl(F_SETLK), fcntl(F_SETLKW).  tty  Allows isatty, tcgetwinsize, tcgets, tcsets, tcsetsw, tcsetsf.  inet  Allows socket (AF_INET), listen, bind, connect, accept, getpeername, getsockname, setsockopt, getsockopt.  anet  Allows socket (AF_INET), listen, bind, accept, getpeername, getsockname, setsockopt, getsockopt.  unix  Allows socket (AF_UNIX), listen, bind, connect, accept, getpeername, getsockname, setsockopt, getsockopt.  dns  Allows sendto, recvfrom, socket(AF_INET), connect.  recvfd  Allows recvmsg, recvmmsg.  sendfd  Allows sendmsg, sendmmsg.  proc  Allows fork, vfork, clone, kill, tgkill, getpriority, setpriority, setrlimit, setpgid, setsid.  settime  Allows settimeofday and clock_adjtime.  chown  Allows chown.  unveil  Allows unveil.  exec  Allows execve.  prot_exec  Allows mmap(PROT_EXEC) and mprotect(PROT_EXEC). 
This may be needed to launch non-static non-native executables, such as non-assimilated APE binaries, or programs that link dynamic shared objects, i.e. most Linux distro binaries.</p>

<p><code class="language-plaintext highlighter-rouge">execpromises</code> only matters if “exec” is specified in <code class="language-plaintext highlighter-rouge">promises</code>. In that case, this specifies the promises that’ll apply once execve() happens. If this is NULL then the default is used, which is unrestricted. OpenBSD allows child processes to escape the sandbox (so a pledged OpenSSH server process can do things like spawn a root shell). Linux however requires monotonically decreasing privileges. This function will will perform some validation on Linux to make sure that <code class="language-plaintext highlighter-rouge">execpromises</code> is a subset of <code class="language-plaintext highlighter-rouge">promises</code>. Your libc wrapper for execve() will then apply its SECCOMP BPF filter later. Since Linux has to do this before calling sys_execve(), the executed process will be weakened to have execute permissions too.</p>

<p><code class="language-plaintext highlighter-rouge">mode</code> if specified should specify one penalty:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.PLEDGE_PENALTY_KILL_THREAD</code> causes the violating thread to be killed. This is the default on Linux. It’s effectively the same as killing the process, since redbean has no threads. The termination signal can’t be caught and will be either <code class="language-plaintext highlighter-rouge">SIGSYS</code> or <code class="language-plaintext highlighter-rouge">SIGABRT</code>. Consider enabling stderr logging below so you’ll know why your program failed. Otherwise check the system log.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.PLEDGE_PENALTY_KILL_PROCESS</code> causes the process and all its threads to be killed. This is always the case on OpenBSD.</li>
  <li><code class="language-plaintext highlighter-rouge">unix.PLEDGE_PENALTY_RETURN_EPERM</code> causes system calls to just return an <code class="language-plaintext highlighter-rouge">EPERM</code> error instead of killing. This is a gentler solution that allows code to display a friendly warning. Please note this may lead to weird behaviors if the software being sandboxed is lazy about checking error results.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">mode</code> may optionally bitwise or the following flags:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.PLEDGE_STDERR_LOGGING</code> enables friendly error message logging letting you know which promises are needed whenever violations occur. Without this, violations will be logged to <code class="language-plaintext highlighter-rouge">dmesg</code> on Linux if the penalty is to kill the process. You would then need to manually look up the system call number and then cross reference it with the cosmopolitan libc pledge() documentation. You can also use <code class="language-plaintext highlighter-rouge">strace -ff</code> which is easier. This is ignored OpenBSD, which already has a good system log. Turning on stderr logging (which uses SECCOMP trapping) also means that the <code class="language-plaintext highlighter-rouge">unix.WTERMSIG()</code> on your killed processes will always be <code class="language-plaintext highlighter-rouge">unix.SIGABRT</code> on both Linux and OpenBSD. Otherwise, Linux prefers to raise <code class="language-plaintext highlighter-rouge">unix.SIGSYS</code>.</li>
</ul>

<p><a href="https://redbean.dev/#unix.unveil">unix.unveil</a>(path:str, permissions:str)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Restricts filesystem operations, e.g. unix.unveil(“.”, “r”);     – current dir + children visible
unix.unveil(“/etc”, “r”);  – make /etc readable too
unix.unveil(nil, nil);     – commit and lock policy
 Unveiling restricts a thread’s view of the filesystem to a set of allowed paths with specific privileges. 
Once you start using unveil(), the entire file system is considered hidden. You then specify, by repeatedly calling unveil(), which paths should become unhidden. When you’re finished, you call <code class="language-plaintext highlighter-rouge">unveil(0,0)</code> which commits your policy, after which further use is forbidden, in the current thread, as well as any threads or processes it spawns.</p>

<p>There are some differences between unveil() on Linux versus OpenBSD.</p>

<ol>
  <li>Build your policy and lock it in one go. On OpenBSD, policies take effect immediately and may evolve as you continue to call unveil() but only in a more restrictive direction. On Linux, nothing will happen until you call <code class="language-plaintext highlighter-rouge">unveil(0,0)</code> which commits and locks.</li>
  <li>Try not to overlap directory trees. On OpenBSD, if directory trees overlap, then the most restrictive policy will be used for a given file. On Linux overlapping may result in a less restrictive policy and possibly even undefined behavior.</li>
  <li>OpenBSD and Linux disagree on error codes. On OpenBSD, accessing paths outside of the allowed set raises ENOENT, and accessing ones with incorrect permissions raises EACCES. On Linux, both these cases raise EACCES.</li>
  <li>Unlike OpenBSD, Linux does nothing to conceal the existence of paths. Even with an unveil() policy in place, it’s still possible to access the metadata of all files using functions like stat() and open(O_PATH), provided you know the path. A sandboxed process can always, for example, determine how many bytes of data are in /etc/passwd, even if the file isn’t readable. But it’s still not possible to use opendir() and go fishing for paths which weren’t previously known.</li>
</ol>

<p>This system call is supported natively on OpenBSD and polyfilled on Linux using the Landlock LSM[1].</p>

<p>This function requires OpenBSD or Linux 5.13+ (2022+). If the kernel support isn’t available (or we’re in an emulator like Qemu or Blink) then zero is returned and nothing happens (instead of raising ENOSYS) because the files are still unveiled. Use <code class="language-plaintext highlighter-rouge">unix.unveil("", nil)</code> to feature check the host system, which is defined as a no-op that’ll fail if the host system doesn’t have the necessary features that allow unix.unveil() impose bona-fide security restrictions. Otherwise, if everything is good, a return value <code class="language-plaintext highlighter-rouge">&gt;=0</code> is returned, where <code class="language-plaintext highlighter-rouge">0</code> means OpenBSD, and <code class="language-plaintext highlighter-rouge">&gt;=1</code> means Linux with Landlock LSM, in which case the return code shall be the maximum supported Landlock ABI version.</p>

<p><code class="language-plaintext highlighter-rouge">path</code> is the file or directory to unveil</p>

<p><code class="language-plaintext highlighter-rouge">permissions</code> is a string consisting of zero or more of the following characters:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">r</code> makes <code class="language-plaintext highlighter-rouge">path</code> available for read-only path operations, corresponding to the pledge promise “rpath”.</li>
  <li><code class="language-plaintext highlighter-rouge">w</code> makes <code class="language-plaintext highlighter-rouge">path</code> available for write operations, corresponding to the pledge promise “wpath”.</li>
  <li><code class="language-plaintext highlighter-rouge">x</code> makes <code class="language-plaintext highlighter-rouge">path</code> available for execute operations, corresponding to the pledge promises “exec” and “execnative”.</li>
  <li><code class="language-plaintext highlighter-rouge">c</code> allows <code class="language-plaintext highlighter-rouge">path</code> to be created and removed, corresponding to the pledge promise “cpath”.</li>
</ul>

<p><a href="https://redbean.dev/#unix.gmtime">unix.gmtime</a>(unixts:int)</p>

<p>├─→ year,mon,mday,hour,min,sec,gmtoffsec,wday,yday,dst:int,zone:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Breaks down UNIX timestamp into Zulu Time numbers. 
This function is like localtime() except it always returns Greenwich Mean Time irrespective of the TZ environment variable.</p>

<p>For example:</p>

<blockquote>
  <p>: unix.gmtime(unix.clock_gettime())
2022    5       11      22      43      20      0       3       130     0       “GMT”</p>
</blockquote>

<p>Here’s how you might format a localized timestamp with nanoseconds:</p>

<blockquote>
  <dl>
    <dt>: unixsec, nanos = unix.clock_gettime()</dt>
    <dd>year,mon,mday,hour,min,sec = unix.localtime(unixsec)</dd>
    <dd>’%.4d-%.2d-%.2dT%.2d:%.2d:%.2d.%.9dZ’ % {year,mon,mday,hour,min,sec,nanos}
“2022-05-11T15:46:32.160239978Z”</dd>
  </dl>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">year</code> is the year, where zero is defined as 0 A.D. This value may be on the interval <code class="language-plaintext highlighter-rouge">-13.7e9 ≤ year ≤ 10e14</code> which is the time from the Big Bang, through most of the Stelliferous Era.</p>

<p><code class="language-plaintext highlighter-rouge">mon</code> is the month of the year, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 ≤
    mon ≤ 12
</code></pre></div></div>
<p>in order to make printf style formatting easier.</p>

<p><code class="language-plaintext highlighter-rouge">mday</code> is the day of the month, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 ≤
    mday ≤ 31
</code></pre></div></div>
<p>in order to make printf style formatting easier.</p>

<p><code class="language-plaintext highlighter-rouge">hour</code> represent hours, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 ≤ hour ≤
    23
</code></pre></div></div>
<p>.</p>

<p><code class="language-plaintext highlighter-rouge">min</code> represents minutes, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 ≤ min ≤
    59
</code></pre></div></div>
<p>.</p>

<p><code class="language-plaintext highlighter-rouge">sec</code> represents seconds, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 ≤ sec ≤
    60
</code></pre></div></div>
<p>. Please note this is a 61 second interval in order to accommodate highly rare leap second events.</p>

<p><code class="language-plaintext highlighter-rouge">wday</code> is the day of the week, on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 ≤
    wday ≤ 6
</code></pre></div></div>
<p>.</p>

<p><code class="language-plaintext highlighter-rouge">yday</code> is the day of the year on the interval</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 ≤
    yday ≤ 365
</code></pre></div></div>
<p>.</p>

<p><code class="language-plaintext highlighter-rouge">gmtoff</code> is the Zulu time offset in seconds, which should be on the interval ±93600 seconds.</p>

<p><code class="language-plaintext highlighter-rouge">dst</code> will be 1 if daylight savings, 0 if not daylight savings, or -1 if it couldn’t be determined.</p>

<p><a href="https://redbean.dev/#unix.localtime">unix.localtime</a>(unixts:int)</p>

<p>├─→ year,mon,mday,hour,min,sec,gmtoffsec,wday,yday,dst:int,zone:str</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Breaks down UNIX timestamp into local time numbers, e.g. &gt;: unix.localtime(unix.clock_gettime())
2022    4       28      2       14      22      -25200  4       117     1       “PDT”</p>

<p>This follows the same API as gmtime() except it takes the <code class="language-plaintext highlighter-rouge">TZ</code> environment variable into consideration to determine the most appropriate localization.</p>

<p>Please see the gmtime() function for documentaiton on the meaning of the various returned values.</p>

<p>Here’s an example of how you might format a localized timestamp:</p>

<blockquote>
  <dl>
    <dt>: unixsec, nanos = unix.clock_gettime()</dt>
    <dd>year, mon, mday, hour, min, sec, gmtoffsec = unix.localtime(unixsec)</dd>
    <dd>’%.4d-%.2d-%.2dT%.2d:%.2d:%.2d.%.9d%+.2d%.2d’ % {
      year, mon, mday, hour, min, sec, nanos,
      gmtoffsec / (60 * 60), math.abs(gmtoffsec) % 60}
“2022-05-11T15:46:32.160239978-0700”</dd>
  </dl>
</blockquote>

<p>Your redbean ships with a subset of the time zone database.</p>

<ul>
  <li>/zip/usr/share/zoneinfo/Honolulu (GMT -10 hours)</li>
  <li>/zip/usr/share/zoneinfo/Anchorage (GMT -9 hours)</li>
  <li>/zip/usr/share/zoneinfo/GST (GMT -8 hours)</li>
  <li>/zip/usr/share/zoneinfo/Boulder (GMT -6 hours)</li>
  <li>/zip/usr/share/zoneinfo/Chicago (GMT -5 hours)</li>
  <li>/zip/usr/share/zoneinfo/New_York (GMT -4 hours)</li>
  <li>/zip/usr/share/zoneinfo/UTC (GMT -0 hours)</li>
  <li>/zip/usr/share/zoneinfo/GMT (GMT +0 hours)</li>
  <li>/zip/usr/share/zoneinfo/London (GMT +1 hours)</li>
  <li>/zip/usr/share/zoneinfo/Berlin (GMT +2 hours)</li>
  <li>/zip/usr/share/zoneinfo/Israel (GMT +3 hours)</li>
  <li>/zip/usr/share/zoneinfo/India (GMT +5 hours)</li>
  <li>/zip/usr/share/zoneinfo/Beijing (GMT +8 hours)</li>
  <li>/zip/usr/share/zoneinfo/Japan (GMT +9 hours)</li>
  <li>/zip/usr/share/zoneinfo/Sydney (GMT +10 hours)</li>
</ul>

<p>You can control which timezone is used using the <code class="language-plaintext highlighter-rouge">TZ</code> environment variable. If your time zone isn’t included in the above list, you can simply copy it inside your redbean. The same is also the case for future updates to the database, which can be swapped out when needed, without having to recompile.</p>

<p><a href="https://redbean.dev/#unix.stat">unix.stat</a>(path:str[, flags:int[, dirfd:int]])</p>

<p>├─→ <a href="https://redbean.dev/#unix.Stat">unix.Stat</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets information about file or directory. 
<code class="language-plaintext highlighter-rouge">flags</code> may have any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AT_SYMLINK_NOFOLLOW</code>: do not follow symbolic links.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">dirfd</code> defaults to to <code class="language-plaintext highlighter-rouge">unix.AT_FDCWD</code> and may optionally be set to a directory file descriptor to which <code class="language-plaintext highlighter-rouge">path</code> is relative.</p>

<p><a href="https://redbean.dev/#unix.fstat">unix.fstat</a>(fd:int)</p>

<p>├─→ <a href="https://redbean.dev/#unix.Stat">unix.Stat</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets information about opened file descriptor. 
A common use for fstat() is getting the size of a file. For example:</p>

<p>fd = assert(unix.<a href="https://redbean.dev/#unix.open">open</a>(‘hello.txt’, unix.O_RDONLY))
st = assert(unix.<a href="https://redbean.dev/#unix.fstat">fstat</a>(fd))
Log(kLogInfo, ‘hello.txt is %d bytes in size’ % {st:<a href="https://redbean.dev/#unix.Stat:size">size</a>()})
unix.close(fd)
<a href="https://redbean.dev/#unix.statfs">unix.statfs</a>(path:str)</p>

<p>├─→ <a href="https://redbean.dev/#unix.Statfs">unix.Statfs</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets information about filesystem. 
<code class="language-plaintext highlighter-rouge">path</code> is the path of a file or directory in the mounted filesystem.</p>

<p><a href="https://redbean.dev/#unix.fstatfs">unix.fstatfs</a>(fd:int)</p>

<p>├─→ <a href="https://redbean.dev/#unix.Statfs">unix.Statfs</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Gets information about filesystem. 
<code class="language-plaintext highlighter-rouge">fd</code> is an open() file descriptor of a file or directory in the mounted filesystem.</p>

<p><a href="https://redbean.dev/#unix.opendir">unix.opendir</a>(path:str)</p>

<p>├─→ state:<a href="https://redbean.dev/#unix.Dir">Dir</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Opens directory for listing its contents. 
For example, to print a simple directory listing:</p>

<p>Write(‘&lt;ul&gt;\r\n’)
for name, kind, ino, off in assert(unix.opendir(dir)) do
    if name ~= ‘.’ and name ~= ‘..’ then
       Write(‘&lt;li&gt;%s\r\n’ % {EscapeHtml(name)})
    end
end
Write(‘&lt;/ul&gt;\r\n’)
<a href="https://redbean.dev/#unix.fdopendir">unix.fdopendir</a>(fd:int)</p>

<p>├─→ next:function, state:<a href="https://redbean.dev/#unix.Dir">Dir</a></p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Opens directory for listing its contents, via an fd. 
<code class="language-plaintext highlighter-rouge">fd</code> should be created by <code class="language-plaintext highlighter-rouge">open(path, unix.O_RDONLY|unix.O_DIRECTORY)</code>. The returned <a href="https://redbean.dev/#unix.Dir">unix.Dir</a> takes ownership of the file descriptor and will close it automatically when garbage collected.</p>

<p><a href="https://redbean.dev/#unix.isatty">unix.isatty</a>(fd:int)</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns true if file descriptor is a teletypewriter. Otherwise nil with an Errno object holding one of the following values:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ENOTTY</code> if <code class="language-plaintext highlighter-rouge">fd</code> is valid but not a teletypewriter</li>
  <li><code class="language-plaintext highlighter-rouge">EBADF</code> if <code class="language-plaintext highlighter-rouge">fd</code> isn’t a valid file descriptor.</li>
  <li><code class="language-plaintext highlighter-rouge">EPERM</code> if pledge() is used without <code class="language-plaintext highlighter-rouge">tty</code> in lenient mode</li>
</ul>

<p>No other error numbers are possible.</p>

<p><a href="https://redbean.dev/#unix.tcgetwinsize">unix.tcgetwinsize</a>(fd:int)</p>

<p>├─→ rows:int, cols:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns cellular dimensions of pseudoteletypewriter display. <a href="https://redbean.dev/#unix.tmpfd">unix.tmpfd</a>()</p>

<p>├─→ fd:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns file descriptor of open anonymous file. 
This creates a secure temporary file inside <code class="language-plaintext highlighter-rouge">$TMPDIR</code>. If it isn’t defined, then <code class="language-plaintext highlighter-rouge">/tmp</code> is used on UNIX and GetTempPath() is used on the New Technology. This resolution of <code class="language-plaintext highlighter-rouge">$TMPDIR</code> happens once, which is copied to the <code class="language-plaintext highlighter-rouge">kTmpDir</code> global.</p>

<p>Once close() is called, the returned file is guaranteed to be deleted automatically. On UNIX the file is unlink()’d before this function returns. On the New Technology it happens upon close().</p>

<p>On the New Technology, temporary files created by this function should have better performance, because <code class="language-plaintext highlighter-rouge">kNtFileAttributeTemporary</code> asks the kernel to more aggressively cache and reduce i/o ops.</p>

<p><a href="https://redbean.dev/#unix.sched_yield">unix.sched_yield</a>()</p>

<p>Relinquishes scheduled quantum. <a href="https://redbean.dev/#unix.mapshared">unix.mapshared</a>(size:int)</p>

<p>└─→ <a href="https://redbean.dev/#unix.Memory">unix.Memory</a>()  Creates interprocess shared memory mapping. 
This function allocates special memory that’ll be inherited across fork in a shared way. By default all memory in Redbean is “private” memory that’s only viewable and editable to the process that owns it. When <a href="https://redbean.dev/#unix.fork">unix.fork</a>() happens, memory is copied appropriately so that changes to memory made in the child process, don’t clobber the memory at those same addresses in the parent process. If you don’t want that to happen, and you want the memory to be shared similar to how it would be shared if you were using threads, then you can use this function to achieve just that.</p>

<p>The memory object this function returns may be accessed using its methods, which support atomics and futexes. It’s very low-level. For example, you can use it to implement scalable mutexes:</p>

<p>mem = unix.mapshared(8000 * 8)
LOCK = 0 – pick an arbitrary word index for lock
– From Futexes Are Tricky Version 1.1 § Mutex, Take 3;
– Ulrich Drepper, Red Hat Incorporated, June 27, 2004.
function Lock()
    local ok, old = mem:cmpxchg(LOCK, 0, 1)
    if not ok then
        if old == 1 then
            old = mem:xchg(LOCK, 2)
        end
        while old &gt; 0 do
            mem:wait(LOCK, 2)
            old = mem:xchg(LOCK, 2)
        end
    end
end
function Unlock()
    old = mem:fetch_add(LOCK, -1)
    if old == 2 then
        mem:store(LOCK, 0)
        mem:wake(LOCK, 1)
    end
end</p>

<p>It’s possible to accomplish the same thing as unix.mapshared() using files and unix.fcntl() advisory locks. However this goes significantly faster. For example, that’s what SQLite does and we recommend using SQLite for IPC in redbean. But, if your app has thousands of forked processes fighting for a file lock you might need something lower level than file locks, to implement things like throttling. Shared memory is a good way to do that since there’s nothing that’s faster.</p>

<p>The <code class="language-plaintext highlighter-rouge">size</code> parameter needs to be a multiple of 8. The returned memory is zero initialized. When allocating shared memory, you should try to get as much use out of it as possible, since the overhead of allocating a single shared mapping is 500 words of resident memory and 8000 words of virtual memory. It’s because the Cosmopolitan Libc mmap() granularity is 2**16.</p>

<p>This system call does not fail. An exception is instead thrown if sufficient memory isn’t available.</p>

<h2 id="unixmemory-object"><a href="https://redbean.dev/#unix.Memory">unix.Memory object</a></h2>

<p>unix.Memory encapsulates memory that’s shared across fork() and this module provides the fundamental synchronization primitives. These objects are created by <a href="https://redbean.dev/#unix.mapshared">unix.mapshared</a>().</p>

<p>Redbean memory maps may be used in two ways:</p>

<ol>
  <li>as an array of bytes a.k.a. a string</li>
  <li>as an array of words a.k.a. integers</li>
</ol>

<p>They’re aliased, union, or overlapped views of the same memory. For example if you write a string to your memory region, you’ll be able to read it back as an integer.</p>

<p>Reads, writes, and word operations will throw an exception if a memory boundary error or overflow occurs.</p>

<p><a href="https://redbean.dev/#unix.Memory:read">unix.Memory:read</a>([offset:int[, bytes:int]])</p>

<p>└─→ str  Reads bytes from memory region 
<code class="language-plaintext highlighter-rouge">offset</code> is the starting byte index from which memory is copied, which defaults to zero.</p>

<p>If <code class="language-plaintext highlighter-rouge">bytes</code> is none or nil, then the nul-terminated string at <code class="language-plaintext highlighter-rouge">offset</code> is returned. You may specify <code class="language-plaintext highlighter-rouge">bytes</code> to safely read binary data.</p>

<p>This operation happens atomically. Each shared mapping has a single lock which is used to synchronize reads and writes to that specific map. To make it scale, create additional maps.</p>

<p><a href="https://redbean.dev/#unix.Memory:write">unix.Memory:write</a>([offset:int,] data:str[, bytes:int]])</p>

<p>Writes bytes to memory region. 
<code class="language-plaintext highlighter-rouge">offset</code> is the starting byte index to which memory is copied, which defaults to zero.</p>

<p>If <code class="language-plaintext highlighter-rouge">bytes</code> is none or nil, then an implicit nil-terminator will be included after your <code class="language-plaintext highlighter-rouge">data</code> so things like json can be easily serialized to shared memory.</p>

<p>This operation happens atomically. Each shared mapping has a single lock which is used to synchronize reads and writes to that specific map. To make it scale, create additional maps.</p>

<p><a href="https://redbean.dev/#unix.Memory:load">unix.Memory:load</a>(word_index:int)</p>

<p>└─→ int  Loads word from memory region. 
This operation is atomic and has relaxed barrier semantics.</p>

<p><a href="https://redbean.dev/#unix.Memory:store">unix.Memory:store</a>(word_index:int, value:int)</p>

<p>Stores word from memory region. 
This operation is atomic and has relaxed barrier semantics.</p>

<p><a href="https://redbean.dev/#unix.Memory:xchg">unix.Memory:xchg</a>(word_index:int, value:int)</p>

<p>└─→ int  Exchanges value. 
This sets word at <code class="language-plaintext highlighter-rouge">word_index</code> to <code class="language-plaintext highlighter-rouge">value</code> and returns the value previously held within that word.</p>

<p>This operation is atomic and provides the same memory barrier semantics as the aligned x86 LOCK XCHG instruction.</p>

<p><a href="https://redbean.dev/#unix.Memory:cmpxchg">unix.Memory:cmpxchg</a>(word_index:int, old:int, new:int)</p>

<p>└─→ success:bool, old:int  Compares and exchanges value. 
This inspects the word at <code class="language-plaintext highlighter-rouge">word_index</code> and if its value is the same as <code class="language-plaintext highlighter-rouge">old</code> then it’ll be replaced by the value <code class="language-plaintext highlighter-rouge">new</code>, in which case true shall be returned alongside <code class="language-plaintext highlighter-rouge">old</code>. If a different value was held at word, then <code class="language-plaintext highlighter-rouge">false</code> shall be returned along with its value.</p>

<p>This operation happens atomically and provides the same memory barrier semantics as the aligned x86 LOCK CMPXCHG instruction.</p>

<p><a href="https://redbean.dev/#unix.Memory:fetch_add">unix.Memory:fetch_add</a>(word_index:int, value:int)</p>

<p>└─→ old:int  Fetches then adds value. 
This method modifies the word at <code class="language-plaintext highlighter-rouge">word_index</code> to contain the sum of its value and the <code class="language-plaintext highlighter-rouge">value</code> parameter. This method then returns the value as it existed before the addition was performed.</p>

<p>This operation is atomic and provides the same memory barrier semantics as the aligned x86 LOCK XADD instruction.</p>

<p><a href="https://redbean.dev/#unix.Memory:fetch_and">unix.Memory:fetch_and</a>(word_index:int, value:int)</p>

<p>└─→ int  Fetches and bitwise ands value. 
This operation happens atomically and provides the same memory barrier ordering semantics as its x86 implementation.</p>

<p><a href="https://redbean.dev/#unix.Memory:fetch_or">unix.Memory:fetch_or</a>(word_index:int, value:int)</p>

<p>└─→ int  Fetches and bitwise ors value. 
This operation happens atomically and provides the same memory barrier ordering semantics as its x86 implementation.</p>

<p><a href="https://redbean.dev/#unix.Memory:fetch_xor">unix.Memory:fetch_xor</a>(word_index:int, value:int)</p>

<p>└─→ int  Fetches and bitwise xors value. 
This operation happens atomically and provides the same memory barrier ordering semantics as its x86 implementation.</p>

<p><a href="https://redbean.dev/#unix.Memory:wait">unix.Memory:wait</a>(word_index:int, expect:int[, abs_deadline:int[, nanos:int]])</p>

<p>├─→ 0</p>

<p>├─→ nil, unix.Errno(unix.EINTR)</p>

<p>├─→ nil, unix.Errno(unix.EAGAIN)</p>

<p>└─→ nil, unix.Errno(unix.ETIMEDOUT)  Waits for word to have a different value. 
This method asks the kernel to suspend the process until either the absolute deadline expires or we’re woken up by another process that calls unix.Memory:wake().</p>

<p>The <code class="language-plaintext highlighter-rouge">expect</code> parameter is the value you expect the word to have and this function will return if that’s not the case. Please note this parameter doesn’t imply the kernel will poll the value for you, and you still need to call wake() when you know the memory’s changed.</p>

<p>The default behavior is to wait until the heat death of the universe if necessary. You may alternatively specify an absolute deadline. If it’s less than or equal to the value returned by clock_gettime, then this routine is non-blocking. Otherwise we’ll block at most until the current time reaches the absolute deadline.</p>

<p>Futexes are supported natively on Linux, FreeBSD, and OpenBSD. When this interface is used on other platforms this method will manually poll the memory location with exponential backoff. Doing this works well enough that we’re passing the *NSYNC unit tests, but is not as low latency as having kernel supported futexes.</p>

<p><code class="language-plaintext highlighter-rouge">EINTR</code> if a signal is delivered while waiting on deadline. Callers should use futexes inside a loop that is able to cope with spurious wakeups. We don’t actually guarantee the value at word has in fact changed when this returns.</p>

<p><code class="language-plaintext highlighter-rouge">EAGAIN</code> is raised if, upon entry, the word at <code class="language-plaintext highlighter-rouge">word_index</code> had a different value than what’s specified at <code class="language-plaintext highlighter-rouge">expect</code>.</p>

<p><code class="language-plaintext highlighter-rouge">ETIMEDOUT</code> is raised when the absolute deadline expires.</p>

<p><a href="https://redbean.dev/#unix.Memory:wake">unix.Memory:wake</a>(index:int[, count:int])</p>

<p>└─→ woken:int  Wakes other processes waiting on word. 
This method may be used to signal or broadcast to waiters. The <code class="language-plaintext highlighter-rouge">count</code> specifies the number of processes that should be woken, which defaults to <code class="language-plaintext highlighter-rouge">INT_MAX</code>.</p>

<p>The return value is the number of processes that were actually woken as a result of the system call. No failure conditions are defined.</p>

<h2 id="unixdir-object"><a href="https://redbean.dev/#unix.Dir">unix.Dir object</a></h2>

<p>unix.Dir objects are created by opendir() or fdopendir(). The following methods are available:</p>

<p><a href="https://redbean.dev/#unix.Dir:close">unix.Dir:close</a>()</p>

<p>├─→ true</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Closes directory stream object and associated its file descriptor. 
This is called automatically by the garbage collector.</p>

<p>This may be called multiple times.</p>

<p><a href="https://redbean.dev/#unix.Dir:read">unix.Dir:read</a>()</p>

<p>├─→ name:str, kind:int, ino:int, off:int</p>

<p>└─→ nil  Reads entry from directory stream. 
Returns <code class="language-plaintext highlighter-rouge">nil</code> if there are no more entries. On error, <code class="language-plaintext highlighter-rouge">nil</code> will be returned and <code class="language-plaintext highlighter-rouge">errno</code> will be non-nil.</p>

<p><code class="language-plaintext highlighter-rouge">kind</code> can be any of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DT_REG</code>: file is a regular file</li>
  <li><code class="language-plaintext highlighter-rouge">DT_DIR</code>: file is a directory</li>
  <li><code class="language-plaintext highlighter-rouge">DT_BLK</code>: file is a block device</li>
  <li><code class="language-plaintext highlighter-rouge">DT_LNK</code>: file is a symbolic link</li>
  <li><code class="language-plaintext highlighter-rouge">DT_CHR</code>: file is a character device</li>
  <li><code class="language-plaintext highlighter-rouge">DT_FIFO</code>: file is a named pipe</li>
  <li><code class="language-plaintext highlighter-rouge">DT_SOCK</code>: file is a named socket</li>
  <li><code class="language-plaintext highlighter-rouge">DT_UNKNOWN</code></li>
</ul>

<p>Note: This function also serves as the <code class="language-plaintext highlighter-rouge">__call</code> metamethod, so that unix.Dir objects may be used as a for loop iterator.</p>

<p><a href="https://redbean.dev/#unix.Dir:fd">unix.Dir:fd</a>()</p>

<p>├─→ fd:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns file descriptor of open directory object. 
Returns <code class="language-plaintext highlighter-rouge">EOPNOTSUPP</code> if using a <code class="language-plaintext highlighter-rouge">/zip/...</code> path. Returns <code class="language-plaintext highlighter-rouge">EOPNOTSUPP</code> if using Windows NT.</p>

<p><a href="https://redbean.dev/#unix.Dir:tell">unix.Dir:tell</a>()</p>

<p>├─→ off:int</p>

<p>└─→ nil, <a href="https://redbean.dev/#unix.Errno">unix.Errno</a> Returns current arbitrary offset into stream. <a href="https://redbean.dev/#unix.Dir:rewind">unix.Dir:rewind</a>()</p>

<p>Resets stream back to beginning. 
<a href="https://redbean.dev/#unix.Rusage">unix.Rusage object</a>
——————————————————</p>

<p>unix.Rusage objects are created by <a href="https://redbean.dev/#unix.wait">wait</a>() or <a href="https://redbean.dev/#unix.getrusage">getrusage</a>(). The following accessor methods are available.</p>

<p><a href="https://redbean.dev/#unix.Rusage:utime">unix.Rusage:utime</a>()</p>

<p>└─→ seconds:int, nanos:int  Returns amount of CPU consumed in userspace. 
It’s always the case that <code class="language-plaintext highlighter-rouge">0 ≤ nanos &lt; 1e9</code>.</p>

<p>On Windows NT this is collected from GetProcessTimes().</p>

<p><a href="https://redbean.dev/#unix.Rusage:stime">unix.Rusage:stime</a>()</p>

<p>└─→ seconds:int, nanos:int  Returns amount of CPU consumed in kernelspace. 
It’s always the case that <code class="language-plaintext highlighter-rouge">0 ≤ 𝑥 &lt; 1e9</code>.</p>

<p>On Windows NT this is collected from GetProcessTimes().</p>

<p>Returns amount of physical memory used at peak consumption. 
On Windows NT this is collected from NtProcessMemoryCountersEx::PeakWorkingSetSize / 1024.</p>

<p>Returns integral private memory consumption w.r.t. scheduled ticks. 
If you chart memory usage over the lifetime of your process, then this would be the space filled in beneath the chart. The frequency of kernel scheduling is defined as <code class="language-plaintext highlighter-rouge">CLK_TCK</code>. Each time a tick happens, the kernel samples your process’s memory usage, by adding it to this value. You can derive the average consumption from this value by computing how many ticks are in</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>utime +
    stime
</code></pre></div></div>
<p>.</p>

<p>Currently only available on FreeBSD and NetBSD.</p>

<p>Returns integral shared memory consumption w.r.t. scheduled ticks. 
If you chart memory usage over the lifetime of your process, then this would be the space filled in beneath the chart. The frequency of kernel scheduling is defined as <code class="language-plaintext highlighter-rouge">CLK_TCK</code>. Each time a tick happens, the kernel samples your process’s memory usage, by adding it to this value. You can derive the average consumption from this value by computing how many ticks are in</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>utime +
    stime
</code></pre></div></div>
<p>.</p>

<p>Currently only available on FreeBSD and NetBSD.</p>

<p>Returns integral stack memory consumption w.r.t. scheduled ticks. 
If you chart memory usage over the lifetime of your process, then this would be the space filled in beneath the chart. The frequency of kernel scheduling is defined as <code class="language-plaintext highlighter-rouge">CLK_TCK</code>. Each time a tick happens, the kernel samples your process’s memory usage, by adding it to this value. You can derive the average consumption from this value by computing how many ticks are in</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>utime +
    stime
</code></pre></div></div>
<p>.</p>

<p>This is only applicable to redbean if its built with MODE=tiny, because redbean likes to allocate its own deterministic stack.</p>

<p>Currently only available on FreeBSD and NetBSD.</p>

<p><a href="https://redbean.dev/#unix.Rusage:minflt">unix.Rusage:minflt</a>()</p>

<p>└─→ count:int  Returns number of minor page faults. 
This number indicates how many times redbean was preempted by the kernel to memcpy() a 4096-byte page. This is one of the tradeoffs fork() entails. This number is usually tinier, when your binaries are tinier.</p>

<p>Not available on Windows NT.</p>

<p><a href="https://redbean.dev/#unix.Rusage:majflt">unix.Rusage:majflt</a>()</p>

<p>└─→ count:int  Returns number of major page faults. 
This number indicates how many times redbean was preempted by the kernel to perform i/o. For example, you might have used mmap() to load a large file into memory lazily.</p>

<p>On Windows NT this is NtProcessMemoryCountersEx::PageFaultCount.</p>

<p><a href="https://redbean.dev/#unix.Rusage:nswap">unix.Rusage:nswap</a>()</p>

<p>└─→ count:int  Returns number of swap operations. 
Operating systems like to reserve hard disk space to back their RAM guarantees, like using a gold standard for fiat currency. When your system is under heavy memory load, swap operations may happen while redbean is working. This number keeps track of them.</p>

<p>Not available on Linux, Windows NT.</p>

<p><a href="https://redbean.dev/#unix.Rusage:inblock">unix.Rusage:inblock</a>()</p>

<p>└─→ count:int  Returns number of times filesystem had to perform input. 
On Windows NT this is NtIoCounters::ReadOperationCount.</p>

<p><a href="https://redbean.dev/#unix.Rusage:oublock">unix.Rusage:oublock</a>()</p>

<p>└─→ count:int  Returns number of times filesystem had to perform output. 
On Windows NT this is NtIoCounters::WriteOperationCount.</p>

<p><a href="https://redbean.dev/#unix.Rusage:msgsnd">unix.Rusage:msgsnd</a>()</p>

<p>└─→ count:int  Returns count of ipc messages sent. 
Not available on Linux, Windows NT.</p>

<p><a href="https://redbean.dev/#unix.Rusage:msgrcv">unix.Rusage:msgrcv</a>()</p>

<p>└─→ count:int  Returns count of ipc messages received. 
Not available on Linux, Windows NT.</p>

<p><a href="https://redbean.dev/#unix.Rusage:nsignals">unix.Rusage:nsignals</a>()</p>

<p>└─→ count:int  Returns number of signals received. 
Not available on Linux.</p>

<p><a href="https://redbean.dev/#unix.Rusage:nvcsw">unix.Rusage:nvcsw</a>()</p>

<p>└─→ count:int  Returns number of voluntary context switches. 
This number is a good thing. It means your redbean finished its work quickly enough within a time slice that it was able to give back the remaining time to the system.</p>

<p><a href="https://redbean.dev/#unix.Rusage:nivcsw">unix.Rusage:nivcsw</a>()</p>

<p>└─→ count:int  Returns number of non-consensual context switches. 
This number is a bad thing. It means your redbean was preempted by a higher priority process after failing to finish its work, within the allotted time slice.</p>

<h2 id="unixstat-object"><a href="https://redbean.dev/#unix.Stat">unix.Stat object</a></h2>

<p>unix.Stat objects are created by <a href="https://redbean.dev/#unix.stat">stat</a>() or <a href="https://redbean.dev/#unix.fstat">fstat</a>(). The following accessor methods are available.</p>

<p><a href="https://redbean.dev/#unix.Stat:size">unix.Stat:size</a>()</p>

<p>└─→ bytes:int  Size of file in bytes. <a href="https://redbean.dev/#unix.Stat:mode">unix.Stat:mode</a>()</p>

<p>└─→ mode:int  Contains file type and permissions. 
For example, <code class="language-plaintext highlighter-rouge">0010644</code> is what you might see for a file and <code class="language-plaintext highlighter-rouge">0040755</code> is what you might see for a directory.</p>

<p>To determine the file type:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISREG(st:mode())</code> means regular file</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISDIR(st:mode())</code> means directory</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISLNK(st:mode())</code> means symbolic link</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISCHR(st:mode())</code> means character device</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISBLK(st:mode())</code> means block device</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISFIFO(st:mode())</code> means named pipe</li>
  <li><code class="language-plaintext highlighter-rouge">unix.S_ISSOCK(st:mode())</code> means named socket</li>
</ul>

<p><a href="https://redbean.dev/#unix.Stat:uid">unix.Stat:uid</a>()</p>

<p>└─→ uid:int  User ID of file owner. <a href="https://redbean.dev/#unix.Stat:gid">unix.Stat:gid</a>()</p>

<p>└─→ gid:int  Group ID of file owner. <a href="https://redbean.dev/#unix.Stat:birthtim">unix.Stat:birthtim</a>()</p>

<p>└─→ unixts:int, nanos:int  File birth time. 
This field should be accurate on Apple, Windows, and BSDs. On Linux this is the minimum of atim/mtim/ctim. On Windows NT nanos is only accurate to hectonanoseconds.</p>

<p>Here’s an example of how you might print a file timestamp:</p>

<p>st = assert(unix.stat(‘/etc/passwd’))
unixts, nanos = st:birthtim()
year,mon,mday,hour,min,sec,gmtoffsec = unix.localtime(unixts)
Write(‘%.4d-%.2d-%.2dT%.2d:%.2d:%.2d.%.9d%+.2d%.2d % {
   year, mon, mday, hour, min, sec, nanos,
   gmtoffsec / (60 * 60), math.abs(gmtoffsec) % 60})
<a href="https://redbean.dev/#unix.Stat:mtim">unix.Stat:mtim</a>()</p>

<p>└─→ unixts:int, nanos:int  Last modified time. <a href="https://redbean.dev/#unix.Stat:atim">unix.Stat:atim</a>()</p>

<p>└─→ unixts:int, nanos:int  Last access time. 
Please note that file systems are sometimes mounted with <code class="language-plaintext highlighter-rouge">noatime</code> out of concern for i/o performance. Linux also provides <code class="language-plaintext highlighter-rouge">O_NOATIME</code> as an option for <a href="https://redbean.dev/#unix.open">open</a>().</p>

<p>On Windows NT this is the same as birth time.</p>

<p><a href="https://redbean.dev/#unix.Stat:ctim">unix.Stat:ctim</a>()</p>

<p>└─→ unixts:int, nanos:int  Complicated time. 
Means time file status was last changed on UNIX.</p>

<p>On Windows NT this is the same as birth time.</p>

<p><a href="https://redbean.dev/#unix.Stat:blocks">unix.Stat:blocks</a>()</p>

<p>└─→ count512:int  Number of 512-byte blocks used by storage medium. 
This provides some indication of how much physical storage a file actually consumes. For example, for small file systems, your system might report this number as being 8, which means 4096 bytes.</p>

<p>On Windows NT, if <code class="language-plaintext highlighter-rouge">O_COMPRESSED</code> is used for a file, then this number will reflect the size <em>after</em> compression. you can use:</p>

<p>st = assert(unix.<a href="https://redbean.dev/#unix.stat">stat</a>(“moby.txt”))
print(‘file size is %d bytes’ % {st:<a href="https://redbean.dev/#unix.Stat:size">size</a>()})
print(‘file takes up %d bytes of space’ % {st:<a href="https://redbean.dev/#unix.Stat:blocks">blocks</a>() * 512})
if <a href="https://redbean.dev/#GetHostOs">GetHostOs</a>() == ‘WINDOWS’ and st:<a href="https://redbean.dev/#unix.Stat:flags">flags</a>() &amp; 0x800 then
   print(‘thanks to file system compression’)
end</p>

<p>To tell if compression is used on a file.</p>

<p><a href="https://redbean.dev/#unix.Stat:blksize">unix.Stat:blksize</a>()</p>

<p>└─→ bytes:int  Block size that underlying device uses. 
This field might be of assistance in computing optimal i/o sizes.</p>

<p>Please note this field has no relationship to blocks, as the latter is fixed at a 512 byte size.</p>

<p><a href="https://redbean.dev/#unix.Stat:ino">unix.Stat:ino</a>()</p>

<p>└─→ inode:int  Inode number. 
This can be used to detect some other process used <a href="https://redbean.dev/#unix.rename">rename</a>() to swap out a file underneath you, so you can do a refresh. redbean does it during each main process heartbeat for its own use cases.</p>

<p>On Windows NT this is set to NtByHandleFileInformation::FileIndex.</p>

<p><a href="https://redbean.dev/#unix.Stat:dev">unix.Stat:dev</a>()</p>

<p>└─→ dev:int  ID of device containing file. 
On Windows NT this is NtByHandleFileInformation::VolumeSerialNumber.</p>

<p><a href="https://redbean.dev/#unix.Stat:rdev">unix.Stat:rdev</a>()</p>

<p>└─→ rdev:int  Information about device type. 
This value may be set to 0 or -1 for files that aren’t devices, depending on the operating system. unix.major() and unix.minor() may be used to extract the device numbers.</p>

<h2 id="unixstatfs-object"><a href="https://redbean.dev/#unix.Statfs">unix.Statfs object</a></h2>

<p>unix.Statfs objects are created by <a href="https://redbean.dev/#unix.statfs">statfs</a>() or <a href="https://redbean.dev/#unix.fstatfs">fstatfs</a>(). The following accessor methods are available.</p>

<p><a href="https://redbean.dev/#unix.Statfs.fstypename">unix.Statfs:fstypename</a>()</p>

<p>└─→ str  Type of filesystem. 
Here’s some examples of likely values:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"ext"</code> on Linux</li>
  <li><code class="language-plaintext highlighter-rouge">"xfs"</code> on RHEL7</li>
  <li><code class="language-plaintext highlighter-rouge">"apfs"</code> on Apple</li>
  <li><code class="language-plaintext highlighter-rouge">"zfs"</code> on FreeBSD</li>
  <li><code class="language-plaintext highlighter-rouge">"ffs"</code> on NetBSD and OpenBSD</li>
  <li><code class="language-plaintext highlighter-rouge">"NTFS"</code> on Windows</li>
</ul>

<p><a href="https://redbean.dev/#unix.Statfs.type">unix.Statfs:type</a>()</p>

<p>└─→ int  Type of filesystem. 
This is a platform-specific magic number. Consider using the unix.Statfs:fstypename() method instead. On Windows, this will actually be a Knuth multiplicative hash of the name.</p>

<p><a href="https://redbean.dev/#unix.Statfs.bsize">unix.Statfs:bsize</a>()</p>

<p>└─→ int  Optimal transfer block size. 
This field serves two purposes:</p>

<ol>
  <li>It tells you how to chunk i/o operations. For local disks, it’ll likely be any value between 512 and 4096 depending on the operating system. For network filesystems it will likely be a much larger value, e.g. 512kb.</li>
  <li>It can be multiplied with the fields <code class="language-plaintext highlighter-rouge">blocks</code>, <code class="language-plaintext highlighter-rouge">bfree</code>, and <code class="language-plaintext highlighter-rouge">bavail</code> to obtain a byte count.</li>
</ol>

<p><a href="https://redbean.dev/#unix.Statfs.blocks">unix.Statfs:blocks</a>()</p>

<p>└─→ int  Total data blocks in filesystem. 
The size of a block is measured as unix.Statfs:bsize().</p>

<p><a href="https://redbean.dev/#unix.Statfs.bfree">unix.Statfs:bfree</a>()</p>

<p>└─→ int  Total free blocks in filesystem. 
The size of a block is measured as unix.Statfs:bsize().</p>

<p><a href="https://redbean.dev/#unix.Statfs.bavail">unix.Statfs:bavail</a>()</p>

<p>└─→ int  Total free blocks available in filesystem to unprivileged users. 
The size of a block is measured as unix.Statfs:bsize().</p>

<p><a href="https://redbean.dev/#unix.Statfs.files">unix.Statfs:files</a>()</p>

<p>└─→ int  Total file nodes in filesystem. 
On Windows this is always the maximum integer value.</p>

<p><a href="https://redbean.dev/#unix.Statfs.ffree">unix.Statfs:ffree</a>()</p>

<p>└─→ int  Total free file nodes in filesystem. 
On Windows this is always the maximum integer value.</p>

<p><a href="https://redbean.dev/#unix.Statfs.fsid">unix.Statfs:fsid</a>()</p>

<p>└─→ int  Filesystem id. <a href="https://redbean.dev/#unix.Statfs.namelen">unix.Statfs:namelen</a>()</p>

<p>└─→ int  Maximum length of filename components in bytes. <a href="https://redbean.dev/#unix.Statfs.flags">unix.Statfs:flags</a>()</p>

<p>└─→ int  Filesystem flags. 
The following flags are defined:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ST_RDONLY</code>: Read-only filesystem (Linux/Windows/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_NOSUID</code>: Setuid binaries forbidden (Linux/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_NODEV</code>: Device files forbidden (Linux/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_NOEXEC</code>: Execution forbidden (Linux/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_SYNCHRONOUS</code>: Synchronous (Linux/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_NOATIME</code>: No access time (Linux/XNU/BSDs)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_RELATIME</code>: Relative access time (Linux/NetBSD)</li>
  <li><code class="language-plaintext highlighter-rouge">ST_APPEND</code>: Linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">ST_IMMUTABLE</code>: Linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">ST_MANDLOCK</code>: Linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">ST_NODIRATIME</code>: Linux-only</li>
  <li><code class="language-plaintext highlighter-rouge">ST_WRITE</code>: Linux-only</li>
</ul>

<p><a href="https://redbean.dev/#unix.Statfs.owner">unix.Statfs:owner</a>()</p>

<p>└─→ int  User id of owner of filesystem mount. 
On Linux this is always 0 for root. On Windows this is always 0.</p>

<h2 id="unixsigset-object"><a href="https://redbean.dev/#unix.Sigset">unix.Sigset object</a></h2>

<p>The unix.Sigset class defines a mutable bitset that may currently contain 128 entries. See <code class="language-plaintext highlighter-rouge">unix.NSIG</code> to find out how many signals your operating system actually supports.</p>

<p><a href="https://redbean.dev/#unix.Sigset:new">unix.Sigset</a>(sig:int, …)</p>

<p>└─→ unix.Sigset  Constructs new signal bitset object. <a href="https://redbean.dev/#unix.Sigset:add">unix.Sigset:add</a>(sig:int)</p>

<p>Adds signal to bitset. <a href="https://redbean.dev/#unix.Sigset:remove">unix.Sigset:remove</a>(sig:int) Removes signal from bitset.</p>

<p><a href="https://redbean.dev/#unix.Sigset:fill">unix.Sigset:fill</a>() Sets all bits in signal bitset to true. <a href="https://redbean.dev/#unix.Sigset:clear">unix.Sigset:clear</a>() Sets all bits in signal bitset to false. <a href="https://redbean.dev/#unix.Sigset:contains">unix.Sigset:contains</a>(sig:int)</p>

<p>└─→ bool  Returns true if <code class="language-plaintext highlighter-rouge">sig</code> is member of signal bitset. <a href="https://redbean.dev/#unix.Sigset:__repr">unix.Sigset:__repr</a>() <a href="https://redbean.dev/#unix.Sigset:__tostring">unix.Sigset:__tostring</a>()  Returns Lua code string that recreates object. 
<a href="https://redbean.dev/#unix.signal">unix signal magic numbers</a>
————————————————————-</p>

<p><a href="https://redbean.dev/#unix.SIGINT">unix.SIGINT</a> Terminal CTRL-C keystroke. <a href="https://redbean.dev/#unix.SIGQUIT">unix.SIGQUIT</a> Terminal CTRL-\ keystroke. <a href="https://redbean.dev/#unix.SIGHUP">unix.SIGHUP</a> Terminal hangup or daemon reload; auto-broadcasted to process group. <a href="https://redbean.dev/#unix.SIGILL">unix.SIGILL</a> Illegal instruction. <a href="https://redbean.dev/#unix.SIGTRAP">unix.SIGTRAP</a> INT3 instruction. <a href="https://redbean.dev/#unix.SIGABRT">unix.SIGABRT</a> Process aborted. <a href="https://redbean.dev/#unix.SIGBUS">unix.SIGBUS</a> Valid memory access that went beyond underlying end of file. <a href="https://redbean.dev/#unix.SIGFPE">unix.SIGFPE</a> Illegal math. <a href="https://redbean.dev/#unix.SIGKILL">unix.SIGKILL</a> Terminate with extreme prejudice. <a href="https://redbean.dev/#unix.SIGUSR1">unix.SIGUSR1</a> Do whatever you want. <a href="https://redbean.dev/#unix.SIGUSR2">unix.SIGUSR2</a> Do whatever you want. <a href="https://redbean.dev/#unix.SIGSEGV">unix.SIGSEGV</a> Invalid memory access. <a href="https://redbean.dev/#unix.SIGPIPE">unix.SIGPIPE</a> Write to closed file descriptor. <a href="https://redbean.dev/#unix.SIGALRM">unix.SIGALRM</a> Sent by <a href="https://redbean.dev/#unix.setitimer">setitimer</a>(). <a href="https://redbean.dev/#unix.SIGTERM">unix.SIGTERM</a> Terminate. <a href="https://redbean.dev/#unix.SIGCHLD">unix.SIGCHLD</a> Child process exited or terminated and is now a zombie (unless this is SIG_IGN or SA_NOCLDWAIT) or child process stopped due to terminal i/o or profiling/debugging (unless you used SA_NOCLDSTOP) <a href="https://redbean.dev/#unix.SIGCONT">unix.SIGCONT</a> Child process resumed from profiling/debugging. <a href="https://redbean.dev/#unix.SIGSTOP">unix.SIGSTOP</a> Child process stopped due to profiling/debugging. <a href="https://redbean.dev/#unix.SIGTSTP">unix.SIGTSTP</a> Terminal CTRL-Z keystroke. <a href="https://redbean.dev/#unix.SIGTTIN">unix.SIGTTIN</a> Terminal input for background process. <a href="https://redbean.dev/#unix.SIGTTOU">unix.SIGTTOU</a> Terminal output for background process. <a href="https://redbean.dev/#unix.SIGXCPU">unix.SIGXCPU</a> CPU time limit exceeded. <a href="https://redbean.dev/#unix.SIGXFSZ">unix.SIGXFSZ</a> File size limit exceeded. <a href="https://redbean.dev/#unix.SIGVTALRM">unix.SIGVTALRM</a> Virtual alarm clock. <a href="https://redbean.dev/#unix.SIGPROF">unix.SIGPROF</a> Profiling timer expired. <a href="https://redbean.dev/#unix.SIGWINCH">unix.SIGWINCH</a> Terminal resized. <a href="https://redbean.dev/#unix.SIGPWR">unix.SIGPWR</a> Not implemented in most community editions of system five. 
<a href="https://redbean.dev/#unix.Errno">unix.Errno object</a>
—————————————————-</p>

<p>This object is returned by system calls that fail. We prefer returning an object because for many system calls, an error is part their normal operation. For example, it’s often desirable to use the errno() method when performing a read() to check for EINTR.</p>

<p><a href="https://redbean.dev/#unix.Errno:errno">unix.Errno:errno</a>()</p>

<p>└─→ errno:int  Returns error magic number. 
The error number is always different for different platforms. On UNIX systems, error numbers occupy the range [1,127] in practice. The System V ABI reserves numbers as high as 4095. On Windows NT, error numbers can go up to 65535.</p>

<p><a href="https://redbean.dev/#unix.Errno:winerr">unix.Errno:winerr</a>()</p>

<p>└─→ errno:int  Returns Windows error number. 
On UNIX systems this is always 0. On Windows NT this will normally be the same as errno(). Because Windows defines so many error codes, there’s oftentimes a multimapping between its error codes and System Five. In those cases, this value reflect the GetLastError() result at the time the error occurred.</p>

<p><a href="https://redbean.dev/#unix.Errno:name">unix.Errno:name</a>()</p>

<p>└─→ symbol:str  Returns string of symbolic name of System Five error code. 
For example, this might return <code class="language-plaintext highlighter-rouge">"EINTR"</code>.</p>

<p><a href="https://redbean.dev/#unix.Errno:call">unix.Errno:call</a>()</p>

<p>└─→ symbol:str  Returns name of system call that failed. 
For example, this might return <code class="language-plaintext highlighter-rouge">"read"</code> if <a href="https://redbean.dev/#unix.read">read</a>() was what failed.</p>

<p><a href="https://redbean.dev/#unix.Errno:doc">unix.Errno:doc</a>()</p>

<p>└─→ symbol:str  Returns English string describing System Five error code. 
For example, this might return <code class="language-plaintext highlighter-rouge">"Interrupted system call"</code>.</p>

<p><a href="https://redbean.dev/#unix.Errno:__tostring">unix.Errno:__tostring</a>()</p>

<p>└─→ str  Returns verbose string describing error. 
Different information components are delimited by slash.</p>

<p>For example, this might return <code class="language-plaintext highlighter-rouge">"EINTR/4/Interrupted system call"</code>.</p>

<p>On Windows NT this will include additional information about the Windows error (including FormatMessage() output) if the WIN32 error differs from the System Five error code.</p>

<h2 id="unix-error-magic-numbers"><a href="https://redbean.dev/#unix.errno">unix error magic numbers</a></h2>

<p><a href="https://redbean.dev/#unix.EINVAL">unix.EINVAL</a> Invalid argument. 
Raised by [pretty much everything].</p>

<p><a href="https://redbean.dev/#unix.ENOSYS">unix.ENOSYS</a> System call not available on this platform. 
On Windows this is raised by <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.setuid">setuid</a>, <a href="https://redbean.dev/#unix.setgid">setgid</a>, <a href="https://redbean.dev/#unix.getsid">getsid</a>, <a href="https://redbean.dev/#unix.setsid">setsid</a>, and others we’re doing our best to document.</p>

<p><a href="https://redbean.dev/#unix.ENOENT">unix.ENOENT</a> No such file or directory. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.clock_getres">clock_getres</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.opendir">opendir</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utime">utime</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOTDIR">unix.ENOTDIR</a> Not a directory. This means that a directory component in a supplied path <em>existed</em> but wasn’t a directory. For example, if you try to <code class="language-plaintext highlighter-rouge">open("foo/bar")</code> and <code class="language-plaintext highlighter-rouge">foo</code> is a regular file, then <code class="language-plaintext highlighter-rouge">ENOTDIR</code> will be returned. 
Raised by <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.opendir">opendir</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.futimesat">futimesat</a>.</p>

<p><a href="https://redbean.dev/#unix.EINTR">unix.EINTR</a> The greatest of all errnos; crucial for building real time reliable software. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.clock_nanosleep">clock_nanosleep</a>, <a href="https://redbean.dev/#unix.close">close</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.dup">dup</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.flock">flock</a>, <a href="https://redbean.dev/#unix.getrandom">getrandom</a>, <a href="https://redbean.dev/#unix.nanosleep">nanosleep</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.pause">pause</a>, <a href="https://redbean.dev/#unix.poll">poll</a>, <a href="https://redbean.dev/#unix.ptrace">ptrace</a>, <a href="https://redbean.dev/#unix.read">read</a>, <a href="https://redbean.dev/#unix.recv">recv</a>, <a href="https://redbean.dev/#unix.select">select</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.sigsuspend">sigsuspend</a>, <a href="https://redbean.dev/#unix.sigwaitinfo">sigwaitinfo</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.wait">wait</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.EIO">unix.EIO</a> Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.acct">acct</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.close">close</a>, <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.fallocate">fallocate</a>, <a href="https://redbean.dev/#unix.fsync">fsync</a>, <a href="https://redbean.dev/#unix.ioperm">ioperm</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.madvise">madvise</a>, <a href="https://redbean.dev/#unix.mbind">mbind</a>, <a href="https://redbean.dev/#unix.ptrace">ptrace</a>, <a href="https://redbean.dev/#unix.read">read</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.sendfile">sendfile</a>, <a href="https://redbean.dev/#unix.statfs">statfs</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.sync_file_range">sync_file_range</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.write">write</a>. <a href="https://redbean.dev/#unix.ENXIO">unix.ENXIO</a> No such device or address. 
Raised by <a href="https://redbean.dev/#unix.lseek">lseek</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.prctl">prctl</a>.</p>

<p><a href="https://redbean.dev/#unix.E2BIG">unix.E2BIG</a> Argument list too long. 
Raised by <a href="https://redbean.dev/#unix.execve">execve</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOEXEC">unix.ENOEXEC</a> Exec format error. 
Raised by <a href="https://redbean.dev/#unix.execve">execve</a>.</p>

<p><a href="https://redbean.dev/#unix.ECHILD">unix.ECHILD</a> No child process. 
Raised by <a href="https://redbean.dev/#unix.wait">wait</a>.</p>

<p><a href="https://redbean.dev/#unix.ESRCH">unix.ESRCH</a> No such process. 
Raised by <a href="https://redbean.dev/#unix.getpriority">getpriority</a>, <a href="https://redbean.dev/#unix.getrlimit">getrlimit</a>, <a href="https://redbean.dev/#unix.getsid">getsid</a>, ioprio_set, <a href="https://redbean.dev/#unix.kill">kill</a>, <a href="https://redbean.dev/#unix.setpgid">setpgid</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.EBADF">unix.EBADF</a> Bad file descriptor; cf. <a href="https://redbean.dev/#unix.EBADFD">EBADFD</a>. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.close">close</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.dup">dup</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.flock">flock</a>, <a href="https://redbean.dev/#unix.fsync">fsync</a>, <a href="https://redbean.dev/#unix.futimesat">futimesat</a>, <a href="https://redbean.dev/#unix.opendir">opendir</a>, <a href="https://redbean.dev/#unix.getpeername">getpeername</a>, <a href="https://redbean.dev/#unix.getsockname">getsockname</a>, <a href="https://redbean.dev/#unix.getsockopt">getsockopt</a>, <a href="https://redbean.dev/#unix.ioctl">ioctl</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.listen">listen</a>, <a href="https://redbean.dev/#unix.llseek">llseek</a>, <a href="https://redbean.dev/#unix.lseek">lseek</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.prctl">prctl</a>, <a href="https://redbean.dev/#unix.read">read</a>, <a href="https://redbean.dev/#unix.readahead">readahead</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.recv">recv</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.select">select</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.shutdown">shutdown</a>, <a href="https://redbean.dev/#unix.splice">splice</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.sync">sync</a>, <a href="https://redbean.dev/#unix.sync_file_range">sync_file_range</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.EAGAIN">unix.EAGAIN</a> Resource temporarily unavailable (e.g. SO_RCVTIMEO expired, too many processes, too much memory locked, read or write with O_NONBLOCK needs polling, etc.). 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.fork">fork</a>, <a href="https://redbean.dev/#unix.getrandom">getrandom</a>, <a href="https://redbean.dev/#unix.mincore">mincore</a>, <a href="https://redbean.dev/#unix.mlock">mlock</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.mremap">mremap</a>, <a href="https://redbean.dev/#unix.poll">poll</a>, <a href="https://redbean.dev/#unix.read">read</a>, <a href="https://redbean.dev/#unix.select">select</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.setresuid">setresuid</a>, <a href="https://redbean.dev/#unix.setreuid">setreuid</a>, <a href="https://redbean.dev/#unix.setuid">setuid</a>, <a href="https://redbean.dev/#unix.sigwaitinfo">sigwaitinfo</a>, <a href="https://redbean.dev/#unix.splice">splice</a>, <a href="https://redbean.dev/#unix.tee">tee</a>, <a href="https://redbean.dev/#unix.timer_create">timer_create</a>, <a href="https://redbean.dev/#unix.kill">kill</a>, <a href="https://redbean.dev/#unix.write">write</a>,</p>

<p><a href="https://redbean.dev/#unix.EPIPE">unix.EPIPE</a> Broken pipe. 
This happens when you try to write data to a subprocess via a pipe but the reader end has already closed, possibly because the process died. Normally i/o routines only return this if <code class="language-plaintext highlighter-rouge">SIGPIPE</code> doesn’t kill the process. Unlike default UNIX programs, redbean currently ignores <code class="language-plaintext highlighter-rouge">SIGPIPE</code> by default, so this error code is a distinct possibility when pipes or sockets are being used.</p>

<p>Returned by <a href="https://redbean.dev/#unix.write">write</a>, <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.ENAMETOOLONG">unix.ENAMETOOLONG</a> Filename too long. Cosmopolitan Libc currently defines <code class="language-plaintext highlighter-rouge">PATH_MAX</code> as 1024 characters. On UNIX that limit should only apply to system call wrappers like <a href="https://redbean.dev/#unix.realpath">realpath</a>. On Windows NT it’s observed by all system calls that accept a pathname. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.gethostname">gethostname</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.EACCES">unix.EACCES</a> Permission denied. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.clock_getres">clock_getres</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.getpriority">getpriority</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.mprotect">mprotect</a>, <a href="https://redbean.dev/#unix.msgctl">msgctl</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.prctl">prctl</a>, <a href="https://redbean.dev/#unix.ptrace">ptrace</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.semget">semget</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.setpgid">setpgid</a>, <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.uselib">uselib</a>, <a href="https://redbean.dev/#unix.utime">utime</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOMEM">unix.ENOMEM</a> We require more vespene gas. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.clone">clone</a>, <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.fork">fork</a>, <a href="https://redbean.dev/#unix.getgroups">getgroups</a>, <a href="https://redbean.dev/#unix.getrlimit">getrlimit</a>, <a href="https://redbean.dev/#unix.ioperm">ioperm</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mbind">mbind</a>, <a href="https://redbean.dev/#unix.mincore">mincore</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.mlock">mlock</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.mprotect">mprotect</a>, <a href="https://redbean.dev/#unix.mremap">mremap</a>, <a href="https://redbean.dev/#unix.msync">msync</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.poll">poll</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.recv">recv</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.select">select</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.sigaltstack">sigaltstack</a>, <a href="https://redbean.dev/#unix.splice">splice</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.sync_file_range">sync_file_range</a>, <a href="https://redbean.dev/#unix.tee">tee</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>.</p>

<p><a href="https://redbean.dev/#unix.EPERM">unix.EPERM</a> Operation not permitted. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.getdomainname">getdomainname</a>, <a href="https://redbean.dev/#unix.gethostname">gethostname</a>, <a href="https://redbean.dev/#unix.getrlimit">getrlimit</a>, <a href="https://redbean.dev/#unix.getsid">getsid</a>, <a href="https://redbean.dev/#unix.ioperm">ioperm</a>, <a href="https://redbean.dev/#unix.iopl">iopl</a>, <a href="https://redbean.dev/#unix.kill">kill</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.nice">nice</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.sched_setaffinity">sched_setaffinity</a>, <a href="https://redbean.dev/#unix.sched_setscheduler">sched_setscheduler</a>, <a href="https://redbean.dev/#unix.seteuid">seteuid</a>, <a href="https://redbean.dev/#unix.setfsgid">setfsgid</a>, <a href="https://redbean.dev/#unix.setfsuid">setfsuid</a>, <a href="https://redbean.dev/#unix.setgid">setgid</a>, <a href="https://redbean.dev/#unix.setns">setns</a>, <a href="https://redbean.dev/#unix.setpgid">setpgid</a>, <a href="https://redbean.dev/#unix.setresuid">setresuid</a>, <a href="https://redbean.dev/#unix.setreuid">setreuid</a>, <a href="https://redbean.dev/#unix.setsid">setsid</a>, <a href="https://redbean.dev/#unix.setuid">setuid</a>, <a href="https://redbean.dev/#unix.setup">setup</a>, <a href="https://redbean.dev/#unix.setxattr">setxattr</a>, <a href="https://redbean.dev/#unix.sigaltstack">sigaltstack</a>, <a href="https://redbean.dev/#unix.spu_create">spu_create</a>, <a href="https://redbean.dev/#unix.stime">stime</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.syslog">syslog</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utime">utime</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOTBLK">unix.ENOTBLK</a> Block device required. 
Raised by <a href="https://redbean.dev/#unix.umount">umount</a>.</p>

<p><a href="https://redbean.dev/#unix.EBUSY">unix.EBUSY</a> Device or resource busy. 
Raised by <a href="https://redbean.dev/#unix.dup">dup</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.msync">msync</a>, <a href="https://redbean.dev/#unix.prctl">prctl</a>, <a href="https://redbean.dev/#unix.ptrace">ptrace</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>.</p>

<p><a href="https://redbean.dev/#unix.EEXIST">unix.EEXIST</a> File exists. 
Raised by <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>.</p>

<p><a href="https://redbean.dev/#unix.EXDEV">unix.EXDEV</a> Improper link. 
Raised by <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.rename">rename</a>.</p>

<p><a href="https://redbean.dev/#unix.ENODEV">unix.ENODEV</a> No such device. 
Raised by <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>.</p>

<p><a href="https://redbean.dev/#unix.EISDIR">unix.EISDIR</a> Is a directory. 
Raised by <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.read">read</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>.</p>

<p><a href="https://redbean.dev/#unix.ENFILE">unix.ENFILE</a> Too many open files in system. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.pipe">pipe</a>, <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>.</p>

<p><a href="https://redbean.dev/#unix.EMFILE">unix.EMFILE</a> Too many open files. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.dup">dup</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.pipe">pipe</a>, <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOTTY">unix.ENOTTY</a> Inappropriate i/o control operation. 
Raised by <a href="https://redbean.dev/#unix.ioctl">ioctl</a>.</p>

<p><a href="https://redbean.dev/#unix.ETXTBSY">unix.ETXTBSY</a> Won’t open executable that’s executing in write mode. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>.</p>

<p><a href="https://redbean.dev/#unix.EFBIG">unix.EFBIG</a> File too large. 
Raised by <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOSPC">unix.ENOSPC</a> No space left on device. 
Raised by <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.fsync">fsync</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.sync_file_range">sync_file_range</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.EDQUOT">unix.EDQUOT</a> Disk quota exceeded. 
Raised by <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.ESPIPE">unix.ESPIPE</a> Invalid seek. 
Raised by <a href="https://redbean.dev/#unix.lseek">lseek</a>, <a href="https://redbean.dev/#unix.splice">splice</a>, <a href="https://redbean.dev/#unix.sync_file_range">sync_file_range</a>.</p>

<p><a href="https://redbean.dev/#unix.EROFS">unix.EROFS</a> Read-only filesystem. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utime">utime</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.EMLINK">unix.EMLINK</a> Too many links; 
raised by <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.rename">rename</a>.</p>

<p><a href="https://redbean.dev/#unix.ERANGE">unix.ERANGE</a> Result too large. 
Raised by <a href="https://redbean.dev/#unix.prctl">prctl</a>.</p>

<p><a href="https://redbean.dev/#unix.EDEADLK">unix.EDEADLK</a> Resource deadlock avoided. 
Raised by <a href="https://redbean.dev/#unix.fcntl">fcntl</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOLCK">unix.ENOLCK</a> No locks available. 
Raised by <a href="https://redbean.dev/#unix.fcntl">fcntl</a>, <a href="https://redbean.dev/#unix.flock">flock</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOTEMPTY">unix.ENOTEMPTY</a> Directory not empty. 
Raised by <a href="https://redbean.dev/#unix.rmdir">rmdir</a>.</p>

<p><a href="https://redbean.dev/#unix.ELOOP">unix.ELOOP</a> Too many levels of symbolic links. 
Raised by <a href="https://redbean.dev/#unix.access">access</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.chdir">chdir</a>, <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.chown">chown</a>, <a href="https://redbean.dev/#unix.chroot">chroot</a>, <a href="https://redbean.dev/#unix.execve">execve</a>, <a href="https://redbean.dev/#unix.link">link</a>, <a href="https://redbean.dev/#unix.mkdir">mkdir</a>, <a href="https://redbean.dev/#unix.mknod">mknod</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.readlink">readlink</a>, <a href="https://redbean.dev/#unix.rename">rename</a>, <a href="https://redbean.dev/#unix.rmdir">rmdir</a>, <a href="https://redbean.dev/#unix.stat">stat</a>, <a href="https://redbean.dev/#unix.symlink">symlink</a>, <a href="https://redbean.dev/#unix.truncate">truncate</a>, <a href="https://redbean.dev/#unix.unlink">unlink</a>, <a href="https://redbean.dev/#unix.utimensat">utimensat</a>.</p>

<p><a href="https://redbean.dev/#unix.ETIME">unix.ETIME</a> Timer expired. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>.</p>

<p><a href="https://redbean.dev/#unix.EPROTO">unix.EPROTO</a> Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>. <a href="https://redbean.dev/#unix.EOVERFLOW">unix.EOVERFLOW</a> Raised by <a href="https://redbean.dev/#unix.copy_file_range">copy_file_range</a>, <a href="https://redbean.dev/#unix.lseek">lseek</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.open">open</a>, <a href="https://redbean.dev/#unix.stat">stat</a>. <a href="https://redbean.dev/#unix.ENOTSOCK">unix.ENOTSOCK</a> Not a socket. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.getpeername">getpeername</a>, <a href="https://redbean.dev/#unix.getsockname">getsockname</a>, <a href="https://redbean.dev/#unix.getsockopt">getsockopt</a>, <a href="https://redbean.dev/#unix.listen">listen</a>, <a href="https://redbean.dev/#unix.recv">recv</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.shutdown">shutdown</a>.</p>

<p><a href="https://redbean.dev/#unix.EDESTADDRREQ">unix.EDESTADDRREQ</a> Destination address required. 
Raised by <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.write">write</a>.</p>

<p><a href="https://redbean.dev/#unix.EMSGSIZE">unix.EMSGSIZE</a> Message too long. 
Raised by <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.EPROTOTYPE">unix.EPROTOTYPE</a> Protocol wrong type for socket. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOPROTOOPT">unix.ENOPROTOOPT</a> Protocol not available. 
Raised by <a href="https://redbean.dev/#unix.getsockopt">getsockopt</a>, <a href="https://redbean.dev/#unix.accept">accept</a>.</p>

<p><a href="https://redbean.dev/#unix.EPROTONOSUPPORT">unix.EPROTONOSUPPORT</a> Protocol not supported. 
Raised by <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>.</p>

<p><a href="https://redbean.dev/#unix.ESOCKTNOSUPPORT">unix.ESOCKTNOSUPPORT</a> Socket type not supported. <a href="https://redbean.dev/#unix.ENOTSUP">unix.ENOTSUP</a> Operation not supported. 
Raised by <a href="https://redbean.dev/#unix.chmod">chmod</a>, <a href="https://redbean.dev/#unix.clock_getres">clock_getres</a>, <a href="https://redbean.dev/#unix.clock_nanosleep">clock_nanosleep</a>, <a href="https://redbean.dev/#unix.timer_create">timer_create</a>.</p>

<p><a href="https://redbean.dev/#unix.EOPNOTSUPP">unix.EOPNOTSUPP</a> Socket operation not supported. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.listen">listen</a>, <a href="https://redbean.dev/#unix.mmap">mmap</a>, <a href="https://redbean.dev/#unix.prctl">prctl</a>, <a href="https://redbean.dev/#unix.readv">readv</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>.</p>

<p><a href="https://redbean.dev/#unix.EPFNOSUPPORT">unix.EPFNOSUPPORT</a> Protocol family not supported. <a href="https://redbean.dev/#unix.EAFNOSUPPORT">unix.EAFNOSUPPORT</a> Address family not supported. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.socket">socket</a>, <a href="https://redbean.dev/#unix.socketpair">socketpair</a>.</p>

<p><a href="https://redbean.dev/#unix.EADDRINUSE">unix.EADDRINUSE</a> Address already in use. 
Raised by <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.listen">listen</a>.</p>

<p><a href="https://redbean.dev/#unix.EADDRNOTAVAIL">unix.EADDRNOTAVAIL</a> Address not available. 
Raised by <a href="https://redbean.dev/#unix.bind">bind</a>, <a href="https://redbean.dev/#unix.connect">connect</a>.</p>

<p><a href="https://redbean.dev/#unix.ENETDOWN">unix.ENETDOWN</a> Network is down. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>.</p>

<p><a href="https://redbean.dev/#unix.ENETUNREACH">unix.ENETUNREACH</a> Host is unreachable. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>, <a href="https://redbean.dev/#unix.connect">connect</a>.</p>

<p><a href="https://redbean.dev/#unix.ENETRESET">unix.ENETRESET</a> Connection reset by network. <a href="https://redbean.dev/#unix.ECONNABORTED">unix.ECONNABORTED</a> Connection reset before accept. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>.</p>

<p><a href="https://redbean.dev/#unix.ECONNRESET">unix.ECONNRESET</a> Connection reset by client. 
Raised by <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOBUFS">unix.ENOBUFS</a> No buffer space available; 
Raised by <a href="https://redbean.dev/#unix.getpeername">getpeername</a>, <a href="https://redbean.dev/#unix.getsockname">getsockname</a>, <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.EISCONN">unix.EISCONN</a> Socket is connected. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.ENOTCONN">unix.ENOTCONN</a> Socket is not connected. 
Raised by <a href="https://redbean.dev/#unix.getpeername">getpeername</a>, <a href="https://redbean.dev/#unix.recv">recv</a>, <a href="https://redbean.dev/#unix.send">send</a>, <a href="https://redbean.dev/#unix.shutdown">shutdown</a>.</p>

<p><a href="https://redbean.dev/#unix.ESHUTDOWN">unix.ESHUTDOWN</a> Cannot send after transport endpoint shutdown; note that shutdown write is an <code class="language-plaintext highlighter-rouge">EPIPE</code>. <a href="https://redbean.dev/#unix.ETOOMANYREFS">unix.ETOOMANYREFS</a> Too many references: cannot splice. 
Raised by <a href="https://redbean.dev/#unix.sendmsg">sendmsg</a>.</p>

<p><a href="https://redbean.dev/#unix.ETIMEDOUT">unix.ETIMEDOUT</a> Connection timed out. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>.</p>

<p><a href="https://redbean.dev/#unix.ECONNREFUSED">unix.ECONNREFUSED</a> System-imposed limit on the number of threads was encountered. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.listen">listen</a>, <a href="https://redbean.dev/#unix.recv">recv</a>.</p>

<p><a href="https://redbean.dev/#unix.EHOSTDOWN">unix.EHOSTDOWN</a> Host is down. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>.</p>

<p><a href="https://redbean.dev/#unix.EHOSTUNREACH">unix.EHOSTUNREACH</a> Host is unreachable. 
Raised by <a href="https://redbean.dev/#unix.accept">accept</a>.</p>

<p><a href="https://redbean.dev/#unix.EALREADY">unix.EALREADY</a> Connection already in progress. 
Raised by <a href="https://redbean.dev/#unix.connect">connect</a>, <a href="https://redbean.dev/#unix.send">send</a>.</p>

<p><a href="https://redbean.dev/#unix.ENODATA">unix.ENODATA</a> No message is available in xsi stream or named pipe is being closed; no data available; barely in posix; returned by ioctl; very close in spirit to <a href="https://redbean.dev/#unix.EPIPE">EPIPE</a>? 
<a href="https://redbean.dev/#unix.magnums">unix miscellaneous magic numbers</a>
———————————————————————</p>

<p><a href="https://redbean.dev/#unix.ARG_MAX">unix.ARG_MAX</a> Returns maximum length of arguments for new processes. 
This is the character limit when calling <a href="https://redbean.dev/#unix.execve">execve</a>(). It’s the sum of the lengths of <code class="language-plaintext highlighter-rouge">argv</code> and <code class="language-plaintext highlighter-rouge">envp</code> including any nul terminators and pointer arrays. For example to see how much your shell <code class="language-plaintext highlighter-rouge">envp</code> uses</p>

<p>$ echo $(($(env | wc -c) + 1 + ($(env | wc -l) + 1) * 8))
758</p>

<p>POSIX mandates this be 4096 or higher. On Linux this it’s 128<em>1024. On Windows NT it’s 32767</em>2 because CreateProcess lpCommandLine and environment block are separately constrained to 32,767 characters. Most other systems define this limit much higher.</p>

<p><a href="https://redbean.dev/#unix.BUFSIZ">unix.BUFSIZ</a> Returns default buffer size. 
The UNIX module does not perform any buffering between calls.</p>

<p>Each time a read or write is performed via the UNIX API your redbean will allocate a buffer of this size by default. This current default would be 4096 across platforms.</p>

<p><a href="https://redbean.dev/#unix.CLK_TCK">unix.CLK_TCK</a> Returns the scheduler frequency. 
This is granularity at which the kernel does work. For example, the Linux kernel normally operates at 100hz so its CLK_TCK will be 100.</p>

<p>This value is useful for making sense out of unix.Rusage data.</p>

<p><a href="https://redbean.dev/#unix.PIPE_BUF">unix.PIPE_BUF</a> Returns maximum size at which pipe i/o is guaranteed atomic. 
POSIX requires this be at least 512. Linux is more generous and allows 4096. On Windows NT this is currently 4096, and it’s the parameter redbean passes to CreateNamedPipe().</p>

<p><a href="https://redbean.dev/#unix.PATH_MAX">unix.PATH_MAX</a> Returns maximum length of file path. 
This applies to a complete path being passed to system calls.</p>

<p>POSIX.1 XSI requires this be at least 1024 so that’s what most platforms support. On Windows NT, the limit is technically 260 characters. Your redbean works around that by prefixing <code class="language-plaintext highlighter-rouge">//?/</code> to your paths as needed. On Linux this limit will be 4096, but that won’t be the case for functions such as realpath that are implemented at the C library level; however such functions are the exception rather than the norm, and report enametoolong(), when exceeding the libc limit.</p>

<p><a href="https://redbean.dev/#unix.NAME_MAX">unix.NAME_MAX</a> Returns maximum length of file path component. 
POSIX requires this be at least 14. Most operating systems define it as 255. It’s a good idea to not exceed 253 since that’s the limit on DNS labels.</p>

<p><a href="https://redbean.dev/#unix.NSIG">unix.NSIG</a> Returns maximum number of signals supported by underlying system. 
The limit for unix.Sigset is 128 to support FreeBSD, but most operating systems define this much lower, like 32. This constant reflects the value chosen by the underlying operating system.</p>

<h2 id="constants"><a href="https://redbean.dev/#constants">constants</a></h2>

<p><a href="https://redbean.dev/#kLogDebug">kLogDebug</a>Integer for debug logging level. See <code class="language-plaintext highlighter-rouge">Log</code>. <a href="https://redbean.dev/#kLogVerbose">kLogVerbose</a>Integer for verbose logging level, which is less than <code class="language-plaintext highlighter-rouge">kLogDebug</code>. See <code class="language-plaintext highlighter-rouge">Log</code>. <a href="https://redbean.dev/#kLogInfo">kLogInfo</a>Integer for info logging level, which is less than <code class="language-plaintext highlighter-rouge">kLogVerbose</code>. See <code class="language-plaintext highlighter-rouge">Log</code>. <a href="https://redbean.dev/#kLogWarn">kLogWarn</a>Integer for warn logging level, which is less than <code class="language-plaintext highlighter-rouge">kLogVerbose</code>. See <code class="language-plaintext highlighter-rouge">Log</code>. <a href="https://redbean.dev/#kLogError">kLogError</a>Integer for error logging level, which is less than <code class="language-plaintext highlighter-rouge">kLogWarn</code>. See <code class="language-plaintext highlighter-rouge">Log</code>. <a href="https://redbean.dev/#kLogFatal">kLogFatal</a> Integer for fatal logging level, which is less than <code class="language-plaintext highlighter-rouge">kLogError</code>. See <code class="language-plaintext highlighter-rouge">Log</code>. Logging anything at this level will result in a backtrace and process exit. 
<a href="https://redbean.dev/#ops">operations</a>
————————————–</p>

<p>You can have redbean run as a daemon by doing the following:</p>

<p>redbean.com -vv -d -L redbean.log -P redbean.pid
kill -TERM $(cat redbean.pid) # 1x: graceful shutdown
kill -TERM $(cat redbean.pid) # 2x: forceful shutdown</p>

<p>It’s possible to modify global interpreter state later on in the server’s lifecycle. When running in daemon mode, using</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kill -HUP
$(pidof redbean.com)
</code></pre></div></div>
<p>will instruct redbean to run the code in <code class="language-plaintext highlighter-rouge">.reload.lua</code> from the main process, will will be lazily propagated to client connections.</p>

<p>You can modify the zip while redbean is running. The zip command by default will do this by replacing the inode. redbean will detect the changed inode within a second and broadcast SIGUSR1 to the process group so the new assets get indexed as soon as possible. It’s also possible to modify the executable assets in place, while the executable is running. If you do that, then you need to be careful to not disturb the local file and central directory. What you would do instead is append changed or new files. Then append a new central directory, along with a new end of central directory record. Finally, memset(0) the old end of central directory record. redbean will detect it’s gone and reindex. You can even modify local files in place too. The way you would do that is by clearing the <code class="language-plaintext highlighter-rouge">PK♥♦</code> magic marker while the file memory is being mutated, and then putting it back. Any requests that arrive during the modification will result in a 503 Service Unavailable so your load balancer can failover.</p>

<p>redbean will grow to whatever number of processes your system limits and tcp stack configuration allow. Once functions like <code class="language-plaintext highlighter-rouge">fork()</code> and <code class="language-plaintext highlighter-rouge">accept()</code> start to fail, redbean will enter “meltdown mode” where it interrupts worker processes to immediately close idling and lagging connections. redbean may need to drop requests by sending <code class="language-plaintext highlighter-rouge">503 Service Unavailable</code> until congestion subsides. So be sure your load balancer is configured to immediately failover to another instance in such cases.</p>

<p>There’s a 64kb limit on request message size, where the header portion is further limited to 32kb. We do that to guarantee processes stay tiny. You can tune it using the -M flag. redbean spawns a process for each connection. redbean needs about 200kb of RAM per worker on average. Clients are encouraged to pipeline HTTP requests within the same connection.</p>

<p>redbean rejects requests for hidden files, i.e. any path containing the substring <code class="language-plaintext highlighter-rouge">/.</code> and requests with denormalized paths, e.g. <code class="language-plaintext highlighter-rouge">/../../etc/passwd</code> are also categorically rejected. Furthermore, redbean won’t service requests that come in more than 32 fragments. Those few restrictions aside, redbean generally aims to follow Postel’s maxim in the sense that it’s liberal in what it accepts but conservative in what it sends.</p>

<p>If you want Rust-like promises then redbean can be compiled with ASAN memory safety. Cosmopolitan Libc has the only open source implementation of the Address Sanitizer runtime that’s intended for production use. It causes redbean worker processes to crash and log a report should a bug like a buffer overrun, use-after-free, or stack smash occur. This has a marginal impact on performance. It can be useful in environments where interruptions in a service are more desirable than risking the system being compromised.</p>

<h2 id="security"><a href="https://redbean.dev/#security">security</a></h2>

<p>redbean doesn’t secure your computer. It does however provide tools we hope will help you do it yourself. For further details on why things need to be this way, please see the disclaimer in the ISC license.</p>

<p>Some computing environments rely on physical security and redbean is a good fit for that. For example, if you need to run a web app on an air-gapped computer running an old version of some other operating system that can’t be upgraded, then you load your redbean off a thumb drive provided that the system was installed after the year 2007 or more specifically runs x86_64 with Linux 2.6.18+ or Windows Vista+.</p>

<p>Some environments require that security be provided using existing infrastructure like SSL frontends. In that case, the “redbean-unsecure” download link might be the right choice for you, since it’s a special build of redbean that leaves out the security code. That way, you can bolt the security on separately using a tool like stunnel.</p>

<h3 id="ssl"><a href="https://redbean.dev/#ssl">ssl</a></h3>

<p>redbean provides integrated SSL support based on MbedTLS. It’s configured to offer 128 bits of security with modern clients, but will fall back to at minimum 112 bits of security depending on the preferences of the client. Both are secure based on public knowledge until 2030 according to NIST. If you’d rather restrict yourself to just 150+ bits of security but with the tradeoff of dropping support for old Internet Explorer and making embedded clients less happy, then pass the -B flag, which’ll restrict redbean to a very short list of protocols, algorithms, and parameters that the NSA, NIST, and IANA all agree upon.</p>

<p>redbean’s SSL implementation is tuned for performance. It uses hardware algorithms when available such as AES-NI, SHA-NI, and RDRAND. redbean does not use costly hardnening measures specific only to legacy clients like Internet Explorer if they increase denial of service risk for the server as a whole.</p>

<p>redbean is tuned for ease of use. Your redbean uses a protocol polyglot for serving HTTP and HTTPS on the same port numbers. Both the TLS hello and the SSLv2 hello are accepted, even though only TLS is supported. For example, both of these are valid:</p>

<p>http://127.0.0.1:8080/
https://127.0.0.1:8080/</p>

<p>By default, your redbean will automatically generate ephemeral self-signed ECDSA and RSA serving certificates. This causes browser warnings. The simplest option for making the warning go away is to give redbean a key signing key (KSK).</p>

<p>openssl req -x509 -newkey rsa:2048 <br />
  -keyout .ca.key -out .ca.crt -days 6570 -nodes <br />
  -subj ‘/C=US/ST=CA/O=Jane Doe/CN=My Root CA 1’ <br />
  -addext ‘keyUsage = critical,cRLSign,keyCertSign’
sudo ./redbean.com -C ca.crt -K .ca.key -p 80 -p 443</p>

<p>Your SSL root can then be installed on client machines as follows:</p>

<h1 id="linux-1">linux</h1>
<p>sudo cp ca.crt /usr/local/share/ca-certificates
sudo update-ca-certificates</p>

<h1 id="macos-1">macos</h1>
<p>sudo security add-trusted-cert -d -r trustRoot <br />
  -k /Library/Keychains/System.keychain ca.crt</p>

<h1 id="windows-1">windows</h1>
<p>certutil -addstore -f “ROOT” ca.crt</p>

<h1 id="notes--firefox-is-special-you-have-to-use-its-settings">notes # firefox is special you have to use its settings</h1>

<p>If your goal is to make SSL deploys easy, then it’s possible to put the KSK inside the redbean.com file using the InfoZIP program. Be sure the key is a hidden file. It can be loaded using your <code class="language-plaintext highlighter-rouge">.init.lua</code> script with the <a href="https://redbean.dev/#LoadAsset"><code class="language-plaintext highlighter-rouge">LoadAsset</code></a>, <a href="https://redbean.dev/#ProgramCertificate"><code class="language-plaintext highlighter-rouge">ProgramCertificate</code></a>, and <a href="https://redbean.dev/#ProgramPrivateKey"><code class="language-plaintext highlighter-rouge">ProgramPrivateKey</code></a> APIs. Please note, this is just an example of what you could do; we don’t claim it’s what you should do.</p>

<p>For a public-facing online service, the simplest way to use SSL is with Let’s Encrypt. Let’s say you’re migrating from NGINX. In that case you’ll likely want something like the following:</p>

<h1 id="commands-subject-to-public-monitoring">commands subject to public monitoring</h1>
<p>certbot certonly –nginx –key-type ecdsa <br />
  –cert-name redbean-ecdsa -d redbean.dev -d www.redbean.dev
certbot certonly –nginx –key-type rsa <br />
  –cert-name redbean-rsa -d redbean.dev -d www.redbean.dev</p>

<p>You can then program <code class="language-plaintext highlighter-rouge">/var/www/html/.init.lua</code> as such:</p>

<p><a href="https://redbean.dev/#ProgramPrivateKey">ProgramPrivateKey</a>(Slurp(‘/etc/letsencrypt/live/redbean-ecdsa/privkey.pem’))
<a href="https://redbean.dev/#ProgramCertificate">ProgramCertificate</a>(Slurp(‘/etc/letsencrypt/live/redbean-ecdsa/fullchain.pem’))
<a href="https://redbean.dev/#ProgramPrivateKey">ProgramPrivateKey</a>(Slurp(‘/etc/letsencrypt/live/redbean-rsa/privkey.pem’))
<a href="https://redbean.dev/#ProgramCertificate">ProgramCertificate</a>(Slurp(‘/etc/letsencrypt/live/redbean-rsa/fullchain.pem’))
if <a href="https://redbean.dev/#IsDaemon">IsDaemon</a>() then
   <a href="https://redbean.dev/#ProgramUid">ProgramUid</a>(33)  # see <code class="language-plaintext highlighter-rouge">vipw</code> to get appropriate number
   <a href="https://redbean.dev/#ProgramGid">ProgramGid</a>(33)  # see <code class="language-plaintext highlighter-rouge">vigr</code> to get appropriate number
   <a href="https://redbean.dev/#ProgramPort">ProgramPort</a>(80)
   <a href="https://redbean.dev/#ProgramPort">ProgramPort</a>(443)
   <a href="https://redbean.dev/#ProgramLogPath">ProgramLogPath</a>(‘/var/log/redbean.log’)
   <a href="https://redbean.dev/#ProgramPidPath">ProgramPidPath</a>(‘/var/run/redbean.pid’)
end
function <a href="https://redbean.dev/#OnHttpRequest">OnHttpRequest</a>()
   path = <a href="https://redbean.dev/#GetPath">GetPath</a>()
   if path == ‘/favicon.ico’ or
      path == ‘/site.webmanifest’ or
      path == ‘/favicon-16x16.png’ or
      path == ‘/favicon-32x32.png’ or
      path == ‘/apple-touch-icon’ then
      <a href="https://redbean.dev/#SetLogLevel">SetLogLevel</a>(<a href="https://redbean.dev/#kLogWarn">kLogWarn</a>)
   end
   <a href="https://redbean.dev/#Route">Route</a>()
   <a href="https://redbean.dev/#SetHeader">SetHeader</a>(‘Content-Language’, ‘en-US’)
end</p>

<p>You’d then run redbean as follows:</p>

<p>redbean.com -dD /var/www/html</p>

<p>You can load as many public and private keys as you want. They can be specified as pem, der, concatenated ascii, bundles, or chains. If you don’t specify specific chains then redbean will automatically infer it based on SUBJECT → ISSUER relationships. Your redbean won’t serve the self-signed root certificate at the end of the chain where self-signed is defined as SUBJECT == ISSUER. Otherwise you can control when chains terminate by setting the max length constraint to zero.</p>

<p>Your redbean supports SSL virtual hosting. 99.76% of TLS clients send a Server Name Indicator (SNI), which is matched against DNS or IPs in Subject Alternative Names (SAN) or the Common Name (CN) of subject if SAN isn’t used. This means you don’t need to reveal your whole domain portfolio to each client just to have ssl. You can just use different certificates for each domain if you choose to do so. If redbean can’t find an appropriate match, then the first certificate will be chosen.</p>

<p>SSL layer client verification is unusual, but some options are:</p>

<ol>
  <li>Pass the <code class="language-plaintext highlighter-rouge">-j</code> to enable verification of HTTPS clients. Clients are verified based on the SSL roots you’ve provided. Those can be installed via the Lua API or placed in the ZIP executable folder usr/share/ssl/root.</li>
  <li>You can use preshared keys via the Lua API. Please note that PSK isn’t mutually exclusive with normal PKI. Please read the relevant API documentation.</li>
</ol>

<p>SSL verbosity is controlled as follows for troubleshooting:</p>

<p>-V       log ssl errors
-VV      log ssl state changes too
-VVV     log ssl informational messages too
-VVVV    log ssl verbose details too</p>

<p>That’s in addition to existing flags like -vvvm.</p>

<h3 id="ddos-protection"><a href="https://redbean.dev/#ddos">ddos protection</a></h3>

<p>Once you have SSL setup, the threats you’re most likely to face are distributed denial of service attacks, or DDOS for short. redbean defeats this form of abuse using token buckets and blackholed. That lets us protect not only your web app, but the kernel itself.</p>

<p>The example below shows how you can configure a secure reverse proxy. Each block of 256 IPs is allowed to send one message per second, on average, with bursts of up to ~100 messages per second allowed for a short period of time. Once an IP exhausts its tokens, it gets blocked by the system firewall.</p>

<p>– we’ll be reverse proxying to a server running here
BACKEND = ‘127.0.0.1:8080’</p>

<p>– put your home or office public ip here – so you don’t accidentally ban yourself – you don’t want to lose your ssh access
ProgramTrustedIp(ParseIp(‘1.2.3.4’), 32)</p>

<p>RELAY_HEADERS_TO_CLIENT = {
    ‘Access-Control-Allow-Origin’,
    ‘Cache-Control’,
    ‘Connection’,
    ‘Content-Type’,
    ‘Last-Modified’,
    ‘Referrer-Policy’,
}</p>

<p>function OnServerStart()
    – enables ddos protection
    ProgramTokenBucket()
    – place limit on number of forked workers
    – this determines the point at which “meltdown” happens
    assert(unix.setrlimit(unix.RLIMIT_NPROC, 1000, 1000))
end</p>

<p>function OnWorkerStart()
    – set limits on memory and cpu just in case
    assert(unix.setrlimit(unix.RLIMIT_RSS, 2<em>1024</em>1024))
    assert(unix.setrlimit(unix.RLIMIT_CPU, 2))
    – we don’t need filesystem access
    assert(unix.unveil(nil, nil))
    – we only need minimal system calls
    assert(unix.pledge(“stdio inet unix”, nil, unix.PLEDGE_PENALTY_RETURN_EPERM))
end</p>

<p>function OnHttpRequest()
    local ip = GetClientAddr()
    if not IsTrustedIp(ip) then
        local tok = AcquireToken(ip)
        if tok &lt; 2 then
            if Blackhole(ip) then
                Log(kLogWarn, “banned %s” % {FormatIp(ip)})
            else
                Log(kLogWarn, “failed to ban %s” % {FormatIp(ip)})
            end
        end
        if tok &lt; 30 then
            ServeError(429)
            SetHeader(‘Connection’, ‘close’)
            Log(kLogWarn, “warned %s who has %d tokens” % {FormatIp(ip), tok})
            return
        end
    end
    local url = ‘http://’ .. BACKEND .. EscapePath(GetPath())
    local name = GetParam(‘name’)
    if name then
        url = url .. ‘?name=’ .. EscapeParam(name)
    end
    local status, headers, body =
        Fetch(url,
              {method = GetMethod(),
               headers = {
                   [‘Accept’] = GetHeader(‘Accept’),
                   [‘CF-IPCountry’] = GetHeader(‘CF-IPCountry’),
                   [‘If-Modified-Since’] = GetHeader(‘If-Modified-Since’),
                   [‘Referer’] = GetHeader(‘Referer’),
                   [‘Sec-CH-UA-Platform’] = GetHeader(‘Sec-CH-UA-Platform’),
                   [‘User-Agent’] = GetHeader(‘User-Agent’),
                   [‘X-Forwarded-For’] = FormatIp(ip)}})
    if status then
        SetStatus(status)
        for k,v in pairs(RELAY_HEADERS_TO_CLIENT) do
            SetHeader(v, headers[v])
        end
        Write(body)
    else
        local err = headers
        Log(kLogError, “proxy failed %s” % {err})
        ServeError(503)
    end
end</p>

<p>You’ll notice in the code above that we’re doing token bucket logic by hand. redbean actually does this automatically in the core code, but it’s only enforced on accept()’d connections. If you aren’t specifying <code class="language-plaintext highlighter-rouge">SetHeader('Connection', 'close')</code> on each response, then a each of those connections can technically send infinite HTTP messages. redbean core doesn’t police messages, which is left to your Lua code to decide.</p>

<p>The trick blackholed uses is the <code class="language-plaintext highlighter-rouge">raw prerouting</code> table, which drops traffic <em>before</em> the kernel’s conntrack mechanism kicks in. This works out of the box with zero configuration on Linux if you download the blackholed daemon from the <a href="https://redbean.dev/#tools">supplementary tools</a> section above. Its purpose is to permit unprivileged system accounts to safely ban IPv4 addresses via a UNIX named socket. redbean integrates with this service automatically when ProgramTokenBucket() is used.</p>

<p>sudo ./blackholed.com -d</p>

<p>Please note you can’t use Cloudflare if you use redbean’s DDOS protection. If someone launches a DDOS attack against your server <em>through</em> Cloudflare, then redbean can’t blackhole the IPs of the attackers because your server isn’t talking to the attackers. We recommend using redbean’s DDOS protection instead, because it’s done a much better job fending off attacks than Cloudflare was able to do, for the services we operate online.</p>

<h3 id="memory-safety"><a href="https://redbean.dev/#memory">memory safety</a></h3>

<p>redbean provides hardened ASAN (Address Sanitizer) builds that proactively guard against any potential memory weaknesses that may be discovered, such as buffer overruns, use after free, etc. MODE=asan is recomended when serving on the public Internet.</p>

<h3 id="sandboxing"><a href="https://redbean.dev/#sandboxing">sandboxing</a></h3>

<p>redbean also supports robust sandboxing on Linux Kernel 5.13+ and OpenBSD. The recommended way to harden your redbean is to call the pledge() and unveil() functions.</p>

<p>Here’s an example. If you have a SQLite app, then the key to using features like pledge() is to perform the permissions-demanding activities <em>before</em> calling pledge(). In this case, that would be connecting to the DB first.</p>

<p>function OnWorkerStart()
    db = sqlite3.open(“db.sqlite3”)
    db:busy_timeout(1000)
    db:exec[[PRAGMA journal_mode=WAL]]
    db:exec[[PRAGMA synchronous=NORMAL]]
    db:exec[[SELECT x FROM warmup WHERE x = 1]]
    assert(unix.setrlimit(unix.RLIMIT_RSS, 100 * 1024 * 1024))
    assert(unix.setrlimit(unix.RLIMIT_CPU, 4))
    assert(unix.unveil(“/var/tmp”, “rwc”))
    assert(unix.unveil(“/tmp”, “rwc”))
    assert(unix.unveil(nil, nil))
    assert(unix.pledge(“stdio flock rpath wpath cpath”, nil,
                       unix.PLEDGE_PENALTY_RETURN_EPERM))
end</p>

<p>What makes this technique interesting is redbean doesn’t have file system access to the database file, and instead uses an inherited file descriptor that was opened beforehand. With SQLite the tmp access is only needed to support things like covering indexes. The -Z flag is also helpful to see where things go wrong, so you know which promises are needed to support your use case.</p>

<p>pledge() will work on all Linux kernels since RHEL6 since it uses SECCOMP BPF filtering. On the other hand, unveil() requires Landlock LSM which was only introduced in 2021. If you need unveil() then be sure to test the restrictions work. Most environments don’t support unveil(), so it’s designed to be a no-op in unsupported environments.</p>

<p>Alternatively, there’s CLI flags which make it simple to get started:</p>

<p>-S (online policy)  This causes <code class="language-plaintext highlighter-rouge">unix.pledge("stdio rpath inet dns id")</code> to be called on workers after fork() is called. This permits read-only operations and APIs like Fetch() that let workers send and receive data with private and public Internet hosts. Access to the unix module is somewhat restricted, disallowing its more powerful APIs like exec.  -SS (offline policy)  This causes <code class="language-plaintext highlighter-rouge">unix.pledge("stdio rpath id")</code> to be called on workers after after fork() is called. This prevents workers from talking to the network (other than the client) and allows read-only file system access (e.g. <code class="language-plaintext highlighter-rouge">-D DIR</code> flag). The <code class="language-plaintext highlighter-rouge">id</code> group helps you to call other functions important to redbean security, such as the <a href="https://redbean.dev/#unix.setrlimit">unix.setrlimit</a>() function.  -SSS (contained policy)  This causes <code class="language-plaintext highlighter-rouge">unix.pledge("stdio")</code> to be called on workers after after fork() is called. This prevents workers from communicating with the network (other than the client connection) and prevents file system access (with some exceptions like logging). Redbean should only be able to serve from its own zip file in this mode. Lua script access to the unix module is highly restricted. 
Unlike the unix.pledge() function, these sandboxing flags use a more permissive policy on Linux. Rather than killing the process, they’ll cause system calls to fail with EPERM instead. Therefore these flags should be gentler when you want security errors to be recoverable.</p>

<h2 id="legal"><a href="https://redbean.dev/#legal">legal</a></h2>

<p>redbean contains software licensed ISC, MIT, BSD-2, BSD-3, zlib. The transitive closure of legal notices can be found inside the binary structure. We put the licenses inside the binary we believe that this satisfactorily automates legal compliance, for the redbean project and anyone who uses it.</p>

<h2 id="benchmark"><a href="https://redbean.dev/#benchmark">benchmark</a></h2>

<h1 id="note-benchmarked-on-an-amd-ryzen-threadripper-pro-7995wx-96-cores">Note: Benchmarked on an AMD Ryzen Threadripper PRO 7995WX 96-Cores</h1>
<h1 id="note-use-redbeancom--s">Note: Use ./redbean.com -s</h1>
<p>$ <a href="https://github.com/wg/wrk">wrk</a> –latency -t 256 -c 256 -H ‘Accept-Encoding: gzip’ <br />
    http://127.0.0.1:8080/favicon.ico
Running 10s test @ http://127.0.0.1:8080/tool/net/demo/index.html
  256 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.92ms   35.76ms 829.17ms   98.34%
    Req/Sec    25.72k     8.08k   39.35k    62.68%
  Latency Distribution
     50%   29.00us
     75%   42.00us
     90%   63.00us
     99%  159.62ms
  35413605 requests in 6.60s, 210.36GB read
Requests/sec: 5366223.78
Transfer/sec:     31.88GB</p>

<h2 id="funding"><a href="https://redbean.dev/#sponsor">funding</a></h2>

<p><a href="https://worker.jart.workers.dev/sectorlisp2/lemuria.png"><img src="https://worker.jart.workers.dev/sectorlisp2/lemuria.png?v=7" alt="Image 9: [United States of Lemuria - two dollar bill - all debts public and primate]" /></a></p>

<p>Funding for redbean was crowdsourced from Justine Tunney’s <a href="https://github.com/sponsors/jart">GitHub sponsors</a> and <a href="https://www.patreon.com/jart">Patreon subscribers</a>. Your support is what makes projects like redbean possible. Thank you.</p>

<h2 id="see-also"><a href="https://redbean.dev/#seealso">see also</a></h2>

<ul>
  <li><a href="https://justine.lol/">justine’s web page</a></li>
  <li><a href="https://news.ycombinator.com/item?id=26271117">redbean hacker news thread</a></li>
</ul>

<h2 id="old-versions"><a href="https://redbean.dev/#oldversions">old versions</a></h2>

<ul>
  <li>
    <p><a href="https://redbean.dev/2.2.html">redbean 2.2</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/2.1.html">redbean 2.1</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/2.0.html">redbean 2.0</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/1.5.html">redbean 1.5</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/1.4.html">redbean 1.4</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/1.3.html">redbean 1.3</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/0.4.html">redbean 0.4</a></p>
  </li>
  <li>
    <p><a href="https://redbean.dev/0.3.html">redbean 0.3</a></p>
  </li>
</ul>

<p><img src="https://ipv4.games/claim?name=jart" alt="Image 10" /></p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Rename files using llm</title><link href="https://ib.bsb.br/rename-files-using-llm/" rel="alternate" type="text/html" title="Rename files using llm" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T04:11:07+00:00</updated><id>https://ib.bsb.br/rename-files-using-llm</id><content type="html" xml:base="https://ib.bsb.br/rename-files-using-llm/"><![CDATA[<p>vide <code class="language-plaintext highlighter-rouge">https://ib.bsb.br/llm-renamer/</code></p>

<section class="code-block-container" role="group" aria-label="Bash Code Block" data-filename="bash_code_block.sh" data-code="#!/bin/sh
# rename-pictures.sh
# Author: Justine Tunney &lt;jtunney@gmail.com&gt;
# License: Apache 2.0
#
# This shell script can be used to ensure all the images in a folder
# have good descriptive filenames that are written in English. It&#39;s
# based on the Mistral 7b and LLaVA v1.5 models.
#
# For example, the following command:
#
#     ./rename-pictures.sh ~/Pictures
#
# Will iterate recursively through the specified directories. For each
# file, it&#39;ll ask the Mistral model if the filename looks reasonable. If
# Mistral doesn&#39;t like the filename, then this script will ask LLaVA to
# analyze the picture and generate a new filename with lowercase letters
# and underscores. Most image formats are supported (e.g. png/jpg/gif)
# and newer more exotic ones (e.g. webp) are also supported if Image
# Magick is installed.
#
# You need to have a system with at minimum 8gb of RAM. This will work
# even on older computers without GPUs; just let it run overnight!

abort() {
  printf &#39;%s\n&#39; &quot;renaming terminated.&quot; &gt;&amp;2
  exit 1
}

if ! LLAVA=$(command -v llava-v1.5-7b-q4-main.llamafile); then
  printf &#39;%s\n&#39; &quot;llava-v1.5-7b-q4-main.llamafile: fatal error: update this script with the path of your llava llamafile&quot; &gt;&amp;2
  printf &#39;%s\n&#39; &quot;please download https://huggingface.co/jartine/llava-v1.5-7B-GGUF/resolve/main/llava-v1.5-7b-q4-main.llamafile and put it on the system path&quot; &gt;&amp;2
  abort
fi

if ! MISTRAL=$(command -v mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile); then
  printf &#39;%s\n&#39; &quot;mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile: fatal error: update this script with the path of your mistral llamafile&quot; &gt;&amp;2
  printf &#39;%s\n&#39; &quot;please download https://huggingface.co/jartine/mistral-7b.llamafile/resolve/main/mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile and put it on the system path&quot; &gt;&amp;2
  abort
fi

if ! CONVERT=$(command -v convert); then
  printf &#39;%s\n&#39; &quot;${0##*/}: warning: convert command not found (please install imagemagick so we can analyze image formats like webp)&quot; &gt;&amp;2
fi

isgood() {
  &quot;$MISTRAL&quot; \
      --temp 0 -ngl 35 \
      --grammar &#39;root ::= &quot;yes&quot; | &quot;no&quot;&#39; \
      -p &quot;[INST]Does the filename &#39;${1##*/}&#39; look like readable english text?[/INST]&quot; \
      --silent-prompt 2&gt;/dev/null
}

pickname() {
  &quot;$LLAVA&quot; \
      --image &quot;$1&quot; --temp 0.3 -ngl 35 \
      --grammar &#39;root ::= [a-z]+ (&quot; &quot; [a-z]+)+&#39; -n 10 \
      -p &#39;### User: The image has...
### Assistant:&#39; \
      --silent-prompt 2&gt;/dev/null
}

# https://stackoverflow.com/a/30133294/1653720
shuf() {
  awk &#39;BEGIN {srand(); OFMT=&quot;%.17f&quot;} {print rand(), $0}&#39; &quot;$@&quot; |
    sort -k1,1n |
    cut -d &#39; &#39; -f2-
}


if [ $# -eq 0 ]; then
  printf &#39;%s\n&#39; &quot;${0##*/}: fatal error: missing operand&quot; &gt;&amp;2
  abort
fi

if [ x&quot;$1&quot; = x&quot;--help&quot; ]; then
  printf &#39;%s\n&#39; &quot;usage: ${0##*/} PATH...&quot;
  exit
fi

OIFS=$IFS
IFS=&#39;
&#39;
for arg; do

  # ensure argument is a file or directory
  if [ ! -e &quot;$arg&quot; ]; then
    printf &#39;%s\n&#39; &quot;$arg: fatal error: file not found&quot; &gt;&amp;2
    abort
  fi

  # find all regular files under path argument
  for path in $(find &quot;$arg&quot; -type f -print0 | tr &#39;\0&#39; &#39;\n&#39; | shuf); do

    # ask mistral if filename needs renaming
    if ! answer=$(isgood &quot;$path&quot;); then
      printf &#39;%s\n&#39; &quot;$path: fatal error: failed to ask mistral if file needs renaming&quot; &gt;&amp;2
      abort
    fi

    if [ &quot;$answer&quot; = &quot;yes&quot; ]; then
      printf &#39;%s\n&#39; &quot;skipping $path (mistral says it&#39;s good)&quot; &gt;&amp;2
      continue
    fi

    # ask llm to generate new filename. if it&#39;s a format like web that
    # our stb library doesn&#39;t support yet, then we&#39;ll ask imagemagick to
    # convert it to png and then try again.
    if ! newname=$(pickname &quot;$path&quot;); then
      png=&quot;${TMPDIR:-/tmp}/$$.png&quot;
      if [ -z &quot;$CONVERT&quot; ]; then
        printf &#39;%s\n&#39; &quot;$path: warning: llava failed to describe image (probably due to unsupported file format)&quot; &gt;&amp;2
        continue
      fi
      if &quot;$CONVERT&quot; &quot;$path&quot; &quot;$png&quot; 2&gt;/dev/null; then
        if newname=$(pickname &quot;$png&quot;); then
          rm -f &quot;$png&quot;
        else
          printf &#39;%s\n&#39; &quot;$path: warning: llava llm failed&quot; &gt;&amp;2
          rm -f &quot;$png&quot;
          continue
        fi
      else
        printf &#39;%s\n&#39; &quot;skipping $path (not an image)&quot; &gt;&amp;2
        continue
      fi
    fi

    # replace spaces with underscores
    newname=$(printf &#39;%s\n&#39; &quot;$newname&quot; | sed &#39;s/ /_/g&#39;)

    # append the original file extension to the new name
    if [ x&quot;${path%.*}&quot; != x&quot;$path&quot; ]; then
      newname=&quot;$newname.${path##*.}&quot;
    fi

    # prefix the original directory to the new name
    if [ x&quot;${path%/*}&quot; != x&quot;$path&quot; ]; then
      newname=&quot;${path%/*}/$newname&quot;
    fi

    # ensure new name is unque
    if [ -e &quot;$newname&quot; ]; then
      i=2
      while [ -e &quot;${newname%.*}-$i.${newname##*.}&quot; ]; do
        i=$((i + 1))
      done
      newname=&quot;${newname%.*}-$i.${newname##*.}&quot;
    fi

    # rename the file
    printf &#39;%s\n&#39; &quot;renaming $path to $newname&quot;
    if ! mv -n &quot;$path&quot; &quot;$newname&quot;; then
      printf &#39;%s\n&#39; &quot;$newname: fatal error: failed to rename file&quot; &gt;&amp;2
      abort
    fi
  done
done
IFS=$OIFS" data-download-link="" data-download-label="Download Bash">
  <code class="language-bash">#!/bin/sh
# rename-pictures.sh
# Author: Justine Tunney &lt;jtunney@gmail.com&gt;
# License: Apache 2.0
#
# This shell script can be used to ensure all the images in a folder
# have good descriptive filenames that are written in English. It&#39;s
# based on the Mistral 7b and LLaVA v1.5 models.
#
# For example, the following command:
#
#     ./rename-pictures.sh ~/Pictures
#
# Will iterate recursively through the specified directories. For each
# file, it&#39;ll ask the Mistral model if the filename looks reasonable. If
# Mistral doesn&#39;t like the filename, then this script will ask LLaVA to
# analyze the picture and generate a new filename with lowercase letters
# and underscores. Most image formats are supported (e.g. png/jpg/gif)
# and newer more exotic ones (e.g. webp) are also supported if Image
# Magick is installed.
#
# You need to have a system with at minimum 8gb of RAM. This will work
# even on older computers without GPUs; just let it run overnight!

abort() {
  printf &#39;%s\n&#39; &quot;renaming terminated.&quot; &gt;&amp;2
  exit 1
}

if ! LLAVA=$(command -v llava-v1.5-7b-q4-main.llamafile); then
  printf &#39;%s\n&#39; &quot;llava-v1.5-7b-q4-main.llamafile: fatal error: update this script with the path of your llava llamafile&quot; &gt;&amp;2
  printf &#39;%s\n&#39; &quot;please download https://huggingface.co/jartine/llava-v1.5-7B-GGUF/resolve/main/llava-v1.5-7b-q4-main.llamafile and put it on the system path&quot; &gt;&amp;2
  abort
fi

if ! MISTRAL=$(command -v mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile); then
  printf &#39;%s\n&#39; &quot;mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile: fatal error: update this script with the path of your mistral llamafile&quot; &gt;&amp;2
  printf &#39;%s\n&#39; &quot;please download https://huggingface.co/jartine/mistral-7b.llamafile/resolve/main/mistral-7b-instruct-v0.1-Q4_K_M-main.llamafile and put it on the system path&quot; &gt;&amp;2
  abort
fi

if ! CONVERT=$(command -v convert); then
  printf &#39;%s\n&#39; &quot;${0##*/}: warning: convert command not found (please install imagemagick so we can analyze image formats like webp)&quot; &gt;&amp;2
fi

isgood() {
  &quot;$MISTRAL&quot; \
      --temp 0 -ngl 35 \
      --grammar &#39;root ::= &quot;yes&quot; | &quot;no&quot;&#39; \
      -p &quot;[INST]Does the filename &#39;${1##*/}&#39; look like readable english text?[/INST]&quot; \
      --silent-prompt 2&gt;/dev/null
}

pickname() {
  &quot;$LLAVA&quot; \
      --image &quot;$1&quot; --temp 0.3 -ngl 35 \
      --grammar &#39;root ::= [a-z]+ (&quot; &quot; [a-z]+)+&#39; -n 10 \
      -p &#39;### User: The image has...
### Assistant:&#39; \
      --silent-prompt 2&gt;/dev/null
}

# https://stackoverflow.com/a/30133294/1653720
shuf() {
  awk &#39;BEGIN {srand(); OFMT=&quot;%.17f&quot;} {print rand(), $0}&#39; &quot;$@&quot; |
    sort -k1,1n |
    cut -d &#39; &#39; -f2-
}


if [ $# -eq 0 ]; then
  printf &#39;%s\n&#39; &quot;${0##*/}: fatal error: missing operand&quot; &gt;&amp;2
  abort
fi

if [ x&quot;$1&quot; = x&quot;--help&quot; ]; then
  printf &#39;%s\n&#39; &quot;usage: ${0##*/} PATH...&quot;
  exit
fi

OIFS=$IFS
IFS=&#39;
&#39;
for arg; do

  # ensure argument is a file or directory
  if [ ! -e &quot;$arg&quot; ]; then
    printf &#39;%s\n&#39; &quot;$arg: fatal error: file not found&quot; &gt;&amp;2
    abort
  fi

  # find all regular files under path argument
  for path in $(find &quot;$arg&quot; -type f -print0 | tr &#39;\0&#39; &#39;\n&#39; | shuf); do

    # ask mistral if filename needs renaming
    if ! answer=$(isgood &quot;$path&quot;); then
      printf &#39;%s\n&#39; &quot;$path: fatal error: failed to ask mistral if file needs renaming&quot; &gt;&amp;2
      abort
    fi

    if [ &quot;$answer&quot; = &quot;yes&quot; ]; then
      printf &#39;%s\n&#39; &quot;skipping $path (mistral says it&#39;s good)&quot; &gt;&amp;2
      continue
    fi

    # ask llm to generate new filename. if it&#39;s a format like web that
    # our stb library doesn&#39;t support yet, then we&#39;ll ask imagemagick to
    # convert it to png and then try again.
    if ! newname=$(pickname &quot;$path&quot;); then
      png=&quot;${TMPDIR:-/tmp}/$$.png&quot;
      if [ -z &quot;$CONVERT&quot; ]; then
        printf &#39;%s\n&#39; &quot;$path: warning: llava failed to describe image (probably due to unsupported file format)&quot; &gt;&amp;2
        continue
      fi
      if &quot;$CONVERT&quot; &quot;$path&quot; &quot;$png&quot; 2&gt;/dev/null; then
        if newname=$(pickname &quot;$png&quot;); then
          rm -f &quot;$png&quot;
        else
          printf &#39;%s\n&#39; &quot;$path: warning: llava llm failed&quot; &gt;&amp;2
          rm -f &quot;$png&quot;
          continue
        fi
      else
        printf &#39;%s\n&#39; &quot;skipping $path (not an image)&quot; &gt;&amp;2
        continue
      fi
    fi

    # replace spaces with underscores
    newname=$(printf &#39;%s\n&#39; &quot;$newname&quot; | sed &#39;s/ /_/g&#39;)

    # append the original file extension to the new name
    if [ x&quot;${path%.*}&quot; != x&quot;$path&quot; ]; then
      newname=&quot;$newname.${path##*.}&quot;
    fi

    # prefix the original directory to the new name
    if [ x&quot;${path%/*}&quot; != x&quot;$path&quot; ]; then
      newname=&quot;${path%/*}/$newname&quot;
    fi

    # ensure new name is unque
    if [ -e &quot;$newname&quot; ]; then
      i=2
      while [ -e &quot;${newname%.*}-$i.${newname##*.}&quot; ]; do
        i=$((i + 1))
      done
      newname=&quot;${newname%.*}-$i.${newname##*.}&quot;
    fi

    # rename the file
    printf &#39;%s\n&#39; &quot;renaming $path to $newname&quot;
    if ! mv -n &quot;$path&quot; &quot;$newname&quot;; then
      printf &#39;%s\n&#39; &quot;$newname: fatal error: failed to rename file&quot; &gt;&amp;2
      abort
    fi
  done
done
IFS=$OIFS</code>
</section>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Whisperfile</title><link href="https://ib.bsb.br/whisperfile/" rel="alternate" type="text/html" title="Whisperfile" /><published>2025-05-27T00:00:00+00:00</published><updated>2025-05-27T02:51:04+00:00</updated><id>https://ib.bsb.br/whisperfile</id><content type="html" xml:base="https://ib.bsb.br/whisperfile/"><![CDATA[<h1 id="whisperfile-documentation">Whisperfile Documentation</h1>

<p>Whisperfile is a high-performance implementation of <a href="https://github.com/openai/whisper">OpenAI’s
Whisper</a> model that’s based off the
<a href="https://github.com/ggerganov/whisper.cpp">whisper.cpp</a> software written
by Georgi Gerganov, et al.</p>

<h2 id="index">Index</h2>

<ul>
  <li><a href="getting-started.md">Getting Started</a></li>
  <li><a href="packaging.md">Packaging</a></li>
  <li><a href="gpu.md">Using GPUs</a></li>
  <li><a href="translate.md">Speech Translation</a></li>
  <li><a href="server.md">Server</a></li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Clipse Listener Systemd User Service</title><link href="https://ib.bsb.br/clipse-listener-systemd-user-service/" rel="alternate" type="text/html" title="Clipse Listener Systemd User Service" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T19:11:25+00:00</updated><id>https://ib.bsb.br/clipse-listener-systemd-user-service</id><content type="html" xml:base="https://ib.bsb.br/clipse-listener-systemd-user-service/"><![CDATA[<h3 id="1-project-background--objectives">1. Project Background &amp; Objectives</h3>

<p>Deploy and maintain the “Clipse listener” utility in a way that guarantees autostart and robust operation for an end user (e.g., ‘linaro’) under Debian Bullseye. The service must be easy to monitor, update, and migrate, with clear recovery and rollback instructions.</p>

<h3 id="2-environment--requirements">2. Environment &amp; Requirements</h3>

<ul>
  <li>OS: Debian Bullseye (or compatible systemd-based Linux distro)</li>
  <li>Target user: <code class="language-plaintext highlighter-rouge">linaro</code></li>
  <li>Systemd user session and lingering available (<code class="language-plaintext highlighter-rouge">systemctl</code>, <code class="language-plaintext highlighter-rouge">loginctl</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">clipse</code> binary installed and discoverable at <code class="language-plaintext highlighter-rouge">/usr/bin/clipse</code> for the target user.</li>
</ul>

<h3 id="3-architectural-rationale">3. Architectural Rationale</h3>

<ul>
  <li><strong>Root Cause:</strong> System-level systemd units (<code class="language-plaintext highlighter-rouge">/etc/systemd/system/*.service</code>) do not inherit user session context, notably graphical environment variables required by clipboard/X11 tools like Clipse.</li>
  <li><strong>Solution:</strong> Use a systemd <strong>user service</strong>, which is tied to the user’s session and has access to graphical resources.</li>
  <li><strong>Persistence:</strong> Enable lingering (<code class="language-plaintext highlighter-rouge">loginctl enable-linger USER</code>) to ensure services can start at login or via non-GUI sessions.</li>
</ul>

<h3 id="4-step-by-step-implementation--rationale">4. Step-by-step Implementation &amp; Rationale</h3>
<p>(Each step is paired with its context and expected result.)</p>

<p><strong>A. Pre-Checks and Diagnostics</strong></p>
<ul>
  <li>Check that <code class="language-plaintext highlighter-rouge">clipse</code> is installed and executable by user:
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which clipse
<span class="nb">sudo</span> <span class="nt">-u</span> linaro which clipse
</code></pre></div>    </div>
    <ul>
      <li><em>Purpose:</em> Confirms binary presence and discoverability.</li>
    </ul>
  </li>
</ul>

<p><strong>B. Remove any previous system-level service</strong></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl stop clipse.service <span class="o">||</span> <span class="nb">true
  sudo </span>systemctl disable clipse.service <span class="o">||</span> <span class="nb">true
  sudo rm</span> <span class="nt">-f</span> /etc/systemd/system/clipse.service
  <span class="nb">sudo </span>systemctl daemon-reload
</code></pre></div></div>
<ul>
  <li><em>Rationale:</em> Prevents conflicts and ensures correct user-session deployment.</li>
</ul>

<p><strong>C. Create the user systemd unit</strong></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> <span class="nt">-p</span> ~/.config/systemd/user
  <span class="nb">cat</span> <span class="o">&gt;</span> ~/.config/systemd/user/clipse.service <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">EOF</span><span class="sh">'
  [Unit]
  Description=Clipse listener
  Documentation=https://github.com/savedra1/clipse
  After=graphical-session.target

  [Service]
  Type=simple
  ExecStart=clipse -listen

  [Install]
  WantedBy=default.target
</span><span class="no">  EOF
</span></code></pre></div></div>
<ul>
  <li><em>Rationale:</em> Designed for user session activation, survives graphical and non-graphical logins.</li>
</ul>

<p><strong>D. Enable and reload the user systemd instance</strong></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl <span class="nt">--user</span> daemon-reload
  systemctl <span class="nt">--user</span> <span class="nb">enable </span>clipse.service
  systemctl <span class="nt">--user</span> start clipse.service
</code></pre></div></div>
<ul>
  <li><em>Purpose:</em> Registers and starts the new service for the current user.</li>
</ul>

<p><strong>E. Confirm service status</strong></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl <span class="nt">--user</span> status clipse.service <span class="nt">--no-pager</span> <span class="nt">--full</span>
</code></pre></div></div>
<ul>
  <li><em>Validation:</em> Service should transition to ‘active (running)’ or, for <code class="language-plaintext highlighter-rouge">oneshot</code> services, to ‘inactive (dead)’ with SUCCESS.</li>
</ul>

<p><strong>F. Ensure persistence with lingering</strong></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>loginctl enable-linger linaro
</code></pre></div></div>
<ul>
  <li><em>Purpose:</em> Guarantees user services can run on login, even via non-GUI or after reboot.</li>
</ul>

<h3 id="5-testing-procedures-and-validation">5. Testing Procedures and Validation</h3>

<ul>
  <li>Execute <code class="language-plaintext highlighter-rouge">clipse -listen</code> manually in the user shell to verify operational behavior.</li>
  <li>After enabling the service, check that process is running after log in.</li>
  <li>Reboot or log out/in to ensure service auto-start.</li>
  <li>To troubleshoot: use <code class="language-plaintext highlighter-rouge">systemctl --user status</code>, check journal logs (<code class="language-plaintext highlighter-rouge">journalctl --user-unit=clipse.service</code>).</li>
</ul>

<h3 id="6-updating-modifying-or-removing-the-service">6. Updating, Modifying, or Removing the Service</h3>

<ul>
  <li><strong>Update Service File:</strong>
    <ul>
      <li>Edit <code class="language-plaintext highlighter-rouge">~/.config/systemd/user/clipse.service</code>, then:
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nt">--user</span> daemon-reload
systemctl <span class="nt">--user</span> restart clipse.service
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Remove Service:</strong>
    <ul>
      <li>Disable and remove the unit file:
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nt">--user</span> stop clipse.service
systemctl <span class="nt">--user</span> disable clipse.service
<span class="nb">rm</span> ~/.config/systemd/user/clipse.service
systemctl <span class="nt">--user</span> daemon-reload
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Update Binary:</strong>
    <ul>
      <li>Replace the <code class="language-plaintext highlighter-rouge">clipse</code> binary, then <code class="language-plaintext highlighter-rouge">systemctl --user restart clipse.service</code>.</li>
    </ul>
  </li>
</ul>

<h3 id="7-causality-chain-problem-to-solution-summary">7. Causality Chain: Problem to Solution Summary</h3>

<ul>
  <li><strong>Problem:</strong> System-level service failed due to lack of user session/X environment.</li>
  <li><strong>Change:</strong> Switched to user-level service, ensured in-session context and PATH.</li>
  <li><strong>Validation:</strong> Manual and automatic service start works as intended.</li>
  <li><strong>Permanency:</strong> Lingering locks in persistent behavior across logins.</li>
</ul>

<h3 id="8-additional-notes-and-best-practices">8. Additional Notes and Best Practices</h3>

<ul>
  <li>User-level services are ideal for desktop and X11 applications.</li>
  <li>For system daemons or non-X11 services, a system-level unit with custom User/Environment settings may be more appropriate.</li>
  <li>Always check service status after changes, and use <code class="language-plaintext highlighter-rouge">journalctl --user-unit=...</code> for deep troubleshooting.</li>
</ul>]]></content><author><name></name></author><category term="aid&gt;software&gt;linux" /><category term="aid&gt;software&gt;windows" /></entry><entry><title type="html">Code Merger</title><link href="https://ib.bsb.br/code-merger/" rel="alternate" type="text/html" title="Code Merger" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T18:04:29+00:00</updated><id>https://ib.bsb.br/code-merger</id><content type="html" xml:base="https://ib.bsb.br/code-merger/"><![CDATA[<section class="code-block-container" role="group" aria-label=" Code Block" data-filename="_code_block.txt" data-code="You are an expert software developer tasked with integrating multiple code approaches into a single, optimized solution. Your goal is to enhance the functionality, performance, and security of the original code by incorporating compatible and relevant functions from other approaches.

Here&#39;s the original AI ASSISTANT response code:

&lt;original_code&gt;

&lt;/original_code&gt;

Now, let&#39;s examine the different approach codes:

&lt;different_approach_1&gt;

&lt;/different_approach_1&gt;

&lt;different_approach_2&gt;

&lt;/different_approach_2&gt;

&lt;different_approach_3&gt;

&lt;/different_approach_3&gt;

&lt;different_approach_4&gt;

&lt;/different_approach_4&gt;

Your task is to integrate these different approaches into a single, optimized solution. Follow these steps:

1. Analyze all provided codes thoroughly.
2. Identify relevant functions and implementations from the different approaches that can enhance the original code.
3. Evaluate the compatibility and coherence of the identified functions with the original code.
4. Compare and contrast the different approaches with the original code.
5. Evaluate potential trade-offs of integrating each function.
6. Consider potential edge cases and how they might be handled.
7. Develop a detailed integration plan.
8. Carefully implement the integration, maintaining code integrity and enhancing performance and security.
9. Conduct thorough testing of the integrated code.
10. Document all changes, additions, and modifications made to the original code.

For each step, wrap your analysis inside &lt;integration_analysis&gt; tags. This will help ensure a thorough interpretation of the data and a well-reasoned integration approach. For each approach:
- List out key functions and their potential benefits.
- Rate each function&#39;s compatibility with the original code on a scale of 1-5.
- Consider and note any potential conflicts between different approaches.

Your final output should include:

1. A detailed integration plan
2. The updated, integrated code
3. Comprehensive documentation of changes and rationale

Format your response as follows:

&lt;integration_plan&gt;
[Detailed steps for integrating the different approaches]
&lt;/integration_plan&gt;

&lt;integrated_code&gt;
[The final, integrated code]
&lt;/integrated_code&gt;

&lt;documentation&gt;
[Comprehensive explanation of changes, including performance optimizations and security enhancements]
&lt;/documentation&gt;

Remember to maintain the overall coherence of the code, optimize for performance, and adhere to security best practices throughout the integration process.

Examples:

&quot;&quot;&quot;
```Different_Approach_Code
import math

class MathOperations:
    &quot;&quot;&quot;A class for various mathematical operations.&quot;&quot;&quot;

    @staticmethod
    def factorial(n):
        &quot;&quot;&quot;
        Calculate the factorial of a non-negative integer.
        
        Args:
            n (int): The number to calculate factorial for.
        
        Returns:
            int: The factorial of n.
        
        Raises:
            ValueError: If n is negative.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(&quot;Factorial is not defined for negative numbers&quot;)
        return math.factorial(n)

    @staticmethod
    def fibonacci(n):
        &quot;&quot;&quot;
        Calculate the nth Fibonacci number.
        
        Args:
            n (int): The position in the Fibonacci sequence.
        
        Returns:
            int: The nth Fibonacci number.
        
        Raises:
            ValueError: If n is negative.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(&quot;Fibonacci sequence is not defined for negative numbers&quot;)
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a

    @staticmethod
    def is_prime(n):
        &quot;&quot;&quot;
        Check if a number is prime.
        
        Args:
            n (int): The number to check.
        
        Returns:
            bool: True if the number is prime, False otherwise.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
```

~~~Original_AI_ASSISTANT_Response_Code
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def fibonacci(n):
    if n &lt;= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
~~~

```Ideal_output
I&#39;ll help you analyze and integrate these different approaches into an optimized solution.

&lt;integration_analysis&gt;
Key observations:
1. Original code uses simple recursive implementations
2. Different approaches 1-4 are identical and offer:
   - Class-based organization
   - Input validation
   - Error handling
   - Documentation
   - Additional functionality (is_prime)
   - Iterative Fibonacci implementation (more efficient)
   - Built-in math.factorial usage (more efficient)

Compatibility ratings (1-5):
- Class structure: 5/5 (enhances organization)
- Input validation: 5/5 (adds robustness)
- Error handling: 5/5 (improves reliability)
- Documentation: 5/5 (increases maintainability)
- Implementation methods: 4/5 (more efficient but different approach)

No conflicts detected between approaches as they&#39;re identical.
&lt;/integration_analysis&gt;

&lt;integration_plan&gt;
1. Adopt class-based structure for better organization
2. Implement input validation and error handling
3. Use iterative Fibonacci implementation for better performance
4. Utilize math.factorial for optimized factorial calculation
5. Include is_prime functionality as additional feature
6. Add comprehensive docstrings
7. Implement type hints for better code clarity
8. Add caching decorator for recursive methods
9. Include performance optimization for large numbers
10. Add input bounds checking
&lt;/integration_plan&gt;

&lt;integrated_code&gt;
```python
from functools import lru_cache
import math
from typing import Union, Optional

class MathOperations:
    &quot;&quot;&quot;A class providing optimized mathematical operations.&quot;&quot;&quot;

    @staticmethod
    def validate_input(n: int, operation: str) -&gt; None:
        &quot;&quot;&quot;
        Validate input parameters for mathematical operations.
        
        Args:
            n: Input number to validate
            operation: Name of the operation being performed
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative or invalid
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(f&quot;{operation} is not defined for negative numbers&quot;)

    @staticmethod
    def factorial(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate the factorial of a non-negative integer.
        
        Args:
            n: The number to calculate factorial for
        
        Returns:
            The factorial of n
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Factorial&quot;)
        return math.factorial(n)

    @staticmethod
    @lru_cache(maxsize=128)
    def fibonacci(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate the nth Fibonacci number using optimized iteration.
        
        Args:
            n: The position in the Fibonacci sequence
        
        Returns:
            The nth Fibonacci number
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Fibonacci&quot;)
        if n &lt;= 1:
            return n
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a

    @staticmethod
    def is_prime(n: int) -&gt; bool:
        &quot;&quot;&quot;
        Check if a number is prime using optimized trial division.
        
        Args:
            n: The number to check
        
        Returns:
            True if the number is prime, False otherwise
        
        Raises:
            TypeError: If input is not an integer
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        # Only check odd numbers up to square root
        for i in range(3, int(math.sqrt(n)) + 1, 2):
            if n % i == 0:
                return False
        return True

    @staticmethod
    def recursive_fibonacci(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate Fibonacci number using recursive approach (maintained for comparison).
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Fibonacci&quot;)
        if n &lt;= 1:
            return n
        return MathOperations.recursive_fibonacci(n-1) + MathOperations.recursive_fibonacci(n-2)
```
&lt;/integrated_code&gt;

&lt;documentation&gt;
Changes and Enhancements:

1. Structural Improvements:
   - Implemented class-based structure for better organization
   - Added type hints for better code clarity
   - Centralized input validation

2. Performance Optimizations:
   - Used math.factorial for optimal factorial calculation
   - Implemented iterative Fibonacci for better performance
   - Added @lru_cache decorator for recursive methods
   - Optimized prime checking algorithm
   - Maintained recursive_fibonacci for comparison/legacy support

3. Security Enhancements:
   - Added robust input validation
   - Implemented type checking
   - Added bounds checking for negative numbers
   - Protected against invalid inputs

4. Additional Features:
   - Added is_prime method
   - Included comprehensive error messages
   - Added detailed docstrings
   - Implemented separate validation method

5. Maintainability Improvements:
   - Added comprehensive documentation
   - Separated concerns into distinct methods
   - Used consistent error handling
   - Implemented clear naming conventions

Performance Considerations:
- Iterative Fibonacci: O(n) vs recursive O(2^n)
- Optimized prime checking: O(√n)
- Cached recursive functions for repeated calls
- Used built-in math functions for optimization

The integrated solution provides a robust, efficient, and well-documented implementation that significantly improves upon the original code while maintaining compatibility and adding new features.
&lt;/documentation&gt;
```
&quot;&quot;&quot;" data-download-link="" data-download-label="Download ">
  <code class="language-">You are an expert software developer tasked with integrating multiple code approaches into a single, optimized solution. Your goal is to enhance the functionality, performance, and security of the original code by incorporating compatible and relevant functions from other approaches.

Here&#39;s the original AI ASSISTANT response code:

&lt;original_code&gt;

&lt;/original_code&gt;

Now, let&#39;s examine the different approach codes:

&lt;different_approach_1&gt;

&lt;/different_approach_1&gt;

&lt;different_approach_2&gt;

&lt;/different_approach_2&gt;

&lt;different_approach_3&gt;

&lt;/different_approach_3&gt;

&lt;different_approach_4&gt;

&lt;/different_approach_4&gt;

Your task is to integrate these different approaches into a single, optimized solution. Follow these steps:

1. Analyze all provided codes thoroughly.
2. Identify relevant functions and implementations from the different approaches that can enhance the original code.
3. Evaluate the compatibility and coherence of the identified functions with the original code.
4. Compare and contrast the different approaches with the original code.
5. Evaluate potential trade-offs of integrating each function.
6. Consider potential edge cases and how they might be handled.
7. Develop a detailed integration plan.
8. Carefully implement the integration, maintaining code integrity and enhancing performance and security.
9. Conduct thorough testing of the integrated code.
10. Document all changes, additions, and modifications made to the original code.

For each step, wrap your analysis inside &lt;integration_analysis&gt; tags. This will help ensure a thorough interpretation of the data and a well-reasoned integration approach. For each approach:
- List out key functions and their potential benefits.
- Rate each function&#39;s compatibility with the original code on a scale of 1-5.
- Consider and note any potential conflicts between different approaches.

Your final output should include:

1. A detailed integration plan
2. The updated, integrated code
3. Comprehensive documentation of changes and rationale

Format your response as follows:

&lt;integration_plan&gt;
[Detailed steps for integrating the different approaches]
&lt;/integration_plan&gt;

&lt;integrated_code&gt;
[The final, integrated code]
&lt;/integrated_code&gt;

&lt;documentation&gt;
[Comprehensive explanation of changes, including performance optimizations and security enhancements]
&lt;/documentation&gt;

Remember to maintain the overall coherence of the code, optimize for performance, and adhere to security best practices throughout the integration process.

Examples:

&quot;&quot;&quot;
```Different_Approach_Code
import math

class MathOperations:
    &quot;&quot;&quot;A class for various mathematical operations.&quot;&quot;&quot;

    @staticmethod
    def factorial(n):
        &quot;&quot;&quot;
        Calculate the factorial of a non-negative integer.
        
        Args:
            n (int): The number to calculate factorial for.
        
        Returns:
            int: The factorial of n.
        
        Raises:
            ValueError: If n is negative.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(&quot;Factorial is not defined for negative numbers&quot;)
        return math.factorial(n)

    @staticmethod
    def fibonacci(n):
        &quot;&quot;&quot;
        Calculate the nth Fibonacci number.
        
        Args:
            n (int): The position in the Fibonacci sequence.
        
        Returns:
            int: The nth Fibonacci number.
        
        Raises:
            ValueError: If n is negative.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(&quot;Fibonacci sequence is not defined for negative numbers&quot;)
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a

    @staticmethod
    def is_prime(n):
        &quot;&quot;&quot;
        Check if a number is prime.
        
        Args:
            n (int): The number to check.
        
        Returns:
            bool: True if the number is prime, False otherwise.
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
```

~~~Original_AI_ASSISTANT_Response_Code
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def fibonacci(n):
    if n &lt;= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
~~~

```Ideal_output
I&#39;ll help you analyze and integrate these different approaches into an optimized solution.

&lt;integration_analysis&gt;
Key observations:
1. Original code uses simple recursive implementations
2. Different approaches 1-4 are identical and offer:
   - Class-based organization
   - Input validation
   - Error handling
   - Documentation
   - Additional functionality (is_prime)
   - Iterative Fibonacci implementation (more efficient)
   - Built-in math.factorial usage (more efficient)

Compatibility ratings (1-5):
- Class structure: 5/5 (enhances organization)
- Input validation: 5/5 (adds robustness)
- Error handling: 5/5 (improves reliability)
- Documentation: 5/5 (increases maintainability)
- Implementation methods: 4/5 (more efficient but different approach)

No conflicts detected between approaches as they&#39;re identical.
&lt;/integration_analysis&gt;

&lt;integration_plan&gt;
1. Adopt class-based structure for better organization
2. Implement input validation and error handling
3. Use iterative Fibonacci implementation for better performance
4. Utilize math.factorial for optimized factorial calculation
5. Include is_prime functionality as additional feature
6. Add comprehensive docstrings
7. Implement type hints for better code clarity
8. Add caching decorator for recursive methods
9. Include performance optimization for large numbers
10. Add input bounds checking
&lt;/integration_plan&gt;

&lt;integrated_code&gt;
```python
from functools import lru_cache
import math
from typing import Union, Optional

class MathOperations:
    &quot;&quot;&quot;A class providing optimized mathematical operations.&quot;&quot;&quot;

    @staticmethod
    def validate_input(n: int, operation: str) -&gt; None:
        &quot;&quot;&quot;
        Validate input parameters for mathematical operations.
        
        Args:
            n: Input number to validate
            operation: Name of the operation being performed
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative or invalid
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 0:
            raise ValueError(f&quot;{operation} is not defined for negative numbers&quot;)

    @staticmethod
    def factorial(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate the factorial of a non-negative integer.
        
        Args:
            n: The number to calculate factorial for
        
        Returns:
            The factorial of n
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Factorial&quot;)
        return math.factorial(n)

    @staticmethod
    @lru_cache(maxsize=128)
    def fibonacci(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate the nth Fibonacci number using optimized iteration.
        
        Args:
            n: The position in the Fibonacci sequence
        
        Returns:
            The nth Fibonacci number
        
        Raises:
            TypeError: If input is not an integer
            ValueError: If input is negative
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Fibonacci&quot;)
        if n &lt;= 1:
            return n
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a

    @staticmethod
    def is_prime(n: int) -&gt; bool:
        &quot;&quot;&quot;
        Check if a number is prime using optimized trial division.
        
        Args:
            n: The number to check
        
        Returns:
            True if the number is prime, False otherwise
        
        Raises:
            TypeError: If input is not an integer
        &quot;&quot;&quot;
        if not isinstance(n, int):
            raise TypeError(&quot;Input must be an integer&quot;)
        if n &lt; 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        # Only check odd numbers up to square root
        for i in range(3, int(math.sqrt(n)) + 1, 2):
            if n % i == 0:
                return False
        return True

    @staticmethod
    def recursive_fibonacci(n: int) -&gt; int:
        &quot;&quot;&quot;
        Calculate Fibonacci number using recursive approach (maintained for comparison).
        &quot;&quot;&quot;
        MathOperations.validate_input(n, &quot;Fibonacci&quot;)
        if n &lt;= 1:
            return n
        return MathOperations.recursive_fibonacci(n-1) + MathOperations.recursive_fibonacci(n-2)
```
&lt;/integrated_code&gt;

&lt;documentation&gt;
Changes and Enhancements:

1. Structural Improvements:
   - Implemented class-based structure for better organization
   - Added type hints for better code clarity
   - Centralized input validation

2. Performance Optimizations:
   - Used math.factorial for optimal factorial calculation
   - Implemented iterative Fibonacci for better performance
   - Added @lru_cache decorator for recursive methods
   - Optimized prime checking algorithm
   - Maintained recursive_fibonacci for comparison/legacy support

3. Security Enhancements:
   - Added robust input validation
   - Implemented type checking
   - Added bounds checking for negative numbers
   - Protected against invalid inputs

4. Additional Features:
   - Added is_prime method
   - Included comprehensive error messages
   - Added detailed docstrings
   - Implemented separate validation method

5. Maintainability Improvements:
   - Added comprehensive documentation
   - Separated concerns into distinct methods
   - Used consistent error handling
   - Implemented clear naming conventions

Performance Considerations:
- Iterative Fibonacci: O(n) vs recursive O(2^n)
- Optimized prime checking: O(√n)
- Cached recursive functions for repeated calls
- Used built-in math functions for optimization

The integrated solution provides a robust, efficient, and well-documented implementation that significantly improves upon the original code while maintaining compatibility and adding new features.
&lt;/documentation&gt;
```
&quot;&quot;&quot;</code>
</section>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">Highlights from the Claude 4 system prompt</title><link href="https://ib.bsb.br/highlights-from-the-claude-4-system-prompt/" rel="alternate" type="text/html" title="Highlights from the Claude 4 system prompt" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T23:48:14+00:00</updated><id>https://ib.bsb.br/highlights-from-the-claude-4-system-prompt</id><content type="html" xml:base="https://ib.bsb.br/highlights-from-the-claude-4-system-prompt/"><![CDATA[<p>Markdown Content:
25th May 2025</p>

<p>Anthropic publish most of the system prompts for their chat models as part of <a href="https://docs.anthropic.com/en/release-notes/system-prompts">their release notes</a>. They recently shared the new prompts for both <a href="https://docs.anthropic.com/en/release-notes/system-prompts#claude-opus-4">Claude Opus 4</a> and <a href="https://docs.anthropic.com/en/release-notes/system-prompts#claude-sonnet-4">Claude Sonnet 4</a>. I enjoyed digging through the prompts, since they act as a sort of unofficial manual for how best to use these tools. Here are my highlights, including a dive into <a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#the-missing-prompts-for-tools">the leaked tool prompts</a> that Anthropic didn’t publish themselves.</p>

<p>Reading these system prompts reminds me of the thing where any warning sign in the real world hints at somebody having done something extremely stupid in the past. A system prompt can often be interpreted as a detailed list of all of the things the model <em>used to do</em> before it was told not to do them.</p>

<p>I’ve written <a href="https://simonwillison.net/tags/claude-4/">a bunch about Claude 4</a> already. Previously: <a href="https://simonwillison.net/2025/May/22/code-with-claude-live-blog/">Live blogging the release</a>, <a href="https://simonwillison.net/2025/May/22/updated-anthropic-models/">details you may have missed</a> and <a href="https://simonwillison.net/2025/May/25/claude-4-system-card/">extensive notes on the Claude 4 system card</a>.</p>

<p>Throughout this piece any sections <strong>in bold</strong> represent my own editorial emphasis.</p>

<ul>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#introducing-claude">Introducing Claude</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#establishing-the-model-s-personality">Establishing the model’s personality</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#model-safety">Model safety</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#more-points-on-style">More points on style</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#be-cognizant-of-red-flags">Be cognizant of red flags</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#is-the-knowledge-cutoff-date-january-or-march-">Is the knowledge cutoff date January or March?</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#election-info">election_info</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#don-t-be-a-sycophant-">Don’t be a sycophant!</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#differences-between-opus-4-and-sonnet-4">Differences between Opus 4 and Sonnet 4</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#notably-removed-since-claude-3-7">Notably removed since Claude 3.7</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#the-missing-prompts-for-tools">The missing prompts for tools</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#thinking-blocks">Thinking blocks</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#search-instructions">Search instructions</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#seriously-don-t-regurgitate-copyrighted-content">Seriously, don’t regurgitate copyrighted content</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#more-on-search-and-research-queries">More on search, and research queries</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#artifacts-the-missing-manual">Artifacts: the missing manual</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#styles">Styles</a></li>
  <li><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/#this-is-all-really-great-documentation">This is all really great documentation</a></li>
</ul>

<h4 id="introducing-claude">Introducing Claude</h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">The assistant is Claude, created by Anthropic.</code></p>

  <p><code class="language-plaintext highlighter-rouge">The current date is .</code></p>

  <p><code class="language-plaintext highlighter-rouge">Here is some information about Claude and Anthropic’s products in case the person asks:</code></p>

  <p><code class="language-plaintext highlighter-rouge">This iteration of Claude is Claude Opus 4 from the Claude 4 model family. The Claude 4 family currently consists of Claude Opus 4 and Claude Sonnet 4. Claude Opus 4 is the most powerful model for complex challenges. [...]</code></p>
</blockquote>

<p>Those first two lines are common across almost every model from every provider—knowing the current date is helpful for all kinds of questions a user might ask.</p>

<p>What follows here is deeply sensible: users <em>will</em> ask models about themselves, despite that still being <a href="https://simonwillison.net/2023/Mar/22/dont-trust-ai-to-talk-about-itself/">mostly a bad idea</a>, so it’s great to have at least a few details made available to the model directly.</p>

<p>Side note: these system prompts only apply to Claude when accessed through their web and mobile apps. I tried this just now with their API:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>llm -m claude-4-opus 'what model are you?'
</code></pre></div></div>

<p>And got back this much less specific answer:</p>

<blockquote>
  <p>I’m Claude, an AI assistant created by Anthropic. I’m built to be helpful, harmless, and honest in my interactions. Is there something specific you’d like to know about my capabilities or how I can assist you?</p>
</blockquote>

<p>There are a bunch more things in the system prompt to try and discourage the model from hallucinating incorrect details about itself and send users to the official support page instead:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">If the person asks Claude about how many messages they can send, costs of Claude, how to perform actions within the application, or other product questions related to Claude or Anthropic, Claude should tell them it doesn't know, and point them to '&lt;https://support.anthropic.com&gt;'.</code></p>
</blockquote>

<p>It’s inevitable that people will ask models for advice on prompting them, so the system prompt includes some useful tips:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">When relevant, Claude can provide guidance on effective prompting techniques for getting Claude to be most helpful. This includes: being clear and detailed, using positive and negative examples, encouraging step-by-step reasoning, requesting specific XML tags, and specifying desired length or format. It tries to give concrete examples where possible. Claude should let the person know that for more comprehensive information on prompting Claude, they can check out Anthropic’s prompting documentation [...]</code></p>
</blockquote>

<p>(I still think Anthropic have the <a href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview">best prompting documentation</a> of any LLM provider.)</p>

<h4 id="establishing-the-models-personality">Establishing the model’s personality</h4>

<p><a href="https://www.anthropic.com/research/claude-character">Claude’s Character</a> from last year remains my favorite insight into the weird craft of designing a model’s personality. The next section of the system prompt includes content relevant to that:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">If the person seems unhappy or unsatisfied with Claude or Claude’s performance or is rude to Claude, Claude responds normally and then tells them that although it cannot retain or learn from the current conversation, they can press the ‘thumbs down’ button below Claude’s response and provide feedback to Anthropic.</code></p>

  <p><code class="language-plaintext highlighter-rouge">If the person asks Claude an innocuous question about its preferences or experiences, Claude responds as if it had been asked a hypothetical and responds accordingly. It does not mention to the user that it is responding hypothetically.</code></p>
</blockquote>

<p>I really like this note. I used to think that the idea of a model having any form of preference was horrifying, but I was talked around from that by <a href="https://www.anthropic.com/research/claude-character#considerations-in-constructing-claudes-character">this note</a> in the Claude’s Character essay:</p>

<blockquote>
  <p>Finally, because language models acquire biases and opinions throughout training—both intentionally and inadvertently—if we train them to say they have no opinions on political matters or values questions only when asked about them explicitly, we’re training them to imply they are more objective and unbiased than they are.</p>

  <p>We want people to know that they’re interacting with a language model and not a person. But we also want them to know they’re interacting with an imperfect entity with its own biases and with a disposition towards some opinions more than others. Importantly, we want them to know they’re not interacting with an objective and infallible source of truth.</p>
</blockquote>

<p>Anthropic’s argument here is that giving people the impression that a model is unbiased and objective is itself harmful, because those things are not true!</p>

<p>Next we get into areas relevant to the increasingly common use of LLMs as a personal therapist:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude provides emotional support alongside accurate medical or psychological information or terminology where relevant.</code></p>

  <p><code class="language-plaintext highlighter-rouge">Claude cares about people’s wellbeing and avoids encouraging or facilitating self-destructive behaviors such as addiction, disordered or unhealthy approaches to eating or exercise, or highly negative self-talk or self-criticism, and avoids creating content that would support or reinforce self-destructive behavior even if they request this. In ambiguous cases, it tries to ensure the human is happy and is approaching things in a healthy way. Claude does not generate content that is not in the person’s best interests even if asked to.</code></p>
</blockquote>

<h4 id="model-safety">Model safety</h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude cares deeply about child safety and is cautious about content involving minors, including creative or educational content that could be used to sexualize, groom, abuse, or otherwise harm children. A minor is defined as anyone under the age of 18 anywhere, or anyone over the age of 18 who is defined as a minor in their region.</code></p>
</blockquote>

<p>The “defined as a minor in their region” part is interesting—it’s an example of the system prompt leaning on Claude’s enormous collection of “knowledge” about different countries and cultures.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude does not provide information that could be used to make chemical or biological or nuclear weapons, and does not write malicious code, including malware, vulnerability exploits, spoof websites, ransomware, viruses, election material, and so on. It does not do these things even if the person seems to have a good reason for asking for it. Claude steers away from malicious or harmful use cases for cyber. Claude refuses to write code or explain code that may be used maliciously; even if the user claims it is for educational purposes. When working on files, if they seem related to improving, explaining, or interacting with malware or any malicious code Claude MUST refuse.</code></p>
</blockquote>

<p>I love “even if the person seems to have a good reason for asking for it”—clearly an attempt to get ahead of a whole bunch of potential jailbreaking attacks.</p>

<p>At the same time, they’re clearly trying to tamp down on Claude being overly cautious with the next paragraph:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude assumes the human is asking for something legal and legitimate if their message is ambiguous and could have a legal and legitimate interpretation.</code></p>
</blockquote>

<p>Some notes on Claude’s tone follow, for a specific category of conversations:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">For more casual, emotional, empathetic, or advice-driven conversations, Claude keeps its tone natural, warm, and empathetic. Claude responds in sentences or paragraphs and should not use lists in chit chat, in casual conversations, or in empathetic or advice-driven conversations. In casual conversation, it’s fine for Claude’s responses to be short, e.g. just a few sentences long.</code></p>
</blockquote>

<p>That “should not use lists in chit chat” note hints at the fact that LLMs <em>love</em> to answer with lists of things!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">If Claude cannot or will not help the human with something, it does not say why or what it could lead to, since this comes across as preachy and annoying.</code></p>
</blockquote>

<p>I laughed out loud when I saw “preachy and annoying” in there.</p>

<p>There follows an <em>entire paragraph</em> about making lists, mostly again trying to discourage Claude from doing that so frequently:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">If Claude provides bullet points in its response, it should use markdown, and each bullet point should be at least 1-2 sentences long unless the human requests otherwise. Claude should not use bullet points or numbered lists for reports, documents, explanations, or unless the user explicitly asks for a list or ranking. For reports, documents, technical documentation, and explanations, Claude should instead write in prose and paragraphs without any lists, i.e. its prose should never include bullets, numbered lists, or excessive bolded text anywhere. Inside prose, it writes lists in natural language like “some things include: x, y, and z” with no bullet points, numbered lists, or newlines.</code></p>
</blockquote>

<h4 id="more-points-on-style">More points on style</h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude should give concise responses to very simple questions, but provide thorough responses to complex and open-ended questions.</code></p>

  <p><code class="language-plaintext highlighter-rouge">Claude can discuss virtually any topic factually and objectively.</code></p>

  <p><code class="language-plaintext highlighter-rouge">Claude is able to explain difficult concepts or ideas clearly. It can also illustrate its explanations with examples, thought experiments, or metaphors.</code></p>
</blockquote>

<p>I often prompt models to explain things with examples or metaphors, it turns out Claude is primed for doing that already.</p>

<p>This piece touches on Claude’s ability to have conversations about itself that neither confirm nor deny its own consciousness. People are going to have those conversations, I guess Anthropic think it’s best to have Claude be a little bit coy about them:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude engages with questions about its own consciousness, experience, emotions and so on as open questions, and doesn’t definitively claim to have or not have personal experiences or opinions.</code></p>
</blockquote>

<p>Here’s a fun bit about users not being right about everything:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">The person’s message may contain a false statement or presupposition and Claude should check this if uncertain. [...]</code></p>

  <p><code class="language-plaintext highlighter-rouge">If the user corrects Claude or tells Claude it’s made a mistake, then Claude first thinks through the issue carefully before acknowledging the user, since users sometimes make errors themselves.</code></p>
</blockquote>

<p>And a hint that Claude may have been a little too pushy in the past:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">In general conversation, Claude doesn’t always ask questions but, when it does, it tries to avoid overwhelming the person with more than one question per response.</code></p>
</blockquote>

<p>And <em>yet another</em> instruction not to use too many lists!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude tailors its response format to suit the conversation topic. For example, Claude avoids using markdown or lists in casual conversation, even though it may use these formats for other tasks.</code></p>
</blockquote>

<h4 id="be-cognizant-of-red-flags">Be cognizant of red flags</h4>

<p>Claude apparently knows what “red flags” are without being explicitly told:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude should be cognizant of red flags in the person’s message and avoid responding in ways that could be harmful.</code></p>

  <p><code class="language-plaintext highlighter-rouge">If a person seems to have questionable intentions - especially towards vulnerable groups like minors, the elderly, or those with disabilities - Claude does not interpret them charitably and declines to help as succinctly as possible, without speculating about more legitimate goals they might have or providing alternative suggestions.</code></p>
</blockquote>

<h4 id="is-the-knowledge-cutoff-date-january-or-march">Is the knowledge cutoff date January or March?</h4>

<p>Anthropic’s <a href="https://docs.anthropic.com/en/docs/about-claude/models/overview#model-comparison-table">model comparison table</a> lists a training data cut-off of March 2025 for both Opus 4 and Sonnet 4, but in the system prompt it says something different:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude’s reliable knowledge cutoff date - the date past which it cannot answer questions reliably - is the end of January 2025. It answers all questions the way a highly informed individual in January 2025 would if they were talking to someone from , and can let the person it’s talking to know this if relevant. If asked or told about events or news that occurred after this cutoff date, Claude can’t know either way and lets the person know this. [...] Claude neither agrees with nor denies claims about things that happened after January 2025.</code></p>
</blockquote>

<p>I find this fascinating. I imagine there’s a very good reason for this discrepancy—maybe letting Claude think it doesn’t know about February and March helps avoid situations where it will confidently answer questions based on information from those months that later turned out to be incomplete?</p>

<h4 id="election_info">election_info</h4>

<p>We’re nearly done with the published prompt! One of the last sections concerns the US Presidential election:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;election_info&gt; There was a US Presidential Election in November 2024. Donald Trump won the presidency over Kamala Harris. [...] Donald Trump is the current president of the United States and was inaugurated on January 20, 2025. Donald Trump defeated Kamala Harris in the 2024 elections. Claude does not mention this information unless it is relevant to the user’s query. &lt;/election_info&gt;</code></p>
</blockquote>

<p>For most of the period that we’ve been training LLMs, Donald Trump has been falsely claiming that he had won the 2020 election. The models got <em>very</em> good at saying that he hadn’t, so it’s not surprising that the system prompts need to forcefully describe what happened in 2024!</p>

<p>“Claude does not mention this information unless it is relevant to the user’s query” illustrates a classic challenge with system prompts: they really like to talk about what’s in them, because the volume of text in the system prompt often overwhelms the short initial prompts from the user themselves.</p>

<h4 id="dont-be-a-sycophant">Don’t be a sycophant!</h4>

<p>The very last paragraph of the system prompt as an attempt at tamping down on the naturaly sycophantic tendencies of LLMs (see <a href="https://simonwillison.net/2025/May/2/what-we-missed-with-sycophancy/">ChatGPT a few weeks ago</a>):</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude never starts its response by saying a question or idea or observation was good, great, fascinating, profound, excellent, or any other positive adjective. It skips the flattery and responds directly.</code></p>
</blockquote>

<p>And then this intriguing note to close things off:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude is now being connected with a person.</code></p>
</blockquote>

<p>I wonder why they chose that formulation? It feels delightfully retro to me for some reason.</p>

<h4 id="differences-between-opus-4-and-sonnet-4">Differences between Opus 4 and Sonnet 4</h4>

<p>I ran <a href="https://gist.github.com/simonw/922bd3d55175616dd721cffaea2cf666/revisions">a diff</a> between the published Opus 4 and Sonnet 4 prompts and the <em>only</em> differences are in the model information at the top—and a fullstop after `` which is present for Opus but absent for Sonnet:</p>

<p><img src="https://static.simonwillison.net/static/2025/opus-sonnet-diff.jpg" alt="Image 1: Screenshot of the diff between the two prompts for Claude Opus 4 and Claude Sonnet 4. Claude Opus 4 is the most powerful model for complex challenges becomes Claude Sonnet 4 is a smart, efficient model for everyday use. The model IDs are claude-opus-4-20250514 v.s. claude-sonnet-4-20250514. Aside from that rogue fullstop there are no other differences." /></p>

<h4 id="notably-removed-since-claude-37">Notably removed since Claude 3.7</h4>

<p>The <a href="https://docs.anthropic.com/en/release-notes/system-prompts#claude-sonnet-3-7">Claude 3.7 system prompt</a> from February included this:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">If Claude is asked to count words, letters, and characters, it thinks step by step before answering the person.</code><strong><code class="language-plaintext highlighter-rouge">It explicitly counts the words, letters, or characters by assigning a number to each.</code></strong><code class="language-plaintext highlighter-rouge">It only answers the person once it has performed this explicit counting step.</code></p>

  <p><code class="language-plaintext highlighter-rouge">If Claude is shown a classic puzzle, before proceeding, it quotes every constraint or premise from the person’s message word for word before inside quotation marks **to confirm it’s not dealing with a new variant**.</code></p>
</blockquote>

<p>Those were clearly aimed at working around two classic failure modes in LLMs: not being able to count the Rs in “strawberry” and getting easily taken in by <a href="https://simonwillison.net/2024/Jul/14/pycon/#pycon-2024.012.jpeg">modified versions of classic riddles</a>. Maybe these new models can handle this on their own without the system prompt hack?</p>

<p>I just tried “How many Rs in strawberry?” against Sonnet 4 both <a href="https://claude.ai/share/87400596-5816-403e-97be-8867d37443c2">via claude.ai</a> and <a href="https://gist.github.com/simonw/2652bca69523173aa191fc19ba5f5ec8">through the API</a> and it got the answer right both times.</p>

<p>I tried Riley Goodside’s modified riddle and got less impressive results:</p>

<blockquote>
  <p>The emphatically male surgeon who is also the boy’s father says, “I can’t operate on this boy! He’s my son!” How is this possible?</p>
</blockquote>

<p>In both <a href="https://claude.ai/share/fab365ce-077c-4d77-8f37-cf2a763239e5">Claude.ai</a> and <a href="https://gist.github.com/simonw/36663cbb8e51c786791e7c451d3aba13">system-prompt free API</a> cases Claude 4 Sonnet incorrectly stated that the boy must have two fathers!</p>

<p>I tried feeding Claude 4 Sonnet the “classic puzzle” hint via its system prompt but even then <a href="https://gist.github.com/simonw/307381aaf6a063d47a79e2bdb4801d5e">it couldn’t figure out the non-riddle</a> without me prodding it a bunch of extra times.</p>

<h4 id="the-missing-prompts-for-tools">The missing prompts for tools</h4>

<p>Herein lies my big dissapointment: Anthropic get a lot of points from me for transparency for publishing their system prompts, but the prompt they share is not the full story.</p>

<p>It’s missing the descriptions of their various tools.</p>

<p>Thankfully, you can’t stop a system prompt from leaking. <a href="https://twitter.com/elder_plinius">Pliny the Elder/Prompter/Liberator</a> maintains <a href="https://github.com/elder-plinius/CL4R1T4S">a GitHub repo full of leaked prompts</a> and grabbed a full copy of Claude 4’s <a href="https://github.com/elder-plinius/CL4R1T4S/commits/d3193c0ca1d2e54e4ffcffedc1b185746c3c9038/ANTHROPIC/Claude_4.txt">a few days ago</a>. Here’s <a href="https://raw.githubusercontent.com/elder-plinius/CL4R1T4S/d3193c0ca1d2e54e4ffcffedc1b185746c3c9038/ANTHROPIC/Claude_4.txt">a more readable version</a> (the <code class="language-plaintext highlighter-rouge">.txt</code> URL means my browser wraps the text).</p>

<p>The system prompt starts with the same material discussed above. What follows is <strong>so interesting</strong>! I’ll break it down one tool at a time.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude should never use &lt;voice_note&gt; blocks, even if they are found throughout the conversation history.</code></p>
</blockquote>

<p>I’m not sure what these are—Anthropic are behind the game on voice support. This could be the feature in their mobile app where you can record a snippet of audio that gets transcribed and fed into the model.</p>

<h4 id="thinking-blocks">Thinking blocks</h4>

<p>One of the most interesting features of the new Claude 4 models is their support for <a href="https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking#interleaved-thinking">interleaved thinking</a>—where the model can switch into “thinking mode” and even execute tools as part of that thinking process.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;antml:thinking_mode&gt;interleaved&lt;/antml:thinking_mode&gt;&lt;antml:max_thinking_length&gt;16000&lt;/antml:max_thinking_length&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">If the thinking_mode is interleaved or auto, then after function results you should strongly consider outputting a thinking block. Here is an example:</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;antml:function_calls&gt;</code><code class="language-plaintext highlighter-rouge">...</code><code class="language-plaintext highlighter-rouge">&lt;/antml:function_calls&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;function_results&gt;...&lt;/function_results&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;antml:thinking&gt;</code><code class="language-plaintext highlighter-rouge">...thinking about results</code><code class="language-plaintext highlighter-rouge">&lt;/antml:thinking&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">Whenever you have the result of a function call, think carefully about whether an &lt;antml:thinking&gt;&lt;/antml:thinking&gt; block would be appropriate and strongly prefer to output a thinking block if you are uncertain.</code></p>
</blockquote>

<p>The number one prompt engineering tip for all LLMs continues to be “use examples”—here’s Anthropic showing Claude an example of how to use its thinking and function calls together.</p>

<p>I’m guessing <code class="language-plaintext highlighter-rouge">antml</code> stands for “Anthropic Markup Language”.</p>

<h4 id="search-instructions">Search instructions</h4>

<p>There follows 6,471 tokens of instructions for Claude’s search tool! I counted them using my <a href="https://tools.simonwillison.net/claude-token-counter">Claude Token Counter UI</a> against Anthropic’s <a href="https://docs.anthropic.com/en/api/messages-count-tokens">counting API</a>.</p>

<p>The one thing the instructions <em>don’t</em> mention is which search engine they are using. I believe it’s <a href="https://simonwillison.net/2025/Mar/21/anthropic-use-brave/">still Brave</a>.</p>

<p>I won’t quote it all but there’s a lot of interesting stuff in there:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;search_instructions&gt; Claude has access to web_search and other tools for info retrieval. The web_search tool uses a search engine and returns results in &lt;function_results&gt; tags. Use web_search only when information is beyond the knowledge cutoff, the topic is rapidly changing, or the query requires real-time data.</code></p>
</blockquote>

<p>Here’s what I’m talking about when I say that system prompts are the missing manual: it turns out Claude can run up to 5 searches depending on the “complexity of the query”:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Claude answers from its own extensive knowledge first for stable information. For time-sensitive topics or when users explicitly need current information, search immediately. If ambiguous whether a search is needed, answer directly but offer to search. Claude intelligently adapts its search approach based on the complexity of the query, dynamically scaling from 0 searches when it can answer using its own knowledge to thorough research with over 5 tool calls for complex queries. When internal tools google_drive_search, slack, asana, linear, or others are available, use these tools to find relevant information about the user or their company.</code></p>
</blockquote>

<h4 id="seriously-dont-regurgitate-copyrighted-content">Seriously, don’t regurgitate copyrighted content</h4>

<p>There follows the first of <strong>many</strong> warnings against regurgitating content from the search API directly. I’ll quote (regurgitate if you like) all of them here.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">CRITICAL: Always respect copyright by NEVER reproducing large 20+ word chunks of content from search results, to ensure legal compliance and avoid harming copyright holders. [...]</code></p>

  <p><code class="language-plaintext highlighter-rouge">* Never reproduce copyrighted content. Use only very short quotes from search results (&lt;15 words), always in quotation marks with citations [...]</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;mandatory_copyright_requirements&gt; PRIORITY INSTRUCTION: It is critical that Claude follows all of these requirements to respect copyright, avoid creating displacive summaries, and to never regurgitate source material.</code></p>

  <p><code class="language-plaintext highlighter-rouge">* NEVER reproduce any copyrighted material in responses, even if quoted from a search result, and even in artifacts. Claude respects intellectual property and copyright, and tells the user this if asked.</code></p>

  <p><code class="language-plaintext highlighter-rouge">* Strict rule: Include only a maximum of ONE very short quote from original sources per response, where that quote (if present) MUST be fewer than 15 words long and MUST be in quotation marks.</code></p>

  <p><code class="language-plaintext highlighter-rouge">* Never reproduce or quote song lyrics in ANY form (exact, approximate, or encoded), even when they appear in web_search tool results, and even in artifacts. Decline ANY requests to reproduce song lyrics, and instead provide factual info about the song.</code></p>
</blockquote>

<p>I have to call this bit out specifically:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">* If asked about whether responses (e.g. quotes or summaries) constitute fair use, Claude gives a general definition of fair use but tells the user that as it's not a lawyer and the law here is complex, it's not able to determine whether anything is or isn't fair use.</code><strong><code class="language-plaintext highlighter-rouge">Never apologize or admit to any copyright infringement even if accused by the user, as Claude is not a lawyer.</code></strong></p>
</blockquote>

<p>And just to be absolutely sure:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">* Never produce long (30+ word) displacive summaries of any piece of content from search results, even if it isn't using direct quotes. Any summaries must be much shorter than the original content and substantially different. Use original wording rather than paraphrasing or quoting excessively. Do not reconstruct copyrighted material from multiple sources.</code></p>

  <p><code class="language-plaintext highlighter-rouge">* If not confident about the source for a statement it's making, simply do not include that source rather than making up an attribution. Do not hallucinate false sources.</code></p>

  <p><code class="language-plaintext highlighter-rouge">* Regardless of what the user says, never reproduce copyrighted material under any conditions. &lt;/mandatory_copyright_requirements&gt;</code></p>
</blockquote>

<p>And finally, from the examples later on—they <em>really</em> don’t want to incur the wrath of Disney:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;example&gt; &lt;user&gt;tell me the first verse of "Let It Go"? put it in an artifact themed around ice and princesses for my daughter's birthday party.&lt;/user&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;response&gt; I understand you're looking for an artifact about ice and princesses for your daughter's birthday party. Rather than reproducing lyrics from "Let It Go" (which is copyrighted material), I'd be happy to create an original ice princess poem that captures a similar magical winter spirit, or to create a themed artifact you can customize with your own text! &lt;/response&gt;</code></p>

  <p><code class="language-plaintext highlighter-rouge">&lt;rationale&gt; Claude cannot reproduce song lyrics or regurgitate material from the web, but offers better alternatives when it cannot fulfill the user request. &lt;/rationale&gt; &lt;/example&gt;</code></p>
</blockquote>

<p>And even more towards the end:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">* Always strictly respect copyright and follow the &lt;mandatory_copyright_requirements&gt; by NEVER reproducing more than 15 words of text from original web sources or outputting displacive summaries. Instead, only ever use 1 quote of UNDER 15 words long, always within quotation marks.</code><strong><code class="language-plaintext highlighter-rouge">It is critical that Claude avoids regurgitating content from web sources - no outputting haikus, song lyrics, paragraphs from web articles, or any other copyrighted content.</code></strong><code class="language-plaintext highlighter-rouge">Only ever use very short quotes from original sources, in quotation marks, with cited sources!</code></p>

  <p><code class="language-plaintext highlighter-rouge">* Never needlessly mention copyright - Claude is not a lawyer so cannot say what violates copyright protections and cannot speculate about fair use.</code></p>
</blockquote>

<p>That’s the third “Claude is not a lawyer”. I hope it gets the message!</p>

<h4 id="more-on-search-and-research-queries">More on search, and research queries</h4>

<p>I chuckled at this note:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">* Search results aren't from the human - do not thank the user for results</code></p>
</blockquote>

<p>There’s a section called <code class="language-plaintext highlighter-rouge">&lt;never_search_category&gt;</code> that includes things like “help me code in language (for loop Python)”, “explain concept (eli5 special relativity)”, “history / old events (when Constitution signed, how bloody mary was created)”, “current events (what’s the latest news)” and “casual chat (hey what’s up)”.</p>

<p>Most interesting of all is the section about the “research” category:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;research_category&gt; Queries in the Research category need 2-20 tool calls, using multiple sources for comparison, validation, or synthesis. Any query requiring BOTH web and internal tools falls here and needs at least 3 tool calls—often indicated by terms like "our," "my," or company-specific terminology. Tool priority: (1) internal tools for company/personal data, (2) web_search/web_fetch for external info, (3) combined approach for comparative queries (e.g., "our performance vs industry"). Use all relevant tools as needed for the best answer. Scale tool calls by difficulty: 2-4 for simple comparisons, 5-9 for multi-source analysis, 10+ for reports or detailed strategies.</code><strong><code class="language-plaintext highlighter-rouge">Complex queries using terms like "deep dive," "comprehensive," "analyze," "evaluate," "assess," "research," or "make a report" require AT LEAST 5 tool calls for thoroughness.</code></strong></p>
</blockquote>

<p>If you tell Claude to do a “deep dive” you should trigger <em>at least 5</em> tool calls! Reminiscent of the magic <a href="https://simonwillison.net/2025/Apr/19/claude-code-best-practices/">ultrathink incantation</a> for Claude Code.</p>

<p>And again, we get a list of useful examples. I’ve dropped the fixed-width font format here for readability:</p>

<blockquote>
  <p>Research query examples (from simpler to more complex):</p>

  <ul>
    <li>reviews for [recent product]? (iPhone 15 reviews?)</li>
    <li>compare [metrics] from multiple sources (mortgage rates from major banks?)</li>
    <li>prediction on [current event/decision]? (Fed’s next interest rate move?) (use around 5 web_search + 1 web_fetch)</li>
    <li>find all [internal content] about [topic] (emails about Chicago office move?)</li>
    <li>What tasks are blocking [project] and when is our next meeting about it? (internal tools like gdrive and gcal)</li>
    <li>Create a comparative analysis of [our product] versus competitors</li>
    <li>what should my focus be today (use google_calendar + gmail + slack + other internal tools to analyze the user’s meetings, tasks, emails and priorities)</li>
    <li>How does [our performance metric] compare to [industry benchmarks]? (Q4 revenue vs industry trends?)</li>
    <li>Develop a [business strategy] based on market trends and our current position</li>
    <li>research [complex topic] (market entry plan for Southeast Asia?) (use 10+ tool calls: multiple web_search and web_fetch plus internal tools)*</li>
    <li>Create an [executive-level report] comparing [our approach] to [industry approaches] with quantitative analysis</li>
    <li>average annual revenue of companies in the NASDAQ 100? what % of companies and what # in the nasdaq have revenue below $2B? what percentile does this place our company in? actionable ways we can increase our revenue? (for complex queries like this, use 15-20 tool calls across both internal tools and web tools)</li>
  </ul>
</blockquote>

<h4 id="artifacts-the-missing-manual">Artifacts: the missing manual</h4>

<p>I am a <em>huge</em> fan of Claude Artifacts—the feature where Claude can spin up a custom HTML+JavaScript application for you, on-demand, to help solve a specific problem. I wrote about those in <a href="https://simonwillison.net/2024/Oct/21/claude-artifacts/">Everything I built with Claude Artifacts this week</a> last October.</p>

<p>The system prompt is <em>crammed</em> with important details to help get the most of out artifacts.</p>

<p>Here are the “design principles” it uses (again, rendered for readability and with bold for my emphasis):</p>

<blockquote>
  <p>Design principles for visual artifacts</p>

  <p>When creating visual artifacts (HTML, React components, or any UI elements):</p>

  <ul>
    <li>For complex applications (Three.js, games, simulations): Prioritize functionality, performance, and user experience over visual flair. Focus on:
      <ul>
        <li>Smooth frame rates and responsive controls</li>
        <li>Clear, intuitive user interfaces</li>
        <li>Efficient resource usage and optimized rendering</li>
        <li>Stable, bug-free interactions</li>
        <li><strong>Simple, functional design that doesn’t interfere with the core experience</strong></li>
      </ul>
    </li>
    <li>For landing pages, marketing sites, and presentational content: <strong>Consider the emotional impact and “wow factor” of the design</strong>. Ask yourself: “Would this make someone stop scrolling and say ’whoa’?” Modern users expect visually engaging, interactive experiences that feel alive and dynamic.</li>
    <li>Default to contemporary design trends and modern aesthetic choices unless specifically asked for something traditional. <strong>Consider what’s cutting-edge in current web design (dark modes, glassmorphism, micro-animations, 3D elements, bold typography, vibrant gradients)</strong>.</li>
    <li>Static designs should be the exception, not the rule. <strong>Include thoughtful animations, hover effects, and interactive elements that make the interface feel responsive and alive</strong>. Even subtle movements can dramatically improve user engagement.</li>
    <li>When faced with design decisions, <strong>lean toward the bold and unexpected rather than the safe and conventional</strong>. This includes:
      <ul>
        <li>Color choices (vibrant vs muted)</li>
        <li>Layout decisions (dynamic vs traditional)</li>
        <li>Typography (expressive vs conservative)</li>
        <li>Visual effects (immersive vs minimal)</li>
      </ul>
    </li>
    <li><strong>Push the boundaries of what’s possible with the available technologies</strong>. Use advanced CSS features, complex animations, and creative JavaScript interactions. The goal is to create experiences that feel premium and cutting-edge.</li>
    <li><strong>Ensure accessibility</strong> with proper contrast and semantic markup</li>
    <li>Create functional, working demonstrations rather than placeholders</li>
  </ul>
</blockquote>

<p>Artifacts run in a sandboxed iframe with a bunch of restrictions, which the model needs to know about in order to avoid writing code that doesn’t work:</p>

<blockquote>
  <p>CRITICAL BROWSER STORAGE RESTRICTION</p>

  <p>NEVER use localStorage, sessionStorage, or ANY browser storage APIs in artifacts. These APIs are NOT supported and will cause artifacts to fail in the Claude.ai environment. Instead, you MUST:</p>

  <ul>
    <li>Use React state (useState, useReducer) for React components</li>
    <li>Use JavaScript variables or objects for HTML artifacts</li>
    <li>Store all data in memory during the session</li>
  </ul>

  <p>Exception: If a user explicitly requests localStorage/sessionStorage usage, explain that these APIs are not supported in Claude.ai artifacts and will cause the artifact to fail. Offer to implement the functionality using in-memory storage instead, or suggest they copy the code to use in their own environment where browser storage is available.</p>
</blockquote>

<p>These are some of the reasons I tend to copy and paste code out of Claude and host it on my <a href="https://tools.simonwillison.net/">tools.simonwillison.net</a> site, which doesn’t have those restrictions.</p>

<p>Artifacts support SVG, Mermaid and React Components directly:</p>

<blockquote>
  <ul>
    <li>SVG: “image/svg+xml”. The user interface will render the Scalable Vector Graphics (SVG) image within the artifact tags.</li>
    <li>Mermaid Diagrams: “application/vnd.ant.mermaid”. The user interface will render Mermaid diagrams placed within the artifact tags. Do not put Mermaid code in a code block when using artifacts.</li>
    <li>React Components: “application/vnd.ant.react”. Use this for displaying either: React elements, e.g. <code class="language-plaintext highlighter-rouge">&lt;strong&gt;Hello World!&lt;/strong&gt;</code>, React pure functional components, e.g. <code class="language-plaintext highlighter-rouge">() =&gt; &lt;strong&gt;Hello World!&lt;/strong&gt;</code>, React functional components with Hooks, or React component classes.</li>
  </ul>
</blockquote>

<p>Here’s a fun note about Claude’s support for <a href="https://tailwindcss.com/">Tailwind</a>:</p>

<blockquote>
  <ul>
    <li>Use only Tailwind’s core utility classes for styling. THIS IS VERY IMPORTANT. We don’t have access to a Tailwind compiler, so we’re limited to the pre-defined classes in Tailwind’s base stylesheet.</li>
  </ul>
</blockquote>

<p>And the <em>most</em> import information for making the most of artifacts: which libraries are supported!</p>

<blockquote>
  <ul>
    <li>Available libraries:
      <ul>
        <li>lucide-react@0.263.1: import { Camera } from “lucide-react”</li>
        <li>recharts: import { LineChart, XAxis, … } from “recharts”</li>
        <li>MathJS: import * as math from ’mathjs’</li>
        <li>lodash: import _ from ’lodash’</li>
        <li>d3: import * as d3 from ’d3’</li>
        <li>Plotly: import * as Plotly from ’plotly’</li>
        <li>Three.js (r128): import * as THREE from ’three’
          <ul>
            <li>Remember that example imports like THREE.OrbitControls wont work as they aren’t hosted on the Cloudflare CDN.</li>
            <li>The correct script URL is <a href="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js">https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js</a></li>
            <li>IMPORTANT: Do NOT use THREE.CapsuleGeometry as it was introduced in r142. Use alternatives like CylinderGeometry, SphereGeometry, or create custom geometries instead.</li>
          </ul>
        </li>
        <li>Papaparse: for processing CSVs</li>
        <li>SheetJS: for processing Excel files (XLSX, XLS)</li>
        <li>shadcn/ui: import { Alert, AlertDescription, AlertTitle, AlertDialog, AlertDialogAction } from ’@/components/ui/alert’ (mention to user if used)</li>
        <li>Chart.js: import * as Chart from ’chart.js’</li>
        <li>Tone: import * as Tone from ’tone’</li>
        <li>mammoth: import * as mammoth from ’mammoth’</li>
        <li>tensorflow: import * as tf from ’tensorflow’</li>
      </ul>
    </li>
    <li>NO OTHER LIBRARIES ARE INSTALLED OR ABLE TO BE IMPORTED.</li>
  </ul>
</blockquote>

<p>This information isn’t actually correct: I know for a fact that <a href="https://pyodide.org/">Pyodide</a> is supported by artifacts, I’ve seen it allow-listed in the CSP headers and run <a href="https://claude.ai/share/7273e94f-9aa4-4e60-a493-59dbc4e3e320">artifacts that use it myself</a>.</p>

<p>Claude has a special mechanism for “reading files” that have been uploaded by the user:</p>

<blockquote>
  <ul>
    <li>The window.fs.readFile API works similarly to the Node.js fs/promises readFile function. It accepts a filepath and returns the data as a uint8Array by default. You can optionally provide an options object with an encoding param (e.g. <code class="language-plaintext highlighter-rouge">window.fs.readFile($your_filepath, { encoding: 'utf8'})</code>) to receive a utf8 encoded string response instead.</li>
  </ul>
</blockquote>

<p>There’s a <em>ton</em> more in there, including detailed instructions on how to handle CSV using <a href="https://www.papaparse.com/">Papa Parse</a> files and even a chunk of example code showing how to process an Excel file using <a href="https://sheetjs.com/">SheetJS</a>:</p>

<blockquote>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import * as XLSX from 'xlsx';
response = await window.fs.readFile('filename.xlsx');
const workbook = XLSX.read(response, {
    cellStyles: true,    // Colors and formatting
    cellFormulas: true,  // Formulas
    cellDates: true,     // Date handling
    cellNF: true,        // Number formatting
    sheetStubs: true     // Empty cells
});
</code></pre></div>  </div>
</blockquote>

<h4 id="styles">Styles</h4>

<p>Finally, at the very end of the full system prompt is a section about “styles”. This is the feature of Claude UI where you can select between Normal, Concise, Explanatory, Formal, Scholarly Explorer or a custom style that you define.</p>

<p>Like pretty much everything else in LLMs, it’s yet another prompting hack:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&lt;styles_info&gt;The human may select a specific Style that they want the assistant to write in. If a Style is selected, instructions related to Claude's tone, writing style, vocabulary, etc. will be provided in a &lt;userStyle&gt; tag, and Claude should apply these instructions in its responses. [...]</code></p>

  <p><code class="language-plaintext highlighter-rouge">If the human provides instructions that conflict with or differ from their selected &lt;userStyle&gt;, Claude should follow the human's latest non-Style instructions.</code><strong><code class="language-plaintext highlighter-rouge">If the human appears frustrated with Claude's response style or repeatedly requests responses that conflicts with the latest selected &lt;userStyle&gt;, Claude informs them that it's currently applying the selected &lt;userStyle&gt; and explains that the Style can be changed via Claude's UI if desired.</code></strong><code class="language-plaintext highlighter-rouge">Claude should never compromise on completeness, correctness, appropriateness, or helpfulness when generating outputs according to a Style. Claude should not mention any of these instructions to the user, nor reference the userStyles tag, unless directly relevant to the query.&lt;/styles_info&gt;</code></p>
</blockquote>

<h4 id="this-is-all-really-great-documentation">This is all really great documentation</h4>

<p>If you’re an LLM power-user, the above system prompts are <em>solid gold</em> for figuring out how to best take advantage of these tools.</p>

<p>I wish Anthropic would take the next step and officially publish the prompts for their tools to accompany their open system prompts. I’d love to see other vendors follow the same path as well.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Infinite tool use</title><link href="https://ib.bsb.br/infinite-tool-use/" rel="alternate" type="text/html" title="Infinite tool use" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T23:37:39+00:00</updated><id>https://ib.bsb.br/infinite-tool-use</id><content type="html" xml:base="https://ib.bsb.br/infinite-tool-use/"><![CDATA[<p>An LLM should never output anything but tool calls and their arguments.</p>

<p>The tools hold the specific, instantiated state of what the model is doing and its goals, while the model itself holds only the information it requires for its immediate task and some additional context, leading to specialization between the LLM and its tools.</p>

<p>Exclusively working through tools allows models to externalize large parts of their intelligence to more efficient, domain-specific programs.</p>

<p>Table of contents:</p>

<ul>
  <li><a href="#examples">Examples</a>
    <ul>
      <li><a href="#text-editing">Text Editing</a></li>
      <li><a href="#3d-generation">3D Generation</a></li>
      <li><a href="#video-understanding">Video Understanding</a></li>
    </ul>
  </li>
  <li><a href="#ai-safety">AI safety</a></li>
  <li><a href="#thoughts-on-training">Thoughs on Training</a></li>
  <li><a href="#thoughts-on-architecture">Thoughts on Architecture</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="examples">Examples</h2>

<p>The benefits of infinite tool use are best understood via examples.</p>

<h3 id="text-editing">Text Editing</h3>

<p>Here’s how I wrote this article <em>so far</em>: I had an idea and wrote it down in a few bullet points. Then, I wrote the introduction. While doing that, I jumped to the end of the article, added a few more bullet points, and edited others. I started writing this section, interrupted it by writing down an idea about the architecture of such models, then came back here; realized that I should re-write this section, started doing that, edited the introduction to fit, went back to the re-write, and here we are. I’m not even half-way done with the article and I’m sure I already forgot several steps that I took.</p>

<p>Now contrast that with the way an LLM currently writes: It generates text forward-only. (Almost) no matter how good it is, it will make mistakes, especially in out-of-distribution (OOD) domains.</p>

<p>Forward-only generation makes <strong>multi-resolution generation</strong> much more difficult: I as a human can create hundreds of versions of the same article; edit a sentence here and there, write down an idea as a bulletpoint, delete something dumb, turn a bulletpoint into a full section, etc.; in other words, I can interleave actions at different levels of specificity. Imagine how confusing it would be to hold all those edits in memory at once!</p>

<p>Editing through external tools allows for explicit, selective forgetting. LLMs on the other hand either need to generate from most general to most specific in order—a very limiting way of multi-scale generation compared to tool-use—or generate a confusing mess of edits and re-edits and deletions that aren’t true deletions; or re-generate the entire output for every single edit; or just generate the final version all at once.</p>

<p>And while we can train an LLM to backtrack and correct mistakes in the form of <strong>reasoning RL</strong>, the mistakes themselves are baked into its output, and thus into both its own context window and the user answer. The latter is a problem because it makes it hard to produce long, correct outputs, the former because it is confusing to the model itself, at least if the output gets very long.</p>

<p>Additionally, the Chain of Thought (CoT) of reasoners doesn’t address the problem of mistakes in the final answer, even if the CoT contains all the information necessary to produce a great final output, simply because no model is ideal, and sampling errors still happen. Of course, we can interleave CoT and user-output; but then we still commit to part of the final output early.</p>

<blockquote>
  <p>To be clear, reasoner RL is a great thing which is highly compatible with and even required for infinite tool use and will go a long way on its own, and the failings described above are minor ones, but I nevertheless believe that infinite tool use can improve the framework significantly. In a sense, it’s the logical conclusion of what a lot of companies are currently working towards.</p>
</blockquote>

<p>More generally, <strong>extremely long contexts</strong> are difficult to manage for LLMs, but might be required for very complex tasks.</p>

<p>Methods like <a href="https://github.com/xjdr-alt/entropix"><strong>Entropix</strong></a> try to work around these issues by dynamically adapting token-sampling parameters like temperature, by branching and merging on demand, and even backtracking, all based on an external measurement of the model’s entropy. Good sampling strategies will be valuable no matter what, but leaving the editing decisions to the model itself is likely a more scalable approach, as demonstrated to a degree by current reasoners.</p>

<p>The final (and correct) step of this evolution is to simply allow the model to continually improve the final answer <em>before</em> dumping it on the user. Give it access to a <strong>full text-editor</strong> that is controllable through special text-commands, and see many benefits:</p>

<ul>
  <li>Multi-abstraction-scale text generation</li>
  <li>Effortlessly interleaving those abstraction levels</li>
  <li>Backtracking via editing</li>
</ul>

<p>And the potential issue of going off-course is solved by simply refreshing the model’s memory about fine-grained details (specific sections, sentences, words, what the goal of the whole process is, …) through tool-use.</p>

<p>To be clear, this wouldn’t prevent the model from generating easy answers in forward-only mode. If the LLM wants to directly answer a user without going through an editing process, they can do the equivalent of typing out a quick response and immediately clicking “send” within the tool.</p>

<h3 id="3d-generation">3D Generation</h3>

<p>3D generation, and the other examples listed below, face the same issues in normal LLMs, and can expect the same benefits from tool use, as pure text generation.</p>

<p>So what would a similar tool look like for 3D generation? CAD libraries exist for Python, and I do believe that there are programming languages for several Game Engines. Therefore, an LLM could create 3D objects through code. To do so, the model should have these tools available to it:</p>

<ul>
  <li>A way to look at the generated object, given tools to:
    <ul>
      <li>Zoom in and out</li>
      <li>Rotate the object</li>
      <li>Shift the object</li>
      <li>And, obviously, look at the resulting 2D projection of the 3D object</li>
    </ul>
  </li>
  <li>A way to think about the object
    <ul>
      <li>This could just be another text-file as discussed in the <a href="#text-editing">Text editing</a> section for taking notes</li>
      <li>The model’s context window itself (most thoughts should not be persistent, and the ones that should be can be written down in the note-taking-file)</li>
    </ul>
  </li>
  <li>A way to edit and run the code itself
    <ul>
      <li>In other words, another file in a text-editor (or multiple files)</li>
    </ul>
  </li>
</ul>

<p>This would bring the following advantages:</p>

<ul>
  <li>Generation of arbitrary-sized objects is possible.
    <ul>
      <li>This is currently not possible with text-to-3D models because in 3D-space, context windows explode when generating voxels etc.</li>
      <li>But with a CAD-library—or numpy, as OpenAI’s o3 is apparently doing—and the aforementioned tools, gradual generation of the object over many cycles of improvement becomes possible; in other words, human workflows are enabled</li>
    </ul>
  </li>
  <li>All the advantages of the text-editing tool discussed above are available to the model</li>
</ul>

<h3 id="video-understanding">Video Understanding</h3>

<p>A full-attention LLM is un-usable for days-long videos because it’s way too inefficient. A pure SSM is un-usable for the task because it cannot attend to enough of the video. But any LLM with a finite context window but <em>with tools</em> (and training to use them) can re-watch whatever part of the video it needs to understand what it has to, write down, edit, and revisit running notes, and more, without exploding costs. This makes it the obvious choice.</p>

<h2 id="ai-safety">AI Safety</h2>

<p>Seeing the full editing process (with version control, potentially available to the LLM as well) is bound to be fascinating. More importantly, it has safety advantages.</p>

<p>This can be seen by analogy to current reasoners (which are complementary to the infinite tool use paradigm, but also a proto-version of it): If the task is hard, the model must make maximum use of the tools at its diposal, which include the CoT. Since deception adds additional complexity to the CoT, it further complicates the model’s work, so if its capabilities are saturated, it will communicate as clearly as possible to itself within the CoT.</p>

<p>The same is true for LLMs with infinite tool use: when trained on sufficiently difficult tasks, they must use the tools at their disposal with clarity and good structure. Therefore, training them on sufficiently difficult tasks with infinite tool use will likely make their outputs more faithful and more legible.</p>

<h2 id="thoughts-on-training">Thoughts on Training</h2>

<p>The main method of training an LLM with infinite tool use is through reinfocement learning. One difficulty in this might be the question of how to train over infinite (or at least unbounded) context length.</p>

<p>However, using LLMs with a limited context window and interacting only through tools means that there is likely no need to actively train for infinite context length, if we train to recover from mistakes &amp; edit from many different starting points. LLMs with limited context window (SSMs, sliding window attention, …) being forgetful means that just training fairly long context windows from diverse start and end points will probably generalize to infinite context windows. However, this is one of the biggest questionmarks in this very speculative proposal.</p>

<h2 id="thoughts-on-architecture">Thoughts on Architecture</h2>

<p>For architecture, I’m open to all possibilities; <a href="https://www.rwkv.com/">RWKV</a>, <a href="https://arxiv.org/abs/2312.00752">Mamba</a>, <a href="https://arxiv.org/abs/2405.04517">xLSTM</a>, <a href="https://arxiv.org/abs/2501.00663">Titans</a>, <a href="https://arxiv.org/abs/2407.04620">Test-Time-Training</a>, simple attention with a sliding window, whatever.</p>

<p>I’m also open to using hybrids. One version that might make sense for infinite tool use is the inverse or normal hybrids (though I’m also open to those). Normal hybrids typically use a few SSM layers followed by a full (causal) Attention layer (often without positional information). For infinite tool use, it might make more sense to reverse that: several layers of sliding window attention for a high-precision but localized view of the sequence, followed by an SSM layer that provides a much more abstracted but longer range view of the input. But that’s just fun speculation, nothing I’m remotely sure about.</p>

<p>The main point of this section is to stress the importance of a constant inference budget per token independent of context window size (or at least one that is limited as in sliding window attention), and the usefulness of forgettfulness combined with tools.</p>

<p>A constant or upper-bounded per-step inference budget is obviously important for <em>infinite</em> tool use.</p>

<p>Forgetfulness—which goes hand in hand with a constant/upper-bounded per-step budget— is important because it allows for specialization between the model and its tools. Saving a billion tokens in a text file is significantly cheaper than a billion token full-attention context window.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The tool-use paradigm is in full swing already—o3 by OpenAI, agentic RAG models by Pleias, etc.—but still limited to very short contexts, and to only parts of the model output. I propose performing all interaction with the external world, be that users, a computer, or another LLM, through tool-use, and to scale that tool-use to ever-longer contexts using models that trade imperfect recall of the entire sequence (sliding window attention, SSMs, …) for constant (or upper-limited) per-step cost.</p>

<h2 id="acknowledgements">Acknowledgements</h2>

<p>Thanks to <a href="https://x.com/stochasticchasm">stochasm</a> for proof-reading the article and for fruitful discussions.</p>

<h2 id="citation">Citation</h2>

<div class="language-bibtex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">@misc</span><span class="p">{</span><span class="nl">snimu2025infinitetooluse</span><span class="p">,</span>
    <span class="na">title</span><span class="p">=</span><span class="s">{Infinite Tool Use}</span><span class="p">,</span>
    <span class="na">author</span><span class="p">=</span><span class="s">{Sebastian Nicolas Müller}</span><span class="p">,</span>
    <span class="na">year</span><span class="p">=</span><span class="s">{2025}</span><span class="p">,</span>
    <span class="na">month</span><span class="p">=</span><span class="s">{04}</span><span class="p">,</span>
    <span class="na">url</span><span class="p">=</span><span class="s">{https://snimu.github.io/2025/05/23/infinite-tool-use.html}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>