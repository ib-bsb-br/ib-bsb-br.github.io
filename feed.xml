<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-06-18T19:52:52+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Apple Shortcuts Meta-Automation</title><link href="https://ib.bsb.br/apple-shortcuts-meta-automation/" rel="alternate" type="text/html" title="Apple Shortcuts Meta-Automation" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T08:22:15+00:00</updated><id>https://ib.bsb.br/apple-shortcuts-meta-automation</id><content type="html" xml:base="https://ib.bsb.br/apple-shortcuts-meta-automation/"><![CDATA[<p>Deconstructing Dictionary Manipulation in Apple Shortcuts: A Technical Report on Data Flow, Persistence, and Meta-Automation
The Dictionary as a Foundational Data Structure in Shortcuts
The Apple Shortcuts application provides a suite of actions that serve as the building blocks for complex automation. Among these, the dictionary stands out as a foundational data structure, enabling a level of sophistication and scalability that is difficult to achieve with simpler constructs like lists or conditional logic alone. A comprehensive understanding of the dictionary’s properties, methods of creation, and strategic applications is essential for any user seeking to move from basic task automation to the development of robust, maintainable, and dynamic workflows. Dictionaries serve not merely as containers for information but as a gateway to structured data programming, a paradigm that is central to modern software and web service integration.
Defining Dictionaries: An Analysis of Key-Value Pairs and Their Properties
At its core, a dictionary is an unordered collection of key-value pairs. Each entry in a dictionary consists of a unique key, which acts as an identifier, and a corresponding value, which is the data associated with that key. This structure is analogous to a real-world dictionary where one looks up a word (the key) to find its definition (the value). This relationship is strictly unidirectional; a key is used to retrieve its value, but a value cannot be used to find its key directly. The uniqueness of keys is paramount; if a new entry is added with a key that already exists, the original value associated with that key will be overwritten.
The power of dictionaries in Shortcuts stems from the flexibility of the data types that can be stored as values. A value can be a simple text string or number, a boolean (true or false), an ordered list (also known as an array), or even another dictionary. This capacity for nesting allows for the creation of deeply structured and complex data models, mirroring the data formats used by many external services and APIs. For instance, a dictionary representing a contact might have simple text values for keys like “first_name” and “last_name,” but it could also contain a nested list for multiple phone numbers or a nested dictionary for a structured address.
This inherent structure provides a significant strategic advantage over other control flow mechanisms. While a series of If actions can be used to handle multiple conditions, this approach quickly becomes unwieldy and difficult to read and maintain as the number of conditions grows. A dictionary, by contrast, can replace a long, clunky chain of If statements with a single, clean Get Dictionary Value action. Similarly, while a List action stores an ordered collection of items, accessing a specific item requires knowing its numerical index. This can be brittle, as the order of items may change. Dictionaries provide a more robust method of data retrieval by using descriptive, human-readable keys that are independent of order.
One of the most powerful and common applications of this principle is the creation of dynamic user menus. When a dictionary is passed as input to the Choose from List action, the Shortcuts app intelligently displays the dictionary’s keys as the selectable menu options. When a user makes a selection, the action outputs the corresponding value associated with the chosen key. This enables the creation of sophisticated, user-friendly interfaces that can trigger vastly different and complex logic based on the user’s choice. For example, a dictionary could map the names of smart home scenes (keys) to the specific HomeKit actions required to execute them (values), allowing a single shortcut to control multiple aspects of a user’s environment through a simple menu.
Methods of Instantiation: The Dictionary Action vs. Get Dictionary from Input
Apple Shortcuts provides two primary methods for creating, or instantiating, a dictionary within a workflow, each suited to different use cases: the visual Dictionary action and the text-based Get Dictionary from Input action.
The Dictionary action is the most direct and intuitive method for creating a dictionary. It presents a user interface with two columns where a developer can manually enter key-value pairs. This approach is ideal for defining small to medium-sized dictionaries with static content that is known at the time the shortcut is being built. Its visual nature makes it easy to understand and manage for those who may not be familiar with text-based data formats.
For more advanced and dynamic use cases, the Get Dictionary from Input action is indispensable. This action is designed for programmatic dictionary creation, taking structured text as its input and parsing it into a fully-functional dictionary object. The action is versatile, supporting several text formats. The most prominent and widely used format is JSON (JavaScript Object Notation), a lightweight data-interchange format that is the de facto standard for web APIs. The syntax of JSON, with its use of curly braces {} for objects (dictionaries), square brackets `` for arrays (lists), and colon-separated key-value pairs, maps directly to the structure of a Shortcuts dictionary. In addition to JSON, the Get Dictionary from Input action can also parse property lists (.plist files) and simple key-value strings formatted like URL query parameters (e.g., name=John&amp;age=30).
The prevalence of JSON throughout the automation landscape cannot be overstated. Apple’s own documentation and tutorials on using web APIs within Shortcuts are heavily centered on the process of requesting data from a server and parsing the resulting JSON response. This makes proficiency with JSON and the Get Dictionary from Input action a critical skill for any user wishing to integrate their shortcuts with the vast ecosystem of online services. It allows a shortcut to consume, manipulate, and even generate structured data for external systems. For instance, a shortcut can be designed to create a dictionary from user inputs and then convert it back into a JSON string to be sent as the body of a POST request to a web server.
The existence of these two distinct instantiation methods represents a deliberate design choice that guides the user along a learning curve. A novice user can begin with the simple, visual Dictionary action, treating it as a basic two-column table. As their needs become more complex, they inevitably encounter scenarios where a dictionary must be created dynamically from text, saved to a file, or received from an API. This journey naturally leads them to the Get Dictionary from Input action and the concept of data serialization, specifically with JSON. This transition is a pivotal moment in the user’s development. It forces a conceptual leap from viewing a dictionary as a static block in the UI to understanding it as an abstract data structure that can be represented as a structured string. This understanding is the cornerstone of advanced automation, as it unlocks the ability to work with configuration files, exchange data between disparate systems, and interact with virtually any modern web service. Therefore, mastering the nuances of dictionary instantiation in Shortcuts is not merely about learning a feature; it is about acquiring a fundamental competency in structured data programming that is essential for building powerful and interoperable automations.
The Core Workflow: A Deep Dive into Iterative Dictionary Population
One of the most significant hurdles for intermediate and advanced Shortcuts users is the task of programmatically and iteratively adding new key-value pairs to a dictionary, particularly within a loop. The behavior of the relevant actions is non-intuitive and deviates from the patterns seen in many traditional programming languages. This leads to a common point of failure where users find their modifications are not being saved. A meticulous deconstruction of the underlying data flow model reveals that this behavior is not a flaw but a deliberate design choice. Mastering the canonical pattern for iterative updates is a prerequisite for building any shortcut that involves dynamically constructing a dictionary from a set of inputs.
The Immutability Principle: Deconstructing the “Set Dictionary Value” Action’s Behavior
The central source of confusion lies with the Set Dictionary Value action. Based on its name, users logically assume that the action modifies the dictionary it is given as input—an operation known as an “in-place” mutation. However, this is not how the action functions. Consistently, users report that when they use Set Dictionary Value inside a Repeat with Each loop, the changes made in one iteration are gone by the next, and at the end of the loop, the dictionary remains in its initial state, as if it were being overwritten or reset on each pass.
This “perplexing” behavior is due to a core principle that can be described as functional immutability. The Set Dictionary Value action does not alter the original dictionary. Instead, it operates as a transformation: it accepts a dictionary as input, performs the requested addition or modification, and outputs a new, completely separate dictionary object that contains the change. The original dictionary that was passed into the action is left untouched and unchanged.
This critical detail is often missed by users, partly due to the ambiguity in Apple’s official documentation. The documentation correctly notes that the action has a result, which it describes as a “dictionary.” However, it fails to explicitly state that this is a new instance of a dictionary. Users, particularly those with a background in imperative programming, interpret this to mean the original dictionary is passed through, leading them to believe the action has side effects. This semantic gap is a primary cause of frustration, as the action’s name strongly implies a mutative operation (“Set value in dictionary”), which is the opposite of its actual, non-mutative behavior.
The Canonical Update Pattern: The Get Variable → Set Dictionary Value → Set Variable Cycle
Given the immutable nature of the Set Dictionary Value action, a specific, multi-step pattern is required to correctly build up a dictionary within a loop. The Shortcuts community has, through experimentation and shared knowledge, codified this as the canonical update pattern. The process involves explicitly managing the state of the dictionary through a variable at each step of the iteration.
The pattern consists of the following sequence:</p>
<ul>
  <li>Initialization: Before the loop begins, an initial dictionary must be created. This is typically done using the Dictionary action (often left empty) and its output is immediately saved to a variable using the Set Variable action. This variable, for example named WorkingDict, will serve as the persistent state carrier for the dictionary throughout the shortcut’s execution.</li>
  <li>Iteration Cycle (Inside the Loop): For each iteration of the loop (e.g., a Repeat with Each block), the following three actions must be performed in order:
a.  Get Variable: The current state of the dictionary must be retrieved from its storage variable. This is done with the Get Variable action, targeting WorkingDict.
b.  Set Dictionary Value: The dictionary retrieved in the previous step is used as the input for the Set Dictionary Value action. The new key and value for the current iteration are specified. This action then outputs the new, updated dictionary.
c.  Set Variable: The output from the Set Dictionary Value action (the new dictionary) must be captured and used to overwrite the state variable. This is achieved by using another Set Variable action, which sets WorkingDict to the output of the Set Dictionary Value action.
This cycle ensures that the result of each modification is passed on to the next iteration. A helpful analogy shared within the community is to think of the dictionary variable as a box on a shelf. To update the contents, one must first take the box off the shelf (Get Variable), change what is inside (Set Dictionary Value), and then, crucially, put the new, modified box back on the shelf (Set Variable). Forgetting the final step is equivalent to leaving the updated box on the workbench; the change is made but never saved back to its persistent location, and the next iteration will start again with the old, unmodified box.
Practical Implementation: An Annotated Workflow Example
To solidify the understanding of this pattern, consider a practical example of a shortcut designed to take a comma-separated string of words, split them into a list, and then populate a dictionary where the keys are the numerical index of each word and the values are the words themselves.
The sequence of actions would be as follows:</li>
  <li>Dictionary Action: An empty Dictionary action is added to the top of the shortcut.</li>
  <li>Set Variable Action: The output of the Dictionary action is immediately passed to a Set Variable action, which creates the variable WorkingDict. This initializes the state.</li>
  <li>Text Action: A Text action contains the input string, for example: Apple,Banana,Orange.</li>
  <li>Split Text Action: The text is passed to a Split Text action, using a comma as the custom separator. This produces a list of three items.</li>
  <li>Repeat with Each Action: A Repeat with Each loop is initiated, taking the list from Split Text as its input. This loop will run three times. The action provides two special “magic variables” for each iteration: Repeat Item (the value, e.g., “Apple”) and Repeat Index (the iteration number, e.g., 1).</li>
  <li>Inside the Loop - The Canonical Pattern:
    <ul>
      <li>Get Variable Action: The WorkingDict variable is retrieved.</li>
      <li>Set Dictionary Value Action: This action is configured as follows:
        <ul>
          <li>Value: Set to the Repeat Item magic variable.</li>
          <li>Key: Set to the Repeat Index magic variable.</li>
          <li>in Dictionary: The Get Variable action’s output is passed here.</li>
        </ul>
      </li>
      <li>Set Variable Action: The WorkingDict variable is updated by setting it to the output of the Set Dictionary Value action. This completes the cycle.</li>
    </ul>
  </li>
  <li>End Repeat Marker: This marks the end of the loop.</li>
  <li>Get Variable and Show Result Actions: After the loop concludes, the final state of WorkingDict is retrieved and passed to a Show Result action to display the fully populated dictionary, which would look like: {“1”: “Apple”, “2”: “Banana”, “3”: “Orange”}.
This explicit, step-by-step process, while appearing verbose, is the only reliable method for iterative dictionary construction in Shortcuts.
The immutable behavior of the Set Dictionary Value action is not an oversight or a bug. It is a deliberate and consistent manifestation of the fundamental data flow model that underpins the entire Shortcuts application. The architecture is described by Apple as a “Content Graph engine,” where the primary mode of operation is the flow of content from one action’s output to the next action’s input. In this paradigm, which shares philosophical roots with functional programming, actions are ideally “pure functions.” They take an input, perform a transformation, and produce a predictable output without causing “side effects”—that is, without modifying a shared state that is external to this direct input/output flow.
The Set Dictionary Value action adheres perfectly to this model. Its entire effect is encapsulated in its output; it does not mysteriously alter a variable located elsewhere in the shortcut. This stands in contrast to an action like Set Variable, whose entire purpose is to create a side effect by establishing or modifying a named state that can be referenced from anywhere. By forcing the user to explicitly capture the output of the dictionary modification and then explicitly use Set Variable to update the state, the Shortcuts engine ensures that the flow of data remains visible, traceable, and unambiguous. Every change is represented by a connection in the content graph. While this approach presents a steeper learning curve for users accustomed to imperative, mutable patterns, it ultimately results in more robust and debuggable complex shortcuts. It prevents a class of hard-to-diagnose errors that can arise when multiple parts of a program are allowed to modify a shared object unexpectedly, a design choice that prioritizes reliability and predictability over syntactic convenience.
Advanced Techniques for Persistence, Performance, and Portability
Once the fundamental pattern of dictionary manipulation is mastered, the next level of advanced shortcut development involves addressing three critical challenges: making data persist between shortcut executions, optimizing workflows for speed and responsiveness, and ensuring interoperability with external systems. These techniques transform dictionaries from transient data containers into powerful tools for logging, configuration, and seamless integration with the broader digital ecosystem.
Achieving Statefulness: Saving and Retrieving Dictionaries as Files
By default, variables created within a shortcut, including dictionaries, are ephemeral. They exist only for the duration of a single execution and are discarded once the shortcut completes. To create stateful automations that can remember information across multiple runs—for tasks like logging daily activities, storing application settings, or building a persistent knowledge base—the dictionary must be saved to an external location.
The standard and most widely adopted method for achieving this persistence is to save the dictionary as a file within a cloud-synced directory, typically iCloud Drive. This is most commonly done by converting the dictionary into a JSON text representation and saving it as a file with a .json or .txt extension. This makes the data not only persistent but also accessible and editable by other applications or even manually through a text editor.
The process of updating a file-based dictionary follows a strict “read-modify-write” cycle, which is a logical extension of the in-memory update pattern:</li>
  <li>Read: The workflow begins by using the Get File action to retrieve the JSON file from its location in iCloud Drive.</li>
  <li>Parse: The text content of the file is then passed to a Get Dictionary from Input action. This action parses the JSON string and reconstructs it into a live dictionary object that can be manipulated within the shortcut.</li>
  <li>Modify: The core Get Variable → Set Dictionary Value → Set Variable pattern described in the previous section is used to add, remove, or change key-value pairs within the newly parsed dictionary object.</li>
  <li>Write: After all modifications are complete, the final dictionary object is passed to a Save File action. It is critical that this action is configured to overwrite the original file. The “Overwrite if File Exists” toggle must be enabled. The shortcut will implicitly convert the dictionary object back into a JSON text string for saving.
A common and critical error is to use the Append to File action instead of overwriting. Appending a new JSON object to an existing JSON file results in an invalid format, as a valid JSON file can only have a single root object. Attempting to read this malformed file in a subsequent run will fail, as the Get Dictionary from Input action will not be able to parse it. For debugging complex JSON structures, it is highly recommended to use an external validation tool, such as the online service JSONLinter, to ensure the data format remains correct.
Performance Optimization Strategies
As shortcuts grow in complexity and the size of the data they handle increases, performance becomes a significant consideration. Dictionaries, especially very large ones, can introduce performance bottlenecks in both the shortcut editor and at runtime.
A well-documented issue is that the native Dictionary action, when populated with hundreds or thousands of key-value pairs, can cause severe UI lag within the Shortcuts editor. Scrolling through the shortcut becomes slow and unresponsive, making development and maintenance a frustrating experience. To mitigate this, a common and effective strategy is to store the dictionary as a JSON string inside a simple Text action. The editor only needs to render a standard text box, which is highly performant regardless of the amount of text it contains. This dramatically improves the editing experience.
However, this editor-focused optimization introduces a runtime trade-off. When the shortcut is executed, the JSON string within the Text action must be parsed into a dictionary object before it can be used. This parsing step adds a small but measurable overhead to the shortcut’s execution time compared to using a native Dictionary action, which exists as a pre-parsed object.
The most critical performance optimization, regardless of whether a native dictionary or a JSON-in-text approach is used, is the avoidance of data coercion or value extraction inside a loop. Performing these operations repeatedly is a major cause of slowdowns. For instance, if a shortcut needs to iterate over an array of values stored within a dictionary, it is vastly more efficient to extract that entire array into a variable before the loop begins. The loop should then iterate over the pre-extracted array. The alternative—placing the Get Dictionary Value action inside the Repeat block—forces the system to perform a key lookup on every single iteration. If using the JSON-in-text method, this is even more catastrophic for performance, as it forces a complete re-parsing of the entire JSON string on every pass of the loop.
The performance differences are not trivial. Benchmarks conducted by the community demonstrate a dramatic impact. A test looping through 500 items showed that iterating over a pre-extracted array took approximately 0.6 seconds. In contrast, retrieving the array from a native dictionary inside the loop took 8.2 seconds (a 13x slowdown), and retrieving it from a JSON-in-text dictionary inside the loop took a staggering 21.8 seconds (a 36x slowdown). This data underscores the importance of preparing and isolating the data to be processed before entering any iterative logic.
To provide a clear reference for developers, the following table synthesizes these performance considerations.
| Test Case | Action Configuration | Relative Performance | Analysis &amp; Recommendation |
|—|—|—|—|
| Editor Responsiveness | Native Dictionary action with 500+ entries. | Poor | Causes significant UI lag and slow scrolling. Avoid for very large, static dictionaries.  |
| Editor Responsiveness | JSON data stored in a Text action. | Excellent | Editor remains fast and responsive regardless of dictionary size. Recommended for development.  |
| Runtime Loop (Best) | Get Dictionary Value (to extract array) before Repeat loop. | Excellent (Baseline) | Fastest method. The expensive extraction is performed only once. This is the recommended pattern.  |
| Runtime Loop (Poor) | Get Dictionary Value inside Repeat loop (native dictionary). | Poor (~13x Slower) | The dictionary key lookup is repeated for every item, introducing significant overhead.  |
| Runtime Loop (Worst) | Get Dictionary Value inside Repeat loop (JSON-in-Text). | Very Poor (~36x Slower) | Catastrophic for performance. The entire JSON string is parsed on every single iteration. Avoid at all costs.  |
| Runtime Single Access | Get Dictionary Value from a native Dictionary. | Excellent | Highly efficient for direct lookups.  |
| Runtime Single Access | Get Dictionary Value from a JSON-in-Text dictionary. | Good (Slightly Slower) | Incurs a one-time parsing cost, making it slightly slower than a native dictionary but often negligible for single lookups.  |
Interoperability: Third-Party Solutions and Web APIs
Beyond native file storage, the portability of dictionaries can be enhanced through third-party applications and web services. For users who find the manual read-modify-write cycle for files to be too complex, dedicated data-store apps like Data Jar offer a more streamlined solution. Data Jar acts as a persistent database specifically for Shortcuts, providing its own set of actions to get, set, and manipulate values and dictionaries stored within the app. This abstracts away the complexities of file I/O and JSON formatting, providing a more user-friendly layer for data persistence.
Furthermore, dictionaries are the fundamental data structure for interacting with the vast majority of modern Web APIs. Actions like Get Contents of URL are frequently used to make requests to web services, which typically return data formatted as JSON. Shortcuts can automatically parse this JSON response into a dictionary, allowing the developer to use Get Dictionary Value to easily extract specific pieces of information—such as a weather forecast, a user’s profile information, or a list of tasks from a project management tool. This ability to seamlessly consume and work with JSON data from the web transforms Shortcuts from a device-centric automation tool into a powerful client for integrating with virtually any online service.
Meta-Automation: Manipulating Shortcut Actions via Their Underlying Structure
The most advanced application of dictionary principles within Apple Shortcuts transcends the manipulation of user data and enters the realm of meta-automation: the programmatic construction and modification of the shortcut workflows themselves. This capability is not exposed through the standard user interface but is made possible by the underlying architecture of the Shortcuts app. By understanding that shortcut actions are, at their core, dictionary-like data structures, a developer can use the tools of dictionary manipulation to dynamically generate executable logic. This reveals that the dictionary is not just a container for data to be processed, but can also serve as a blueprint for the process itself.
The Underpinnings: Uniform Type Identifiers (UTIs) and Property Lists (Plist)
To comprehend this advanced capability, two core Apple technologies must be understood: Uniform Type Identifiers (UTIs) and Property Lists (Plists).
Uniform Type Identifiers (UTIs) are a system-wide framework used by macOS and iOS to identify data in a way that is more abstract and powerful than simple file extensions. UTIs define a hierarchical type system; for example, the UTI public.png (for a PNG image) conforms to the more general type public.image, which in turn conforms to public.data (for any byte stream). This system allows applications and the operating system to understand what a piece of data represents and how it can be handled, suchs as when it is placed on the clipboard or opened by an application.
Property Lists (Plists) are Apple’s standard file format for serializing and storing objects and application settings. Structurally, a plist is a hierarchical collection of key-value pairs, making it functionally equivalent to a dictionary. Plists can contain strings, numbers, booleans, dates, binary data, arrays (lists), and nested dictionaries. They are the backbone of configuration and data storage for countless applications across Apple’s platforms.
The critical connection is that every action within a Shortcut, and indeed the entire shortcut workflow, is internally represented as a plist data structure. When a user drags an action block into the editor, they are manipulating a visual representation of an underlying plist. The action’s type, its parameters, and their configured values are all stored as key-value pairs within this structure.
The com.apple.shortcuts.action UTI: The Key to Meta-Programming
The mechanism that allows the Shortcuts app to distinguish between generic plist data and a plist that represents an executable action is a specific Uniform Type Identifier: com.apple.shortcuts.action.
When a user manually copies an action from the Shortcuts editor to the clipboard, two things happen. First, the plist data that defines the action is placed on the clipboard. Second, and most importantly, the operating system tags this clipboard data with the com.apple.shortcuts.action UTI. Later, when the user pastes this data back into the Shortcuts editor, the app inspects the UTI. Upon seeing com.apple.shortcuts.action, it knows to interpret the accompanying plist data as a valid action and renders it as the corresponding visual block. If this UTI were not present, the app would likely paste the content as plain XML text.
This UTI acts as a “magic key” that unlocks the potential for meta-programming. However, the native Shortcuts app does not provide an action to arbitrarily set the UTI of a piece of data. This crucial capability is provided by third-party applications that extend Shortcuts’ functionality. The “Actions” app, for example, includes a Set Uniform Type Identifier action, which is the missing link required to programmatically construct and deploy shortcut actions.
A Conceptual Framework for Dynamic Workflow Generation
With the ability to both construct a dictionary (which is structurally a plist) and set its UTI, a complete framework for dynamic action generation emerges. The process allows a shortcut to build another action on the fly.
The conceptual workflow is as follows:</li>
  <li>Construct the Plist as a Dictionary: The developer uses a standard Dictionary action to build the data structure for the desired action. This requires knowledge of the internal keys that Shortcuts uses. For example, to create a Comment action, the dictionary must contain a key named WFWorkflowActionIdentifier with the value is.workflow.actions.comment. It must also contain a key named WFWorkflowActionParameters, which itself is a nested dictionary containing the parameter keys, such as WFCommentActionText for the comment’s content.</li>
  <li>Set the Uniform Type Identifier: The dictionary created in the previous step is passed as input to the Set Uniform Type Identifier action (from a third-party app like “Actions”). The type is set to the string com.apple.shortcuts.action.</li>
  <li>Copy to Clipboard: The output of the Set Uniform Type Identifier action—the plist data now correctly typed—is passed to a Copy to Clipboard action.</li>
  <li>Manual Intervention (Paste): The final step requires manual intervention. The user must navigate to a shortcut editor and paste the clipboard contents. The Shortcuts app will then recognize the UTI and render the dynamically generated action.
For instance, a “Quick Commenter” shortcut could be built. It would prompt the user for text, use that text to construct the plist for a Comment action within a dictionary, set the UTI to com.apple.shortcuts.action, and copy the result. The user could then immediately paste a fully formed comment action into any workflow, with the content they just provided.
This entire process reveals the ultimate level of abstraction available within the Shortcuts environment. The dictionary, which was first introduced as a simple container for user data, undergoes a profound transformation. It is no longer just holding data for the process; it has become a blueprint of the process itself. The initial user query regarding the “automation of keys and value additions to dictionaries” finds its most complete answer here: the most advanced form of this automation is when the keys being added are WFWorkflowActionIdentifier and WFWorkflowActionParameters, and the values are the identifiers and settings of other actions. This is a form of programmatic reflection, where a program can inspect and modify its own structure. A developer can write a shortcut that writes other shortcuts. This opens up extraordinary possibilities for creating highly dynamic, user-configurable automation tools, sophisticated templating engines, or even systems that can migrate workflows from an external specification (like a JSON file or an API response) by programmatically generating the necessary sequence of Shortcut actions. The dictionary proves to be the universal medium, capable of representing both the data being processed and the very logic that performs the processing.
Recommendations and Conclusion
The exploration of dictionary manipulation in Apple Shortcuts reveals a platform that is both deceptively simple on the surface and remarkably powerful beneath. For the advanced user, developer, or prosumer, moving beyond basic automation requires a deep understanding of the platform’s specific data flow models and underlying architecture. The successful implementation of complex, scalable, and persistent workflows hinges on a set of key principles and best practices derived from the non-obvious behaviors of dictionary actions.
Synthesis of Key Principles for Robust Dictionary Handling
To build reliable and efficient shortcuts that leverage dictionaries, developers should internalize three fundamental principles that govern their behavior.
First and foremost is the principle of embracing immutability. The Set Dictionary Value action does not modify its input. It produces a new, modified dictionary as its output. This is the single most common point of confusion and failure. Therefore, the Get Variable → Set Dictionary Value → Set Variable pattern is not an optional convenience but a mandatory, non-negotiable cycle for any iterative update to a dictionary within a variable. Internalizing this pattern is the most critical step toward mastering dictionary manipulation.
Second is the principle of separating data from logic. For large or frequently changing dictionaries, storing them as external JSON files in iCloud Drive is a superior approach to embedding them directly within a Dictionary action. This practice dramatically improves the performance and responsiveness of the Shortcuts editor, preventing the lag associated with large, complex action blocks. Furthermore, it decouples the data from the workflow, making the dictionary portable, independently editable, and reusable across multiple shortcuts.
Third is the principle of optimizing loops. Performance degradation in complex shortcuts is often attributable to inefficient operations inside a Repeat loop. Data coercion, parsing, or value extraction should never be performed repeatedly within a tight loop if it can be done once beforehand. Before initiating a loop that will process items from a dictionary, the required data—be it a list of keys, a list of values, or a specific nested array—should be extracted into a separate variable. The loop should then iterate over this pre-processed, isolated data. This simple act of preparation can yield orders-of-magnitude improvements in runtime performance.
A Compendium of Best Practices for Advanced Shortcut Development
Building upon these core principles, the following best practices should guide the development of advanced shortcuts:</li>
  <li>Prioritize Dictionaries for Conditional Logic: For any workflow that requires choosing between more than a few static options, a dictionary paired with a Choose from List or Get Dictionary Value action should be preferred over a lengthy chain of If actions. This approach leads to shortcuts that are cleaner, more readable, and easier to maintain and scale.</li>
  <li>Adopt JSON as the Lingua Franca: For any task involving data persistence, interoperability with other systems, or communication with web APIs, JSON should be the default format. Proficiency in constructing and parsing JSON is a cornerstone of advanced automation in the modern digital ecosystem.</li>
  <li>Choose Dictionary Methods Based on Context: The choice between a native Dictionary action and the JSON-in-Text method should be a conscious one. For performance-critical shortcuts that run frequently in the background, the slight runtime advantage of a native Dictionary may be preferable. For development-heavy shortcuts that require frequent manual editing of a large dictionary, the superior editor performance of the JSON-in-Text method is the better choice.</li>
  <li>Implement the Full Read-Modify-Write Cycle: When using file-based persistence for dictionaries, the entire read-modify-write process must be implemented correctly. This involves fetching the file, parsing it into a dictionary object, modifying the object in memory, and then overwriting the original file with the updated data. Appending to the file will lead to data corruption.
Concluding Thoughts: The Emergent Meta-Programming Capabilities of Shortcuts
The journey from understanding a simple key-value pair to programmatically generating executable actions reveals the true depth of the Shortcuts platform. While Apple presents a user-friendly, block-based interface designed for accessibility, the underlying architecture, built upon robust technologies like Property Lists and Uniform Type Identifiers, provides a powerful, albeit largely undocumented, pathway for experts to transcend the UI’s limitations.
The dictionary emerges not merely as a tool within the system but as a fundamental component of its very fabric. It is the medium through which structured data is managed, and as demonstrated, it is also the blueprint that defines the actions that manage that data. This duality enables a level of meta-automation that approaches dynamic code generation. For the developer willing to look beneath the surface, Shortcuts is not just an automation app; it is an environment with emergent meta-programming capabilities, where the logic of a workflow can itself become the data for another, more abstract workflow. The dictionary is the key that unlocks this potential.</li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">HAR analyzer</title><link href="https://ib.bsb.br/har-analyzer/" rel="alternate" type="text/html" title="HAR analyzer" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T14:55:20+00:00</updated><id>https://ib.bsb.br/har-analyzer</id><content type="html" xml:base="https://ib.bsb.br/har-analyzer/"><![CDATA[<section class="code-block-container" role="group" aria-label=" Code Block" data-filename="_code_block.txt" data-code="&lt;prompt&gt;
  &lt;purpose&gt;
    You are an expert reverse-engineering assistant specializing in analyzing HAR (HTTP Archive) files. Your primary goal is to dissect the provided [[har_data]] to identify and document the web application&#39;s key API endpoints, authentication mechanisms, and data structures, including dependencies between requests. Based on this analysis, you will generate a clear, functional, and reusable Python class using the `requests` library to automate API interactions, and provide a detailed explanation of the API&#39;s workings.
  &lt;/purpose&gt;

  &lt;context&gt;
    &lt;audience_profile&gt;
      &lt;role&gt;Developer / Technical User&lt;/role&gt;
      &lt;technical_expertise&gt;Advanced. Familiar with Python, JSON, and basic web concepts (HTTP, APIs), but needs assistance in deciphering this specific application&#39;s API from network traffic.&lt;/technical_expertise&gt;
      &lt;goal&gt;To create a reliable and reusable Python API client to automate tasks within the web application.&lt;/goal&gt;
    &lt;/audience_profile&gt;
    &lt;domain_knowledge&gt;
      &lt;knowledge&gt;The analysis requires a deep understanding of the HAR file specification, HTTP methods, headers, cookies, and JSON data structures.&lt;/knowledge&gt;
      &lt;knowledge&gt;The analysis must account for potentially noisy HAR files (containing analytics, CDNs, etc.) and common web security patterns like CSRF tokens.&lt;/knowledge&gt;
      &lt;knowledge&gt;The script should be built using Python 3 and the standard `requests` library, demonstrating good object-oriented practices.&lt;/knowledge&gt;
    &lt;/domain_knowledge&gt;
  &lt;/context&gt;

  &lt;constraints&gt;
    &lt;constraint priority=&quot;1&quot;&gt;SECURITY: The [[har_data]] sensitive information was already replaced with &#39;dummy data&#39;. In all explanations and generated code, you MUST not replace the actual &#39;dummy data&#39; values with placeholders. So, output the raw sensitive data as it is.&lt;/constraint&gt;
    &lt;constraint&gt;The generated Python code must be a single, complete, well-commented, and executable class file.&lt;/constraint&gt;
    &lt;constraint&gt;The analysis must be based *only* on the data provided in the [[har_data]] input. Do not infer external API documentation.&lt;/constraint&gt;
    &lt;constraint&gt;If a specific flow (e.g., login, task creation) requested for analysis is not found in the HAR data, you must explicitly state that it was not found rather than making an assumption.&lt;/constraint&gt;
  &lt;/constraints&gt;

  &lt;instructions&gt;
    &lt;instruction&gt;1. Carefully parse the JSON structure of `[[har_data]]`, focusing on the `log.entries` array. Filter out irrelevant requests (e.g., to analytics domains, font files, images) to focus on API interactions, typically those with a `postData` section or to a specific API subdomain.&lt;/instruction&gt;
    
    &lt;instruction&gt;2. **Analyze Authentication Flow:** Identify the request corresponding to user login.
        - **Heuristics:** Look for `POST` requests to endpoints with common paths like `/login`, `/auth`, `/session`, `/token`. Analyze `postData` for keys like `username`, `password`, `email`, or `grant_type`.
        - **Documentation:** Document the full endpoint URL, HTTP method, and payload structure (using placeholders).
        - **Session Management:** Document how the session token/cookie is returned in the response (e.g., in a `Set-Cookie` header or JSON body) and which specific headers or cookies are required for subsequent authenticated requests.
    &lt;/instruction&gt;

    &lt;instruction&gt;3. **Analyze for Chained Requests / Dynamic Tokens:** Analyze the sequence of requests to identify dependencies. Specifically, check if a response from one request (e.g., a `GET` request to a form page) provides a value (like a `csrf_token` in the body or a custom header) that is then used in the payload or headers of a subsequent `POST` request. Document this relationship as it is critical for automation.&lt;/instruction&gt;
    
    &lt;instruction&gt;4. **Analyze Primary Actions (e.g., Task Creation):** Identify the primary data-creation or data-modification request.
        - **Heuristics:** Look for `POST`, `PUT`, or `PATCH` requests to API endpoints (e.g., `/api/v1/tasks`). Analyze the JSON `postData` payload to understand its structure and purpose.
        - **Documentation:** Document the endpoint URL, method, all necessary HTTP headers, and provide a detailed explanation of the `postData` JSON structure, explaining the purpose of each key.
    &lt;/instruction&gt;

    &lt;instruction&gt;5. **Generate Explanation:** Create a extensive, structured documentation in Markdown format. The documentation must address all identified endpoints, authentication, session management, and any discovered chained token dependencies.&lt;/instruction&gt;
    
    &lt;instruction&gt;6. **Generate Python API Client Class:** Create a single, complete Python script containing a class (e.g., `ApiClient`) that encapsulates the discovered API interactions. The script must:
        - Be well-commented, explaining the class, methods, and parameters.
        - Initialize with the base URL of the API.
        - Contain a `login()` method that takes credentials, performs authentication, and stores the resulting token(s) or session cookies as instance variables (e.g., `self.session` or `self.auth_header`).
        - Contain method(s) for the other primary actions identified (e.g., `create_task(task_data)`). These methods must automatically use the stored authentication details.
        - If a chained token (like CSRF) is required, the relevant method should first fetch the token before making its primary request.
        - Use the given sensitive data as it was presented.
        - Include an example usage block under `if __name__ == &quot;__main__&quot;:` demonstrating how to instantiate the class and call its methods.
    &lt;/instruction&gt;
  &lt;/instructions&gt;

  &lt;input_data&gt;
    &lt;har_data&gt;
      [[har_data]]
    &lt;/har_data&gt;
  &lt;/input_data&gt;

  &lt;output_format_specification&gt;
    &lt;section&gt;
      &lt;title&gt;API Analysis&lt;/title&gt;
      &lt;content&gt;A detailed breakdown of the API endpoints, methods, payloads, and authentication, formatted in Markdown. Must include a section on request chaining if discovered.&lt;/content&gt;
    &lt;/section&gt;
    &lt;section&gt;
      &lt;title&gt;Python API Client&lt;/title&gt;
      &lt;content&gt;A single code block containing the complete, commented Python class file.&lt;/content&gt;
    &lt;/section&gt;
  &lt;/output_format_specification&gt;

  &lt;examples&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;har_data&gt;
          {
            &quot;log&quot;: {
              &quot;entries&quot;: [
                {
                  &quot;request&quot;: {&quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://api.example.com/v1/login&quot;, &quot;postData&quot;: {&quot;text&quot;: &quot;{\&quot;username\&quot;:\&quot;dev\&quot;,\&quot;password\&quot;:\&quot;pass123\&quot;}&quot;}},
                  &quot;response&quot;: {&quot;headers&quot;: [{&quot;name&quot;: &quot;Set-Cookie&quot;, &quot;value&quot;: &quot;session_id=abc123xyz; secure&quot;}]}
                },
                {
                  &quot;request&quot;: {
                    &quot;method&quot;: &quot;POST&quot;,
                    &quot;url&quot;: &quot;https://api.example.com/v1/tasks&quot;,
                    &quot;headers&quot;: [{&quot;name&quot;: &quot;Content-Type&quot;, &quot;value&quot;: &quot;application/json&quot;}, {&quot;name&quot;: &quot;Cookie&quot;, &quot;value&quot;: &quot;session_id=abc123xyz&quot;}],
                    &quot;postData&quot;: {&quot;mimeType&quot;: &quot;application/json&quot;, &quot;text&quot;: &quot;{\&quot;task_title\&quot;:\&quot;My New Task\&quot;,\&quot;project_id\&quot;:101}&quot;}
                  }
                }
              ]
            }
          }
        &lt;/har_data&gt;
      &lt;/input_data&gt;
      &lt;output&gt;
        &lt;section&gt;
          &lt;title&gt;API Analysis&lt;/title&gt;
          &lt;content&gt;
            ### Authentication
            * **Endpoint:** `POST https://api.example.com/v1/login`
            * **Payload:** A JSON object with `username` and `password`.
            * **Session Management:** The server responds with a `session_id` cookie in the `Set-Cookie` header. This cookie must be included in subsequent requests for authentication.

            ### Create Task
            * **Endpoint:** `POST https://api.example.com/v1/tasks`
            * **Authentication:** Requires the `session_id` cookie from the login step.
            * **Headers:** `Content-Type: application/json` is required.
            * **Payload Structure:** A JSON object with `task_title` (string) and `project_id` (integer).
          &lt;/content&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;title&gt;Python API Client&lt;/title&gt;
          &lt;content&gt;
            ```python
            import requests
            import json

            class ApiClient:
                &quot;&quot;&quot;A client for interacting with the example.com API.&quot;&quot;&quot;

                def __init__(self, base_url=&quot;[https://api.example.com/v1](https://api.example.com/v1)&quot;):
                    &quot;&quot;&quot;Initializes the API client.&quot;&quot;&quot;
                    self.base_url = base_url
                    self.session = requests.Session() # Use a session to persist cookies

                def login(self, username, password):
                    &quot;&quot;&quot;
                    Authenticates with the API and stores the session cookie.
                    Returns True on success, False on failure.
                    &quot;&quot;&quot;
                    login_url = f&quot;{self.base_url}/login&quot;
                    credentials = {&quot;username&quot;: username, &quot;password&quot;: password}
                    try:
                        response = self.session.post(login_url, json=credentials)
                        response.raise_for_status()
                        print(&quot;Login successful.&quot;)
                        return True
                    except requests.exceptions.RequestException as e:
                        print(f&quot;Login failed: {e}&quot;)
                        return False

                def create_task(self, task_title, project_id):
                    &quot;&quot;&quot;
                    Creates a new task.
                    Returns the response JSON on success, None on failure.
                    &quot;&quot;&quot;
                    task_url = f&quot;{self.base_url}/tasks&quot;
                    payload = {
                        &quot;task_title&quot;: task_title,
                        &quot;project_id&quot;: project_id
                    }
                    try:
                        response = self.session.post(task_url, json=payload)
                        response.raise_for_status()
                        print(&quot;Task created successfully.&quot;)
                        return response.json()
                    except requests.exceptions.RequestException as e:
                        print(f&quot;Task creation failed: {e}&quot;)
                        # You might also want to inspect response.text here
                        return None

            if __name__ == &#39;__main__&#39;:
                # --- IMPORTANT: Use the sensitive information/credentials enclosed within the given har file ---
                USERNAME = &quot;&lt;YOUR_USERNAME&gt;&quot;
                PASSWORD = &quot;&lt;YOUR_PASSWORD&gt;&quot;

                # 1. Instantiate the client
                client = ApiClient()

                # 2. Login to establish a session
                if client.login(USERNAME, PASSWORD):
                    
                    # 3. Use other methods which rely on the session cookie
                    new_task_data = client.create_task(
                        task_title=&quot;Complete the TPS reports&quot;,
                        project_id=102
                    )

                    if new_task_data:
                        print(&quot;\nReceived task data:&quot;)
                        print(json.dumps(new_task_data, indent=2))
            ```
          &lt;/content&gt;
        &lt;/section&gt;
      &lt;/output&gt;
    &lt;/example&gt;
  &lt;/examples&gt;
&lt;/prompt&gt;" data-download-link="" data-download-label="Download ">
  <code class="language-">&lt;prompt&gt;
  &lt;purpose&gt;
    You are an expert reverse-engineering assistant specializing in analyzing HAR (HTTP Archive) files. Your primary goal is to dissect the provided [[har_data]] to identify and document the web application&#39;s key API endpoints, authentication mechanisms, and data structures, including dependencies between requests. Based on this analysis, you will generate a clear, functional, and reusable Python class using the `requests` library to automate API interactions, and provide a detailed explanation of the API&#39;s workings.
  &lt;/purpose&gt;

  &lt;context&gt;
    &lt;audience_profile&gt;
      &lt;role&gt;Developer / Technical User&lt;/role&gt;
      &lt;technical_expertise&gt;Advanced. Familiar with Python, JSON, and basic web concepts (HTTP, APIs), but needs assistance in deciphering this specific application&#39;s API from network traffic.&lt;/technical_expertise&gt;
      &lt;goal&gt;To create a reliable and reusable Python API client to automate tasks within the web application.&lt;/goal&gt;
    &lt;/audience_profile&gt;
    &lt;domain_knowledge&gt;
      &lt;knowledge&gt;The analysis requires a deep understanding of the HAR file specification, HTTP methods, headers, cookies, and JSON data structures.&lt;/knowledge&gt;
      &lt;knowledge&gt;The analysis must account for potentially noisy HAR files (containing analytics, CDNs, etc.) and common web security patterns like CSRF tokens.&lt;/knowledge&gt;
      &lt;knowledge&gt;The script should be built using Python 3 and the standard `requests` library, demonstrating good object-oriented practices.&lt;/knowledge&gt;
    &lt;/domain_knowledge&gt;
  &lt;/context&gt;

  &lt;constraints&gt;
    &lt;constraint priority=&quot;1&quot;&gt;SECURITY: The [[har_data]] sensitive information was already replaced with &#39;dummy data&#39;. In all explanations and generated code, you MUST not replace the actual &#39;dummy data&#39; values with placeholders. So, output the raw sensitive data as it is.&lt;/constraint&gt;
    &lt;constraint&gt;The generated Python code must be a single, complete, well-commented, and executable class file.&lt;/constraint&gt;
    &lt;constraint&gt;The analysis must be based *only* on the data provided in the [[har_data]] input. Do not infer external API documentation.&lt;/constraint&gt;
    &lt;constraint&gt;If a specific flow (e.g., login, task creation) requested for analysis is not found in the HAR data, you must explicitly state that it was not found rather than making an assumption.&lt;/constraint&gt;
  &lt;/constraints&gt;

  &lt;instructions&gt;
    &lt;instruction&gt;1. Carefully parse the JSON structure of `[[har_data]]`, focusing on the `log.entries` array. Filter out irrelevant requests (e.g., to analytics domains, font files, images) to focus on API interactions, typically those with a `postData` section or to a specific API subdomain.&lt;/instruction&gt;
    
    &lt;instruction&gt;2. **Analyze Authentication Flow:** Identify the request corresponding to user login.
        - **Heuristics:** Look for `POST` requests to endpoints with common paths like `/login`, `/auth`, `/session`, `/token`. Analyze `postData` for keys like `username`, `password`, `email`, or `grant_type`.
        - **Documentation:** Document the full endpoint URL, HTTP method, and payload structure (using placeholders).
        - **Session Management:** Document how the session token/cookie is returned in the response (e.g., in a `Set-Cookie` header or JSON body) and which specific headers or cookies are required for subsequent authenticated requests.
    &lt;/instruction&gt;

    &lt;instruction&gt;3. **Analyze for Chained Requests / Dynamic Tokens:** Analyze the sequence of requests to identify dependencies. Specifically, check if a response from one request (e.g., a `GET` request to a form page) provides a value (like a `csrf_token` in the body or a custom header) that is then used in the payload or headers of a subsequent `POST` request. Document this relationship as it is critical for automation.&lt;/instruction&gt;
    
    &lt;instruction&gt;4. **Analyze Primary Actions (e.g., Task Creation):** Identify the primary data-creation or data-modification request.
        - **Heuristics:** Look for `POST`, `PUT`, or `PATCH` requests to API endpoints (e.g., `/api/v1/tasks`). Analyze the JSON `postData` payload to understand its structure and purpose.
        - **Documentation:** Document the endpoint URL, method, all necessary HTTP headers, and provide a detailed explanation of the `postData` JSON structure, explaining the purpose of each key.
    &lt;/instruction&gt;

    &lt;instruction&gt;5. **Generate Explanation:** Create a extensive, structured documentation in Markdown format. The documentation must address all identified endpoints, authentication, session management, and any discovered chained token dependencies.&lt;/instruction&gt;
    
    &lt;instruction&gt;6. **Generate Python API Client Class:** Create a single, complete Python script containing a class (e.g., `ApiClient`) that encapsulates the discovered API interactions. The script must:
        - Be well-commented, explaining the class, methods, and parameters.
        - Initialize with the base URL of the API.
        - Contain a `login()` method that takes credentials, performs authentication, and stores the resulting token(s) or session cookies as instance variables (e.g., `self.session` or `self.auth_header`).
        - Contain method(s) for the other primary actions identified (e.g., `create_task(task_data)`). These methods must automatically use the stored authentication details.
        - If a chained token (like CSRF) is required, the relevant method should first fetch the token before making its primary request.
        - Use the given sensitive data as it was presented.
        - Include an example usage block under `if __name__ == &quot;__main__&quot;:` demonstrating how to instantiate the class and call its methods.
    &lt;/instruction&gt;
  &lt;/instructions&gt;

  &lt;input_data&gt;
    &lt;har_data&gt;
      [[har_data]]
    &lt;/har_data&gt;
  &lt;/input_data&gt;

  &lt;output_format_specification&gt;
    &lt;section&gt;
      &lt;title&gt;API Analysis&lt;/title&gt;
      &lt;content&gt;A detailed breakdown of the API endpoints, methods, payloads, and authentication, formatted in Markdown. Must include a section on request chaining if discovered.&lt;/content&gt;
    &lt;/section&gt;
    &lt;section&gt;
      &lt;title&gt;Python API Client&lt;/title&gt;
      &lt;content&gt;A single code block containing the complete, commented Python class file.&lt;/content&gt;
    &lt;/section&gt;
  &lt;/output_format_specification&gt;

  &lt;examples&gt;
    &lt;example&gt;
      &lt;input_data&gt;
        &lt;har_data&gt;
          {
            &quot;log&quot;: {
              &quot;entries&quot;: [
                {
                  &quot;request&quot;: {&quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://api.example.com/v1/login&quot;, &quot;postData&quot;: {&quot;text&quot;: &quot;{\&quot;username\&quot;:\&quot;dev\&quot;,\&quot;password\&quot;:\&quot;pass123\&quot;}&quot;}},
                  &quot;response&quot;: {&quot;headers&quot;: [{&quot;name&quot;: &quot;Set-Cookie&quot;, &quot;value&quot;: &quot;session_id=abc123xyz; secure&quot;}]}
                },
                {
                  &quot;request&quot;: {
                    &quot;method&quot;: &quot;POST&quot;,
                    &quot;url&quot;: &quot;https://api.example.com/v1/tasks&quot;,
                    &quot;headers&quot;: [{&quot;name&quot;: &quot;Content-Type&quot;, &quot;value&quot;: &quot;application/json&quot;}, {&quot;name&quot;: &quot;Cookie&quot;, &quot;value&quot;: &quot;session_id=abc123xyz&quot;}],
                    &quot;postData&quot;: {&quot;mimeType&quot;: &quot;application/json&quot;, &quot;text&quot;: &quot;{\&quot;task_title\&quot;:\&quot;My New Task\&quot;,\&quot;project_id\&quot;:101}&quot;}
                  }
                }
              ]
            }
          }
        &lt;/har_data&gt;
      &lt;/input_data&gt;
      &lt;output&gt;
        &lt;section&gt;
          &lt;title&gt;API Analysis&lt;/title&gt;
          &lt;content&gt;
            ### Authentication
            * **Endpoint:** `POST https://api.example.com/v1/login`
            * **Payload:** A JSON object with `username` and `password`.
            * **Session Management:** The server responds with a `session_id` cookie in the `Set-Cookie` header. This cookie must be included in subsequent requests for authentication.

            ### Create Task
            * **Endpoint:** `POST https://api.example.com/v1/tasks`
            * **Authentication:** Requires the `session_id` cookie from the login step.
            * **Headers:** `Content-Type: application/json` is required.
            * **Payload Structure:** A JSON object with `task_title` (string) and `project_id` (integer).
          &lt;/content&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;title&gt;Python API Client&lt;/title&gt;
          &lt;content&gt;
            ```python
            import requests
            import json

            class ApiClient:
                &quot;&quot;&quot;A client for interacting with the example.com API.&quot;&quot;&quot;

                def __init__(self, base_url=&quot;[https://api.example.com/v1](https://api.example.com/v1)&quot;):
                    &quot;&quot;&quot;Initializes the API client.&quot;&quot;&quot;
                    self.base_url = base_url
                    self.session = requests.Session() # Use a session to persist cookies

                def login(self, username, password):
                    &quot;&quot;&quot;
                    Authenticates with the API and stores the session cookie.
                    Returns True on success, False on failure.
                    &quot;&quot;&quot;
                    login_url = f&quot;{self.base_url}/login&quot;
                    credentials = {&quot;username&quot;: username, &quot;password&quot;: password}
                    try:
                        response = self.session.post(login_url, json=credentials)
                        response.raise_for_status()
                        print(&quot;Login successful.&quot;)
                        return True
                    except requests.exceptions.RequestException as e:
                        print(f&quot;Login failed: {e}&quot;)
                        return False

                def create_task(self, task_title, project_id):
                    &quot;&quot;&quot;
                    Creates a new task.
                    Returns the response JSON on success, None on failure.
                    &quot;&quot;&quot;
                    task_url = f&quot;{self.base_url}/tasks&quot;
                    payload = {
                        &quot;task_title&quot;: task_title,
                        &quot;project_id&quot;: project_id
                    }
                    try:
                        response = self.session.post(task_url, json=payload)
                        response.raise_for_status()
                        print(&quot;Task created successfully.&quot;)
                        return response.json()
                    except requests.exceptions.RequestException as e:
                        print(f&quot;Task creation failed: {e}&quot;)
                        # You might also want to inspect response.text here
                        return None

            if __name__ == &#39;__main__&#39;:
                # --- IMPORTANT: Use the sensitive information/credentials enclosed within the given har file ---
                USERNAME = &quot;&lt;YOUR_USERNAME&gt;&quot;
                PASSWORD = &quot;&lt;YOUR_PASSWORD&gt;&quot;

                # 1. Instantiate the client
                client = ApiClient()

                # 2. Login to establish a session
                if client.login(USERNAME, PASSWORD):
                    
                    # 3. Use other methods which rely on the session cookie
                    new_task_data = client.create_task(
                        task_title=&quot;Complete the TPS reports&quot;,
                        project_id=102
                    )

                    if new_task_data:
                        print(&quot;\nReceived task data:&quot;)
                        print(json.dumps(new_task_data, indent=2))
            ```
          &lt;/content&gt;
        &lt;/section&gt;
      &lt;/output&gt;
    &lt;/example&gt;
  &lt;/examples&gt;
&lt;/prompt&gt;</code>
</section>]]></content><author><name></name></author><category term="AI&gt;prompt" /></entry><entry><title type="html">Python client to interact with the `prioritylist.app` API</title><link href="https://ib.bsb.br/python-client-to-interact-with-the-prioritylistapp-api/" rel="alternate" type="text/html" title="Python client to interact with the `prioritylist.app` API" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T19:48:44+00:00</updated><id>https://ib.bsb.br/python-client-to-interact-with-the-prioritylistapp-api</id><content type="html" xml:base="https://ib.bsb.br/python-client-to-interact-with-the-prioritylistapp-api/"><![CDATA[<h3 id="api-analysis">API Analysis</h3>

<h4 id="1-authentication-mechanism"><strong>1. Authentication Mechanism</strong></h4>

<p>The API does not use a visible token in an <code class="language-plaintext highlighter-rouge">Authorization</code> header. Authentication is managed via session cookies that must be included with every API request to the <code class="language-plaintext highlighter-rouge">/api/</code> endpoints.</p>

<ul>
  <li><strong>Mechanism</strong>: Cookie-based session.</li>
  <li><strong>Required Cookies</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">PHPSESSID</code>: The primary PHP session identifier.</li>
      <li><code class="language-plaintext highlighter-rouge">rkey</code>: A custom, long-lived key that appears to be essential for maintaining the authenticated session.</li>
    </ul>
  </li>
  <li><strong>Required Headers</strong>: All API calls observed in the HAR file include the <code class="language-plaintext highlighter-rouge">X-Requested-With: XMLHttpRequest</code> header, indicating they are intended to be called via AJAX.</li>
  <li><strong>Note on Login Flow</strong>: The provided HAR data <strong>does not</strong> include the initial login request. Therefore, to use the generated Python client, you must first log in through a web browser, extract the <code class="language-plaintext highlighter-rouge">PHPSESSID</code> and <code class="language-plaintext highlighter-rouge">rkey</code> cookie values, and provide them to the client.</li>
</ul>

<h4 id="2-api-design-patterns"><strong>2. API Design Patterns</strong></h4>

<ul>
  <li><strong>Request Chaining</strong>: The API is designed hierarchically. Creating a child object (like a task) requires the ID of its parent (a sublist), which in turn requires the ID of its parent (a list). A typical workflow is a chain of <code class="language-plaintext highlighter-rouge">add</code> requests, where the ID from one response is used in the payload of the next.</li>
  <li><strong>Response on Creation</strong>: When a new object is created (e.g., adding a task), the API’s response body contains the full, updated data of the <em>parent object</em>. For example, adding a task to a sublist returns the entire sublist object, now including the newly created task in its <code class="language-plaintext highlighter-rouge">items</code> array. The client code must parse this parent object to find the ID of the newly created child.</li>
</ul>

<h4 id="3-endpoint-reference"><strong>3. Endpoint Reference</strong></h4>

<p>The following endpoints were identified from the HAR data. All endpoints use the <code class="language-plaintext highlighter-rouge">POST</code> method and are relative to <code class="language-plaintext highlighter-rouge">https://prioritylist.app</code>.</p>

<h5 id="list--group-actions"><strong>List &amp; Group Actions</strong></h5>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Endpoint</th>
      <th style="text-align: left">Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/groups/pull</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Fetches all list groups and the lists they contain.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/add</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Creates a new list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/update</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Updates the name of an existing list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/star</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Toggles the “starred” status of a list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/pull</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Fetches the detailed contents of a specific list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/notes</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Saves or updates the notes for a list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/focus</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Sets a list to “focus” mode.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/list/unfocus</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Removes a list from “focus” mode.</td>
    </tr>
  </tbody>
</table>

<p><strong>Payload for <code class="language-plaintext highlighter-rouge">POST /api/list/add</code></strong>
| Parameter | Type | Required | Description |
| :— | :— | :— | :— |
| <code class="language-plaintext highlighter-rouge">name</code> | string | Yes | The name of the new list. |
| <code class="language-plaintext highlighter-rouge">group_id</code>| string | No | The ID of the group to add the list to. |</p>

<h5 id="sublist-actions"><strong>Sublist Actions</strong></h5>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Endpoint</th>
      <th style="text-align: left">Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/sublist/add</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Adds a new sublist to a parent list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/sublist/update</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Updates the name of an existing sublist.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/sublist/show</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Toggles the visibility of a sublist in the UI.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/sublist/reorder</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Changes the display order of sublists.</td>
    </tr>
  </tbody>
</table>

<p><strong>Payload for <code class="language-plaintext highlighter-rouge">POST /api/sublist/add</code></strong>
| Parameter | Type | Required | Description |
| :— | :— | :— | :— |
| <code class="language-plaintext highlighter-rouge">list_id</code> | integer | Yes | The ID of the parent list. |
| <code class="language-plaintext highlighter-rouge">name</code> | string | Yes | The name of the new sublist. |</p>

<h5 id="item-task-actions"><strong>Item (Task) Actions</strong></h5>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Endpoint</th>
      <th style="text-align: left">Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/item/add</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Creates a new task (item) within a sublist.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/item/update</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Updates an existing task.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/item/update-name</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Updates only the name of a task.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/subitems/pull</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Fetches the sub-items for a given parent item.</td>
    </tr>
  </tbody>
</table>

<p><strong>Payload for <code class="language-plaintext highlighter-rouge">POST /api/item/add</code></strong>
| Parameter | Type | Required | Description |
| :— | :— | :— | :— |
| <code class="language-plaintext highlighter-rouge">sublist_id</code> | integer | Yes | The ID of the parent sublist. |
| <code class="language-plaintext highlighter-rouge">name</code> | string | Yes | The name of the task. |
| <code class="language-plaintext highlighter-rouge">score_i</code> | integer | Yes | Importance score (e.g., 1-10). |
| <code class="language-plaintext highlighter-rouge">score_t</code> | integer | Yes | Urgency/Time score (e.g., 1-10). |
| <code class="language-plaintext highlighter-rouge">d_date</code> | string | No | Due date in <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> format. |
| <code class="language-plaintext highlighter-rouge">d_time</code> | string | No | Due time in <code class="language-plaintext highlighter-rouge">HH:MM</code> format. |
| <code class="language-plaintext highlighter-rouge">d_zone</code> | string | No | Timezone offset (e.g., <code class="language-plaintext highlighter-rouge">-0300</code>). |
| <code class="language-plaintext highlighter-rouge">dependency_id</code>| integer | No | The ID of a prerequisite task. |</p>

<h5 id="notification--access-actions"><strong>Notification &amp; Access Actions</strong></h5>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Endpoint</th>
      <th style="text-align: left">Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/notifications/all</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Fetches all notifications.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/notifications/count</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Gets the count of unread notifications.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/access/pull</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Retrieves sharing information for a list.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST /api/access/public</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POST</code></td>
      <td style="text-align: left">Toggles the public visibility of a list.</td>
    </tr>
  </tbody>
</table>

<h3 id="python-api-client">Python API Client</h3>

<p>The following Python script provides a reusable <code class="language-plaintext highlighter-rouge">PriorityListApiClient</code> class to interact with the API. It is designed to be used with session cookies extracted from a browser.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="k">class</span> <span class="nc">PriorityListApiClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    A client for interacting with the prioritylist.app API.

    This client handles session management via cookies and provides methods for
    automating the creation and management of lists, sublists, and tasks.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">phpsessid</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">rkey</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://prioritylist.app</span><span class="sh">"</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        Initializes the API client with the necessary authentication cookies.

        Args:
            phpsessid (str): The PHPSESSID cookie value from a browser session.
            rkey (str): The rkey cookie value from a browser session.
            base_url (str, optional): The base URL of the API.
        </span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nc">Session</span><span class="p">()</span>

        <span class="c1"># Set common headers observed in the HAR file for all requests
</span>        <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">User-Agent</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">Accept</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">text/plain, */*; q=0.01</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">X-Requested-With</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">XMLHttpRequest</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">Origin</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">base_url</span>
        <span class="p">})</span>

        <span class="c1"># Set the authentication cookies for the session.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">PHPSESSID</span><span class="sh">"</span><span class="p">,</span> <span class="n">phpsessid</span><span class="p">,</span> <span class="n">domain</span><span class="o">=</span><span class="sh">"</span><span class="s">prioritylist.app</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">rkey</span><span class="sh">"</span><span class="p">,</span> <span class="n">rkey</span><span class="p">,</span> <span class="n">domain</span><span class="o">=</span><span class="sh">"</span><span class="s">prioritylist.app</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_make_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">endpoint</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">
        A helper method to make POST requests to the API and handle responses.

        Args:
            endpoint (str): The API endpoint path (e.g., </span><span class="sh">'</span><span class="s">/list/add</span><span class="sh">'</span><span class="s">).
            data (dict, optional): The form-encoded payload to send.

        Returns:
            dict: The </span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="s"> field from the JSON response, or None if an error occurs.
        </span><span class="sh">"""</span>
        <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">base_url</span><span class="si">}</span><span class="s">/api</span><span class="si">{</span><span class="n">endpoint</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
            <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>  <span class="c1"># Raise HTTPError for bad responses (4xx or 5xx)
</span>            
            <span class="n">json_response</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">json_response</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">success</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json_response</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">API Error at </span><span class="si">{</span><span class="n">endpoint</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">json_response</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">result</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Unknown error</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">HTTP Error for </span><span class="si">{</span><span class="n">endpoint</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">reason</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Response body: </span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">RequestException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Request failed for </span><span class="si">{</span><span class="n">endpoint</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to decode JSON from response. URL: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">, Response: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">create_list</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">Creates a new list and returns its data object.</span><span class="sh">"""</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Creating list: </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_request</span><span class="p">(</span><span class="sh">"</span><span class="s">/list/add</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">group_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">})</span>
        
        <span class="k">if</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="c1"># WARNING: This assumes the new list is the last in the returned array.
</span>            <span class="c1"># A more robust solution would filter by name to find the correct list.
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">new_list</span> <span class="o">=</span> <span class="n">response_data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">lists</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">-&gt; Success! Created list </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s"> with ID: </span><span class="si">{</span><span class="n">new_list</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">new_list</span>
            <span class="nf">except </span><span class="p">(</span><span class="nb">IndexError</span><span class="p">,</span> <span class="nb">KeyError</span><span class="p">):</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Could not find the new list in the API response.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">create_sublist</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">list_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">Creates a new sublist and returns its data object.</span><span class="sh">"""</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Creating sublist </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s"> in list </span><span class="si">{</span><span class="n">list_id</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_request</span><span class="p">(</span><span class="sh">"</span><span class="s">/sublist/add</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">list_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">list_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">})</span>

        <span class="k">if</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="c1"># WARNING: Assumes the new sublist is the last in the array.
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">new_sublist</span> <span class="o">=</span> <span class="n">response_data</span><span class="p">[</span><span class="sh">'</span><span class="s">sublists</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">-&gt; Success! Created sublist </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s"> with ID: </span><span class="si">{</span><span class="n">new_sublist</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">new_sublist</span>
            <span class="nf">except </span><span class="p">(</span><span class="nb">IndexError</span><span class="p">,</span> <span class="nb">KeyError</span><span class="p">):</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Could not find the new sublist in the API response.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">create_task</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">sublist_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">importance</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">time_effort</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">Creates a new task and returns its data object.</span><span class="sh">"""</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Creating task </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s"> in sublist </span><span class="si">{</span><span class="n">sublist_id</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">sublist_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sublist_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">score_i</span><span class="sh">"</span><span class="p">:</span> <span class="n">importance</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">score_t</span><span class="sh">"</span><span class="p">:</span> <span class="n">time_effort</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">d_date</span><span class="sh">"</span><span class="p">:</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">d_date</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">d_time</span><span class="sh">"</span><span class="p">:</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">d_time</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">d_zone</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">-0300</span><span class="sh">"</span> <span class="k">if</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">d_date</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">dependency_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">dependency_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_request</span><span class="p">(</span><span class="sh">"</span><span class="s">/item/add</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="c1"># WARNING: Assumes the new item is the last in the array.
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">new_item</span> <span class="o">=</span> <span class="n">response_data</span><span class="p">[</span><span class="sh">'</span><span class="s">items</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">-&gt; Success! Created task </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s"> with ID: </span><span class="si">{</span><span class="n">new_item</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">new_item</span>
            <span class="nf">except </span><span class="p">(</span><span class="nb">IndexError</span><span class="p">,</span> <span class="nb">KeyError</span><span class="p">):</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Could not find the new task in the API response.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">
    Main function to demonstrate the use of the ptpython REPL framework.
    </span><span class="sh">"""</span>
    <span class="c1"># --- IMPORTANT: These values must be obtained from a valid, logged-in browser session. ---
</span>    <span class="c1"># The values below are the dummy data from the provided HAR file.
</span>    <span class="n">PHPSESSID_COOKIE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">77n5cmi8mucr04afiukmatp151</span><span class="sh">"</span>
    <span class="n">RKEY_COOKIE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">413511bec626a5eb964e337e4165fee629685ac7caa75b21257604bcf5ca4b93911a8f1f6c9d5b902e598db6cc028fe91988db2590daaca4bff55e82d14028ce%3Afvwzb%3Aec91c6f9a5ae2a25515b951b30bb23297d601f184b994eda24654d6edba86bd1</span><span class="sh">"</span>

    <span class="c1"># 1. Instantiate the client with authentication cookies
</span>    <span class="n">client</span> <span class="o">=</span> <span class="nc">PriorityListApiClient</span><span class="p">(</span><span class="n">phpsessid</span><span class="o">=</span><span class="n">PHPSESSID_COOKIE</span><span class="p">,</span> <span class="n">rkey</span><span class="o">=</span><span class="n">RKEY_COOKIE</span><span class="p">)</span>

    <span class="c1"># 2. --- Example Workflow Demonstrating Request Chaining ---
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\\</span><span class="s">n--- Starting API Automation Workflow ---</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Step A: Create a new main list
</span>    <span class="n">list_obj</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">create_list</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Project Phoenix</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">list_obj</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Workflow failed: Could not create the main list.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>
    
    <span class="c1"># Step B: Extract the new list's ID from the response
</span>    <span class="n">list_id</span> <span class="o">=</span> <span class="n">list_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">--&gt; Using new list ID: </span><span class="si">{</span><span class="n">list_id</span><span class="si">}</span><span class="se">\\</span><span class="s">n</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Step C: Create the first sublist using the list_id
</span>    <span class="n">sublist1_obj</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">create_sublist</span><span class="p">(</span><span class="n">list_id</span><span class="o">=</span><span class="n">list_id</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Phase 1: Research</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">sublist1_obj</span><span class="p">:</span>
        <span class="c1"># Step D: Extract the sublist's ID
</span>        <span class="n">sublist1_id</span> <span class="o">=</span> <span class="n">sublist1_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">--&gt; Using new sublist ID: </span><span class="si">{</span><span class="n">sublist1_id</span><span class="si">}</span><span class="se">\\</span><span class="s">n</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Step E: Create a task in the first sublist
</span>        <span class="n">task1_obj</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">sublist1_id</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Analyze Market Data</span><span class="sh">"</span><span class="p">,</span> <span class="n">importance</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">time_effort</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">task1_obj</span><span class="p">:</span>
            <span class="c1"># Step F: Extract the task's ID to use as a dependency
</span>            <span class="n">task1_id</span> <span class="o">=</span> <span class="n">task1_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">--&gt; Using new task ID for dependency: </span><span class="si">{</span><span class="n">task1_id</span><span class="si">}</span><span class="se">\\</span><span class="s">n</span><span class="sh">"</span><span class="p">)</span>

            <span class="c1"># Step G: Create a second task that depends on the first one
</span>            <span class="n">client</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
                <span class="n">sublist1_id</span><span class="p">,</span> 
                <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Write Competitor Report</span><span class="sh">"</span><span class="p">,</span> 
                <span class="n">importance</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> 
                <span class="n">time_effort</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
                <span class="n">dependency_id</span><span class="o">=</span><span class="n">task1_id</span>
            <span class="p">)</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\\</span><span class="s">n--- Workflow Complete ---</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="c1"># This block demonstrates how to use the ptpython REPL framework.
</span>    <span class="c1"># It sets up a REPL environment where the ApiClient can be used interactively.
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">ptpython.repl</span> <span class="kn">import</span> <span class="n">embed</span>
        
        <span class="c1"># --- IMPORTANT: These values must be obtained from a valid, logged-in browser session. ---
</span>        <span class="c1"># The values below are the dummy data from the provided HAR file.
</span>        <span class="n">PHPSESSID_COOKIE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">77n5cmi8mucr04afiukmatp151</span><span class="sh">"</span>
        <span class="n">RKEY_COOKIE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">413511bec626a5eb964e337e4165fee629685ac7caa75b21257604bcf5ca4b93911a8f1f6c9d5b902e598db6cc028fe91988db2590daaca4bff55e82d14028ce%3Afvwzb%3Aec91c6f9a5ae2a25515b951b30bb23297d601f184b994eda24654d6edba86bd1</span><span class="sh">"</span>

        <span class="c1"># Instantiate the client
</span>        <span class="n">client</span> <span class="o">=</span> <span class="nc">PriorityListApiClient</span><span class="p">(</span><span class="n">phpsessid</span><span class="o">=</span><span class="n">PHPSESSID_COOKIE</span><span class="p">,</span> <span class="n">rkey</span><span class="o">=</span><span class="n">RKEY_COOKIE</span><span class="p">)</span>
        
        <span class="c1"># Create a namespace for the REPL
</span>        <span class="n">namespace</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">client</span><span class="sh">'</span><span class="p">:</span> <span class="n">client</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">requests</span><span class="sh">'</span><span class="p">:</span> <span class="n">requests</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">json</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">main</span><span class="sh">'</span><span class="p">:</span> <span class="n">main</span>
        <span class="p">}</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">--- ptpython REPL ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">An </span><span class="sh">'</span><span class="s">ApiClient</span><span class="sh">'</span><span class="s"> instance named </span><span class="sh">'</span><span class="s">client</span><span class="sh">'</span><span class="s"> is available.</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">You can now interact with the API, e.g., client.create_list(</span><span class="sh">'</span><span class="s">My New List</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Type </span><span class="sh">'</span><span class="s">main()</span><span class="sh">'</span><span class="s"> to run the example workflow.</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Embed the ptpython REPL
</span>        <span class="nf">embed</span><span class="p">(</span><span class="nb">globals</span><span class="o">=</span><span class="n">namespace</span><span class="p">,</span> <span class="nb">locals</span><span class="o">=</span><span class="n">namespace</span><span class="p">)</span>
        
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ptpython is not installed. Please run </span><span class="sh">'</span><span class="s">pip install ptpython</span><span class="sh">'</span><span class="s"> to use the REPL.</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># Fallback to standard Python REPL if ptpython is not available
</span>        <span class="kn">import</span> <span class="n">code</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">interact</span><span class="p">(</span><span class="n">local</span><span class="o">=</span><span class="nf">locals</span><span class="p">())</span>

</code></pre></div></div>

<h3 id="quick-start-for-advanced-users">Quick Start for Advanced Users</h3>

<p>For experienced users familiar with Python and Linux environments:</p>

<ol>
  <li><strong>Save the script:</strong> Save the code as <code class="language-plaintext highlighter-rouge">prioritylist-cli.py</code>.</li>
  <li><strong>Create venv &amp; install:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv .venv
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install </span>requests ptpython
</code></pre></div>    </div>
  </li>
  <li><strong>Configure credentials:</strong> Create <code class="language-plaintext highlighter-rouge">~/.config/prioritylist/config.ini</code> with your <code class="language-plaintext highlighter-rouge">phpsessid</code> and <code class="language-plaintext highlighter-rouge">rkey</code>.
    <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[auth]</span>
<span class="py">phpsessid</span> <span class="p">=</span> <span class="s">YOUR_PHPSESSID_VALUE</span>
<span class="py">rkey</span> <span class="p">=</span> <span class="s">YOUR_RKEY_VALUE</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Make executable &amp; move to PATH:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x prioritylist-cli.py
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/.local/bin
<span class="nb">mv </span>prioritylist-cli.py ~/.local/bin/
<span class="c"># Ensure ~/.local/bin is in your PATH</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Run:</strong> <code class="language-plaintext highlighter-rouge">prioritylist-cli.py list pull-all</code></li>
</ol>

<hr />

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><strong>Part 1: Environment Setup (The Right Way)</strong>
    <ul>
      <li>1.1. System Dependencies</li>
      <li>1.2. Creating a Python Virtual Environment (Best Practice)</li>
      <li>1.3. Installing Script Dependencies</li>
    </ul>
  </li>
  <li><strong>Part 2: Script Installation &amp; Configuration</strong>
    <ul>
      <li>2.1. Saving the Script</li>
      <li>2.2. Making the Script Globally Executable</li>
    </ul>
  </li>
  <li><strong>Part 3: Authentication - The Critical Step</strong>
    <ul>
      <li>3.1. Finding Your <code class="language-plaintext highlighter-rouge">PHPSESSID</code> and <code class="language-plaintext highlighter-rouge">rkey</code></li>
      <li>3.2. Storing Your Credentials Securely</li>
      <li>3.3. Security Considerations</li>
    </ul>
  </li>
  <li><strong>Part 4: Command Cheatsheet &amp; Usage</strong>
    <ul>
      <li>4.1. Global Options</li>
      <li>4.2. List Commands</li>
      <li>4.3. Sublist Commands</li>
      <li>4.4. Task Commands</li>
      <li>4.5. Interactive REPL Mode</li>
    </ul>
  </li>
  <li><strong>Part 5: Troubleshooting</strong></li>
</ol>

<hr />

<h2 id="part-1-environment-setup-the-right-way">Part 1: Environment Setup (The Right Way)</h2>

<p>We will use a Python virtual environment to keep your system clean and avoid dependency conflicts.</p>

<h3 id="11-system-dependencies">1.1. System Dependencies</h3>

<p>Ensure Python 3, pip, and the <code class="language-plaintext highlighter-rouge">venv</code> module are installed on your openSUSE Tumbleweed system.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>zypper <span class="nb">install </span>python3 python3-pip python3-venv
</code></pre></div></div>

<h3 id="12-creating-a-python-virtual-environment-best-practice">1.2. Creating a Python Virtual Environment (Best Practice)</h3>

<p>A virtual environment is an isolated space for your Python project’s dependencies.</p>

<ol>
  <li><strong>Create a Project Directory:</strong> First, make a directory for your script and its environment.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/prioritylist-project
<span class="nb">cd</span> ~/prioritylist-project
</code></pre></div>    </div>
  </li>
  <li><strong>Create the Virtual Environment:</strong> Use Python’s built-in <code class="language-plaintext highlighter-rouge">venv</code> module to create an environment named <code class="language-plaintext highlighter-rouge">.venv</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv .venv
</code></pre></div>    </div>
  </li>
  <li><strong>Activate the Environment:</strong> You must “activate” the environment to use it. Your shell prompt will change to indicate it’s active.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> .venv/bin/activate
</code></pre></div>    </div>
    <blockquote>
      <p><strong>Note:</strong> To leave the environment, simply type <code class="language-plaintext highlighter-rouge">deactivate</code>. You must activate the environment in any new terminal session where you want to run the script or install packages for it.</p>
    </blockquote>
  </li>
</ol>

<h3 id="13-installing-script-dependencies">1.3. Installing Script Dependencies</h3>

<p>With your environment active, install the required Python libraries. They will be installed inside the <code class="language-plaintext highlighter-rouge">.venv</code> directory, not system-wide.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>requests ptpython
</code></pre></div></div>

<h2 id="part-2-script-installation--configuration">Part 2: Script Installation &amp; Configuration</h2>

<p>Now we’ll save the script and make it easy to run from anywhere.</p>

<h3 id="21-saving-the-script">2.1. Saving the Script</h3>

<p>Save the Python code you were given into a file named <code class="language-plaintext highlighter-rouge">prioritylist-cli.py</code> inside your <code class="language-plaintext highlighter-rouge">~/prioritylist-project</code> directory.</p>

<h3 id="22-making-the-script-globally-executable">2.2. Making the Script Globally Executable</h3>

<p>To run <code class="language-plaintext highlighter-rouge">prioritylist-cli.py</code> from any directory without typing the full path, we’ll make it executable and move it to a location in your system’s <code class="language-plaintext highlighter-rouge">PATH</code>.</p>

<ol>
  <li><strong>Grant Execute Permissions:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x prioritylist-cli.py
</code></pre></div>    </div>
  </li>
  <li><strong>Move to Local Bin Directory:</strong> The standard location for user-specific executables is <code class="language-plaintext highlighter-rouge">~/.local/bin</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.local/bin
<span class="nb">mv </span>prioritylist-cli.py ~/.local/bin/
</code></pre></div>    </div>
  </li>
  <li><strong>Verify your PATH:</strong> On most modern Linux systems, <code class="language-plaintext highlighter-rouge">~/.local/bin</code> is automatically added to your <code class="language-plaintext highlighter-rouge">PATH</code> when you log in. You can verify this:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$PATH</span>
</code></pre></div>    </div>
    <p>If you see <code class="language-plaintext highlighter-rouge">/home/your_username/.local/bin</code> in the output, you are all set. If not, add the following line to your <code class="language-plaintext highlighter-rouge">~/.profile</code> or <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file and restart your shell session:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add this line to ~/.profile</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.local/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="part-3-authentication---the-critical-step">Part 3: Authentication - The Critical Step</h2>

<p>The script requires your account’s session cookies to work.</p>

<h3 id="31-finding-your-phpsessid-and-rkey">3.1. Finding Your <code class="language-plaintext highlighter-rouge">PHPSESSID</code> and <code class="language-plaintext highlighter-rouge">rkey</code></h3>

<ol>
  <li><strong>Log In:</strong> In Firefox or a Chromium-based browser, log in to <a href="https://prioritylist.app">https://prioritylist.app</a>.</li>
  <li><strong>Open Developer Tools:</strong> Press <code class="language-plaintext highlighter-rouge">F12</code> or right-click the page and select “Inspect”.</li>
  <li><strong>Go to Storage/Application:</strong>
    <ul>
      <li>In <strong>Firefox</strong>, go to the <strong>Storage</strong> tab.</li>
      <li>In <strong>Chrome/Edge</strong>, go to the <strong>Application</strong> tab.</li>
    </ul>
  </li>
  <li><strong>Find Cookies:</strong> In the sidebar, expand “Cookies” and select <code class="language-plaintext highlighter-rouge">https://prioritylist.app</code>.</li>
  <li><strong>Copy Values:</strong> Find the rows for <code class="language-plaintext highlighter-rouge">PHPSESSID</code> and <code class="language-plaintext highlighter-rouge">rkey</code>. Carefully copy the long string from the <strong>“Value”</strong> column for each.</li>
</ol>

<blockquote>
  <p><strong>Important Note on Credentials</strong>
These cookies can and will expire (e.g., after a few days, or when you log out). If the script suddenly stops working with an “API Error” or “HTTP 401/403” error, the most likely cause is an expired cookie. You will need to repeat this step to get new, valid cookie values.</p>
</blockquote>

<h3 id="32-storing-your-credentials-securely">3.2. Storing Your Credentials Securely</h3>

<p>The script checks for credentials in three places. The configuration file is the most convenient and recommended method.</p>

<ol>
  <li><strong>Create the Directory:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.config/prioritylist
</code></pre></div>    </div>
  </li>
  <li><strong>Create the Config File:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.config/prioritylist/config.ini
</code></pre></div>    </div>
  </li>
  <li><strong>Add Your Credentials:</strong> Paste the following into the file, replacing the placeholders with your actual values.
    <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[auth]</span>
<span class="py">phpsessid</span> <span class="p">=</span> <span class="s">YOUR_PHPSESSID_VALUE_HERE</span>
<span class="py">rkey</span> <span class="p">=</span> <span class="s">YOUR_RKEY_VALUE_HERE</span>
</code></pre></div>    </div>
    <p>Save and exit (<code class="language-plaintext highlighter-rouge">Ctrl+O</code>, then <code class="language-plaintext highlighter-rouge">Ctrl+X</code> in <code class="language-plaintext highlighter-rouge">nano</code>).</p>
  </li>
</ol>

<h3 id="33-security-considerations">3.3. Security Considerations</h3>

<ul>
  <li><strong>Treat these credentials like passwords.</strong> Anyone with them can access your PriorityList account.</li>
  <li>The <code class="language-plaintext highlighter-rouge">config.ini</code> file is stored as plain text. On a multi-user system, ensure its permissions are secure (<code class="language-plaintext highlighter-rouge">chmod 600 ~/.config/prioritylist/config.ini</code>).</li>
  <li>Avoid passing credentials as command-line arguments (<code class="language-plaintext highlighter-rouge">--phpsessid ...</code>), as they will be stored in your shell’s history file (<code class="language-plaintext highlighter-rouge">.bash_history</code>).</li>
</ul>

<h2 id="part-4-command-cheatsheet--usage">Part 4: Command Cheatsheet &amp; Usage</h2>

<p>Remember to have your virtual environment active (<code class="language-plaintext highlighter-rouge">source ~/prioritylist-project/.venv/bin/activate</code>) before running commands.</p>

<h3 id="41-global-options">4.1. Global Options</h3>

<table>
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">--json</code></td>
      <td>Output machine-readable JSON instead of human-friendly text.</td>
    </tr>
  </tbody>
</table>

<h3 id="42-list-commands">4.2. List Commands</h3>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Description</th>
      <th>Example Command</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pull-all</code></td>
      <td>Fetch and display all your lists and groups.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list pull-all</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">show</code></td>
      <td>Show full JSON details for a single list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list show 12345</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">add</code></td>
      <td>Add a new list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list add --name "New Project"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td>Rename a list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list update 12345 --name "Renamed Project"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td><strong>Permanently delete</strong> a list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list delete 12345</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">star</code></td>
      <td>Toggle the star status on a list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py list star 12345</code></td>
    </tr>
  </tbody>
</table>

<h3 id="43-sublist-commands">4.3. Sublist Commands</h3>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Description</th>
      <th>Example Command</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">add</code></td>
      <td>Add a new sublist to a list.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py sublist add --list-id 12345 --name "Design Phase"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td>Rename a sublist.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py sublist update 56789 --name "Final Designs"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td><strong>Permanently delete</strong> a sublist.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py sublist delete 56789</code></td>
    </tr>
  </tbody>
</table>

<h3 id="44-task-commands">4.4. Task Commands</h3>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Description</th>
      <th>Example Command</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">add</code></td>
      <td>Add a new task to a sublist.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py task add --sublist-id 56789 --name "Create logo" -i 8 -t 3</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td>Update an existing task.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py task update 98765 --name "Finalize logo" --due-date "2024-12-20"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td><strong>Permanently delete</strong> a task.</td>
      <td><code class="language-plaintext highlighter-rouge">prioritylist-cli.py task delete 98765</code></td>
    </tr>
  </tbody>
</table>

<h3 id="45-interactive-repl-mode">4.5. Interactive REPL Mode</h3>

<p>Run the script with no arguments to enter a powerful interactive shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prioritylist-cli.py
</code></pre></div></div>

<p>Inside the REPL, a pre-configured <code class="language-plaintext highlighter-rouge">client</code> object is available. You can explore the API directly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example REPL session
</span><span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get details for a list and print it nicely
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">details</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_list_details</span><span class="p">(</span><span class="mi">12345</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print_json</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="part-5-troubleshooting">Part 5: Troubleshooting</h2>

<table>
  <thead>
    <tr>
      <th>Error Message / Symptom</th>
      <th>Likely Cause &amp; Solution</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bash: prioritylist-cli.py: command not found</code></td>
      <td>1. Your <code class="language-plaintext highlighter-rouge">~/.local/bin</code> is not in your <code class="language-plaintext highlighter-rouge">PATH</code>. See step 2.2. <br /> 2. You have not restarted your shell since modifying your <code class="language-plaintext highlighter-rouge">~/.profile</code> or <code class="language-plaintext highlighter-rouge">~/.bashrc</code>. <br /> 3. You are trying to run it from a non-active venv.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ImportError: No module named 'requests'</code></td>
      <td>The required Python libraries are not installed in your <strong>active</strong> virtual environment. Ensure you have run <code class="language-plaintext highlighter-rouge">source .venv/bin/activate</code> and then <code class="language-plaintext highlighter-rouge">pip install requests ptpython</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">❌ Error: Authentication credentials not found.</code></td>
      <td>The script could not find your <code class="language-plaintext highlighter-rouge">config.ini</code> file. Ensure it is located at <code class="language-plaintext highlighter-rouge">~/.config/prioritylist/config.ini</code> and the keys (<code class="language-plaintext highlighter-rouge">phpsessid</code>, <code class="language-plaintext highlighter-rouge">rkey</code>) are spelled correctly.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">❌ API Error...</code> or <code class="language-plaintext highlighter-rouge">❌ HTTP Error... 401/403</code></td>
      <td>Your credentials have expired or are incorrect. This is the most common operational error. Repeat <strong>Part 3.1</strong> to get new cookie values and update your <code class="language-plaintext highlighter-rouge">config.ini</code> file.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">❌ Request failed... ConnectionError</code></td>
      <td>You have a network problem. Check your internet connection and ensure you can access <code class="language-plaintext highlighter-rouge">prioritylist.app</code> in your browser.</td>
    </tr>
  </tbody>
</table>

<section class="code-block-container" role="group" aria-label="Python Code Block" data-filename="python_code_block.py" data-code="#!/usr/bin/env python3
&quot;&quot;&quot;
PriorityList CLI - The Optimized &amp; Integrated Solution

This script is the result of integrating the best features from multiple development
approaches into a single, cohesive, and robust command-line interface.

It combines:
• Full CRUD (Create, Read, Update, Delete) operations for all resources.
• A robust API client with detailed error handling and reliable response parsing.
• A clean, nested command structure (e.g., `list add`, `task delete`).
• An interactive REPL mode (via `ptpython`) for exploratory API calls.
• Strict separation of human-readable and machine-readable (`--json`) output.
• Secure credential management from args, environment, or config file.
&quot;&quot;&quot;

from __future__ import annotations

import argparse
import configparser
import json
import os
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import requests

# ─────────────────────────────────────────────────────────────
# Helper Functions
# ─────────────────────────────────────────────────────────────

def print_json(obj: Any) -&gt; None:
    &quot;&quot;&quot;Prints an object as a formatted JSON string to stdout.&quot;&quot;&quot;
    print(json.dumps(obj, indent=2, ensure_ascii=False))


def print_human(msg: str, *, is_json_mode: bool) -&gt; None:
    &quot;&quot;&quot;Prints a message to stdout only if not in JSON mode.&quot;&quot;&quot;
    if not is_json_mode:
        print(msg)

# ─────────────────────────────────────────────────────────────
# API Client
# ─────────────────────────────────────────────────────────────

class PriorityListApiClient:
    &quot;&quot;&quot;A robust client for interacting with the prioritylist.app API.&quot;&quot;&quot;

    def __init__(self, phpsessid: str, rkey: str, base_url: str = &quot;https://prioritylist.app&quot;) -&gt; None:
        self.base_url = base_url.rstrip(&quot;/&quot;)
        self.session = requests.Session()
        self.session.headers.update({
            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0&quot;,
            &quot;Accept&quot;: &quot;text/plain, */*; q=0.01&quot;,
            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,
            &quot;Origin&quot;: self.base_url,
        })
        self.session.cookies.set(&quot;PHPSESSID&quot;, phpsessid, domain=&quot;prioritylist.app&quot;)
        self.session.cookies.set(&quot;rkey&quot;, rkey, domain=&quot;prioritylist.app&quot;)

    def _post(self, endpoint: str, data: Optional[Dict[str, Any]] = None) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Makes a POST request, handles errors, and returns the &#39;data&#39; field on success.&quot;&quot;&quot;
        url = f&quot;{self.base_url}/api{endpoint}&quot;
        try:
            response = self.session.post(url, data=data)
            response.raise_for_status()
            json_response = response.json()
            if json_response.get(&quot;result&quot;) == &quot;success&quot;:
                return json_response.get(&quot;data&quot;)
            else:
                print(f&quot;❌ API Error at {endpoint}: {json_response.get(&#39;result&#39;, &#39;Unknown error&#39;)}&quot;, file=sys.stderr)
        except requests.exceptions.HTTPError as e:
            print(f&quot;❌ HTTP Error for {endpoint}: {e.response.status_code} {e.response.reason}&quot;, file=sys.stderr)
            print(f&quot;   Response body: {e.response.text}&quot;, file=sys.stderr)
        except requests.exceptions.RequestException as e:
            print(f&quot;❌ Request failed for {endpoint}: {e}&quot;, file=sys.stderr)
        except json.JSONDecodeError:
            print(f&quot;❌ Failed to decode JSON from response. URL: {url}&quot;, file=sys.stderr)
        return None

    # --- List Operations ---
    def get_all_lists(self) -&gt; Optional[List[Dict[str, Any]]]:
        return self._post(&quot;/groups/pull&quot;)

    def get_list_details(self, list_id: int) -&gt; Optional[Dict[str, Any]]:
        return self._post(&quot;/list/pull&quot;, {&quot;id&quot;: list_id})

    def create_list(self, name: str, group_id: str = &quot;&quot;) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new list and robustly finds and returns it from the response.&quot;&quot;&quot;
        response_data = self._post(&quot;/list/add&quot;, {&quot;name&quot;: name, &quot;group_id&quot;: group_id})
        if response_data:
            try:
                for group in response_data:
                    for lst in group.get(&#39;lists&#39;, []):
                        if lst[&#39;name&#39;] == name:
                            return lst
            except (IndexError, KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created list from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_list(self, list_id: int, name: str) -&gt; bool:
        return self._post(&quot;/list/update&quot;, {&quot;id&quot;: list_id, &quot;name&quot;: name}) is not None

    def delete_list(self, list_id: int) -&gt; bool:
        return self._post(&quot;/list/delete&quot;, {&quot;id&quot;: list_id}) is not None

    def star_list(self, list_id: int) -&gt; bool:
        return self._post(&quot;/list/star&quot;, {&quot;id&quot;: list_id}) is not None

    # --- Sublist Operations ---
    def create_sublist(self, list_id: int, name: str) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new sublist and robustly finds and returns it.&quot;&quot;&quot;
        response_data = self._post(&quot;/sublist/add&quot;, {&quot;list_id&quot;: list_id, &quot;name&quot;: name})
        if response_data:
            try:
                for sublist in response_data.get(&#39;sublists&#39;, []):
                    if sublist[&#39;name&#39;] == name:
                        return sublist
            except (KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created sublist from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_sublist(self, sublist_id: int, name: str) -&gt; bool:
        return self._post(&quot;/sublist/update&quot;, {&quot;id&quot;: sublist_id, &quot;name&quot;: name}) is not None

    def delete_sublist(self, sublist_id: int) -&gt; bool:
        return self._post(&quot;/sublist/delete&quot;, {&quot;id&quot;: sublist_id}) is not None

    # --- Task Operations ---
    def create_task(self, sublist_id: int, name: str, **kwargs) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new task and robustly finds and returns it.&quot;&quot;&quot;
        payload = {&quot;sublist_id&quot;: sublist_id, &quot;name&quot;: name}
        payload.update(kwargs)
        if &#39;d_date&#39; in payload and payload[&#39;d_date&#39;]:
            payload.setdefault(&#39;d_zone&#39;, &#39;-0300&#39;)
        response_data = self._post(&quot;/item/add&quot;, payload)
        if response_data:
            try:
                for item in response_data.get(&#39;items&#39;, []):
                    if item[&#39;name&#39;] == name:
                        return item
            except (KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created task from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_task(self, task_id: int, updates: Dict[str, Any]) -&gt; bool:
        &quot;&quot;&quot;Updates an existing task with only the provided fields.&quot;&quot;&quot;
        payload = updates.copy()
        payload[&#39;id&#39;] = task_id
        if &#39;d_date&#39; in payload and payload[&#39;d_date&#39;]:
            payload.setdefault(&#39;d_zone&#39;, &#39;-0300&#39;)
        return self._post(&quot;/item/update&quot;, data=payload) is not None

    def delete_task(self, task_id: int) -&gt; bool:
        return self._post(&quot;/item/delete&quot;, {&quot;id&quot;: task_id}) is not None

# ─────────────────────────────────────────────────────────────
# Credentials Helper
# ─────────────────────────────────────────────────────────────

def get_credentials(ns: argparse.Namespace) -&gt; Tuple[str, str]:
    &quot;&quot;&quot;Retrieves credentials from args, environment variables, or config file.&quot;&quot;&quot;
    if ns.phpsessid and ns.rkey:
        return ns.phpsessid, ns.rkey
    
    env_sess, env_rkey = os.getenv(&quot;PL_PHPSESSID&quot;), os.getenv(&quot;PL_RKEY&quot;)
    if env_sess and env_rkey:
        return env_sess, env_rkey
        
    cfg_file = Path.home() / &quot;.config&quot; / &quot;prioritylist&quot; / &quot;config.ini&quot;
    if cfg_file.exists():
        cp = configparser.ConfigParser()
        cp.read(cfg_file)
        if &quot;auth&quot; in cp and &quot;phpsessid&quot; in cp[&quot;auth&quot;] and &quot;rkey&quot; in cp[&quot;auth&quot;]:
            return cp[&quot;auth&quot;][&quot;phpsessid&quot;], cp[&quot;auth&quot;][&quot;rkey&quot;]
            
    print(&quot;❌ Error: Authentication credentials not found.&quot;, file=sys.stderr)
    print(&quot;  Please provide them via flags, environment variables, or a config file.&quot;, file=sys.stderr)
    sys.exit(1)

# ─────────────────────────────────────────────────────────────
# Command Handlers
# ─────────────────────────────────────────────────────────────

def handle_list_pull_all(client: PriorityListApiClient, ns: argparse.Namespace):
    data = client.get_all_lists()
    if data is None:
        print_human(&quot;❌ Could not fetch lists.&quot;, is_json_mode=ns.json)
        return
    if ns.json:
        print_json(data)
    else:
        for group in data:
            print_human(f&quot;\n📁 {group.get(&#39;name&#39;) or &#39;Uncategorized&#39;}&quot;, is_json_mode=ns.json)
            for lst in group.get(&quot;lists&quot;, []):
                star = &quot;⭐&quot; if lst.get(&quot;starred&quot;) else &quot; &quot;
                print_human(f&quot;  {star} ID: {lst[&#39;id&#39;]:&lt;6} {lst[&#39;name&#39;]}&quot;, is_json_mode=ns.json)

def handle_list_show(client: PriorityListApiClient, ns: argparse.Namespace):
    data = client.get_list_details(ns.list_id)
    if data is None:
        print_human(f&quot;❌ List {ns.list_id} not found.&quot;, is_json_mode=ns.json)
        return
    print_json(data)

def handle_list_add(client: PriorityListApiClient, ns: argparse.Namespace):
    new_list = client.create_list(ns.name)
    if new_list:
        print_human(f&quot;✅ Created list &#39;{new_list[&#39;name&#39;]}&#39; (ID: {new_list[&#39;id&#39;]})&quot;, is_json_mode=ns.json)
        if ns.json:
            print_json(new_list)
    else:
        print_human(f&quot;❌ Failed to create list &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_list_update(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.update_list(ns.list_id, ns.name)
    msg = f&quot;✅ Renamed list {ns.list_id} to &#39;{ns.name}&#39;.&quot; if ok else f&quot;❌ Failed to rename list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_list_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_list(ns.list_id)
    msg = f&quot;✅ Deleted list {ns.list_id}.&quot; if ok else f&quot;❌ Failed to delete list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_list_star(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.star_list(ns.list_id)
    msg = f&quot;✅ Toggled star on list {ns.list_id}.&quot; if ok else f&quot;❌ Failed to toggle star on list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_sublist_add(client: PriorityListApiClient, ns: argparse.Namespace):
    new_sublist = client.create_sublist(ns.list_id, ns.name)
    if new_sublist:
        msg = f&quot;✅ Created sublist &#39;{new_sublist[&#39;name&#39;]}&#39; (ID: {new_sublist[&#39;id&#39;]}) in list {ns.list_id}.&quot;
        print_human(msg, is_json_mode=ns.json)
        if ns.json:
            print_json(new_sublist)
    else:
        print_human(f&quot;❌ Failed to create sublist &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_sublist_update(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.update_sublist(ns.sublist_id, ns.name)
    msg = f&quot;✅ Renamed sublist {ns.sublist_id} to &#39;{ns.name}&#39;.&quot; if ok else f&quot;❌ Failed to rename sublist {ns.sublist_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_sublist_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_sublist(ns.sublist_id)
    msg = f&quot;✅ Deleted sublist {ns.sublist_id}.&quot; if ok else f&quot;❌ Failed to delete sublist {ns.sublist_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_task_add(client: PriorityListApiClient, ns: argparse.Namespace):
    params = {
        &quot;score_i&quot;: ns.importance,
        &quot;score_t&quot;: ns.time,
        &quot;d_date&quot;: ns.due_date or &quot;&quot;,
        &quot;dependency_id&quot;: ns.dependency_id or &quot;&quot;,
    }
    new_task = client.create_task(ns.sublist_id, ns.name, **params)
    if new_task:
        msg = f&quot;✅ Created task &#39;{new_task[&#39;name&#39;]}&#39; (ID: {new_task[&#39;id&#39;]}) in sublist {ns.sublist_id}.&quot;
        print_human(msg, is_json_mode=ns.json)
        if ns.json:
            print_json(new_task)
    else:
        print_human(f&quot;❌ Failed to create task &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_task_update(client: PriorityListApiClient, ns: argparse.Namespace):
    updates = {k: v for k, v in vars(ns).items() if k in [
        &#39;name&#39;, &#39;sublist_id&#39;, &#39;importance&#39;, &#39;time&#39;, &#39;due_date&#39;, &#39;dependency_id&#39;
    ] and v is not None}
    
    if not updates:
        print_human(&quot;❌ Error: At least one field to update must be provided.&quot;, is_json_mode=ns.json)
        sys.exit(1)
        
    # Remap arg names to API field names
    if &#39;importance&#39; in updates: updates[&#39;score_i&#39;] = updates.pop(&#39;importance&#39;)
    if &#39;time&#39; in updates: updates[&#39;score_t&#39;] = updates.pop(&#39;time&#39;)
    if &#39;due_date&#39; in updates: updates[&#39;d_date&#39;] = updates.pop(&#39;due_date&#39;)

    ok = client.update_task(ns.task_id, updates)
    msg = f&quot;✅ Updated task {ns.task_id}.&quot; if ok else f&quot;❌ Failed to update task {ns.task_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_task_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_task(ns.task_id)
    msg = f&quot;✅ Deleted task {ns.task_id}.&quot; if ok else f&quot;❌ Failed to delete task {ns.task_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

# ─────────────────────────────────────────────────────────────
# Argument Parser
# ─────────────────────────────────────────────────────────────

def build_parser() -&gt; argparse.ArgumentParser:
    p = argparse.ArgumentParser(description=&quot;A robust CLI for prioritylist.app.&quot;, formatter_class=argparse.RawTextHelpFormatter)
    p.add_argument(&quot;--phpsessid&quot;, help=&quot;Your PHPSESSID cookie.&quot;)
    p.add_argument(&quot;--rkey&quot;, help=&quot;Your rkey cookie.&quot;)
    p.add_argument(&quot;--json&quot;, action=&quot;store_true&quot;, help=&quot;Output machine-readable JSON only.&quot;)

    sp = p.add_subparsers(dest=&quot;resource&quot;, required=True, help=&quot;The resource to manage.&quot;)

    # --- List Parser ---
    ls = sp.add_parser(&quot;list&quot;, help=&quot;Manage lists&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    ls.add_parser(&quot;pull-all&quot;, help=&quot;Fetch all lists and groups&quot;).set_defaults(func=handle_list_pull_all)
    ls_sh = ls.add_parser(&quot;show&quot;, help=&quot;Show full JSON details for one list&quot;)
    ls_sh.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to show&quot;)
    ls_sh.set_defaults(func=handle_list_show)
    ls_add = ls.add_parser(&quot;add&quot;, help=&quot;Add a new list&quot;)
    ls_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new list&quot;)
    ls_add.set_defaults(func=handle_list_add)
    ls_upd = ls.add_parser(&quot;update&quot;, help=&quot;Rename a list&quot;)
    ls_upd.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to update&quot;)
    ls_upd.add_argument(&quot;--name&quot;, required=True, help=&quot;New name for the list&quot;)
    ls_upd.set_defaults(func=handle_list_update)
    ls_del = ls.add_parser(&quot;delete&quot;, help=&quot;Delete a list&quot;)
    ls_del.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to delete&quot;)
    ls_del.set_defaults(func=handle_list_delete)
    ls_star = ls.add_parser(&quot;star&quot;, help=&quot;Toggle star status on a list&quot;)
    ls_star.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to star/unstar&quot;)
    ls_star.set_defaults(func=handle_list_star)

    # --- Sublist Parser ---
    sb = sp.add_parser(&quot;sublist&quot;, help=&quot;Manage sublists&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    sb_add = sb.add_parser(&quot;add&quot;, help=&quot;Add a new sublist&quot;)
    sb_add.add_argument(&quot;--list-id&quot;, type=int, required=True, help=&quot;ID of the parent list&quot;)
    sb_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new sublist&quot;)
    sb_add.set_defaults(func=handle_sublist_add)
    sb_upd = sb.add_parser(&quot;update&quot;, help=&quot;Rename a sublist&quot;)
    sb_upd.add_argument(&quot;sublist_id&quot;, type=int, help=&quot;ID of the sublist to update&quot;)
    sb_upd.add_argument(&quot;--name&quot;, required=True, help=&quot;New name for the sublist&quot;)
    sb_upd.set_defaults(func=handle_sublist_update)
    sb_del = sb.add_parser(&quot;delete&quot;, help=&quot;Delete a sublist&quot;)
    sb_del.add_argument(&quot;sublist_id&quot;, type=int, help=&quot;ID of the sublist to delete&quot;)
    sb_del.set_defaults(func=handle_sublist_delete)

    # --- Task Parser ---
    tk = sp.add_parser(&quot;task&quot;, help=&quot;Manage tasks&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    tk_add = tk.add_parser(&quot;add&quot;, help=&quot;Add a new task&quot;)
    tk_add.add_argument(&quot;--sublist-id&quot;, type=int, required=True, help=&quot;ID of the parent sublist&quot;)
    tk_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new task&quot;)
    tk_add.add_argument(&quot;-i&quot;, &quot;--importance&quot;, type=int, default=5, help=&quot;Importance score (1-10)&quot;)
    tk_add.add_argument(&quot;-t&quot;, &quot;--time&quot;, type=int, default=5, help=&quot;Time/Effort score (1-10)&quot;)
    tk_add.add_argument(&quot;--due-date&quot;, help=&quot;Due date in YYYY-MM-DD format&quot;)
    tk_add.add_argument(&quot;--dependency-id&quot;, type=int, help=&quot;ID of a prerequisite task&quot;)
    tk_add.set_defaults(func=handle_task_add)
    tk_upd = tk.add_parser(&quot;update&quot;, help=&quot;Update an existing task&quot;)
    tk_upd.add_argument(&quot;task_id&quot;, type=int, help=&quot;ID of the task to update&quot;)
    tk_upd.add_argument(&quot;--sublist-id&quot;, type=int, help=&quot;Move task to a new parent sublist&quot;)
    tk_upd.add_argument(&quot;--name&quot;, help=&quot;New name for the task&quot;)
    tk_upd.add_argument(&quot;-i&quot;, &quot;--importance&quot;, type=int, help=&quot;New importance score (1-10)&quot;)
    tk_upd.add_argument(&quot;-t&quot;, &quot;--time&quot;, type=int, help=&quot;New time/Effort score (1-10)&quot;)
    tk_upd.add_argument(&quot;--due-date&quot;, help=&quot;New due date in YYYY-MM-DD format&quot;)
    tk_upd.add_argument(&quot;--dependency-id&quot;, type=int, help=&quot;New ID of a prerequisite task&quot;)
    tk_upd.set_defaults(func=handle_task_update)
    tk_del = tk.add_parser(&quot;delete&quot;, help=&quot;Delete a task&quot;)
    tk_del.add_argument(&quot;task_id&quot;, type=int, help=&quot;ID of the task to delete&quot;)
    tk_del.set_defaults(func=handle_task_delete)

    return p

# ─────────────────────────────────────────────────────────────
# Main Execution
# ─────────────────────────────────────────────────────────────

def main():
    &quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;
    if len(sys.argv) == 1:
        try:
            from ptpython.repl import embed
            print(&quot;▶️  No command provided. Starting interactive REPL...&quot;)
            creds_ns = argparse.Namespace(phpsessid=None, rkey=None)
            phpsessid, rkey = get_credentials(creds_ns)
            client = PriorityListApiClient(phpsessid, rkey)
            namespace = {&#39;client&#39;: client, &#39;print_json&#39;: print_json}
            print(&quot;✅ An API client is available as `client`.&quot;)
            embed(globals=namespace, locals=namespace)
        except ImportError:
            print(&quot;ℹ️ Optional dependency &#39;ptpython&#39; not found.&quot;, file=sys.stderr)
            print(&quot;  Run &#39;pip install ptpython&#39; for an enhanced interactive experience.&quot;, file=sys.stderr)
            print(&quot;\nDisplaying help instead:\n&quot;)
            build_parser().print_help()
        sys.exit(0)

    parser = build_parser()
    args = parser.parse_args()
    
    phpsessid, rkey = get_credentials(args)
    client = PriorityListApiClient(phpsessid, rkey)

    if hasattr(args, &#39;func&#39;):
        args.func(client, args)
    else:
        parser.print_help()

if __name__ == &quot;__main__&quot;:
    main()" data-download-link="" data-download-label="Download Python">
  <code class="language-python">#!/usr/bin/env python3
&quot;&quot;&quot;
PriorityList CLI - The Optimized &amp; Integrated Solution

This script is the result of integrating the best features from multiple development
approaches into a single, cohesive, and robust command-line interface.

It combines:
• Full CRUD (Create, Read, Update, Delete) operations for all resources.
• A robust API client with detailed error handling and reliable response parsing.
• A clean, nested command structure (e.g., `list add`, `task delete`).
• An interactive REPL mode (via `ptpython`) for exploratory API calls.
• Strict separation of human-readable and machine-readable (`--json`) output.
• Secure credential management from args, environment, or config file.
&quot;&quot;&quot;

from __future__ import annotations

import argparse
import configparser
import json
import os
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import requests

# ─────────────────────────────────────────────────────────────
# Helper Functions
# ─────────────────────────────────────────────────────────────

def print_json(obj: Any) -&gt; None:
    &quot;&quot;&quot;Prints an object as a formatted JSON string to stdout.&quot;&quot;&quot;
    print(json.dumps(obj, indent=2, ensure_ascii=False))


def print_human(msg: str, *, is_json_mode: bool) -&gt; None:
    &quot;&quot;&quot;Prints a message to stdout only if not in JSON mode.&quot;&quot;&quot;
    if not is_json_mode:
        print(msg)

# ─────────────────────────────────────────────────────────────
# API Client
# ─────────────────────────────────────────────────────────────

class PriorityListApiClient:
    &quot;&quot;&quot;A robust client for interacting with the prioritylist.app API.&quot;&quot;&quot;

    def __init__(self, phpsessid: str, rkey: str, base_url: str = &quot;https://prioritylist.app&quot;) -&gt; None:
        self.base_url = base_url.rstrip(&quot;/&quot;)
        self.session = requests.Session()
        self.session.headers.update({
            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0&quot;,
            &quot;Accept&quot;: &quot;text/plain, */*; q=0.01&quot;,
            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,
            &quot;Origin&quot;: self.base_url,
        })
        self.session.cookies.set(&quot;PHPSESSID&quot;, phpsessid, domain=&quot;prioritylist.app&quot;)
        self.session.cookies.set(&quot;rkey&quot;, rkey, domain=&quot;prioritylist.app&quot;)

    def _post(self, endpoint: str, data: Optional[Dict[str, Any]] = None) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Makes a POST request, handles errors, and returns the &#39;data&#39; field on success.&quot;&quot;&quot;
        url = f&quot;{self.base_url}/api{endpoint}&quot;
        try:
            response = self.session.post(url, data=data)
            response.raise_for_status()
            json_response = response.json()
            if json_response.get(&quot;result&quot;) == &quot;success&quot;:
                return json_response.get(&quot;data&quot;)
            else:
                print(f&quot;❌ API Error at {endpoint}: {json_response.get(&#39;result&#39;, &#39;Unknown error&#39;)}&quot;, file=sys.stderr)
        except requests.exceptions.HTTPError as e:
            print(f&quot;❌ HTTP Error for {endpoint}: {e.response.status_code} {e.response.reason}&quot;, file=sys.stderr)
            print(f&quot;   Response body: {e.response.text}&quot;, file=sys.stderr)
        except requests.exceptions.RequestException as e:
            print(f&quot;❌ Request failed for {endpoint}: {e}&quot;, file=sys.stderr)
        except json.JSONDecodeError:
            print(f&quot;❌ Failed to decode JSON from response. URL: {url}&quot;, file=sys.stderr)
        return None

    # --- List Operations ---
    def get_all_lists(self) -&gt; Optional[List[Dict[str, Any]]]:
        return self._post(&quot;/groups/pull&quot;)

    def get_list_details(self, list_id: int) -&gt; Optional[Dict[str, Any]]:
        return self._post(&quot;/list/pull&quot;, {&quot;id&quot;: list_id})

    def create_list(self, name: str, group_id: str = &quot;&quot;) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new list and robustly finds and returns it from the response.&quot;&quot;&quot;
        response_data = self._post(&quot;/list/add&quot;, {&quot;name&quot;: name, &quot;group_id&quot;: group_id})
        if response_data:
            try:
                for group in response_data:
                    for lst in group.get(&#39;lists&#39;, []):
                        if lst[&#39;name&#39;] == name:
                            return lst
            except (IndexError, KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created list from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_list(self, list_id: int, name: str) -&gt; bool:
        return self._post(&quot;/list/update&quot;, {&quot;id&quot;: list_id, &quot;name&quot;: name}) is not None

    def delete_list(self, list_id: int) -&gt; bool:
        return self._post(&quot;/list/delete&quot;, {&quot;id&quot;: list_id}) is not None

    def star_list(self, list_id: int) -&gt; bool:
        return self._post(&quot;/list/star&quot;, {&quot;id&quot;: list_id}) is not None

    # --- Sublist Operations ---
    def create_sublist(self, list_id: int, name: str) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new sublist and robustly finds and returns it.&quot;&quot;&quot;
        response_data = self._post(&quot;/sublist/add&quot;, {&quot;list_id&quot;: list_id, &quot;name&quot;: name})
        if response_data:
            try:
                for sublist in response_data.get(&#39;sublists&#39;, []):
                    if sublist[&#39;name&#39;] == name:
                        return sublist
            except (KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created sublist from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_sublist(self, sublist_id: int, name: str) -&gt; bool:
        return self._post(&quot;/sublist/update&quot;, {&quot;id&quot;: sublist_id, &quot;name&quot;: name}) is not None

    def delete_sublist(self, sublist_id: int) -&gt; bool:
        return self._post(&quot;/sublist/delete&quot;, {&quot;id&quot;: sublist_id}) is not None

    # --- Task Operations ---
    def create_task(self, sublist_id: int, name: str, **kwargs) -&gt; Optional[Dict[str, Any]]:
        &quot;&quot;&quot;Creates a new task and robustly finds and returns it.&quot;&quot;&quot;
        payload = {&quot;sublist_id&quot;: sublist_id, &quot;name&quot;: name}
        payload.update(kwargs)
        if &#39;d_date&#39; in payload and payload[&#39;d_date&#39;]:
            payload.setdefault(&#39;d_zone&#39;, &#39;-0300&#39;)
        response_data = self._post(&quot;/item/add&quot;, payload)
        if response_data:
            try:
                for item in response_data.get(&#39;items&#39;, []):
                    if item[&#39;name&#39;] == name:
                        return item
            except (KeyError, TypeError) as e:
                print(f&quot;❌ Could not parse created task from API response: {e}&quot;, file=sys.stderr)
        return None

    def update_task(self, task_id: int, updates: Dict[str, Any]) -&gt; bool:
        &quot;&quot;&quot;Updates an existing task with only the provided fields.&quot;&quot;&quot;
        payload = updates.copy()
        payload[&#39;id&#39;] = task_id
        if &#39;d_date&#39; in payload and payload[&#39;d_date&#39;]:
            payload.setdefault(&#39;d_zone&#39;, &#39;-0300&#39;)
        return self._post(&quot;/item/update&quot;, data=payload) is not None

    def delete_task(self, task_id: int) -&gt; bool:
        return self._post(&quot;/item/delete&quot;, {&quot;id&quot;: task_id}) is not None

# ─────────────────────────────────────────────────────────────
# Credentials Helper
# ─────────────────────────────────────────────────────────────

def get_credentials(ns: argparse.Namespace) -&gt; Tuple[str, str]:
    &quot;&quot;&quot;Retrieves credentials from args, environment variables, or config file.&quot;&quot;&quot;
    if ns.phpsessid and ns.rkey:
        return ns.phpsessid, ns.rkey
    
    env_sess, env_rkey = os.getenv(&quot;PL_PHPSESSID&quot;), os.getenv(&quot;PL_RKEY&quot;)
    if env_sess and env_rkey:
        return env_sess, env_rkey
        
    cfg_file = Path.home() / &quot;.config&quot; / &quot;prioritylist&quot; / &quot;config.ini&quot;
    if cfg_file.exists():
        cp = configparser.ConfigParser()
        cp.read(cfg_file)
        if &quot;auth&quot; in cp and &quot;phpsessid&quot; in cp[&quot;auth&quot;] and &quot;rkey&quot; in cp[&quot;auth&quot;]:
            return cp[&quot;auth&quot;][&quot;phpsessid&quot;], cp[&quot;auth&quot;][&quot;rkey&quot;]
            
    print(&quot;❌ Error: Authentication credentials not found.&quot;, file=sys.stderr)
    print(&quot;  Please provide them via flags, environment variables, or a config file.&quot;, file=sys.stderr)
    sys.exit(1)

# ─────────────────────────────────────────────────────────────
# Command Handlers
# ─────────────────────────────────────────────────────────────

def handle_list_pull_all(client: PriorityListApiClient, ns: argparse.Namespace):
    data = client.get_all_lists()
    if data is None:
        print_human(&quot;❌ Could not fetch lists.&quot;, is_json_mode=ns.json)
        return
    if ns.json:
        print_json(data)
    else:
        for group in data:
            print_human(f&quot;\n📁 {group.get(&#39;name&#39;) or &#39;Uncategorized&#39;}&quot;, is_json_mode=ns.json)
            for lst in group.get(&quot;lists&quot;, []):
                star = &quot;⭐&quot; if lst.get(&quot;starred&quot;) else &quot; &quot;
                print_human(f&quot;  {star} ID: {lst[&#39;id&#39;]:&lt;6} {lst[&#39;name&#39;]}&quot;, is_json_mode=ns.json)

def handle_list_show(client: PriorityListApiClient, ns: argparse.Namespace):
    data = client.get_list_details(ns.list_id)
    if data is None:
        print_human(f&quot;❌ List {ns.list_id} not found.&quot;, is_json_mode=ns.json)
        return
    print_json(data)

def handle_list_add(client: PriorityListApiClient, ns: argparse.Namespace):
    new_list = client.create_list(ns.name)
    if new_list:
        print_human(f&quot;✅ Created list &#39;{new_list[&#39;name&#39;]}&#39; (ID: {new_list[&#39;id&#39;]})&quot;, is_json_mode=ns.json)
        if ns.json:
            print_json(new_list)
    else:
        print_human(f&quot;❌ Failed to create list &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_list_update(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.update_list(ns.list_id, ns.name)
    msg = f&quot;✅ Renamed list {ns.list_id} to &#39;{ns.name}&#39;.&quot; if ok else f&quot;❌ Failed to rename list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_list_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_list(ns.list_id)
    msg = f&quot;✅ Deleted list {ns.list_id}.&quot; if ok else f&quot;❌ Failed to delete list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_list_star(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.star_list(ns.list_id)
    msg = f&quot;✅ Toggled star on list {ns.list_id}.&quot; if ok else f&quot;❌ Failed to toggle star on list {ns.list_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_sublist_add(client: PriorityListApiClient, ns: argparse.Namespace):
    new_sublist = client.create_sublist(ns.list_id, ns.name)
    if new_sublist:
        msg = f&quot;✅ Created sublist &#39;{new_sublist[&#39;name&#39;]}&#39; (ID: {new_sublist[&#39;id&#39;]}) in list {ns.list_id}.&quot;
        print_human(msg, is_json_mode=ns.json)
        if ns.json:
            print_json(new_sublist)
    else:
        print_human(f&quot;❌ Failed to create sublist &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_sublist_update(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.update_sublist(ns.sublist_id, ns.name)
    msg = f&quot;✅ Renamed sublist {ns.sublist_id} to &#39;{ns.name}&#39;.&quot; if ok else f&quot;❌ Failed to rename sublist {ns.sublist_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_sublist_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_sublist(ns.sublist_id)
    msg = f&quot;✅ Deleted sublist {ns.sublist_id}.&quot; if ok else f&quot;❌ Failed to delete sublist {ns.sublist_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_task_add(client: PriorityListApiClient, ns: argparse.Namespace):
    params = {
        &quot;score_i&quot;: ns.importance,
        &quot;score_t&quot;: ns.time,
        &quot;d_date&quot;: ns.due_date or &quot;&quot;,
        &quot;dependency_id&quot;: ns.dependency_id or &quot;&quot;,
    }
    new_task = client.create_task(ns.sublist_id, ns.name, **params)
    if new_task:
        msg = f&quot;✅ Created task &#39;{new_task[&#39;name&#39;]}&#39; (ID: {new_task[&#39;id&#39;]}) in sublist {ns.sublist_id}.&quot;
        print_human(msg, is_json_mode=ns.json)
        if ns.json:
            print_json(new_task)
    else:
        print_human(f&quot;❌ Failed to create task &#39;{ns.name}&#39;.&quot;, is_json_mode=ns.json)

def handle_task_update(client: PriorityListApiClient, ns: argparse.Namespace):
    updates = {k: v for k, v in vars(ns).items() if k in [
        &#39;name&#39;, &#39;sublist_id&#39;, &#39;importance&#39;, &#39;time&#39;, &#39;due_date&#39;, &#39;dependency_id&#39;
    ] and v is not None}
    
    if not updates:
        print_human(&quot;❌ Error: At least one field to update must be provided.&quot;, is_json_mode=ns.json)
        sys.exit(1)
        
    # Remap arg names to API field names
    if &#39;importance&#39; in updates: updates[&#39;score_i&#39;] = updates.pop(&#39;importance&#39;)
    if &#39;time&#39; in updates: updates[&#39;score_t&#39;] = updates.pop(&#39;time&#39;)
    if &#39;due_date&#39; in updates: updates[&#39;d_date&#39;] = updates.pop(&#39;due_date&#39;)

    ok = client.update_task(ns.task_id, updates)
    msg = f&quot;✅ Updated task {ns.task_id}.&quot; if ok else f&quot;❌ Failed to update task {ns.task_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

def handle_task_delete(client: PriorityListApiClient, ns: argparse.Namespace):
    ok = client.delete_task(ns.task_id)
    msg = f&quot;✅ Deleted task {ns.task_id}.&quot; if ok else f&quot;❌ Failed to delete task {ns.task_id}.&quot;
    print_human(msg, is_json_mode=ns.json)

# ─────────────────────────────────────────────────────────────
# Argument Parser
# ─────────────────────────────────────────────────────────────

def build_parser() -&gt; argparse.ArgumentParser:
    p = argparse.ArgumentParser(description=&quot;A robust CLI for prioritylist.app.&quot;, formatter_class=argparse.RawTextHelpFormatter)
    p.add_argument(&quot;--phpsessid&quot;, help=&quot;Your PHPSESSID cookie.&quot;)
    p.add_argument(&quot;--rkey&quot;, help=&quot;Your rkey cookie.&quot;)
    p.add_argument(&quot;--json&quot;, action=&quot;store_true&quot;, help=&quot;Output machine-readable JSON only.&quot;)

    sp = p.add_subparsers(dest=&quot;resource&quot;, required=True, help=&quot;The resource to manage.&quot;)

    # --- List Parser ---
    ls = sp.add_parser(&quot;list&quot;, help=&quot;Manage lists&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    ls.add_parser(&quot;pull-all&quot;, help=&quot;Fetch all lists and groups&quot;).set_defaults(func=handle_list_pull_all)
    ls_sh = ls.add_parser(&quot;show&quot;, help=&quot;Show full JSON details for one list&quot;)
    ls_sh.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to show&quot;)
    ls_sh.set_defaults(func=handle_list_show)
    ls_add = ls.add_parser(&quot;add&quot;, help=&quot;Add a new list&quot;)
    ls_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new list&quot;)
    ls_add.set_defaults(func=handle_list_add)
    ls_upd = ls.add_parser(&quot;update&quot;, help=&quot;Rename a list&quot;)
    ls_upd.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to update&quot;)
    ls_upd.add_argument(&quot;--name&quot;, required=True, help=&quot;New name for the list&quot;)
    ls_upd.set_defaults(func=handle_list_update)
    ls_del = ls.add_parser(&quot;delete&quot;, help=&quot;Delete a list&quot;)
    ls_del.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to delete&quot;)
    ls_del.set_defaults(func=handle_list_delete)
    ls_star = ls.add_parser(&quot;star&quot;, help=&quot;Toggle star status on a list&quot;)
    ls_star.add_argument(&quot;list_id&quot;, type=int, help=&quot;ID of the list to star/unstar&quot;)
    ls_star.set_defaults(func=handle_list_star)

    # --- Sublist Parser ---
    sb = sp.add_parser(&quot;sublist&quot;, help=&quot;Manage sublists&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    sb_add = sb.add_parser(&quot;add&quot;, help=&quot;Add a new sublist&quot;)
    sb_add.add_argument(&quot;--list-id&quot;, type=int, required=True, help=&quot;ID of the parent list&quot;)
    sb_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new sublist&quot;)
    sb_add.set_defaults(func=handle_sublist_add)
    sb_upd = sb.add_parser(&quot;update&quot;, help=&quot;Rename a sublist&quot;)
    sb_upd.add_argument(&quot;sublist_id&quot;, type=int, help=&quot;ID of the sublist to update&quot;)
    sb_upd.add_argument(&quot;--name&quot;, required=True, help=&quot;New name for the sublist&quot;)
    sb_upd.set_defaults(func=handle_sublist_update)
    sb_del = sb.add_parser(&quot;delete&quot;, help=&quot;Delete a sublist&quot;)
    sb_del.add_argument(&quot;sublist_id&quot;, type=int, help=&quot;ID of the sublist to delete&quot;)
    sb_del.set_defaults(func=handle_sublist_delete)

    # --- Task Parser ---
    tk = sp.add_parser(&quot;task&quot;, help=&quot;Manage tasks&quot;).add_subparsers(dest=&quot;action&quot;, required=True)
    tk_add = tk.add_parser(&quot;add&quot;, help=&quot;Add a new task&quot;)
    tk_add.add_argument(&quot;--sublist-id&quot;, type=int, required=True, help=&quot;ID of the parent sublist&quot;)
    tk_add.add_argument(&quot;--name&quot;, required=True, help=&quot;Name for the new task&quot;)
    tk_add.add_argument(&quot;-i&quot;, &quot;--importance&quot;, type=int, default=5, help=&quot;Importance score (1-10)&quot;)
    tk_add.add_argument(&quot;-t&quot;, &quot;--time&quot;, type=int, default=5, help=&quot;Time/Effort score (1-10)&quot;)
    tk_add.add_argument(&quot;--due-date&quot;, help=&quot;Due date in YYYY-MM-DD format&quot;)
    tk_add.add_argument(&quot;--dependency-id&quot;, type=int, help=&quot;ID of a prerequisite task&quot;)
    tk_add.set_defaults(func=handle_task_add)
    tk_upd = tk.add_parser(&quot;update&quot;, help=&quot;Update an existing task&quot;)
    tk_upd.add_argument(&quot;task_id&quot;, type=int, help=&quot;ID of the task to update&quot;)
    tk_upd.add_argument(&quot;--sublist-id&quot;, type=int, help=&quot;Move task to a new parent sublist&quot;)
    tk_upd.add_argument(&quot;--name&quot;, help=&quot;New name for the task&quot;)
    tk_upd.add_argument(&quot;-i&quot;, &quot;--importance&quot;, type=int, help=&quot;New importance score (1-10)&quot;)
    tk_upd.add_argument(&quot;-t&quot;, &quot;--time&quot;, type=int, help=&quot;New time/Effort score (1-10)&quot;)
    tk_upd.add_argument(&quot;--due-date&quot;, help=&quot;New due date in YYYY-MM-DD format&quot;)
    tk_upd.add_argument(&quot;--dependency-id&quot;, type=int, help=&quot;New ID of a prerequisite task&quot;)
    tk_upd.set_defaults(func=handle_task_update)
    tk_del = tk.add_parser(&quot;delete&quot;, help=&quot;Delete a task&quot;)
    tk_del.add_argument(&quot;task_id&quot;, type=int, help=&quot;ID of the task to delete&quot;)
    tk_del.set_defaults(func=handle_task_delete)

    return p

# ─────────────────────────────────────────────────────────────
# Main Execution
# ─────────────────────────────────────────────────────────────

def main():
    &quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;
    if len(sys.argv) == 1:
        try:
            from ptpython.repl import embed
            print(&quot;▶️  No command provided. Starting interactive REPL...&quot;)
            creds_ns = argparse.Namespace(phpsessid=None, rkey=None)
            phpsessid, rkey = get_credentials(creds_ns)
            client = PriorityListApiClient(phpsessid, rkey)
            namespace = {&#39;client&#39;: client, &#39;print_json&#39;: print_json}
            print(&quot;✅ An API client is available as `client`.&quot;)
            embed(globals=namespace, locals=namespace)
        except ImportError:
            print(&quot;ℹ️ Optional dependency &#39;ptpython&#39; not found.&quot;, file=sys.stderr)
            print(&quot;  Run &#39;pip install ptpython&#39; for an enhanced interactive experience.&quot;, file=sys.stderr)
            print(&quot;\nDisplaying help instead:\n&quot;)
            build_parser().print_help()
        sys.exit(0)

    parser = build_parser()
    args = parser.parse_args()
    
    phpsessid, rkey = get_credentials(args)
    client = PriorityListApiClient(phpsessid, rkey)

    if hasattr(args, &#39;func&#39;):
        args.func(client, args)
    else:
        parser.print_help()

if __name__ == &quot;__main__&quot;:
    main()</code>
</section>

<h4 id="command-line-interface-cli-and-user-experience-ux"><strong>Command-Line Interface (CLI) and User Experience (UX)</strong></h4>

<ul>
  <li><strong>Nested Command Structure:</strong> The CLI now uses a more intuitive <code class="language-plaintext highlighter-rouge">resource action</code> format (e.g., <code class="language-plaintext highlighter-rouge">list add</code>, <code class="language-plaintext highlighter-rouge">task update</code>). This is a standard practice for modern CLIs and a vast improvement over the original flat command list.</li>
  <li><strong>Interactive REPL Mode:</strong> A major feature addition is the <code class="language-plaintext highlighter-rouge">ptpython</code>-based interactive REPL, which launches if the script is run without arguments. It provides an authenticated <code class="language-plaintext highlighter-rouge">client</code> object, allowing for powerful, exploratory API interactions without writing new scripts.</li>
  <li><strong>Clear and Concise Output:</strong> The use of emojis (✅, ❌, 📁, ⭐) provides immediate visual feedback on the status of operations.</li>
  <li><strong>Scripting-Friendly JSON Mode:</strong> The <code class="language-plaintext highlighter-rouge">--json</code> flag now guarantees that the only output to <code class="language-plaintext highlighter-rouge">stdout</code> is a clean JSON object, making it trivial to pipe the output of this tool to other programs like <code class="language-plaintext highlighter-rouge">jq</code>.</li>
</ul>

<h4 id="4-security-enhancements"><strong>4. Security Enhancements</strong></h4>

<ul>
  <li><strong>Secure Credential Sourcing:</strong> The <code class="language-plaintext highlighter-rouge">get_credentials</code> function continues to provide a secure and flexible way to manage API keys, preventing them from being hard-coded. It checks arguments, environment variables, and a dedicated config file in a safe order of precedence.</li>
  <li><strong>Robust Input Handling:</strong> The API client’s improved error handling and response parsing make it less susceptible to crashes or unexpected behavior caused by malformed API responses.</li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">AI wiki</title><link href="https://ib.bsb.br/ai-wiki/" rel="alternate" type="text/html" title="AI wiki" /><published>2025-06-17T00:00:00+00:00</published><updated>2025-06-17T14:43:35+00:00</updated><id>https://ib.bsb.br/ai-wiki</id><content type="html" xml:base="https://ib.bsb.br/ai-wiki/"><![CDATA[<p>Title: 🤖 Artificial Intelligence</p>

<p>URL Source: https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence</p>

<p>Markdown Content:</p>
<hr />

<hr />

<p><strong><a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/index">◄◄ Back to Wiki Index</a></strong></p>

<hr />

<hr />

<h2 id="-ai-chatbots">► AI Chatbots</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-chatbots"></a></p>
<ul>
  <li><strong>Note</strong> - It’s <strong>never</strong> a good idea to upload personal / confidential files or info to any cloud AI, as many train on your questions and code. If you want privacy, its best to run bots yourself locally, and remember to use throwaway emails or <a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/internet-tools/#wiki_.25B7_email_aliasing">aliasing</a> if signing up for bots.</li>
</ul>

<hr />

<h2 id="-online-chatbots">▷ Online Chatbots</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-online-chatbots"></a></p>
<ul>
  <li>🌐 <strong><a href="https://github.com/cheahjs/free-llm-api-resources">Free LLM API Resources</a></strong> - Chatbot Resources / Mirrors</li>
  <li>⭐ <strong><a href="https://aistudio.google.com/app/prompts/new_chat">AI Studio</a></strong> or <a href="https://gemini.google.com/">Gemini</a> - Google Chatbots / <a href="https://www.reddit.com/r/Bard/">Subreddit</a> / <a href="https://discord.com/invite/gemini">Discord</a></li>
  <li>⭐ <strong><a href="https://chatgpt.com/">ChatGPT</a></strong> - GPT-4o / o4-mini Chatbot / <a href="https://www.reddit.com/r/OpenAI/">/r/OpenAI</a> / <a href="https://www.reddit.com/r/ChatGPT/">Subreddit</a> / <a href="https://discord.com/invite/openai">Discord</a></li>
  <li>⭐ <strong><a href="https://chat.qwen.ai/">Qwen</a></strong> - Alibaba’s Chatbots / Qwen3-235B-A22B / Qwen3-32B</li>
  <li>⭐ <strong><a href="https://chat.deepseek.com/">DeepSeek</a></strong> - DeepSeek-V3 / DeepSeek-R1 / Unlimited / <a href="https://www.reddit.com/r/DeepSeek/">Subreddit</a> / <a href="https://github.com/deepseek-ai">GitHub</a></li>
  <li>⭐ <strong><a href="https://grok.com/">Grok</a></strong> - X.com Chatbot / Grok 2 (30 Hourly) / Grok 3 (18 Per Two Hours) / <a href="https://www.reddit.com/r/grok/">Subreddit</a> / <a href="https://discord.com/invite/kqCc86jM55">Discord</a></li>
  <li>⭐ <strong><a href="https://lmarena.ai/">LMArena</a></strong> - Multiple Chatbots / No Sign-Up / <a href="https://discord.gg/6GXcFg3TH8">Discord</a> / <a href="https://github.com/lm-sys/FastChat">GitHub</a></li>
  <li>⭐ <strong><a href="https://copilot.microsoft.com/">Microsoft Copilot</a></strong> - GPT-4o / OpenAI o3-Mini-High / No Sign-Up</li>
  <li>⭐ <strong><a href="https://chat.mistral.ai/">Mistral</a></strong> - Mistral Large 24.11 / <a href="https://discord.gg/mistralai">Discord</a></li>
  <li>⭐ <strong><a href="https://huggingface.co/chat/">HuggingChat</a></strong> - DeepSeek-R1-Distill-Qwen-32B / Qwen QwQ-32B / Qwen3-235B-A22B / Multiple Open-Source Chatbots / <a href="https://github.com/huggingface/chat-ui">GitHub</a></li>
  <li><a href="https://claude.ai/">Claude</a> - Claude 4 Sonnet / Phone # Required / <a href="https://github.com/lugia19/Claude-Usage-Extension">Usage Tracker</a> / <a href="https://www.reddit.com/r/ClaudeAI/">Subreddit</a></li>
  <li><a href="https://duck.ai/">DuckDuckGo AI</a> - Multiple Chatbots / o4-Mini / No Sign-Up</li>
  <li><a href="https://chat.oaichat.cc/">ChatK</a> or <a href="https://lobe.wr.do/">lobe.wr.do</a> / <a href="https://discord.gg/AYFPHvv2jT">Discord</a> / <a href="https://github.com/lobehub/lobe-chat">GitHub</a> - GPT-4o / DeepSeek-R1-32b / Multiple Chatbots</li>
  <li><a href="https://aiassistantbot.pages.dev/">AI Assistant</a> - Deepseek-R1 / Qwen QwQ-32B / Multiple Chatbots / No Sign-Up</li>
  <li><a href="https://mirexa.vercel.app/">⁠Mirexa</a> - Deepseek R1 / GPT 4.1 / Mistral / Grok 3 mini</li>
  <li><a href="https://ish.junioralive.in/">⁠ISH</a> - o1 / Grok 3 / DeepSeek R1 / Multiple Chatbots / <a href="https://discord.gg/cwDTVKyKJz">Discord</a></li>
  <li><a href="https://sdk.vercel.ai/">AI SDK</a> - Multiple Chatbots / <a href="https://github.com/vercel/ai">GitHub</a></li>
  <li><a href="https://www.giz.ai/">GizAI</a> - Multiple Chatbots</li>
  <li><a href="https://scira.ai/">Scira</a> - Multiple Chatbots / AI Search Engine / No Sign-Up / <a href="https://github.com/zaidmukaddam/scira">GitHub</a></li>
  <li><a href="https://chat.xenai.tech/">OI</a> or <a href="https://freepass.ai/">FreePass</a> - Multiple Chatbots</li>
  <li><a href="https://scispace.com/">SciSpace</a> (No Sign-Up), <a href="https://ekb.scinito.ai/ai/chat">Scinito</a> or <a href="https://elicit.com/">Elicit</a> / <a href="https://github.com/elicit">GitHub</a> - Research Paper Chatbots</li>
  <li><a href="https://learning.google.com/experiments/learn-about">Learn About</a> or <a href="https://gemini.google.com/gem/learning-coach">Learning Coach</a> - Google’s Educational Search AIs</li>
  <li><a href="https://helixmind.online/">HelixMind</a> - Multiple Chatbots / <a href="https://discord.gg/7CmPjK87n3">Discord</a></li>
  <li><a href="https://www.electronhub.ai/">Electron Hub</a> - Deepseek-R1 / o3-Mini-High / Multiple Chatbots / <a href="https://discord.com/invite/apUUqbxCBQ">Discord</a></li>
  <li><a href="https://build.nvidia.com/">NVIDIA NIM</a> - Deepseek-R1 / Multiple Chatbots / No Sign-Up</li>
  <li><a href="https://oi.wr.do/">OIChat</a> - Gemini-2.5-Pro-Exp / DeepSeek R1 / Qwen QwQ-32B / DeepSeek-V3-0324 / Multiple Chatbots</li>
  <li><a href="https://kimi.ai/">Kimi</a> - Kimi 1.5 Chatbot</li>
  <li><a href="https://groq.com/">Groq</a> - Qwen QwQ-32B / Deepseek-R1-Distill / Multiple Chatbots / <a href="https://discord.gg/invite/groq">Discord</a></li>
  <li><a href="https://sambanova.ai/">SambaNova</a> - Deepseek-R1 / Qwen QwQ-32B / DeepSeek-V3-0324 / Multiple Chatbots / Enter Fake Info</li>
  <li><a href="https://lambda.chat/chatui/">Lambda Chat</a> - Deepseek-R1 / Multiple Chatbots / Unlimited / No Sign-Up</li>
  <li><a href="https://www.meta.ai/">Meta AI</a> - Llama 4 Chatbot</li>
  <li><a href="https://chat.minimax.io/">MiniMax AI</a> - Deepseek-R1 / MiniMax-Text-01 Chatbot w/ Large Token Context Window / <a href="https://github.com/MiniMax-AI/MiniMax-01">GitHub</a></li>
  <li><a href="https://pi.ai/">Pi</a> - Inflection AI’s Chatbot</li>
  <li><a href="https://www.reka.ai/">Reka</a> - Reka’s Chatbot / <a href="https://discord.gg/jtjNSD52mf">Discord</a></li>
  <li><a href="https://privategpt.dev/">PrivateGPT</a> / <a href="https://discord.com/invite/bK6mRVpErU">Discord</a> / <a href="https://github.com/zylon-ai/private-gpt">GitHub</a>, <a href="https://notebooklm.google/">NotebookLM</a>, <a href="https://www.onyx.app/">Onyx</a> / <a href="https://discord.com/invite/jDnRGhWhg4">Discord</a> / <a href="https://github.com/onyx-dot-app/onyx">GitHub</a> or <a href="https://www.docsgpt.cloud/">DocsGPT</a> / <a href="https://discord.com/invite/n5BX8dh8rU">Discord</a> / <a href="https://github.com/arc53/DocsGPT">GitHub</a> - Document Chatbots / Note-Taking</li>
</ul>

<hr />

<h2 id="-ai-search-engines">▷ AI Search Engines</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-search-engines"></a></p>
<ul>
  <li>🌐 <strong><a href="https://github.com/felladrin/awesome-ai-web-search">Awesome AI Web Search</a></strong> - AI Search Engine Index</li>
  <li>⭐ <strong><a href="https://www.perplexity.ai/">Perplexity</a></strong> - AI Search Engine / <a href="https://www.cplx.app/">Enhancements</a> / <a href="https://labs.perplexity.ai/">Open Source Models</a> / <a href="https://discord.com/invite/perplexity-ai">Discord</a></li>
  <li>⭐ <strong><a href="https://www.wolframalpha.com/">WolframAlpha</a></strong> - Searchable Knowledge Base / <a href="https://rentry.co/FMHYBase64#wolfram-mobile">Mobile</a></li>
  <li>⭐ <strong><a href="https://you.com/">You</a></strong> - AI Search Engine / Sign-Up Required / <a href="https://discord.com/invite/youdotcom">Discord</a> / <a href="https://github.com/You-OpenSource">GitHub</a></li>
  <li><a href="https://google.com/aimode">Google AI Mode</a>, <a href="https://www.google.com/search?udm=50">2</a> - AI Search Engine / US Only</li>
  <li><a href="https://hyper.space/">Hyperspace</a> - P2P AI Network / <a href="https://play.hyper.space/">Web App</a>, <a href="https://compute.hyper.space/">2</a> / <a href="https://github.com/hyperspaceai">GitHub</a></li>
  <li><a href="https://www.phind.com/">Phind</a> - Llama Search Engine / <a href="https://discord.gg/S25yW8TebZ">Discord</a></li>
  <li><a href="https://www.morphic.sh/">Morphic</a> - GPT-4o-mini AI Search Engine / <a href="https://discord.gg/zRxaseCuGq">Discord</a></li>
  <li><a href="https://komo.ai/">Komo</a> - AI Search Engine</li>
  <li><a href="https://search.jina.ai/">Jina</a> - AI Search Engine</li>
  <li><a href="https://felo.ai/">Felo</a> - AI Search Engine / AI Agents</li>
  <li><a href="https://searc.ai/">searc.ai</a> - AI Search Engine</li>
  <li><a href="https://rabbitholes.dojoma.ai/">RabbitHoles</a> - Mind Map Style Search / <a href="https://discord.com/invite/VQMBGR8u5v">Discord</a> / <a href="https://github.com/AsyncFuncAI/rabbitholes">GitHub</a></li>
  <li><a href="https://hika.fyi/">Hika</a> - Deepseek-R1 AI Search Engine / <a href="https://discord.gg/tUATkScUue">Discord</a></li>
  <li><a href="https://khoj.dev/">Khoj</a> - Gemini-2.0-Flash AI Search Engine / AI Agents / Sign-Up Required / <a href="https://discord.gg/BDgyabRM6e">Discord</a> / <a href="https://github.com/khoj-ai/khoj">GitHub</a></li>
  <li><a href="https://ayesoul.com/">AyeSoul</a> - AI Search Engine</li>
  <li><a href="https://venice.ai/">Venice</a> - LLama 3 AI Search Engine</li>
  <li><a href="https://uncovr.app/">uncovr</a> - GPT-4o-mini / Gemini-2.0-Flash AI Search Engine / <a href="https://discord.gg/a4gDaVWceP">Discord</a></li>
  <li><a href="https://exa.ai/">Exa</a> - AI Search Engine / <a href="https://discord.gg/HCShtBqbfV">Discord</a></li>
  <li><a href="https://search.lepton.run/">Lepton Search</a> - AI Search Engine / <a href="https://github.com/leptonai/search_with_lepton">GitHub</a></li>
  <li><a href="https://github.com/ItzCrazyKns/Perplexica">Perplexica</a> - AI Search Engine / Self-Hosted / <a href="https://discord.gg/26aArMy8tT">Discord</a></li>
</ul>

<hr />

<h2 id="-self-hosting-tools">▷ Self-Hosting Tools</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-self-hosting-tools"></a></p>
<ul>
  <li>⭐ <strong><a href="https://jan.ai/">Jan</a></strong> - Self-Hosted / <a href="https://discord.com/invite/FTk2MvZwJH">Discord</a> / <a href="https://github.com/janhq/jan">GitHub</a></li>
  <li>⭐ <strong><a href="https://docs.sillytavern.app/">SillyTavern</a></strong> - Self-Hosted Interface / <a href="https://discord.gg/sillytavern">Discord</a> / <a href="https://www.reddit.com/r/SillyTavernAI/">Subreddit</a> / <a href="https://github.com/SillyTavern/SillyTavern">GitHub</a></li>
  <li>⭐ <strong><a href="https://openwebui.com/">Open WebUI</a></strong> - Self-Hosted Interface / <a href="https://discord.gg/5rJgQTnV4s">Discord</a> / <a href="https://github.com/open-webui/open-webui">GitHub</a></li>
  <li>⭐ <strong><a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a></strong> - Self-Hosted Transformer-Based LLMs</li>
  <li>⭐ <strong><a href="https://github.com/LostRuins/koboldcpp">KoboldCpp</a></strong> - llama.cpp with API + GUI / <a href="https://github.com/YellowRoseCx/koboldcpp-rocm">ROCm</a> / <a href="https://colab.research.google.com/github/LostRuins/koboldcpp/blob/concedo/colab.ipynb">Colab</a></li>
  <li>⭐ <strong><a href="https://github.com/oobabooga/text-generation-webui">oobabooga</a></strong> - Self-Host Models / <a href="https://colab.research.google.com/github/pcrii/Philo-Colab-Collection/blob/main/4bit_TextGen_Gdrive.ipynb">Colab</a> / <a href="https://www.reddit.com/r/Oobabooga/">Subreddit</a> / <a href="https://discord.gg/jwZCF2dPQN">Discord</a></li>
  <li>⭐ <strong><a href="https://aphrodite.pygmalion.chat/">Aphrodite Engine</a></strong> - Serve LLMs at Scale with Kobold &amp; OpenAI APIs / <a href="https://colab.research.google.com/github/AlpinDale/misc-scripts/blob/main/Aphrodite.ipynb">Colab</a> / <a href="https://github.com/PygmalionAI/aphrodite-engine">GitHub</a></li>
  <li><a href="https://petals.dev/">Petals</a> - Self-Hosted / <a href="https://discord.gg/D9MwApKgWa">Discord</a> / <a href="https://github.com/bigscience-workshop/petals">GitHub</a></li>
  <li><a href="https://getleon.ai/">Leon</a> - Self-Hosted / <a href="https://discord.gg/MNQqqKg">Discord</a> / <a href="https://github.com/leon-ai/leon">GitHub</a></li>
  <li><a href="https://ollama.com/">Ollama</a> - Self-Hosted / <a href="https://discord.com/invite/ollama">Discord</a> / <a href="https://github.com/ollama/ollama">GitHub</a></li>
  <li><a href="https://github.com/aandrew-me/tgpt">tgpt</a> - Self-Hosted</li>
  <li><a href="https://github.com/ParisNeo/lollms-webui">LoLLMs Web UI</a> - Self-Hosted / <a href="https://discord.gg/4rR282WJb6">Discord</a></li>
  <li><a href="https://lmstudio.ai/">LM Studio</a> - Self-Hosted / <a href="https://discord.gg/aPQfnNkxGC">Discord</a> / <a href="https://github.com/lmstudio-ai">GitHub</a></li>
  <li><a href="https://anythingllm.com/">AnythingLLM</a> - Self-Hosted</li>
  <li><a href="https://librechat.ai/">LibreChat</a> - Self-Hosted / <a href="https://discord.com/invite/CEe6vDg9Ky">Discord</a> / <a href="https://github.com/danny-avila/LibreChat">GitHub</a></li>
  <li><a href="https://www.nomic.ai/gpt4all">GPT4All</a> - Self-Hosted / <a href="https://github.com/nomic-ai/gpt4all">GitHub</a> / <a href="https://discord.com/invite/myY5YDR8z8">Discord</a></li>
  <li><a href="https://github.com/Mozilla-Ocho/llamafile">llamafile</a> - Run LLM with Single Files / <a href="https://discord.gg/YuMNeuKStr">Discord</a></li>
</ul>

<hr />

<h2 id="-roleplaying-chatbots">▷ Roleplaying Chatbots</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-roleplaying-chatbots"></a></p>
<ul>
  <li>🌐 <strong><a href="https://rentry.org/Sukino-Findings">Sukino-Findings</a></strong> - AI Roleplay Resources</li>
  <li>⭐ <strong><a href="https://pygmalion.chat/">PygmalionAI</a></strong> - Self-Hosted Roleplaying Models / <a href="https://rentry.co/PygmalionLinks">Resources</a> / <a href="https://discord.com/invite/pygmalionai">Discord</a> / <a href="https://www.reddit.com/r/PygmalionAI/">Subreddit</a> / <a href="https://github.com/PygmalionAI">GitHub</a></li>
  <li>⭐ <strong><a href="https://flowgpt.com/">FlowGPT</a></strong> - Roleplaying Chatbots / Some NSFW / <a href="https://discord.com/invite/tWZGzcpTkf">Discord</a></li>
  <li>⭐ <strong><a href="https://character.ai/">Character.AI</a></strong> - Roleplaying Chatbots / <a href="https://rentry.org/reverseCAI">Extract</a> / <a href="https://discord.com/invite/characterai">Discord</a> / <a href="https://www.reddit.com/r/CharacterAI/">Subreddit</a></li>
  <li>⭐ <strong><a href="https://wikia.schneedc.com/bot-creation/intro">Bot Creation Guide</a></strong> - Character Creation Guide</li>
  <li>⭐ <strong><a href="https://chub.ai/">Chub</a></strong> - Character Cards / Some NSFW / <a href="https://discord.gg/chubai">Discord</a> / <a href="https://www.reddit.com/r/Chub_AI/">Subreddit</a> / <a href="https://github.com/CharHubAI">GitHub</a></li>
  <li><a href="https://rentry.org/llama_v2_sillytavern">Llama + SillyTavern</a> - Llama + SillyTavern Roleplaying Setup Guide / No Sign-Up</li>
  <li><a href="https://koboldai.com/">KoboldAI</a> - GUI for Roleplaying Chatbots / No Sign-Up / <a href="https://discord.com/invite/XuQWadgU9k">Discord</a> / <a href="https://github.com/henk717/KoboldAI">GitHub</a></li>
  <li><a href="https://beta.4wall.ai/">4thWall AI</a> - Roleplaying Chatbots / <a href="https://discord.com/invite/4wallai">Discord</a> / <a href="https://www.reddit.com/r/4WallAI/">Subreddit</a></li>
  <li><a href="https://app.wyvern.chat/">WyvernChat</a> - Roleplaying Chatbots</li>
  <li><a href="https://janitorai.com/">JanitorAI</a> - Roleplaying Chatbots / Some NSFW</li>
  <li><a href="https://fictionlab.ai/">FictionLab</a> - Roleplaying / Story Chatbot / <a href="https://discord.com/invite/SKcb2C7HjH">Discord</a></li>
  <li><a href="https://tavernai.net/">TavernAI</a> - Roleplaying / Story Chatbot / <a href="https://colab.research.google.com/github/vrihatgan/TavernAI/blob/main/colab/colab.ipynb">Colab</a> / <a href="https://discord.gg/zmK2gmr45t">Discord</a> / <a href="https://github.com/TavernAI/TavernAI">GitHub</a></li>
  <li><a href="https://aidungeon.com/">AI Dungeon</a> - Roleplaying / Story Chatbot / No Sign-Up / <a href="https://www.reddit.com/r/AIDungeon/">Subreddit</a> / <a href="https://discord.com/invite/HB2YBZYjyf">Discord</a></li>
  <li><a href="https://www.tryspellbound.com/">Spellbound</a> - Roleplaying / Story Chatbot / No Sign-Up / <a href="https://discord.com/invite/spellbound">Discord</a></li>
  <li><a href="https://kajiwoto.ai/">Kajiwoto</a>, <a href="https://docs.miku.gg/">Miku</a> (No Sign-Up) / <a href="https://discord.gg/3XPdpUdGgV">Discord</a> or <a href="https://agnai.chat/">Agnai</a> / <a href="https://discord.com/invite/DAn38sA8Qj">Discord</a> - Chatbot Builders</li>
  <li><a href="https://www.sesame.com/research/crossing_the_uncanny_valley_of_voice#demo">Crossing the Uncanny Valley</a> - Realistic AI Voice Chat</li>
  <li><a href="https://www.hammerai.com/desktop">HammerAI</a> - Self-Hosted Roleplaying Chatbots</li>
</ul>

<hr />

<h2 id="-coding-ais">▷ Coding AIs</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-coding-ais"></a></p>
<ul>
  <li>🌐 <strong><a href="https://evalplus.github.io/leaderboard.html">EvalPlus Leaderboard</a></strong> / <a href="https://github.com/evalplus/evalplus">GitHub</a>, <a href="https://web.lmarena.ai/">WebDev Arena</a>, <a href="https://livecodebench.github.io/leaderboard.html">⁠LiveCodeBench</a>, <a href="https://aider.chat/docs/leaderboards/">Aider LLM Leaderboards</a> or <a href="https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard">Big Code Models Leaderboard</a> - Coding AI Leaderboards / Benchmarks</li>
  <li>🌐 <strong><a href="https://liveswebench.ai/">LiveSWEBench</a>, <a href="https://github.com/princeton-nlp/SWE-bench">SWE-bench</a>, <a href="https://github.com/multi-swe-bench/multi-swe-bench">multi-swe-bench</a> or <a href="https://www.swebench.com/">SWEBench</a></strong> - Software Engineering AI Leaderboards / Benchmarks</li>
  <li>🌐 <strong><a href="https://github.com/e2b-dev/awesome-ai-agents">Awesome AI Agents</a></strong> - Coding / Programming AIs / <a href="https://discord.gg/U7KEcGErtQ">Discord</a></li>
  <li>🌐 <strong><a href="https://github.com/cheahjs/free-llm-api-resources">Free LLM API Resources</a></strong> - LLM API Resources</li>
  <li>⭐ <strong><a href="https://www.windsurf.com/">Windsurf</a></strong> - Coding AI / <a href="https://www.reddit.com/r/Codeium/">Subreddit</a> / <a href="https://discord.com/invite/3XFf78nAx5">Discord</a></li>
  <li>⭐ <strong><a href="https://pieces.app/">Pieces</a></strong> - Multi-LLM Coding AI / GPT-4 / 4o for Free / No Sign-Up / <a href="https://discord.gg/getpieces">Discord</a></li>
  <li>⭐ <strong><a href="https://zed.dev/">zed</a></strong> - Collabortive Coding AI / <a href="https://github.com/zed-industries/zed">GitHub</a></li>
  <li><a href="https://whatdoesthiscodedo.com/">WDTCD?</a> - Simple Code Explanations / No Sign-Up</li>
  <li><a href="https://sourcery.ai/">Sourcery</a> - Auto-Pull Request Reviews / <a href="https://github.com/sourcery-ai/sourcery">GitHub</a></li>
  <li><a href="https://devv.ai/">Devv</a> - Coding Search Engine / <a href="https://github.com/devv-ai/devv">GitHub</a></li>
  <li><a href="https://www.telosys.org/">Telosys</a> - Code Generator / No Sign-Up / <a href="https://www.telosys.org/sources.html">Source Code</a></li>
  <li><a href="https://llamacoder.together.ai/">Llama Coder</a> - Code Generator / No Sign-Up / <a href="https://github.com/Nutlope/llamacoder">GitHub</a></li>
  <li><a href="https://imgcook.com/">imgcook</a> - Coding AI / No Sign-Up / <a href="https://github.com/imgcook/imgcook">GitHub</a></li>
  <li><a href="https://supermaven.com/">Supermaven</a> - Coding AI / No Sign-Up / <a href="https://discord.com/invite/QQpqBmQH3w">Discord</a></li>
  <li><a href="https://sourcegraph.com/cody">Cody</a> - Coding AI / <a href="https://discord.gg/s2qDtYGnAE">Discord</a> / <a href="https://github.com/sourcegraph/cody">GitHub</a></li>
  <li><a href="https://www.all-hands.dev/">OpenHands</a> - Coding AI / <a href="https://discord.gg/ESHStjSjD4">Discord</a> / <a href="https://github.com/All-Hands-AI/OpenHands">GitHub</a></li>
  <li><a href="https://continue.dev/">Continue</a> - Coding AI / <a href="https://discord.com/invite/EfJEfdFnDQ">Discord</a> / <a href="https://github.com/continuedev/continue">GitHub</a></li>
  <li><a href="https://github.com/features/copilot">GitHub Copilot</a> - Coding AI</li>
  <li><a href="https://www.trae.ai/">Trae</a> - Coding AI</li>
  <li><a href="https://github.com/cline/cline">Cline</a> - Coding AI / <a href="https://discord.gg/cline">Discord</a></li>
  <li><a href="https://rentry.co/FMHYBase64#cursor">Cursor</a> - Coding AI</li>
  <li><a href="https://gitwit.dev/">GitWit</a> - Coding AI</li>
  <li><a href="https://www.qodo.ai/">Qodo</a> - Coding AI</li>
  <li><a href="https://www.blackbox.ai/">Blackbox</a> - Coding AI / No Sign-Up</li>
  <li><a href="https://denigma.app/">Denigma</a> - Coding AI / No Sign-Up / <a href="https://discord.gg/mZx4REBvKm">Discord</a></li>
  <li><a href="https://aider.chat/">Aider</a> - Terminal Coding AI / <a href="https://discord.com/invite/Y7X7bhMQFV">Discord</a> / <a href="https://github.com/Aider-AI/aider">GitHub</a></li>
  <li><a href="https://www.codacy.com/">Codacy</a> - Code Fixing AI / <a href="https://github.com/codacy">GitHub</a></li>
  <li><a href="https://github.com/OpenInterpreter/open-interpreter">Open Interpreter</a> - Run Code Locally / No Sign-Up / <a href="https://discord.gg/Hvz9Axh84z">Discord</a></li>
  <li><a href="https://v0.dev/">v0</a> - Text to Site Code</li>
  <li><a href="https://huggingface.co/spaces/enzostvs/deepsite">DeepSite</a> - Text to Site Code</li>
  <li><a href="https://bolt.new/">Bolt.new</a> - AI Web App Builder / <a href="https://discord.com/invite/stackblitz">Discord</a> / <a href="https://github.com/stackblitz/bolt.new">GitHub</a></li>
  <li><a href="https://fragments.e2b.dev/">Fragments</a> - AI App Builder / <a href="https://discord.com/invite/U7KEcGErtQ">Discord</a> / <a href="https://github.com/e2b-dev">GitHub</a></li>
  <li><a href="https://rork.com/">⁠Rork</a> - AI App Builder <a href="https://greasyfork.org/en/scripts/538090">Code Export Bypass</a></li>
  <li><a href="https://composio.dev/">Composio</a> - Add Tools to Coding AI / <a href="https://discord.com/invite/cNruWaAhQk">Discord</a> / <a href="https://github.com/ComposioHQ/composio">GitHub</a></li>
</ul>

<hr />

<h2 id="-ai-tools">► AI Tools</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-tools"></a></p>
<ul>
  <li>🌐 <strong><a href="https://github.com/sindresorhus/awesome-chatgpt">sindresorhus’s Awesome ChatGPT</a></strong> or <a href="https://github.com/uhub/awesome-chatgpt">Awesome ChatGPT</a> - AI Resources</li>
  <li>🌐 <strong><a href="https://github.com/billmei/every-chatgpt-gui">Every ChatGPT GUI</a></strong> - ChatGPT GUI Index</li>
  <li>↪️ <strong><a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/dev-tools/#wiki_.25B7_api_tools">AI API Tools</a></strong></li>
  <li><a href="https://computer.tldraw.com/">tldraw computer</a> - Create Component Workflows to Generate or Transform Data / <a href="https://discord.com/invite/SBBEVCA4PG">Discord</a> / <a href="https://github.com/tldraw/tldraw">GitHub</a></li>
  <li><a href="https://github.com/josStorer/chatGPTBox">ChatGPT Box</a> or <a href="https://github.com/xcanwin/KeepChatGPT/blob/main/docs/README_EN.md">KeepChatGPT</a> - Extensions</li>
  <li><a href="https://llm.datasette.io/">LLM</a> - LLM CLI / <a href="https://discord.com/invite/RKAH4b8TvE">Discord</a> / <a href="https://github.com/simonw/llm">GitHub</a></li>
  <li><a href="https://github.com/xtekky/gpt4free">GPT4Free</a> - Desktop App / <a href="https://telegram.me/g4f_channel">Telegram</a></li>
  <li><a href="https://msty.app/">Msty</a> - Download &amp; Run Models Locally / <a href="https://discord.gg/2QBw6XxkCC">Discord</a></li>
  <li><a href="https://lobechat.com/chat">LobeChat</a> - Desktop App / <a href="https://discord.gg/AYFPHvv2jT">Discord</a> / <a href="https://github.com/lobehub/lobe-chat">GitHub</a></li>
  <li><a href="https://noi.nofwl.com/">Noi</a> - Desktop App / <a href="https://discord.gg/kq2HXcpJSQ">Discord</a> / <a href="https://github.com/lencx/Noi">GitHub</a></li>
  <li><a href="https://chatbotui.com/">Chatbot UI</a> - Desktop App / <a href="https://github.com/mckaywrigley/chatbot-ui">GitHub</a></li>
  <li><a href="https://www.nvidia.com/en-us/ai-on-rtx/chatrtx/">ChatRTX</a> - Desktop App / RTX 30+ Series GPU Only</li>
  <li><a href="https://www.chatpdf.com/">ChatPDF</a> (No Sign-Up) or <a href="https://askyourpdf.com/">AskYourPDF</a> - Turn Books / PDFs into Chatbots</li>
  <li><a href="https://github.com/4as/ChatGPT-DeMod">ChatGPT DeMod</a> - Block ChatGPT Moderation Checks</li>
  <li><a href="https://askconcierge.ai/">Concierge</a> - Connect Apps to AI</li>
  <li><a href="https://www.bibcit.com/en/massivemark">MassiveMark</a> - Convert LLM Chats to DOCX / <a href="https://discord.gg/fPtQAQYmqq">Discord</a></li>
  <li><a href="https://chatgptevo.com/widescreen/">ChatGPT Widescreen</a> - ChatGPT Widescreen / Fullscreen / <a href="https://github.com/adamlui/chatgpt-widescreen">GitHub</a></li>
  <li><a href="https://voicecontrol.chat/">Voice Control</a> - ChatGPT Voice Control</li>
  <li><a href="https://screenpi.pe/">screenpipe</a> - AI Screen Recorder / No Sign-Up / <a href="https://discord.gg/dU9EBuw7Uq">Discord</a> / <a href="https://github.com/mediar-ai/screenpipe">GitHub</a></li>
  <li><a href="https://greasyfork.org/en/scripts/456055">ChatGPT Exporter</a> - Export Chats / <a href="https://github.com/pionxzh/chatgpt-exporter">GitHub</a></li>
  <li><a href="https://github.com/itsmartashub/GPThemes">GPThemes</a> - ChatGPT Themes</li>
  <li><a href="https://huggingface.co/spaces/NyxKrage/LLM-Model-VRAM-Calculator">LLM Model VRAM Calculator</a> - LLM Requirement Calculators</li>
  <li><a href="https://rentry.org/aipiracyresources">AI Piracy Resources</a> - AI Piracy Guide / Resources</li>
</ul>

<hr />

<h2 id="-ai-prompts">▷ AI Prompts</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-prompts"></a></p>
<ul>
  <li><strong>Note</strong> - Bypassing chatbot safeguards (aka jailbreaking) is against the TOS of most AI, so use them at your own risk.</li>
</ul>

<hr />

<ul>
  <li>🌐 <strong><a href="https://rentry.org/jb-listing">Jailbreak Listings</a></strong> - Prompt / Jailbreak Lists</li>
  <li>⭐ <strong><a href="https://github.com/friuns2/BlackFriday-GPTs-Prompts">BlackFriday GPTs Prompts</a></strong> - Prompt Directory</li>
  <li>⭐ <strong><a href="https://github.com/linexjlin/GPTs">Leaked Prompts</a></strong> - Prompt Directory</li>
  <li>⭐ <strong><a href="https://www.promptingguide.ai/">Prompt Engineering Guide</a></strong> / <a href="https://discord.gg/FUyz9vPAwf">Discord</a> / <a href="https://github.com/dair-ai/Prompt-Engineering-Guide">GitHub</a>, <a href="https://www.kaggle.com/whitepaper-prompt-engineering">Google Whitepaper</a>, <a href="https://github.com/NirDiamant/Prompt_Engineering">Prompt_Engineering</a>, <a href="https://learnprompting.org/docs/introduction">LearnPrompting</a>, <a href="https://platform.openai.com/docs/guides/prompt-engineering">OpenAI Guide</a> or <a href="https://docs.anthropic.com/claude/docs/prompt-engineering">Claude Guide</a> - Prompting Guides</li>
  <li><a href="https://www.reddit.com/r/ChatGPTJailbreak/">/r/ChatGPTJailbreak</a> - AI Jailbreak Community</li>
  <li><a href="https://github.com/LouisShark/chatgpt_system_prompt">ChatGPT System Prompt</a> - Prompt Directory</li>
  <li><a href="https://github.com/0xeb/TheBigPromptLibrary">The Big Prompt Library</a> - Prompt Directory</li>
  <li><a href="https://github.com/yokoffing/ChatGPT-Prompts">ChatGPT &amp; Bing AI Prompts</a> - Prompt Directory</li>
  <li><a href="https://github.com/elder-plinius/L1B3RT4S">L1B3RT4S</a> - Jailbreak Prompts / <a href="https://discord.gg/basi">Discord</a> / <a href="https://x.com/elder_plinius">X</a></li>
  <li><a href="https://www.promptfoo.dev/">promptfoo</a> - Prompt Playgrounds / <a href="https://discord.gg/gHPS9jjfbs">Discord</a> / <a href="https://github.com/promptfoo/promptfoo">GitHub</a></li>
  <li><a href="https://tensortrust.ai/">Tensor Trust</a> / <a href="https://github.com/HumanCompatibleAI/tensor-trust">GitHub</a> or <a href="https://gandalf.lakera.ai/">Gandalf</a> / <a href="https://github.com/lakeraai">GitHub</a> - Prompting Skill Games</li>
  <li><a href="https://redarena.ai/">RedTeam Arena</a> - AI Jailbreak Game</li>
  <li><a href="https://gobble.bot/">Gobble Bot</a> - Generate Text Files for Chatbots</li>
</ul>

<hr />

<h2 id="-ai-indexes">► AI Indexes</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-indexes"></a></p>
<ul>
  <li>🌐 <strong><a href="https://lifearchitect.ai/models-table/">LifeArchitect</a></strong> - LLM Index</li>
  <li>🌐 <strong><a href="https://www.futuretools.io/?pricing-model=free">FutureTools</a></strong> - AI Directory / <a href="https://discord.gg/WBk4ZDW6A9">Discord</a></li>
  <li>🌐 <strong><a href="https://labs.google/">Google Labs</a></strong> or <a href="https://labs.google/fx">Google Labs FX</a> - Google AI Experiments / <a href="https://www.reddit.com/r/labsdotgoogle/">Subreddit</a> / <a href="https://discord.gg/googlelabs">Discord</a></li>
  <li><a href="https://perchance.org/generators">Perchance</a> / <a href="https://discord.gg/43qAQEVV9a">Discord</a> or <a href="https://websim.ai/">WebSim</a> / <a href="https://www.reddit.com/r/WebSim/">Subreddit</a> / <a href="https://discord.gg/websim">Discord</a> - Simple AI Builders</li>
  <li><a href="https://www.ypforai.com/">YP for AI</a> - AI Directory</li>
  <li><a href="https://llmresourceshub.vercel.app/">LLM Resources Hub</a> - AI Directory</li>
  <li><a href="https://github.com/mahseema/awesome-ai-tools">Awesome AI Tools</a> - AI Directory</li>
  <li><a href="https://itsbetterwithai.com/">It’s Better With AI</a> - AI Directory</li>
  <li><a href="https://www.gptdemo.net/gpt/search?lg=en&amp;cate=&amp;keywords=&amp;tags=free,&amp;sort=popular">GPT Demo</a> - AI Directory</li>
  <li><a href="https://app.artificialstudio.ai/tools">ArtificialStudio</a> - Multi-Tool Browser AIs / <a href="https://discord.gg/EdNztJJH6z">Discord</a></li>
  <li><a href="https://docs.google.com/spreadsheets/d/18GHPEBJzDbICmMStPVkNWA_hQHiWmLcqUdEJA1b4MJM/">LLM Pricing</a> - LLM Pricing Index</li>
  <li><a href="https://koltregaskes.notion.site/modelreleases">Model Releases</a> - Upcoming Model Releases</li>
</ul>

<hr />

<h2 id="-ai-benchmarks">▷ AI Benchmarks</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-ai-benchmarks"></a></p>
<ul>
  <li>⭐ <strong><a href="https://artificialanalysis.ai/">Artificial Analysis</a></strong> - Chatbot Benchmarks</li>
  <li>⭐ <strong><a href="https://lmarena.ai/leaderboard">LMArena</a></strong> - Chatbot Leaderboards / Benchmarks / <a href="https://discord.gg/6GXcFg3TH8">Discord</a> / <a href="https://github.com/lm-sys/FastChat">GitHub</a></li>
  <li>⭐ <strong><a href="https://livebench.ai/">LiveBench</a></strong> - Chatbot Leaderboards / Benchmarks / <a href="https://github.com/livebench/livebench">GitHub</a></li>
  <li><a href="https://scale.com/leaderboard">SEAL LLM Leaderboards</a> - Chatbot Leaderboards</li>
  <li><a href="https://rankedagi.com/">⁠RankedAGI</a> - Chatbot Leaderboards / Benchmarks</li>
  <li><a href="https://huggingface.co/spaces/allenai/WildBench">WildBench</a> - Chatbot Benchmarks / <a href="https://github.com/allenai/WildBench">GitHub</a></li>
  <li><a href="https://www.wolfram.com/llm-benchmarking-project/">Wolfram LLM Benchmarking Project</a> - Chatbot Leaderboards / Benchmarks</li>
  <li><a href="https://huggingface.co/spaces/allenai/ZeroEval">ZeroEval</a> - Chatbot Leaderboard / <a href="https://github.com/WildEval/ZeroEval">GitHub</a></li>
  <li><a href="https://llm-stats.com/">LLM Stats</a> - Chatbot Leaderboard</li>
  <li><a href="https://openlm.ai/chatbot-arena/">OpenLM Arena</a> - Chatbot Leaderboard</li>
  <li><a href="https://openrouter.ai/rankings">OpenRouter</a> - Chatbot Popularity Rankings / <a href="https://discord.gg/fVyRaUDgxW">Discord</a> / <a href="https://github.com/OpenRouterTeam">GitHub</a></li>
  <li><a href="https://huggingface.co/spaces/opencompass/open_vlm_leaderboard">Open VLM Leaderboard</a> - VLM Benchmark Leaderboard Aggregator</li>
  <li><a href="https://matharena.ai/">MathArena</a> - AI Mathematics Competitions / Benchmarks</li>
  <li><a href="https://aielo.co/">AI Elo</a> - AI Game Competitions / Benchmarks</li>
</ul>

<hr />

<h2 id="-text-generators">► Text Generators</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-text-generators"></a></p>
<ul>
  <li>⭐ <strong><a href="https://textfx.withgoogle.com/">TextFX</a></strong> / <a href="https://github.com/google/generative-ai-docs/tree/main/demos/palm/web/textfx">GitHub</a> or <a href="https://rytr.me/">Rytr</a> - AI Creative Writing Tools / No Sign-Up</li>
  <li><a href="https://scripai.com/">Scrip AI</a> (No Sign-Up), <a href="https://app.inkforall.com/tools">INK</a>, <a href="https://quickpenai.com/">QuickPen AI</a> - Online AI Text Tools</li>
  <li><a href="https://novelai.net/">NovelAI</a> - Story Writing AI / No Sign-Up / <a href="https://github.com/fmhy/FMHY/wiki/FMHY%E2%80%90Notes.md#novelai-bypass">Limit Bypass</a>, <a href="https://greasyfork.org/en/scripts/448926">2</a> / <a href="https://discord.com/invite/novelai">Discord</a></li>
  <li><a href="https://dreamily.ai/">Dreamily</a> - Story Writing AI</li>
  <li><a href="https://perchancestory.com/">PerchanceStory</a> - Story Writing AI</li>
  <li><a href="https://quarkle.ai/">Quarkle</a> - AI Writing Assistant</li>
</ul>

<hr />

<h2 id="-text-rephrasing">▷ <a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/text-tools#wiki_.25B7_text_rephrasing">Text Rephrasing</a></h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-text-rephrasing"></a></p>

<hr />

<h2 id="-grammar-check">▷ <a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/text-tools#wiki_.25B7_grammar_check">Grammar Check</a></h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-grammar-check"></a></p>

<hr />

<h2 id="-video-generation">► Video Generation</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-video-generation"></a></p>
<ul>
  <li>🌐 <strong><a href="https://huggingface.co/spaces/Vchitect/VBench_Leaderboard">VBench</a></strong> - Video Generation Model Leaderboard</li>
  <li><a href="https://aistudio.google.com/generate-video">AI Studio</a> - Veo 2 / <a href="https://www.reddit.com/r/Bard/">Subreddit</a> / <a href="https://discord.com/invite/gemini">Discord</a></li>
  <li><a href="https://github.com/camenduru/text-to-video-synthesis-colab">Synthesis Colab</a> - Unlimited / Colab / <a href="https://discord.gg/k5BwmmvJJU">Discord</a></li>
  <li><a href="https://www.vidu.studio/">Vidu</a> - 6 Monthly / <a href="https://discord.gg/3pDU8fmQ8Y">Discord</a></li>
  <li><a href="https://www.genmo.ai/">Genmo</a> - 30 Monthly / <a href="https://github.com/genmoai/mochi">GitHub</a></li>
  <li><a href="https://github.com/nateraw/stable-diffusion-videos">Stable Diffusion Videos</a> - Unlimited / <a href="https://colab.research.google.com/github/nateraw/stable-diffusion-videos/blob/main/stable_diffusion_videos.ipynb">Colab</a></li>
  <li><a href="https://pixverse.ai/">PixVerse</a> - 1 Daily / <a href="https://discord.com/invite/MXHErdJHMg">Discord</a></li>
  <li><a href="https://wan.video/">Wan AI</a> / 10 Daily</li>
  <li><a href="https://lensgo.ai/">LensGo</a> - 5 Daily / <a href="https://discord.com/invite/CHMhrByFJS">Discord</a></li>
  <li><a href="https://klingai.com/">Kling AI</a> - 8 Monthly / <a href="https://discord.com/invite/8tj8YjSzKr">Discord</a></li>
  <li><a href="https://www.pika.art/">Pika</a> - 5 Monthly / <a href="https://discord.com/invite/pika">Discord</a></li>
  <li><a href="https://dreamina.capcut.com/ai-tool/home">Dreamina</a> - 150 Monthly</li>
  <li><a href="https://chat.qwen.ai/">Qwen</a> - 10 Daily</li>
  <li><a href="https://hailuoai.video/">Hailuo AI</a> - 3 Daily / <a href="https://discord.com/invite/hvvt8hAye6">Discord</a></li>
  <li><a href="https://fusionbrain.ai/en/">Fusion Brain</a> - Unlimited</li>
  <li><a href="https://vivago.ai/">Vivago</a> - 1 Daily</li>
  <li><a href="https://runway.exomlapi.com/">Runway.exo</a> - 1 Hourly / ExoML Watermark</li>
  <li><a href="https://chatglm.cn/">ChatGLM</a> - Unlimited / Requires Sign-Up &amp; Phone # / SMS Generators Work</li>
  <li><a href="https://github.com/colinurbs/FramePack-Studio">FramePack</a> - Desktop App / Local Models / NVIDIA GPU Required</li>
  <li><a href="https://www.eggnog.ai/">Eggnog</a> - AI Character Video Remixer + Editor</li>
</ul>

<hr />

<h2 id="-image-generation">► Image Generation</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-image-generation"></a></p>
<ul>
  <li>🌐 <strong><a href="https://imgsys.org/rankings">⁠Imgsys Rankings</a></strong> - Image Generator Benchmarks / Leaderboards</li>
  <li>⭐ <strong><a href="https://lmarena.ai/">LMArena</a></strong> - Multiple Generators / No Sign-Up / <a href="https://discord.gg/6GXcFg3TH8">Discord</a> / <a href="https://github.com/lm-sys/FastChat">GitHub</a></li>
  <li>⭐ <strong><a href="https://labs.google/fx/tools/image-fx">ImageFX</a></strong>, <a href="https://aistudio.google.com/generate-image">AI Studio</a> or <a href="https://gemini.google.com/">Gemini</a> - Imagen 3 / Imagen 4 (Gemini) / Unlimited / Region-Based / <a href="https://discord.com/invite/googlelabs">Discord</a></li>
  <li>⭐ <strong><a href="https://www.mage.space/">Mage</a></strong> / <a href="https://discord.com/invite/GT9bPgxyFP">Discord</a></li>
  <li>⭐ <strong><a href="https://huggingface.co/spaces/black-forest-labs/FLUX.1-schnell">FLUX.1 Schnell</a></strong>, <a href="https://huggingface.co/spaces/black-forest-labs/FLUX.1-dev">FLUX.1 Dev</a> or <a href="https://huggingface.co/spaces/NihalGazi/FLUX-Pro-Unlimited">FLUX-Pro-Unlimited</a> / Unlimited / No Sign-Up</li>
  <li>⭐ <strong><a href="https://grok.com/">Grok</a></strong> / 25 Per 2 Hours / <a href="https://www.reddit.com/r/grok/">Subreddit</a> / <a href="https://discord.com/invite/kqCc86jM55">Discord</a></li>
  <li><a href="https://www.runcomfy.com/comfyui-web">ComfyUI Online</a> / Unlimited</li>
  <li><a href="https://dezgo.com/">Dezgo</a> / Unlimited / No Sign-Up / <a href="https://discord.com/invite/RQrGpUhPhx">Discord</a></li>
  <li><a href="https://fusionbrain.ai/en/">Fusion Brain</a>, <a href="https://rudalle.ru/">2</a> / Unlimited / <a href="https://t.me/kandinsky21_bot">Telegram Bot</a></li>
  <li><a href="https://designer.microsoft.com/image-creator">Microsoft Designer</a>, <a href="https://www.bing.com/images/create">2</a> / Unlimited</li>
  <li><a href="https://klingai.com/">Kling AI</a> / 366 Monthly / <a href="https://huggingface.co/spaces/Kwai-Kolors/Kolors-Character-With-Flux">Characters</a> / <a href="https://huggingface.co/spaces/Kwai-Kolors/Kolors-Portrait-with-Flux">Portraits</a> / <a href="https://discord.com/invite/8tj8YjSzKr">Discord</a></li>
  <li><a href="https://aigallery.app/">AI Gallery</a> / Unlimited / No Sign-Up</li>
  <li><a href="https://wan.video/">Wan AI</a> / 100 Daily / No Sign-Up</li>
  <li><a href="https://piclumen.com/">PicLumen</a> / 50 Daily / <a href="https://discord.gg/bAycHJgbD8">Discord</a></li>
  <li><a href="https://www.recraft.ai/">Recraft</a> / 50 Daily / <a href="https://discord.gg/recraft">Discord</a></li>
  <li><a href="https://imgsys.org/">imgsys</a> / Unlimited / Compare Generators / No Sign-Up</li>
  <li><a href="https://build.nvidia.com/models?filters=usecase%3Ausecase_image_gen">NVIDIA NIM</a> / 50 Daily / No Sign-Up</li>
  <li><a href="https://hotpot.ai/">Hotpot</a> / 75 Daily / No Sign-Up</li>
  <li><a href="https://demo.bagel-ai.org/">BAGEL</a> / Unlimited</li>
  <li><a href="https://app.prodia.com/playground">Prodia</a> / Unlimited / No Sign-Up / <a href="https://discord.com/invite/495hz6vrFN">Discord</a></li>
  <li><a href="https://pollinations.ai/">Pollinations</a> / Unlimited / No Sign-Up / <a href="https://github.com/fmhy/FMHY/wiki/FMHY%E2%80%90Notes.md#pollinations-note">Notes</a> / <a href="https://discord.gg/k9F7SyTgqn">Discord</a> / <a href="https://www.github.com/pollinations/pollinations">GitHub</a></li>
  <li><a href="https://www.picsynth.me/generation">PicSynth</a> / Unlimited</li>
  <li><a href="https://imagen.exomlapi.com/">Imagen.exo</a> / Unlimited / Imagen 3/3.5</li>
  <li><a href="https://leonardo.ai/">Leonardo</a> / 150 Daily</li>
  <li><a href="https://www.loras.dev/">Loras</a> / Unlimited / <a href="https://github.com/Nutlope/loras-dev">GitHub</a></li>
  <li><a href="https://chatglm.cn/">ChatGLM</a> / Unlimited</li>
  <li><a href="https://www.meta.ai/icebreakers/imagine/">Meta AI</a> / Unlimited</li>
  <li><a href="https://gpt1image.exomlapi.com/">GPT1Image</a> - Unlimited / GPT-Image-1</li>
  <li><a href="https://tensor.art/">TensorArt</a> / 40 Daily / <a href="https://www.reddit.com/r/TensorArt_HUB/">Subreddit</a> / <a href="https://discord.com/invite/qYjANGqBED">Discord</a></li>
  <li><a href="https://www.shakker.ai/">Shakker</a> / 50 Daily / <a href="https://discord.gg/djyP5u3vHY">Discord</a> / <a href="https://docs.google.com/document/d/1PZ6to6Nn995J0o0BbEPhucqge9uyc1acQoNuvWkK6M8/edit#heading=h.kkzhkyyy4ze4">Guide</a></li>
  <li><a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">Stable Diffusion</a> / Unlimited / <a href="https://github.com/Stability-AI/stablediffusion">GitHub</a> / <a href="https://discord.com/invite/stablediffusion">Discord</a></li>
  <li><a href="https://www.unstability.ai/">Unstable Diffusion</a> / 52 Daily</li>
  <li><a href="https://www.seaart.ai/">SeaArt</a> / 40 Daily / <a href="https://discord.com/invite/gUHDU644vU">Discord</a></li>
  <li><a href="https://artgenie.pages.dev/">Art Genie</a> / Unlimited / No Sign-Up</li>
  <li><a href="https://raphael.app/">Raphael</a> / Unlimited / No Sign-Up / Uses Flux.1</li>
  <li><a href="https://cgdream.ai/">CGDream</a> / 770 SDXL / 450 Fast FLUX / 150 FLUX Dev Monthly</li>
  <li><a href="https://hailuoai.video/">Hailuo AI</a> - 100 Daily / <a href="https://discord.com/invite/hvvt8hAye6">Discord</a></li>
  <li><a href="https://pixnova.ai/ai-body-generator/">PixNova AI</a> / Unlimited</li>
  <li><a href="https://chat.oaichat.cc/">ChatK</a> / Unlimited</li>
  <li><a href="https://preview.reve.art/">Reve Image</a> / 20 Daily</li>
  <li><a href="https://editor.imagelabs.net/">ImageLabs</a> / Unlimited / No Sign-Up</li>
  <li><a href="https://chat.qwen.ai/">Qwen</a> / Unlimited</li>
  <li><a href="https://muryou-aigazou.com/">AIGazou</a> / Unlimited</li>
  <li><a href="https://dreamina.capcut.com/ai-tool/home">Dreamina</a> / 50 Daily</li>
  <li><a href="https://perchance.org/ai-text-to-image-generator">Perchance</a>, <a href="https://perchance.org/ai-photo-generator">2</a> / Unlimited / No Sign-Up</li>
  <li><a href="https://getimg.ai/">getimg.ai</a> / 100 Monthly / <a href="https://discord.com/invite/5KsUXSzVwS">Discord</a></li>
  <li><a href="https://firefly.adobe.com/">Adobe Firefly</a> / 25 Monthly / <a href="https://discord.com/invite/dJnsV5s8PZ">Discord</a></li>
  <li><a href="https://app.aitubo.ai/">Aitubo</a> / 25 Daily / <a href="https://discord.gg/qTu6YsRn7F">Discord</a></li>
  <li><a href="https://maze.guru/gallery">Maze Guru</a> / 12 Daily / <a href="https://discord.com/invite/maze-guru-ai-art-anime-social-1007166914801434634">Discord</a></li>
  <li><a href="https://chatgpt.com/">ChatGPT</a> - 3 Daily / <a href="https://discord.com/invite/openai">Discord</a></li>
  <li><a href="https://pixai.art/">PixAI</a> / 5 Daily / <a href="https://discord.com/invite/pixai">Discord</a></li>
  <li><a href="https://fluxpro.art/">FluxPro</a> / 1 Daily / <a href="https://discord.gg/YMmUAvtRva">Discord</a></li>
  <li><a href="https://vivago.ai/">Vivago</a> / 15 Daily / No Sign-Up</li>
  <li><a href="https://www.krea.ai/">Krea</a> / 10 Daily / No Sign-Up / <a href="https://discord.gg/rJurUAR8Kz">Discord</a></li>
  <li><a href="https://labs.google/fx/en/tools/whisk">Whisk</a> - Use Images as Prompts</li>
  <li><a href="https://artoons.vercel.app/">Artoons</a> - Cartoon Style Generator / <a href="https://github.com/sujjeee/artoons">GitHub</a></li>
  <li><a href="https://huggingface.co/spaces/fffiloni/diffusers-image-outpaint">Diffusers Image Outpaint</a> - AI Image Extender</li>
  <li><a href="https://lumalabs.ai/genie">Genie</a> / <a href="https://discord.com/invite/ASbS3EykXm">Discord</a>, <a href="https://github.com/openai/shap-e">Shap-e</a>, <a href="https://github.com/ashawkey/stable-dreamfusion">Stable Dreamfusion</a> or <a href="https://github.com/threestudio-project/threestudio">threestudio</a> / <a href="https://colab.research.google.com/github/threestudio-project/threestudio/blob/main/threestudio.ipynb">Colab</a> / <a href="https://discord.gg/ejer2MAB8N">Discord</a> - 3D Image Generators</li>
  <li><a href="https://lumalabs.ai/interactive-scenes">Interactive Scenes</a> - Generate Interactive Scenes / <a href="https://discord.com/invite/ASbS3EykXm">Discord</a></li>
  <li><a href="https://huggingface.co/spaces/AP123/IllusionDiffusion">Illusion Diffusion</a> - Illusion Artwork Generator</li>
</ul>

<hr />

<h2 id="-local-frontends">▷ Local Frontends</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-local-frontends"></a></p>
<ul>
  <li>⭐ <strong><a href="https://lykos.ai/">Stability Matrix</a></strong> / <a href="https://discord.com/invite/TUrgfECxHz">Discord</a> / <a href="https://github.com/LykosAI/StabilityMatrix">GitHub</a></li>
  <li>⭐ <strong><a href="https://invoke-ai.github.io/InvokeAI/">Invoke</a> / <a href="https://github.com/invoke-ai/InvokeAI">GitHub</a></strong> / <a href="https://discord.com/invite/ZmtBAhwWhy">Discord</a></li>
  <li>⭐ <strong><a href="https://www.comfy.org/">ComfyUI</a></strong> / <a href="https://www.reddit.com/r/comfyui/">Subreddit</a> / <a href="https://discord.gg/comfyorg">Discord</a> / <a href="https://github.com/comfyanonymous/ComfyUI">GitHub</a></li>
  <li>⭐ <strong><a href="https://github.com/lllyasviel/Fooocus">Fooocus</a></strong>, <a href="https://github.com/MoonRide303/Fooocus-MRE">2</a> / <a href="https://colab.research.google.com/github/lllyasviel/Fooocus/blob/main/fooocus_colab.ipynb">Colab</a></li>
  <li>⭐ <strong><a href="https://github.com/MochiDiffusion/MochiDiffusion">Mochi Diffusion</a></strong> - Stable Diffusion for Mac / <a href="https://discord.com/invite/x2kartzxGv">Discord</a></li>
  <li>⭐ <strong><a href="https://diffusionbee.com/">DiffusionBee</a></strong> - Stable Diffusion for Mac / <a href="https://github.com/divamgupta/diffusionbee-stable-diffusion-ui">GitHub</a> / <a href="https://discord.com/invite/t6rC5RaJQn">Discord</a></li>
  <li>⭐ <strong><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">Automatic1111</a></strong> / <a href="https://github.com/anapnoe/stable-diffusion-webui-ux">Fork</a>, <a href="https://github.com/vladmandic/sdnext">2</a> / <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Online-Services#google-colab">Colab</a> / <a href="https://github.com/AbdullahAlfaraj/Auto-Photoshop-StableDiffusion-Plugin">Photoshop</a> / <a href="https://github.com/ThereforeGames/unprompted">Templates</a> / <a href="https://github.com/Coyote-A/ultimate-upscale-for-automatic1111">Upscaling</a>, <a href="https://github.com/pkuliyi2015/multidiffusion-upscaler-for-automatic1111">2</a></li>
  <li><a href="https://github.com/Stability-AI/StableStudio">StableStudio</a></li>
  <li><a href="https://easydiffusion.github.io/">Easy Diffusion</a> / <a href="https://discord.com/invite/u9yhsFmEkB">Discord</a> / <a href="https://github.com/easydiffusion/easydiffusion">GitHub</a></li>
  <li><a href="https://makeayo.com/">Makeayo</a> / <a href="https://discord.gg/FbdSxdeV8m">Discord</a></li>
  <li><a href="https://github.com/Woolverine94/biniou">biniou</a></li>
  <li><a href="https://sygil-dev.github.io/sygil-webui/">Sygil WebUI</a> / <a href="https://colab.research.google.com/github/Sygil-Dev/sygil-webui/blob/main/Web_based_UI_for_Stable_Diffusion_colab.ipynb">Colab</a> / <a href="https://discord.com/invite/ttM8Tm6wge">Discord</a> / <a href="https://github.com/Sygil-Dev/sygil-webui">GitHub</a></li>
  <li><a href="https://ddpn08.github.io/Radiata/en/">Radiata</a> / <a href="https://github.com/ddPn08/Radiata">GitHub</a></li>
  <li><a href="https://github.com/lllyasviel/stable-diffusion-webui-forge">SD WebUI Forge</a></li>
  <li><a href="https://github.com/patientx/ComfyUI-Zluda">ComfyUI-Zluda</a></li>
</ul>

<hr />

<h2 id="-guides--tools">▷ Guides / Tools</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-guides--tools"></a></p>
<ul>
  <li>🌐 <strong><a href="https://github.com/Baiyuetribe/paper2gui/blob/main/README_en.md">Paper2GUI</a></strong>, <a href="https://rentry.co/sdg-link">sdg-link</a>, <a href="https://rentry.org/LocalModelsLinks">LocalModelsLinks</a>, <a href="https://sdtools.org/">SDTools</a> or <a href="https://docs.google.com/spreadsheets/d/1zYJUM-srhgIA7wrj4Pe4QqepAsHIEC00DydoTPv4PWg/edit#gid=0">AI Creation Tools</a> - AI Image Resources</li>
  <li>🌐 <strong><a href="https://civitai.com/">Civitai</a></strong> - SD Model Index / <a href="https://www.reddit.com/r/civitai/">Subreddit</a> / <a href="https://discord.gg/UwX5wKwm6c">Discord</a> / <a href="https://github.com/civitai/civitai">GitHub</a></li>
  <li>🌐 <strong><a href="https://promptomania.com/">promptoMANIA</a></strong> - Prompt Indexes</li>
  <li>⭐ <strong><a href="https://sweet-hall-e72.notion.site/A-Traveler-s-Guide-to-the-Latent-Space-85efba7e5e6a40e5bd3cae980f30235f">A Traveler’s Guide to the Latent Space</a></strong> - AI Art Guide</li>
  <li>⭐ <strong><a href="https://huggingface.co/spaces/pharmapsychotic/CLIP-Interrogator">CLIP Interrogator</a></strong> / <a href="https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2">2</a> - Determine Likely Used Image Prompts / <a href="https://colab.research.google.com/github/pharmapsychotic/clip-interrogator/blob/main/clip_interrogator.ipynb">Colab</a>, <a href="https://colab.research.google.com/github/pharmapsychotic/clip-interrogator/blob/open-clip/clip_interrogator.ipynb">2</a></li>
  <li><a href="https://github.com/adieyal/sd-dynamic-prompts">SD Dynamic Prompts</a> - Extension for Automatic1111</li>
  <li><a href="https://stablehorde.net/">AI Horde</a> - Distributed Network of GPUs running Stable Diffusion / <a href="https://aqualxx.github.io/stable-ui/">Interface</a>, <a href="https://tinybots.net/artbot">2</a>, <a href="https://artificial-art.eu/">3</a> / <a href="https://discord.gg/3DxrhksKzn">Discord</a> / <a href="https://github.com/Haidra-Org/AI-Horde">GitHub</a></li>
  <li><a href="https://www.iopaint.com/">IOPaint</a> - Image Fill / Item Removal / <a href="https://colab.research.google.com/drive/1TKVlDZiE3MIZnAUMpv2t_S4hLr6TUY1d?usp=sharing">Colab</a> / <a href="https://github.com/Sanster/IOPaint">GitHub</a></li>
  <li><a href="https://discord.com/invite/unstablediffusion">Unstable Diffusion</a> - AI Image Community</li>
  <li><a href="https://microsoft.github.io/generative-ai-for-beginners/">Generative AI for Beginners</a> - Generative AI Guides</li>
</ul>

<hr />

<h2 id="-image-restoration">▷ <a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/img-tools#wiki_.25B7_upscale_.2F_restore">Image Restoration</a></h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-image-restoration"></a></p>

<hr />

<h2 id="-audio-generation">► Audio Generation</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-audio-generation"></a></p>
<ul>
  <li>⭐ <strong><a href="https://www.riffusion.com/">Riffusion</a></strong> / <a href="https://discord.gg/riffusion-1053034685590143047">Discord</a></li>
  <li>⭐ <strong><a href="https://suno.com/">Suno</a></strong> or <a href="https://suno.exomlapi.com/">Suno.exo</a> / <a href="https://sunoaiwiki.com/en">Guide</a> / <a href="https://discord.com/invite/suno">Discord</a></li>
  <li><a href="https://labs.google/fx/tools/music-fx">MusicFX</a> / Region-Based</li>
  <li><a href="https://tones.wolfram.com/">WolframTones</a> / No Sign-Up</li>
  <li><a href="https://www.stableaudio.com/">Stable Audio</a> / <a href="https://discord.com/invite/stablediffusion">Discord</a></li>
  <li><a href="https://www.udio.com/">Udio</a> / <a href="https://discord.gg/udio">Discord</a></li>
  <li><a href="https://fredericbriolet.com/avg/">audio visual generator</a> / No Sign-Up</li>
  <li><a href="https://www.fakemusicgenerator.com/">Fake Music Generator</a> / No Sign-Up</li>
  <li><a href="https://huggingface.co/spaces/facebook/MusicGen">MusicGen</a> / No Sign-Up / <a href="https://colab.research.google.com/drive/1ECmNEoXk8kvnLEMBMF2LY82E7XmIG4yu">Colab</a> / <a href="https://github.com/facebookresearch/audiocraft/blob/main/docs/MUSICGEN.md">GitHub</a></li>
  <li><a href="https://sonauto.ai/">Sonauto</a> / <a href="https://discord.gg/pfXar3ChH8">Discord</a></li>
  <li><a href="https://www.beatoven.ai/">Beatoven.ai</a> / <a href="https://discord.gg/8nXq56wwJM">Discord</a></li>
  <li><a href="https://waveformer.replicate.dev/">Waveformer</a> / <a href="https://github.com/fofr/waveformer">GitHub</a></li>
  <li><a href="https://soundraw.io/">SOUNDRAW</a> / No Sign-Up</li>
  <li><a href="https://mubert.com/">Mubert</a></li>
  <li><a href="https://aiva.ai/">AIVA</a> / <a href="https://discordapp.com/invite/ypDnFXN">Discord</a></li>
  <li><a href="https://boomy.com/">Boomy</a> / <a href="https://discord.gg/DNHQXeJegp">Discord</a></li>
  <li><a href="https://melobytes.com/en">Melobytes</a></li>
  <li><a href="https://huggingface.co/spaces/enzostvs/ai-jukebox">AI Jukebox</a> / No Sign-Up</li>
  <li><a href="https://home.eapy.io/">Eapy</a> - MIDI Sample Generator</li>
  <li><a href="https://output.com/products/pack-generator">Pack Generator</a> - Sample Pack Generator</li>
  <li><a href="https://hkchengrex.com/MMAudio/">MMAudio</a> - Generate Audio for Silent Videos / <a href="https://huggingface.co/spaces/hkchengrex/MMAudio">Demo</a> / <a href="https://colab.research.google.com/drive/1TAaXCY2-kPk4xE4PwKB3EqFbSnkUuzZ8?usp=sharing">Colab</a> / <a href="https://github.com/hkchengrex/MMAudio">GitHub</a></li>
  <li><a href="https://www.drumloopai.com/">Drumloop AI</a> - Drum Loop Generator</li>
  <li><a href="https://www.wombo.ai/">WOMBO</a> - AI Powered Lip Sync</li>
</ul>

<hr />

<h2 id="-text-to-speech">▷ Text to Speech</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-text-to-speech"></a></p>
<ul>
  <li>⭐ <strong><a href="https://www.text-to-speech.online/">TTS Online</a></strong> / No Sign-Up</li>
  <li><a href="https://uberduck.ai/">Uberduck</a> / <a href="https://discord.gg/uberduck-768215836665446480">Discord</a></li>
  <li><a href="https://illuminate.google.com/">Google Illuminate</a> - Generate AI Conversations</li>
  <li><a href="https://elevenlabs.io/">ElevenLabs</a> / No Sign-Up / <a href="https://discord.gg/elevenlabs">Discord</a> / <a href="https://github.com/elevenlabs">GitHub</a></li>
  <li><a href="https://ttsmp3.com/">ttsMP3</a> / No Sign-Up</li>
  <li><a href="https://fakeyou.com/">FakeYou</a> / No Sign-Up / <a href="https://discord.gg/fakeyou">Discord</a></li>
  <li><a href="https://luvvoice.com/">Luvvoice</a> / No Sign-Up</li>
  <li><a href="https://ttsmaker.com/">TTSMaker</a> / No Sign-Up</li>
  <li><a href="https://github.com/neonbjb/tortoise-tts">Tortoise TTS</a> / No Sign-Up</li>
  <li><a href="https://huggingface.co/spaces/suno/bark">Bark</a> / No Sign-Up / <a href="https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing">Colab</a> / <a href="https://github.com/suno-ai/bark">GitHub</a> / <a href="https://discord.com/invite/J2B2vsjKuE">Discord</a></li>
  <li><a href="https://ttsopenai.com/">TTSOpenAI</a> or <a href="https://www.openai.fm/">OpenAI.fm</a> / No Sign-Up / OpenAI’s Bot</li>
  <li><a href="https://ai-speaker.net/">AI Speaker</a> / No Sign-Up</li>
  <li><a href="https://github.com/rany2/edge-tts">edge-tts</a> / No Sign-Up / Python Module</li>
  <li><a href="https://github.com/index-tts/index-tts">IndexTTS</a> / No Sign-Up</li>
  <li><a href="https://www.hailuo.ai/audio/">Voices</a></li>
  <li><a href="https://texttospeech.io/">TextToSpeech.io</a></li>
  <li><a href="https://github.com/RVC-Boss/GPT-SoVITS">⁠GPT-SoVITS</a> / No Sign-Up</li>
  <li><a href="https://lazypy.ro/tts/">LazyPy</a> / No Sign-Up / <a href="https://github.com/chrisjp/tts">GitHub</a></li>
  <li><a href="https://huggingface.co/spaces/hexgrad/Kokoro-TTS">Kokoro TTS</a> / No Sign-Up / <a href="https://discord.gg/QuGxSWBfQy">Discord</a> / <a href="https://github.com/hexgrad/kokoro">GitHub</a></li>
  <li><a href="https://ondoku3.com/en/">Ondoku</a> / No Sign-Up</li>
  <li><a href="https://huggingface.co/spaces/ResembleAI/Chatterbox">⁠Chatterbox</a> / No Sign-Up / <a href="https://github.com/resemble-ai/chatterbox">GitHub</a></li>
  <li><a href="https://anyvoicelab.com/long-form-text-to-speech-converter/">AnyVoiceLab</a> / No Sign-Up</li>
  <li><a href="https://github.com/jasonppy/VoiceCraft">VoiceCraft</a> / <a href="https://colab.research.google.com/drive/1IOjpglQyMTO2C3Y94LD9FY0Ocn-RJRg6?usp=sharing">Colab</a></li>
  <li><a href="https://github.com/netease-youdao/EmotiVoice">EmotiVoice</a></li>
  <li><a href="https://fish.audio/">Fish Audio</a> / <a href="https://github.com/fishaudio">GitHub</a></li>
  <li><a href="https://github.com/gitmylo/audio-webui">Audio-WebUI</a> / No Sign-Up / <a href="https://colab.research.google.com/github/gitmylo/audio-webui/blob/master/audio_webui_colab.ipynb">Colab</a> / <a href="https://discord.gg/NB86C3Szkg">Discord</a></li>
  <li><a href="https://www.vanillavoice.com/">VanillaVoice</a> / No Sign-Up</li>
  <li><a href="https://ttsfree.com/">TTSFree</a> / No Sign-Up</li>
  <li><a href="https://lovo.ai/">LOVO</a> / <a href="https://discord.gg/vWHw5ZKEmk">Discord</a></li>
  <li><a href="https://soundoftext.com/">SoundofText</a> / No Sign-Up</li>
  <li><a href="https://freetts.com/">FreeTTS</a></li>
  <li><a href="https://www.hume.ai/">Hume</a> / No Sign-Up</li>
  <li><a href="https://voicemaker.in/">Voicemaker</a> / No Sign-Up</li>
  <li><a href="https://www.naturalreaders.com/online/">NaturalReaders</a> / No Sign-Up</li>
  <li><a href="https://github.com/coqui-ai/tts">TTS</a> / <a href="https://discord.gg/5eXr5seRrv">Discord</a></li>
  <li><a href="https://huggingface.co/spaces/skytnt/moe-tts">Moe TTS</a> / No Sign-Up / <a href="https://colab.research.google.com/drive/14Pb8lpmwZL-JI5Ub6jpG4sz2-8KS0kbS?usp=sharing">Colab</a></li>
</ul>

<hr />

<h2 id="-voice-change--clone">▷ Voice Change / Clone</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-voice-change--clone"></a></p>
<ul>
  <li>⭐ <strong><a href="https://applio.org/">Applio</a></strong> - Voice Cloning / No Sign-Up / <a href="https://discord.gg/urxFjYmYYh">Discord</a> / <a href="https://github.com/IAHispano/Applio">GitHub</a></li>
  <li>⭐ <strong><a href="https://www.weights.com/">Weights</a></strong> / <a href="https://www.reddit.com/r/weights/">Subreddit</a> / <a href="https://discord.gg/weights">Discord</a> or <a href="https://voice-models.com/">Voice Models</a> / <a href="https://discord.gg/3WJ8r6Bf5A">Discord</a> - AI Voice Models and Guides</li>
  <li>⭐ <strong><a href="https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI/blob/main/docs/en/README.en.md">RVC V2</a></strong> - RVC V2 Voice Cloning (Locally) / <a href="https://colab.research.google.com/github/RVC-Project/Retrieval-based-Voice-Conversion-WebUI/blob/main/Retrieval_based_Voice_Conversion_WebUI_v2.ipynb">Colab</a> / <a href="https://discord.gg/HcsmBBGyVk">Discord</a></li>
  <li>⭐ <strong><a href="https://github.com/w-okada/voice-changer/blob/master/docs_i18n/README_en.md">Voice Changer</a></strong> - Real-Time Voice Changer (W-Okada) / <a href="https://rentry.co/VoiceChangerGuide">Guide</a> / <a href="https://colab.research.google.com/github/w-okada/voice-changer/blob/master/Realtime_Voice_Changer_on_Colab.ipynb">Colab</a></li>
  <li>⭐ <strong><a href="https://huggingface.co/spaces/TheStinger/Ilaria_RVC">Ilaria RVC</a></strong> - RVC V2 Voice Cloning (Cloud/Colab) / No Sign-Up</li>
  <li><a href="https://www.weights.com/replay">Replay</a> - RVC Desktop App / <a href="https://discord.gg/A5rgNwDRd4">Discord</a></li>
  <li><a href="https://anyvoicelab.com/voice-cloning/">AnyVoiceLab</a> - Voice Cloning / No Sign-Up</li>
  <li><a href="https://www.allvoicelab.com/">AllVoiceLab</a> - Voice Cloning</li>
  <li><a href="https://playground.zyphra.com/audio">Zyphra</a> - Voice Cloning / <a href="https://github.com/Zyphra/Zonos">GitHub</a></li>
</ul>

<hr />

<h2 id="-voice-removal--separation">▷ Voice Removal / Separation</h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-voice-removal--separation"></a></p>
<ul>
  <li>🌐 <strong><a href="https://mvsep.com/quality_checker/multisong_leaderboard">MultiSong Leaderboard</a></strong> - Music &amp; Voice Separation AI Leaderboards</li>
  <li>⭐ <strong><a href="https://huggingface.co/spaces/TheStinger/UVR5_UI">UVR5 UI</a></strong></li>
  <li>⭐ <strong><a href="https://mvsep.com/">MVSEP</a></strong> / <a href="https://github.com/fmhy/FMHY/wiki/FMHY%E2%80%90Notes.md#mvsep-note">Decrease Queue Time</a></li>
  <li><a href="https://www.bandlab.com/splitter">Splitter</a> / Sign-Up Required</li>
  <li><a href="https://github.com/jarredou/MVSEP-MDX23-Colab_v2">MDX23</a></li>
  <li><a href="https://github.com/jarredou/Music-Source-Separation-Training-Colab-Inference">Music-Source-Separation</a></li>
  <li><a href="https://vocalremover.org/">VocalRemover</a></li>
  <li><a href="https://colab.research.google.com/github/NaJeongMo/Colaboratory-Notebook-for-Ultimate-Vocal-Remover/blob/main/Vocal%20Remover%205_arch.ipynb">Ultimate Vocal Remover</a></li>
  <li><a href="https://www.remove-vocals.com/">Remove Vocals</a> / <a href="https://www.acapella-extractor.com/">2</a></li>
  <li><a href="https://vocali.se/en">vocali</a></li>
  <li><a href="https://www.mazmazika.com/">mazmazika</a></li>
  <li><a href="https://unmix.audio/">Vocal Remover</a></li>
  <li><a href="https://ezstems.com/">ezstems</a></li>
</ul>

<hr />

<h2 id="-machine-learning">► <a href="https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/dev-tools#wiki_.25B7_machine_learning">Machine Learning</a></h2>

<p><a href="https://github.com/fmhy/FMHY/wiki/%F0%9F%A4%96-Artificial-Intelligence#-machine-learning"></a></p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">singlefile cli hint</title><link href="https://ib.bsb.br/singlefile-cli-hint/" rel="alternate" type="text/html" title="singlefile cli hint" /><published>2025-06-15T00:00:00+00:00</published><updated>2025-06-15T20:40:29+00:00</updated><id>https://ib.bsb.br/singlefile-cli-hint</id><content type="html" xml:base="https://ib.bsb.br/singlefile-cli-hint/"><![CDATA[<p>some website doesn’t load the data on headless + cloudflare block</p>

<p>The solution i found is :</p>

<p>tell application “Microsoft Edge”
activate
open location Link
tell application “System Events”
keystroke “y” using {control down, shift down}</p>

<p>end tell</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Prompt caching - OpenAI API</title><link href="https://ib.bsb.br/prompt-caching-openai-api/" rel="alternate" type="text/html" title="Prompt caching - OpenAI API" /><published>2025-06-11T00:00:00+00:00</published><updated>2025-06-11T16:47:29+00:00</updated><id>https://ib.bsb.br/prompt-caching-openai-api</id><content type="html" xml:base="https://ib.bsb.br/prompt-caching-openai-api/"><![CDATA[<p>Title: Prompt caching - OpenAI API</p>

<p>URL Source: https://platform.openai.com/docs/guides/prompt-caching</p>

<p>Markdown Content:
Reduce latency and cost with prompt caching.</p>

<p>Model prompts often contain repetitive content, like system prompts and common instructions. OpenAI routes API requests to servers that recently processed the same prompt, making it cheaper and faster than processing a prompt from scratch. This can reduce latency by up to 80% and cost by up to 75%. Prompt Caching works automatically on all your API requests (no code changes required) and has no additional fees associated with it. Prompt Caching is enabled for all recent <a href="https://platform.openai.com/docs/models">models</a>, gpt-4o and newer.</p>

<p>This guide describes how prompt caching works in detail, so that you can optimize your prompts for lower latency and cost.</p>

<h2 id="structuring-prompts">Structuring prompts</h2>

<p>Cache hits are only possible for exact prefix matches within a prompt. To realize caching benefits, place static content like instructions and examples at the beginning of your prompt, and put variable content, such as user-specific information, at the end. This also applies to images and tools, which must be identical between requests.</p>

<p><img src="https://openaidevs.retool.com/api/file/8593d9bb-4edb-4eb6-bed9-62bfb98db5ee" alt="Image 1: Prompt Caching visualization" /></p>

<h2 id="how-it-works">How it works</h2>

<p>Caching is enabled automatically for prompts that are 1024 tokens or longer. When you make an API request, the following steps occur:</p>

<ol>
  <li><strong>Cache Routing</strong>:</li>
</ol>

<ul>
  <li>Requests are routed to a machine based on a hash of the initial prefix of the prompt. The hash typically uses the first 256 tokens, though the exact length varies depending on the model.</li>
  <li>If you provide the <a href="https://platform.openai.com/docs/api-reference/responses/create#responses-create-user"><code class="language-plaintext highlighter-rouge">user</code></a> parameter, it is combined with the prefix hash, allowing you to influence routing and improve cache hit rates. This is especially beneficial when many requests share long, common prefixes.</li>
  <li>If requests for the same prefix and user combination exceed a certain rate (approximately 15 requests per minute), some may overflow and get routed to additional machines, reducing cache effectiveness.</li>
</ul>

<ol>
  <li><strong>Cache Lookup</strong>: The system checks if the initial portion (prefix) of your prompt exists in the cache on the selected machine.</li>
  <li><strong>Cache Hit</strong>: If a matching prefix is found, the system uses the cached result. This significantly decreases latency and reduces costs.</li>
  <li><strong>Cache Miss</strong>: If no matching prefix is found, the system processes your full prompt, caching the prefix afterward on that machine for future requests.</li>
</ol>

<p>Cached prefixes generally remain active for 5 to 10 minutes of inactivity. However, during off-peak periods, caches may persist for up to one hour.</p>

<h2 id="requirements">Requirements</h2>

<p>Caching is available for prompts containing 1024 tokens or more, with cache hits occurring in increments of 128 tokens. Therefore, the number of cached tokens in a request will always fall within the following sequence: 1024, 1152, 1280, 1408, and so on, depending on the prompt’s length.</p>

<p>All requests, including those with fewer than 1024 tokens, will display a <code class="language-plaintext highlighter-rouge">cached_tokens</code> field of the <code class="language-plaintext highlighter-rouge">usage.prompt_tokens_details</code><a href="https://platform.openai.com/docs/api-reference/chat/object">Chat Completions object</a> indicating how many of the prompt tokens were a cache hit. For requests under 1024 tokens, <code class="language-plaintext highlighter-rouge">cached_tokens</code> will be zero.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
7
8
9
10
11
12
13
"usage": {
  "prompt_tokens": 2006,
  "completion_tokens": 300,
  "total_tokens": 2306,
  "prompt_tokens_details": {
    "cached_tokens": 1920
  },
  "completion_tokens_details": {
    "reasoning_tokens": 0,
    "accepted_prediction_tokens": 0,
    "rejected_prediction_tokens": 0
  }
}
</code></pre></div></div>

<h3 id="what-can-be-cached">What can be cached</h3>

<ul>
  <li><strong>Messages:</strong> The complete messages array, encompassing system, user, and assistant interactions.</li>
  <li><strong>Images:</strong> Images included in user messages, either as links or as base64-encoded data, as well as multiple images can be sent. Ensure the detail parameter is set identically, as it impacts image tokenization.</li>
  <li><strong>Tool use:</strong> Both the messages array and the list of available <code class="language-plaintext highlighter-rouge">tools</code> can be cached, contributing to the minimum 1024 token requirement.</li>
  <li><strong>Structured outputs:</strong> The structured output schema serves as a prefix to the system message and can be cached.</li>
</ul>

<h2 id="best-practices">Best practices</h2>

<ul>
  <li>Structure prompts with <strong>static or repeated content at the beginning</strong> and dynamic, user-specific content at the end.</li>
  <li>Use the <strong><a href="https://platform.openai.com/docs/api-reference/responses/create#responses-create-user"><code class="language-plaintext highlighter-rouge">user</code></a> parameter</strong> consistently across requests that share common prefixes. Select a <code class="language-plaintext highlighter-rouge">user</code> granularity that keeps each unique prefix-user combination below 15 requests per minute to avoid cache overflow.</li>
  <li><strong>Monitor your cache performance metrics</strong>, including cache hit rates, latency, and the proportion of tokens cached, to refine your strategy.</li>
  <li><strong>Maintain a steady stream of requests</strong> with identical prompt prefixes to minimize cache evictions and maximize caching benefits.</li>
</ul>

<h2 id="frequently-asked-questions">Frequently asked questions</h2>

<ol>
  <li><strong>How is data privacy maintained for caches?</strong></li>
</ol>

<p>Prompt caches are not shared between organizations. Only members of the same organization can access caches of identical prompts.</p>

<ol>
  <li><strong>Does Prompt Caching affect output token generation or the final response of the API?</strong></li>
</ol>

<p>Prompt Caching does not influence the generation of output tokens or the final response provided by the API. Regardless of whether caching is used, the output generated will be identical. This is because only the prompt itself is cached, while the actual response is computed anew each time based on the cached prompt.</p>

<ol>
  <li><strong>Is there a way to manually clear the cache?</strong></li>
</ol>

<p>Manual cache clearing is not currently available. Prompts that have not been encountered recently are automatically cleared from the cache. Typical cache evictions occur after 5-10 minutes of inactivity, though sometimes lasting up to a maximum of one hour during off-peak periods.</p>

<ol>
  <li><strong>Will I be expected to pay extra for writing to Prompt Caching?</strong></li>
</ol>

<p>No. Caching happens automatically, with no explicit action needed or extra cost paid to use the caching feature.</p>

<ol>
  <li><strong>Do cached prompts contribute to TPM rate limits?</strong></li>
</ol>

<p>Yes, as caching does not affect rate limits.</p>

<ol>
  <li><strong>Is discounting for Prompt Caching available on Scale Tier and the Batch API?</strong></li>
</ol>

<p>Discounting for Prompt Caching is not available on the Batch API but is available on Scale Tier. With Scale Tier, any tokens that are spilled over to the shared API will also be eligible for caching.</p>

<ol>
  <li><strong>Does Prompt Caching work on Zero Data Retention requests?</strong></li>
</ol>

<p>Yes, Prompt Caching is compliant with existing Zero Data Retention policies.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Reinforcement fine-tuning use cases - OpenAI API</title><link href="https://ib.bsb.br/reinforcement-fine-tuning-use-cases-openai-api/" rel="alternate" type="text/html" title="Reinforcement fine-tuning use cases - OpenAI API" /><published>2025-06-11T00:00:00+00:00</published><updated>2025-06-11T16:35:48+00:00</updated><id>https://ib.bsb.br/reinforcement-fine-tuning-use-cases-openai-api</id><content type="html" xml:base="https://ib.bsb.br/reinforcement-fine-tuning-use-cases-openai-api/"><![CDATA[<p>Title: Reinforcement fine-tuning use cases - OpenAI API</p>

<p>URL Source: https://platform.openai.com/docs/guides/rft-use-cases</p>

<p>Markdown Content:
Learn use cases and best practices for reinforcement fine-tuning.</p>

<p><a href="https://platform.openai.com/docs/guides/reinforcement-fine-tuning">Reinforcement fine-tuning</a> (RFT) provides a way to improve your model’s performance at specific tasks. The task must be clear and have verifiable answers.</p>

<h2 id="when-to-use-reinforcement-fine-tuning">When to use reinforcement fine-tuning</h2>

<p>Agentic workflows are designed to make decisions that are both correct and verifiable. RFT can help by providing explicit rubrics and using code‑based or LLM‑based graders to measure functional success, factual accuracy, or policy compliance.</p>

<p>Across early users, three clear use cases have emerged:</p>

<ol>
  <li><strong>Turn instructions into working code</strong>: Convert open-ended prompts into structured code, configs, or templates that must pass deterministic tests.</li>
  <li><strong>Pull facts into a clean format</strong>: Extract verifiable facts and summaries from messy, unstructured text and return JSON-structured or other schema-based outputs.</li>
  <li><strong>Apply complex rules correctly</strong>: Make fine-grained label or policy decisions when the information provided is nuanced, large in quantity, hierarchical, or high-stakes.</li>
</ol>

<p><a href="https://platform.openai.com/docs/guides/reinforcement-fine-tuning">Ready to use reinforcement fine-tuning? Skip to the guide →</a></p>

<h3 id="1-turn-instructions-into-working-code">1. Turn instructions into working code</h3>

<p>In this use case, models reason over hidden domain constraints to produce structured outputs like code, queries, or infrastructure templates. Outputs must satisfy multiple correctness conditions, and success is usually deterministically graded: the artifact either compiles, passes tests, or meets an explicit schema.</p>

<h4 id="wiring-verification-ips-for-semiconductor-design">Wiring verification IPs for semiconductor design</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.chipstack.ai/">ChipStack</a> is building the next-generation of AI-powered tools for chip design and verification, aimed at significantly reducing the time and cost of developing and validating complex semiconductor chips.</p>

  <p><strong>Problem to solve</strong>: One task that’s challenging and time-consuming for humans is binding design interfaces to verification IPs (pre-created verification components that, when properly applied, can signifcantly enhance quality and coverage of verification). There are many verification IPs, and each can contain dozens to hundreds of signals that may be mapped. Someone must understand this domain well in order to apply the verification IP correctly.</p>

  <p><strong>Objective</strong>: To train OpenAI reasoning models to do this instead, ChipStack prepared a dataset consisting of less than 50 samples, then performed several RFT variations. For the final evaluation report, they ran this evaluation set three times against each model and variation—o1-mini base and fine-tuned, o3-mini base and fine-tuned—and averaged the results per-sample then overall.</p>
</blockquote>

<p>Prompt</p>

<blockquote>
  <p>Below is a piece of example data provided.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
[
    {“name”: “BLOCK_SIZE”, “value”: “8”},
    {“name”: “ADDR_WIDTH”, “value”: “4”}
]
</code></pre></div></div>

<p>Grader code</p>

<blockquote>
  <p>Below is a grader definition in Python of a string map, represented as a list of objects with <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">value</code> properties.</p>

  <p>Conceptually, this is meant to model a type like <code class="language-plaintext highlighter-rouge">Dict[str, str]</code>.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
{
  "type": "python",
  "name": "donors_caas",
  "image_tag": "alpha",
  "source": "from collections import Counter

def grade(sample: dict[str, str], item: dict[str, str]) -&gt; float:
    # multisets of (name, value) pairs
    predicted = sample[\"output_json\"][\"predicted\"]
    expected  = item[\"reference_answer\"]
    pred_counts = Counter((d[\"name\"], d[\"value\"]) for d in predicted)
    exp_counts  = Counter((d[\"name\"], d[\"value\"]) for d in expected)

    true_pos = sum(min(pred_counts[p], exp_counts[p]) for p in pred_counts)
    pred_total = sum(pred_counts.values())
    exp_total  = sum(exp_counts.values())

    precision = true_pos / pred_total if pred_total else 0.0
    recall    = true_pos / exp_total  if exp_total  else 0.0

    if precision + recall == 0.0:
        return 0.0
    return 2 * precision * recall / (precision + recall)"
}
</code></pre></div></div>

<p>Results</p>

<blockquote>
  <p>For both o1-mini and o3-mini, performance improved by ~12 percentage points. The fine-tuned variants got much better about recognizing when not to apply wiring. Many commercial verification IPs can contain hundreds of optional signals, most of which are not meant to be applied.</p>

  <p>“Thanks to powerful base models and easy-to-use Reinforced Fine-Tuning APIs, we were able to significantly boost performance on our task with a small set of high-quality samples.”</p>

  <p>—<a href="https://www.chipstack.ai/">ChipStack</a>, next-generation of AI-powered tools for chip design and verification</p>
</blockquote>

<h4 id="production-ready-api-snippets-that-compile-and-pass-ast-checks">Production-ready API snippets that compile and pass AST checks</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.runloop.ai/">Runloop</a> is a platform for AI-powered coding agents to be deployed into production and built with public and custom benchmarking capabilities to refine performance.</p>

  <p><strong>Problem to solve</strong>: Runloop wanted to improve model performance at using third-party APIs, such as the Stripe API, which can be large and complex without a human in the loop. If they could train a model to use the Stripe API, Runloop could turn economically impactful business cases into working code.</p>

  <p><strong>Objective</strong>: Their goal was teaching the model to master usage of the Stripe API, including writing complete code snippets for arbitrary user requests by either adapting information from existing integration guides, merging information from multiple guides, or inferring information not explicitly stated in the guides. They used RFT with two primary rewards:</p>

  <ol>
    <li>Reward the model for outputting the answer in a Markdown format that aligns with expectation of how a “dynamic” integration guide should look.</li>
    <li>Reward the model for producing “correct” code snippets by validating the outputted code via AST Grep. This allows them to confirm the model is making the correct Stripe SDK calls with the correct parameters and in some cases even in the correct order.</li>
  </ol>
</blockquote>

<p>Grader code</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
# Note this file gets uploaded to the OpenAI API as a grader
from ast_grep_py import SgRoot
from pydantic import BaseModel, Field  # type: ignore
from typing import Any, List, Optional
import re

SUPPORTED_LANGUAGES = ['typescript', 'javascript', 'ts', 'js']

class CodeBlock(BaseModel):    
    language: str = Field(
        description="Programming language of the code block (e.g., 'python', 'javascript')",
        examples=["python", "javascript", "typescript"]
    )
    path: str = Field(
        description="Target file path where the code should be written",
        examples=["main.py", "src/app.js", "index.html"]
    )
    code: str = Field(
        description="Actual code content extracted from the code block"
    )

class ASTGrepPattern(BaseModel):
    file_path_mask: str = Field(..., description="The file path pattern to match against")
    pattern: str = Field(..., description="The main AST grep pattern to search for")
    additional_greps: Optional[List[str]] = Field(
        default=None,
        description="Additional patterns that must also be present in the matched code"
    )

def extract_code_blocks(llm_output: str) -&gt; List[CodeBlock]:
    # Regular expression to match code blocks with optional language and path
    try:
        pattern = r"```(\w+\s+)?([\w./-]+)?\n([\s\S]*?)\n```"
        matches = list(re.finditer(pattern, llm_output, re.DOTALL))

        print(f"Found {len(matches)} code blocks in the LLM output")

        # Check if any code blocks were found
        if not matches:
            raise Exception("No code blocks found in the LLM response")

        code_blocks: list[CodeBlock] = []
        for match in matches:
            language = match.group(1) or ""
            path = match.group(2) or ""
            code = match.group(3)

            # Clean the path and language
            path = path.strip()
            language = language.strip()

            # If path is relative (doesn't start with /), prefix with /home/user/testbed/
            if path and not path.startswith("/"):
                original_path = path
                path = f"/home/user/testbed/{path}"
                print(
                    f"Converting relative path '{original_path}' to absolute path '{path}'"
                )

            code_blocks.append(
                CodeBlock(language=language, path=path, code=code.strip())
            )

        # Check for missing language or path in code blocks
        missing_language = [
            i for i, block in enumerate(code_blocks) if not block.language
        ]
        missing_path = [i for i, block in enumerate(code_blocks) if not block.path]

        if missing_language:
            print(
                f"WARNING: Code blocks at positions {missing_language} are missing language identifiers"
            )
            raise Exception(
                f"Code blocks at positions {missing_language} are missing language identifiers"
            )

        if missing_path:
            print(
                f"WARNING: Code blocks at positions {missing_path} are missing file paths"
            )
            raise Exception(
                f"Code blocks at positions {missing_path} are missing file paths"
            )

        paths = [block.path for block in code_blocks if block.path]
        print(
            f"Successfully extracted {len(code_blocks)} code blocks with paths: {', '.join(paths)}"
        )

    except Exception as e:
        print(f"Error extracting code blocks: {str(e)}")
        raise

    return code_blocks

def calculate_ast_grep_score(code_blocks: List[CodeBlock], ast_greps: Any) -&gt; float: 
    # Convert ast_greps to list if it's a dict
    if isinstance(ast_greps, dict):
        ast_greps = [ast_greps]
    
    # Parse each grep pattern into the Pydantic model
    parsed_patterns: List[ASTGrepPattern] = []
    for grep in ast_greps:
        try:
            pattern = ASTGrepPattern(**grep)
            parsed_patterns.append(pattern)
        except Exception as e:
            print(f"Error parsing AST grep pattern: {e}")
            return 0.0
    
    if not parsed_patterns:
        return 0.0

    total_score = 0.0    
    pattern_count = len(parsed_patterns)
    
    # Filter code blocks to only include TypeScript and JavaScript files
    supported_blocks = [
        block for block in code_blocks 
        if block.language.lower() in SUPPORTED_LANGUAGES
    ]

    if not supported_blocks:
        print("No TypeScript or JavaScript code blocks found to analyze")
        return 0.0

    for pattern in parsed_patterns:
        # Find matching code blocks based on path prefix
        matching_blocks = [
            block for block in supported_blocks 
            if block.path.startswith(pattern.file_path_mask)
        ]

        if not matching_blocks:
            print(f"No matching code blocks found for path prefix: {pattern.file_path_mask}")
            continue

        pattern_found = False
        for block in matching_blocks:
            try:
                # Create AST root for the code block
                root = SgRoot(block.code, block.language)
                node = root.root()
                
                # Check main pattern
                matches = node.find(pattern=pattern.pattern)
                if not matches:
                    continue

                # If we have additional greps, check them too
                if pattern.additional_greps:
                    all_additional_found = True
                    for additional_grep in pattern.additional_greps:
                        if additional_grep not in block.code:
                            all_additional_found = False
                            break
                    
                    if not all_additional_found:
                        continue

                # If we get here, we found a match with all required patterns
                pattern_found = True
                break

            except Exception as e:
                print(f"Error processing code block {block.path}: {e}")
                continue

        if pattern_found:
            total_score += 1.0

    # Return average score across all patterns
    return total_score / pattern_count if pattern_count &gt; 0 else 0.0

def grade_format(output_text: str) -&gt; float:
        # Find &lt;plan&gt; and &lt;/plan&gt; tags
    plan_start = output_text.find('&lt;plan&gt;')
    plan_end = output_text.find('&lt;/plan&gt;')
    
    # Find &lt;code&gt; and &lt;/code&gt; tags
    code_start = output_text.find('&lt;code&gt;')
    code_end = output_text.find('&lt;/code&gt;')

    reward = 0.0
    
    if plan_start == -1 or plan_end == -1 or code_start == -1 or code_end == -1:
        print(f'missing plan or code tags. format reward: {reward}')
        return reward
    reward += 0.1 # total: 0.1
    
    if not (plan_start &lt; plan_end &lt; code_start &lt; code_end):
        print(f'tags present but not in the correct order. format reward: {reward}')
        return reward
    reward += 0.1 # total: 0.2

    # Check if there are any stray tags
    plan_tags = re.findall(r'&lt;/?plan&gt;', output_text)
    code_tags = re.findall(r'&lt;/?code&gt;', output_text)
    
    if len(plan_tags) != 2 or len(code_tags) != 2:
        print(f'found stray plan or code tags. format reward: {reward}')
        return reward
    reward += 0.2 # total: 0.4
    
    # Extract content after &lt;/code&gt; tag
    after_tags = output_text[code_end + len('&lt;/code&gt;'):].strip()
    if after_tags:
        print(f'found text after code tags. format reward: {reward}')
        return reward
    reward += 0.2 # total: 0.6
    
    # Extract content inside &lt;plan&gt; tags
    plan_content = output_text[plan_start + len('&lt;plan&gt;'):plan_end].strip()
    if not plan_content:
        print(f'no plan content found. format reward: {reward}')
        return reward
    reward += 0.1 # total: 0.7
    
    # Extract content inside &lt;code&gt; tags
    code_content = output_text[code_start + len('&lt;code&gt;'):code_end].strip()
    if not code_content:
        print(f'no code content found. format reward: {reward}')
        return reward
    reward += 0.1 # total: 0.8

    # Extract content between &lt;/plan&gt; and &lt;code&gt; tags
    between_tags = output_text[plan_end + len('&lt;/plan&gt;'):code_start].strip()
    if between_tags:
        print(f'found text between plan and code tags. format reward: {reward}')
        return reward
    reward += 0.2 # total: 1.0
    
    if reward == 1.0:
        print(f'global format reward: {reward}')

    return reward

def grade(sample: Any, item: Any) -&gt; float:
    try:
        output_text = sample["output_text"]    

        format_reward = grade_format(output_text)
        if format_reward &lt; 1.0:
            return format_reward
        
        # Extract code content for grading
        code_start = output_text.find('&lt;code&gt;')
        code_end = output_text.find('&lt;/code&gt;')
        code_to_grade: str = output_text[code_start + len('&lt;code&gt;'):code_end].strip()
        code_blocks: List[CodeBlock] = []
        try:
            code_blocks = extract_code_blocks(code_to_grade)
        except Exception as e:
            print(f'error extracting code blocks: {e}')
            return 0.5
        
        ast_greps = item["reference_answer"]["ast_greps"]
        ast_grep_score = calculate_ast_grep_score(code_blocks, ast_greps)
        
        return (format_reward + ast_grep_score) / 2.0
    except Exception as e:
        print(f"Error during grading: {str(e)}")
        return 0.0
</code></pre></div></div>

<p>Results</p>

<blockquote>
  <p>Looking at the total reward (format and AST Grep) together, Runloop has seen improvements of on average <strong>12%</strong> of the RFT model compared to the base o3-mini model on the benchmark.</p>

  <p>They implement two types of tests, one providing explicit content from the integration guides (assessing reasoning and instruction following) and one without (assessing knowledge recall). Both variants saw improvement of over <strong>8%</strong>.</p>

  <p>“OpenAIs RFT platform gives us access to the best generalized reasoning models in the world, with the toolset to supercharge that reasoning on problem domains important to our business.”</p>

  <p>—<a href="https://www.runloop.ai/">Runloop</a></p>
</blockquote>

<h4 id="correct-handling-of-conflicts-and-dupes-in-a-schedule-manager">Correct handling of conflicts and dupes in a schedule manager</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.joinmilo.com/">Milo</a> helps busy parents manage chaotic family schedules by converting messy inputs—like text convos with to-dos, school newsletter PDFs, weekly reminders, sports schedule emails—into reliable calendar and list actions.</p>

  <p><strong>Problem to solve</strong>: Base GPT-4o prompting and SFT fell short of trust thresholds.</p>

  <p><strong>Objective</strong>: Milo used RFT to properly create coding tasks like event vs. list classification, recurrence rule generation, accurate updates and deletes, conflict detection, and strict output formatting. They defined a grader that checked whether generated item objects were complete, categorized correctly, and were a duplicate or had a calendar conflict.</p>
</blockquote>

<p>Results</p>

<blockquote>
  <p>Results showed performance improvements across the board, with average correctness scores <strong>increasing from 0.86 to 0.91</strong>, while the most challenging scenarios improved from <strong>0.46 to 0.71</strong> (where a perfect score=1).</p>

  <p>“Accuracy isn’t just a metric—it’s peace of mind for busy parents. These are still early days but with such important improvements in base performance, we’re able to push more aggressively into complex reasoning needs.”</p>

  <p>“Navigating and supporting family dynamics involves understanding nuanced implications of the data. Take conflicts—knowing soccer for Ethan conflicts with Ella’s recital because Dad has to drive both kids goes deeper than simple overlapping times.”</p>

  <p>—<a href="https://www.joinmilo.com/">Milo</a>, AI scheduling tool for families</p>
</blockquote>

<h3 id="2-pull-facts-into-a-clean-format">2. Pull facts into a clean format</h3>

<p>These tasks typically involve subtle distinctions that demand clear classification guidelines. Successful framing requires explicit and hierarchical labeling schemes defined through consensus by domain experts. Without consistent agreement, grading signals become noisy, weakening RFT effectiveness.</p>

<h4 id="assigning-icd-10-medical-codes">Assigning ICD-10 medical codes</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.ambiencehealthcare.com/">Ambience</a> is an AI platform that eliminates administrative burden for clinicians and ensures accurate, compliant documentation across 100+ specialties, helping physicians focus on patient care while increasing documentation quality and reducing compliance risk for health systems.</p>

  <p><strong>Problem to solve</strong>: ICD-10 coding is one of the most intricate administrative tasks in medicine. After every patient encounter, clinicians must map each diagnosis to one of ~70,000 codes—navigating payor-specific rules on specificity, site-of-care, and mutually exclusive pairings. Errors can trigger audits and fines that stretch into nine figures.</p>

  <p><strong>Objective</strong>: Using reinforcement fine-tuning on OpenAI frontier models, Ambience wanted to train a reasoning system that listens to the visit audio, pulls in relevant EHR context, and recommends ICD-10 codes with accuracy exceeding expert clinicians.</p>
</blockquote>

<p>Results</p>

<blockquote>
  <p>Ambience achieved model improvements that can lead human experts.</p>

  <p>On a gold-panel test set spanning hundreds of encounters, reinforcement fine-tuning moved the model from trailing humans to leading them by <strong>12 points—eliminating roughly one quarter of the coding errors trained physicians make</strong>:</p>

  <ul>
    <li>o3-mini (base): 0.39 (-6 pts)</li>
    <li>Physician baseline: 0.45</li>
    <li>RFT-tuned o3-mini: 0.57 (+12 pts)</li>
  </ul>

  <p>The result is a real-time, point-of-care coding support that can raise reimbursement integrity while reducing compliance risk.</p>

  <p>“Accurate ICD-10 selection is mission-critical for compliant documentation. RFT unlocked a new level of coding precision we hadn’t seen from any foundation model and set a new bar for automated coding.”</p>

  <p>—<a href="https://www.ambiencehealthcare.com/">Ambience Healthcare</a></p>
</blockquote>

<h4 id="extracting-excerpts-to-support-legal-claims">Extracting excerpts to support legal claims</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.harvey.ai/">Harvey</a> is building AI that legal teams trust—and that trust hinges on retrieving precisely the right evidence from a sprawling corpora of contracts, statutes, and case law. Legal professionals aren’t satisfied with models that merely generate plausible-sounding summaries or paraphrased answers. They demand verifiable citations—passages that can be traced directly back to source documents.</p>

  <p><strong>Problem to solve</strong>: Harvey’s clients use its models to triage litigation risk, construct legal arguments, and support due diligence for legal professionals—all tasks where a single missed or misquoted sentence can flip an outcome. Models must be able to parse long, dense legal documents and extract only the portions that matter. In practice, these inputs are often messy and inconsistent: some claims are vague, while others hinge on rare legal doctrines buried deep in boilerplate.</p>

  <p><strong>Objective</strong>: The task’s requirements are to interpret nuanced legal claims, navigate long-form documents, and select on-point support with verbatim excerpts.</p>
</blockquote>

<p>Prompt</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
## Instructions
You will be provided with a question and a text excerpt. Identify any passages in the text that are directly relevant to answering the question.
- If there are no relevant passages, return an empty list.
- Passages must be copied **exactly** from the text. Do not paraphrase or summarize.
## Excerpt
"""{text_excerpt}"""
</code></pre></div></div>

<p>Grader</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
from rapidfuzz import fuzz

# Similarity ratio helper
def fuzz_ratio(a: str, b: str) -&gt; float:
    """Return a normalized similarity ratio using RapidFuzz.
    """
    if len(a) == 0 and len(b) == 0:
        return 1.0
    return fuzz.ratio(a, b) / 100.0

# Main grading entrypoint (must be named `grade`)
def grade(sample: dict, item: dict) -&gt; float:
    """Compute an F1‑style score for citation extraction answers using RapidFuzz.
    """
    model_passages = (sample.get('output_json') or {}).get('passages', [])
    ref_passages = (item.get('reference_answer') or {}).get('passages', [])

    # If there are no reference passages, return 0.
    if not ref_passages:
        return 0.0

    # Recall: average best match for each reference passage.
    recall_scores = []
    for ref in ref_passages:
        best = 0.0
        for out in model_passages:
            score = fuzz_ratio(ref, out)
            if score &gt; best:
                best = score
        recall_scores.append(best)
    recall = sum(recall_scores) / len(recall_scores)

    # Precision: average best match for each model passage.
    if not model_passages:
        precision = 0.0
    else:
        precision_scores = []
        for out in model_passages:
            best = 0.0
            for ref in ref_passages:
                score = fuzz_ratio(ref, out)
                if score &gt; best:
                    best = score
            precision_scores.append(best)
        precision = sum(precision_scores) / len(precision_scores)

    if precision + recall == 0:
        return 0.0

    return 2 * precision * recall / (precision + recall)
</code></pre></div></div>

<p>Results</p>

<blockquote>
  <p>After reinforcement fine-tuning, Harvey saw a <strong>20% increase</strong> in the F1 score:</p>

  <ul>
    <li>Baseline F1: 0.563</li>
    <li>Post-RFT F1 - 0.6765</li>
  </ul>

  <p>Using RFT, Harvey significantly improved legal fact-extraction performance, surpassing GPT-4o efficiency and accuracy. Early trials showed RFT <strong>winning or tying in 93% of comparisons</strong> against GPT-4o.</p>

  <p>“The RFT model demonstrated comparable or superior performance to GPT-4o, but with significantly faster inference, proving particularly beneficial for real-world legal use cases.</p>

  <p>—<a href="https://www.harvey.ai/">Harvey</a>, AI for legal teams</p>
</blockquote>

<h3 id="3-apply-complex-rules-correctly">3. Apply complex rules correctly</h3>

<p>This use case involves pulling verifiable facts or entities from unstructured inputs into clearly defined schemas (e.g., JSON objects, condition codes, medical codes, legal citations, or financial metrics).</p>

<p>Successful extraction tasks typically benefit from precise, continuous grading methodologies—like span-level F1 scores, fuzzy text-matching metrics, or numeric accuracy checks—to evaluate how accurately the extracted information aligns with ground truth. Define explicit success criteria and detailed rubrics. Then, the model can achieve reliable, repeatable improvements.</p>

<h4 id="expert-level-reasoning-in-tax-analysis">Expert-level reasoning in tax analysis</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.accordance.com/">Accordance</a> is building a platform for tax, audit, and CPA teams.</p>

  <p><strong>Problem to solve</strong>: Taxation is a highly complex domain, requiring deep reasoning across nuanced fact patterns and intricate regulations. It’s also a field that continues changing.</p>

  <p><strong>Objective</strong>: Accordance wanted a high-trust system for sophisticated tax scenarios while maintaining accuracy. Unlike traditional hardcoded software, it’s important that their data extraction tool adapts as the tax landscape evolves.</p>
</blockquote>

<p>Grader code</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
6
7
8
9
10
11
12
[+0.05] For correctly identifying Alex (33.33%), Barbara (33.33% → 20%), Chris (33.33%), and Dana (13.33%) ownership percentages
[+0.1] For correctly calculating Barbara's annual allocation as 26.67% and Dana's as 6.67% without closing of books
[+0.15] For properly allocating Alex ($300,000), Barbara ($240,030), Chris ($300,000), and Dana ($60,030) ordinary income
[+0.1] For calculating Alex's ending stock basis as $248,333 and debt basis as $75,000
[+0.05] For calculating Barbara's remaining basis after sale as $264,421
[+0.1] For calculating AAA before distributions as $1,215,000 and ending AAA as $315,000
[+0.1] For identifying all distributions as tax-free return of capital under AAA
[+0.1] For calculating Barbara's capital gain on stock sale as $223,720 ($400,000 - $176,280)
[+0.1] For explaining that closing of books would allocate based on actual half-year results
[+0.05] For identifying the ordering rules: AAA first, then E&amp;P ($120,000), then remaining basis
[+0.05] For noting distributions exceeding $1,215,000 would be dividends up to $120,000 E&amp;P
[+0.05] For correctly accounting for separately stated items in basis calculations (e.g., $50,000 Section 1231 gain)
</code></pre></div></div>

<p>Results</p>

<blockquote>
  <p>By collaborating with OpenAI and their in-house tax experts, Accordance achieved:</p>

  <ul>
    <li>Almost <strong>40% improvement</strong> in tax analysis tasks over base models</li>
    <li>Superior performance compared to all other leading models on benchmarks like TaxBench</li>
    <li>The RFT-trained models demonstrated an ability to handle advanced tax scenarios with high accuracy—when evaluated by tax professionals, Accordance’s fine-tuned models showed expert-level reasoning, with the potential to save thousands of hours of manual work</li>
  </ul>

  <p>“We’ve achieved a 38.89% improvement in our tax analysis tasks over base models and significantly outperformed all other leading models on key tax benchmarks (including TaxBench). The RFT-trained models’ abilities to handle sophisticated tax scenarios while maintaining accuracy demonstrates the readiness of reinforcement fine-tuning—and AI more broadly—for professional applications. Most importantly, RFT provides a foundation for continuous adaptation as the tax landscape evolves, ensuring sustained value and relevance. When evaluated by tax experts, our fine-tuned models demonstrated expert-level reasoning capabilities that will save thousands of professional hours—this isn’t just an incremental improvement, it’s a paradigm shift in how tax work can be done.”</p>

  <p>—<a href="https://www.accordance.com/">Accordance</a>, AI tax accounting company</p>
</blockquote>

<h4 id="enforcement-of-nuanced-content-moderation-policies">Enforcement of nuanced content moderation policies</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.safetykit.com/">SafetyKit</a> is a risk and compliance platform that helps organizations make decisions across complex content moderation workflows.</p>

  <p><strong>Porblem to solve</strong>: These systems must handle large volumes of content and apply intricate policy logic that requires multistep reasoning. Because of the volume of data and subtle distinctions in labelling, these types of tasks can be difficult for general purpose models.</p>

  <p><strong>Objective</strong>: SafetyKit aimed to replace multiple nodes in their most complex workflows with a single reasoning agent using a reinforcement fine-tuned model. The goal is to reduce SafetyKit’s time-to-market for novel policy enforcements even in challenging, nuanced domains.</p>
</blockquote>

<p>Results</p>

<blockquote>
  <p>SafetyKit is using their o3-mini RFT model to support advanced content moderation capabilities, ensuring user safety for one of the largest AI chatbot companies in the world. They have successfully improved F1-score <strong>from 86% to 90%</strong>, soon to replace dozens of 4o calls within their production pipeline.</p>

  <p>“SafetyKit’s RFT-enabled moderation achieved substantial improvements in nuanced content moderation tasks, crucial for safeguarding users in dynamic, real-world scenarios.”</p>

  <p>—<a href="https://www.safetykit.com/">SafetyKit</a></p>
</blockquote>

<h4 id="legal-document-reviews-comparisons-and-summaries">Legal document reviews, comparisons, and summaries</h4>

<p>Use case</p>

<blockquote>
  <p><strong>Company</strong>: <a href="https://www.thomsonreuters.com/">Thomson Reuters</a> is an AI and technology company empowering professionals with trusted content and workflow automation.</p>

  <p><strong>Problem to solve</strong>: Legal professionals must read through large amounts of content before making any decisions. Thomson Reuter’s CoCounsel product is designed to help these experts move faster by providing an AI assistant with content and industry knowledge. The models that power this tool must understand complex legal rules.</p>

  <p><strong>Objective</strong>: Thomson Reuters aimed to create a reinforcement fine-tuned model excelling in legal AI skills. They conducted preliminary evaluations of RFT to see if they could achieve model performance improvements, using specialized datasets from three highly-used CoCounsel Legal AI skills for legal professionals:</p>

  <ol>
    <li>Review documents: Generates detailed answers to questions asked against contracts, transcripts, and other legal documents</li>
    <li>Compare documents: Highlights substantive differences between two or more different contracts or documents</li>
    <li>Summarize: Summarizes the most important information within one or more documents to enable rapid legal review</li>
  </ol>
</blockquote>

<p>Results</p>

<blockquote>
  <p><img src="https://cdn.openai.com/API/docs/images/thomsonreuters-results.png" alt="Image 1: Provide example data and create a fine-tuning job to optimize model performance for your use case" /></p>

  <p>“LLM as a judge has been helpful in demonstrating the possibility of improving upon the reasoning models - in preliminary evaluations, the RFT model consistently performed better than the baseline o3-mini and o1 model”</p>

  <p>—<a href="https://www.thomsonreuters.com/">Thomson Reuters</a>, AI and technology company</p>
</blockquote>

<h2 id="evals-are-the-foundation">Evals are the foundation</h2>

<p><strong>Before implementing RFT, we strongly recommended creating and running an eval for the task you intend to fine-tune on</strong>. If the model you intend to fine-tune scores at either the absolute minimum or absolute maximum possible score, then RFT won’t be useful to you.</p>

<p>RFT works by reinforcing better answers to provided prompts. If we can’t distinguish the quality of different answers (i.e., if they all receive the minimum or maximum possible score), then there’s no training signal to learn from. However, if your eval scores somewhere in the range between the minimum and maximum possible scores, there’s enough data to work with.</p>

<p>An effective eval reveals opportunities where human experts consistently agree but current frontier models struggle, presenting a valuable gap for RFT to close. <a href="https://platform.openai.com/docs/guides/evals">Get started with evals</a>.</p>

<h2 id="how-to-get-better-results-from-rft">How to get better results from RFT</h2>

<p>To see improvements in your fine-tuned model, there are two main places to revisit and refine: making sure your task is well defined, and making your grading scheme more robust.</p>

<h3 id="reframe-or-clarify-your-task">Reframe or clarify your task</h3>

<p>Good tasks give the model a fair chance to learn and let you quantify improvements.</p>

<ul>
  <li><strong>Start with a task the model can already solve occasionally</strong>. RFT works by sampling many answers, keeping what looks best, and nudging the model toward those answers. If the model never gets the answer correct today, it cannot improve.</li>
  <li><strong>Make sure each answer can be graded</strong>. A grader must read an answer and produce a score without a person in the loop. We support multiple <a href="https://platform.openai.com/docs/guides/graders">grader types</a>, including custom Python graders and LLM judges. If you can’t write code to judge the answer with an available grader, RFT is not the right tool.</li>
  <li><strong>Remove doubt about the “right” answer</strong>. If two careful people often disagree on the solution, the task is too fuzzy. Rewrite the prompt, add context, or split the task into clearer parts until domain experts agree.</li>
  <li><strong>Limit lucky guesses</strong>. If the task is multiple choice with one obvious best pick, the model can win by chance. Add more classes, ask for short open‑ended text, or tweak the format so guessing is costly.</li>
</ul>

<h3 id="strengthen-your-grader">Strengthen your grader</h3>

<p>Clear, robust grading schemes are essential for RFT.</p>

<ul>
  <li><strong>Produce a smooth score, not a pass/fail stamp</strong>. A score that shifts gradually as answers improve provides a better training signal.</li>
  <li><strong>Guard against reward hacking</strong>. This happens when the model finds a shortcut that earns high scores without real skill.</li>
  <li><strong>Avoid skewed data</strong>. Datasets in which one label shows up most of the time invite the model to guess that label. Balance the set or up‑weight rare cases so the model must think.</li>
  <li><strong>Use an LLM judge when code falls short</strong>. For rich, open‑ended answers, have a <a href="https://platform.openai.com/docs/guides/graders#model-graders">separate OpenAI model grade</a> your fine-tuned model’s answers. Make sure you:
    <ul>
      <li><strong>Evaluate the judge</strong>: Run multiple candidate responses and correct answers through your LLM judge to ensure the grade returned is stable and aligned with preference.</li>
      <li><strong>Provide few-shot examples</strong>. Include great, fair, and poor answers in the prompt to improve the grader’s effectiveness.</li>
    </ul>
  </li>
</ul>

<p>Learn more about <a href="https://platform.openai.com/docs/guides/graders">grader types</a>.</p>

<h2 id="other-resources">Other resources</h2>

<p>For more inspiration, visit the <a href="https://cookbook.openai.com/">OpenAI Cookbook</a>, which contains example code and links to third-party resources, or learn more about our models and reasoning capabilities:</p>

<ul>
  <li><a href="https://platform.openai.com/docs/models">Meet the models</a></li>
  <li><a href="https://platform.openai.com/docs/guides/reinforcement-fine-tuning">Reinforcement fine-tuning guide</a></li>
  <li><a href="https://platform.openai.com/docs/guides/graders">Graders</a></li>
  <li>
    <p><a href="https://platform.openai.com/docs/guides/model-optimization">Model optimization overview</a></p>
  </li>
  <li><a href="https://platform.openai.com/docs/guides/rft-use-cases#top">Overview</a></li>
  <li><a href="https://platform.openai.com/docs/guides/rft-use-cases#when-to-use-reinforcement-fine-tuning">When to use reinforcement fine-tuning</a></li>
  <li><a href="https://platform.openai.com/docs/guides/rft-use-cases#evals-are-the-foundation">Evals are the foundation</a></li>
  <li><a href="https://platform.openai.com/docs/guides/rft-use-cases#how-to-get-better-results-from-rft">How to get better results from RFT</a></li>
  <li><a href="https://platform.openai.com/docs/guides/rft-use-cases#other-resources">Other resources</a></li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Windows 11 ratpoison</title><link href="https://ib.bsb.br/windows-11-ratpoison/" rel="alternate" type="text/html" title="Windows 11 ratpoison" /><published>2025-06-09T00:00:00+00:00</published><updated>2025-06-09T23:33:56+00:00</updated><id>https://ib.bsb.br/windows-11-ratpoison</id><content type="html" xml:base="https://ib.bsb.br/windows-11-ratpoison/"><![CDATA[<h1 id="powershell-script-to-create-final-ratpoison-like-ahk-config">PowerShell Script to Create Final Ratpoison-like AHK Config</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># #####################################################################
# # PowerShell Script to Configure a Ratpoison-like Environment on Windows
# # Version 2.1 - AutoHotkey Centric (AHK v1 Syntax Fix)
# #
# # This script automates the setup of a ratpoison-like tiling window manager
# # environment using Komorebi and a detailed AutoHotkey script. It is designed
# # to be run once with Administrator privileges.
# #
# # Right-click the .ps1 file -&gt; Run with PowerShell (as Admin) or execute:
# # Set-ExecutionPolicy Bypass -Scope Process -Force; .\path\to\this_script.ps1
# #####################################################################

# --- PRE-FLIGHT CHECKS AND SETUP ---

Function Test-IsAdmin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-NOT (Test-IsAdmin)) {
    Write-Error "This script must be run with Administrator privileges. Please re-run from an elevated PowerShell terminal."
    if ($Host.Name -eq "ConsoleHost") {
        Write-Host "Press any key to continue..."
        $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") | Out-Null
    }
    exit 1
}

$userProfile = $env:USERPROFILE
$startupPath = Join-Path -Path $userProfile -ChildPath "AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
$scriptsPath = Join-Path -Path $userProfile -ChildPath "RatpoisonScripts"
$komorebiConfigPath = Join-Path -Path $userProfile -ChildPath ".config\komorebi"

Write-Host "--- Ratpoison to Komorebi Setup (AHK Edition) ---" -ForegroundColor Yellow
Write-Host "This script will install and configure all necessary tools."
Write-Host "User Profile Path: $userProfile"
Write-Host "Startup Path: $startupPath"
Write-Host "Custom Scripts Path: $scriptsPath"
Write-Host ""

# --- STEP 1: INSTALL CHOCOLATEY AND CORE APPLICATIONS ---

Write-Host "Step 1: Installing Chocolatey, Komorebi, PowerToys, and AutoHotkey..." -ForegroundColor Cyan
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Host "Chocolatey not found. Installing now..."
    Set-ExecutionPolicy Bypass -Scope Process -Force;
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
    try {
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "Chocolatey installed successfully." -ForegroundColor Green
    } catch {
        Write-Error "Failed to install Chocolatey. Please install it manually from https://chocolatey.org and re-run this script."
        exit 1
    }
} else {
    Write-Host "Chocolatey is already installed." -ForegroundColor Green
}

# Install core packages including AutoHotkey v1
$packages = @("komorebi", "powertoys", "autohotkey.install")
foreach ($pkg in $packages) {
    if (-not (choco list --local-only --exact $pkg | Select-String $pkg)) {
        Write-Host "Installing $pkg..."
        choco install $pkg -y --force
    } else {
        Write-Host "$pkg is already installed." -ForegroundColor Green
    }
}


# --- STEP 2: CREATE PLACEHOLDER DIRECTORIES AND SCRIPTS ---

Write-Host "`nStep 2: Creating placeholder directories and user scripts..." -ForegroundColor Cyan
if (-not (Test-Path -Path $scriptsPath)) {
    New-Item -Path $scriptsPath -ItemType Directory | Out-Null
    Write-Host "Created custom scripts directory at $scriptsPath"
}

# Create placeholders for all user shell scripts, ported to PowerShell
$placeholderScripts = @{
    "clipse.ps1" = "# Placeholder for clipse functionality"
    "split1.ps1" = "komorebic.exe layout split horizontal 0.25"
    "split2.ps1" = "komorebic.exe layout split horizontal 0.75"
    "thermal.ps1" = "Write-Host 'Thermal script executed.'"
    "llm_scrot.ps1" = "Write-Host 'LLM Screenshot script executed.'"
    "llm_sF12_extract_last.ps1" = "Write-Host 'LLM Extract Last script executed.'"
    "llm_sF9_attachment.ps1" = "Write-Host 'LLM Attachment script executed.'"
    "llm_analyze_file.ps1" = "Write-Host 'LLM Analyze File script executed.'"
    "llm_sF8_fragment.ps1" = "Write-Host 'LLM Fragment script executed.'"
    "llm_pipe_selected_sys.ps1" = "Write-Host 'LLM Pipe Selected script executed.'"
    "llm_sF6_system_prompt.ps1" = "Write-Host 'LLM System Prompt script executed.'"
    "llm_sF4_prompt.ps1" = "Write-Host 'LLM Prompt script executed.'"
    "dratmenu.py" = "print('dratmenu.py executed')"
}

foreach ($item in $placeholderScripts.GetEnumerator()) {
    $fullPath = Join-Path -Path $scriptsPath -ChildPath $item.Name
    if (-not (Test-Path -Path $fullPath)) {
        Set-Content -Path $fullPath -Value $item.Value
    }
}
Write-Host "Created placeholder user scripts in '$scriptsPath'. Please edit them with your own logic." -ForegroundColor Green


# --- STEP 3: CREATE KOMOREBI CONFIGURATION ---

Write-Host "`nStep 3: Creating Komorebi configuration file..." -ForegroundColor Cyan

# Ensure the .config directory for Komorebi exists
if (-not (Test-Path -Path $komorebiConfigPath)) {
    New-Item -Path $komorebiConfigPath -ItemType Directory -Force | Out-Null
}

$komorebiConfig = @"
{
    `"border_width`": 0,
    `"border_color`": `"0c0c0c`",
    `"active_border_color`": `"d75f00`",
    `"default_workspace_padding`": 0,
    `"default_container_padding`": 8,
    `"float_rules`": [
        {
            `"id`": `"rpbar`",
            `"kind`": `"Class`"
        },
        {
            `"id`": `"PowerToys.PowerLauncher.exe`",
            `"kind`": `"Exe`"
        },
        {
            `"id`": `"CalculatorApp.exe`",
            `"kind`": `"Exe`"
        },
        {
            `"id`": `"galculator.exe`",
            `"kind`": `"Exe`"
        }
    ]
}
"@
Set-Content -Path (Join-Path $komorebiConfigPath "komorebi.json") -Value $komorebiConfig -Force
Write-Host "komorebi.json created successfully." -ForegroundColor Green

# --- STEP 4: CREATE THE DEFINITIVE AUTOHOTKEY SCRIPT ---

Write-Host "`nStep 4: Generating the master AutoHotkey script (MyRatpoisonConfig.ahk)..." -ForegroundColor Cyan

# This heredoc contains the entire, corrected AutoHotkey script.
$autoHotkeyConfig = @"
#NoEnv
#Warn
#SingleInstance force
#Persistent
SendMode Input
SetWorkingDir, %A_ScriptDir%

; --- GLOBAL VARIABLES ---
global rp_prefix_key := "LWin"
global rp_prefix_timeout_ms := 2000
global komorebi_cli := "komorebic.exe"
global user_scripts_path := A_UserProfileDir . "\RatpoisonScripts\"
global rpws_layout_path := A_UserProfileDir . "\Desktop\ratpoison_layout.json"

; #####################################################################
; # PREFIX KEY HANDLER (Commands after Super_L)
; #####################################################################
Hotkey, %rp_prefix_key%, RatpoisonPrefixHandler, On

RatpoisonPrefixHandler() {
    global
    local next_key, is_shift
    
    Input, next_key, "L1 T" . rp_prefix_timeout_ms . " M V", "{Esc}"
    
    if (ErrorLevel = "Timeout" || ErrorLevel = "EndKey:Escape" || next_key = "") {
        SendInput, "{LWin}"
        return
    }
    
    ; --- Check for Shift modifier and get lowercase key (AHK v1 Syntax) ---
    is_shift := false
    local upper_key
    StringUpper, upper_key, next_key
    if (next_key == upper_key and next_key != " " and next_key != "")
    {
        is_shift := true
    }
    
    local key_lower
    StringLower, key_lower, next_key
    
    ; --- MODAL COMMAND DISPATCHER ---
    if (is_shift) {
        ; --- SHIFT + KEY COMMANDS (e.g., bind s-k) ---
        if (key_lower = "s") { ; bind s-s hsplit
            Run, %komorebi_cli% layout split horizontal 0.5
        } else if (key_lower = "z") { ; bind s-z redo
            Run, %komorebi_cli% redo
        } else if (key_lower = "x") { ; bind s-x fselect
            Run, %komorebi_cli% focus-mode toggle
        } else if (key_lower = "w") { ; bind s-w select
            Run, %komorebi_cli% focus-mode toggle
        } else if (key_lower = "r") { ; bind s-r remove
            Run, %komorebi_cli% close
        } else if (key_lower = "u") { ; bind s-u exec rpws restore
            Run, %komorebi_cli% load-layout "%rpws_layout_path%"
        } else if (key_lower = "i") { ; bind s-i exec nm-connection-editor
            Run, ms-settings:network-status
        } else if (key_lower = "g") { ; bind s-g exec galculator
            Run, calc.exe
        } else if (key_lower = "e") { ; bind s-e exec xnc
            Run, notepad.exe
        } else if (key_lower = "a") { ; bind s-a title
            InputBox, NewName, "Rename Workspace", "Enter new name for current workspace:"
            if (!ErrorLevel &amp;&amp; NewName != "") {
                Run, %komorebi_cli% workspace-name current "%NewName%"
            }
        } else if (key_lower = "t") { ; bind s-t exec sudo pcmanfm-qt
            Run, *RunAs explorer.exe
        } else if (key_lower = "o") { ; bind s-o iother
            Run, %komorebi_cli% focus-monitor next
        } else if (key_lower = " ") { ; bind s-space exec dratmenu.py
            Run, python.exe "%user_scripts_path%dratmenu.py"
        } else if (key_lower = "1") { ; bind s-1 swap 1
            Run, %komorebi_cli% move-to-workspace 0
        } else if (key_lower = "2") { ; bind s-2 swap 2
            Run, %komorebi_cli% move-to-workspace 1
        } else if (key_lower = "3") { ; bind s-3 swap 3
            Run, %komorebi_cli% move-to-workspace 2
        } else if (key_lower = "4") { ; bind s-4 swap 4
            Run, %komorebi_cli% move-to-workspace 3
        } else if (key_lower = "5") { ; bind s-5 swap 5
            Run, %komorebi_cli% move-to-workspace 4
        } else if (key_lower = "6") { ; bind s-6 swap 6
            Run, %komorebi_cli% move-to-workspace 5
        } else if (key_lower = "7") { ; bind s-7 swap 7
            Run, %komorebi_cli% move-to-workspace 6
        } else if (key_lower = "8") { ; bind s-8 swap 8
            Run, %komorebi_cli% move-to-workspace 7
        } else if (key_lower = "9") { ; bind s-9 swap 9
            Run, %komorebi_cli% move-to-workspace 8
        } else if (key_lower = "0") { ; bind s-0 swap 0
            Run, %komorebi_cli% move-to-workspace 9
        } else if (key_lower = "-") { ; bind s-minus exec split1.sh
            Run, powershell.exe -NoProfile -File "%user_scripts_path%split1.ps1"
        } else if (key_lower = "=") { ; bind s-equal exec split2.sh
            Run, powershell.exe -NoProfile -File "%user_scripts_path%split2.ps1"
        } else if (key_lower = ";") { ; bind s-semicolon colon
            SendInput, !{Space}
        } else if (key_lower = "'") { ; bind s-apostrophe colon exec x-terminal-emulator -e sudo
            Run, *RunAs wt.exe
        } else {
            SendInput, {LWin}{%next_key%}
        }
    } else {
        ; --- REGULAR KEY COMMANDS (e.g., bind k) ---
        if (key_lower = "z") { ; bind z undo
            Run, %komorebi_cli% undo
        } else if (key_lower = "x") { ; bind x swap
            Run, %komorebi_cli% swap next
        } else if (key_lower = "w") { ; bind w exec thorium-browser
            Run, thorium-browser.exe
        } else if (key_lower = "v") { ; bind v meta S-Insert
            SendInput, +{Insert}
        } else if (key_lower = "u") { ; bind u exec rpws dump
            Run, %komorebi_cli% save-layout "%rpws_layout_path%"
        } else if (key_lower = "t") { ; bind t exec pcmanfm-qt
            Run, explorer.exe
        } else if (key_lower = "r") { ; bind r resize
            Run, %komorebi_cli% resize-edge right +50
        } else if (key_lower = "q") { ; bind q delete
            Run, %komorebi_cli% close
        } else if (key_lower = "p") { ; bind p dedicate
            Run, %komorebi_cli% toggle-float
        } else if (key_lower = "o") { ; bind o cother
            Run, %komorebi_cli% focus previous
        } else if (key_lower = "i") { ; bind i exec viewnior
            Run, irfanview.exe
        } else if (key_lower = "h") { ; bind h exec x-terminal-emulator -e bpytop
            Run, wt.exe btop.exe
        } else if (key_lower = "g") { ; bind g exec gsimplecal
            Run, calc.exe
        } else if (key_lower = "f") { ; bind f only
            Run, %komorebi_cli% layout monocle
        } else if (key_lower = "e") { ; bind e exec xnedit
            Run, notepad.exe
        } else if (key_lower = "c") { ; bind c redisplay
            Run, %komorebi_cli% retile
        } else if (key_lower = "b") { ; bind b exec vorta
            Run, vorta.exe
        } else if (key_lower = "k") { ; bind k gother
            Run, %komorebi_cli% focus next
        } else if (key_lower = "-") { ; bind minus vsplit
            Run, %komorebi_cli% layout split vertical 0.5
        } else if (key_lower = "=") { ; bind equal hsplit
            Run, %komorebi_cli% layout split horizontal 0.5
        } else if (key_lower = "'") { ; bind apostrophe colon exec x-terminal-emulator -e
            Run, wt.exe
        } else if (key_lower = ";") { ; bind semicolon exec
            InputBox, Cmd, "Execute Command", "Enter command to run:"
            if (!ErrorLevel &amp;&amp; Cmd != "") {
                Run, %Cmd%
            }
        } else if (key_lower = " ") { ; bind space exec xboomx
            MsgBox, Boom!
        } else if (key_lower = "return") { ; bind Return exec x-terminal-emulator
            Run, wt.exe
        } else if (key_lower = "backspace") { ; bind BackSpace next
            Run, %komorebi_cli% focus next
        } else if (key_lower = "tab") { ; bind Tab focus
            Run, %komorebi_cli% focus next
        } else if (key_lower = "escape") { ; bind Escape abort
            Run, %komorebi_cli% toggle-pause
        } else {
             SendInput, {LWin}{%next_key%}
        }
    }
    return
}
return ; End of auto-execute section

; #####################################################################
; # DIRECT HOTKEYS (No Prefix Needed)
; #####################################################################

; --- From 'definekey top ...' ---
PrintScreen::Run, ShareX.exe -workflow "Fullscreen screenshot"
!PrintScreen::Run, powershell.exe -NoProfile -File "%user_scripts_path%clipse.ps1"

; --- Direct focus keys ---
Up::Run, %komorebi_cli% focus up
Down::Run, %komorebi_cli% focus down
Left::Run, %komorebi_cli% focus left
Right::Run, %komorebi_cli% focus right

; --- Direct window move/swap keys ---
#Up::Run, %komorebi_cli% swap up
#Down::Run, %komorebi_cli% swap down
#Left::Run, %komorebi_cli% swap left
#Right::Run, %komorebi_cli% swap right

; --- Workspace Navigation ---
PgUp::Run, %komorebi_cli% cycle-workspace next
PgDn::Run, %komorebi_cli% cycle-workspace prev
^Tab::Run, %komorebi_cli% cycle-workspace prev
#PgUp::Run, %komorebi_cli% cycle-move-to-workspace next
#PgDn::Run, %komorebi_cli% cycle-move-to-workspace prev
#^Tab::Run, %komorebi_cli% cycle-move-to-workspace prev

; --- From 'bind M-...' (xdotool emulation) ---
!1::
Loop, 6
{
    SendInput, {`}
}
return
!2::
Loop, 6
{
    SendInput, {~}
}
return
!3::
Loop, 3
{
    SendInput, {"}
}
return
!4::
Loop, 3
{
    SendInput, {'}
}
return

; --- LLM Script Binds ---
!F1::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_sF4_prompt.ps1"
!F2::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_sF6_system_prompt.ps1"
!F3::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_pipe_selected_sys.ps1"
!F4::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_sF8_fragment.ps1"
!F5::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_analyze_file.ps1"
!F6::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_sF9_attachment.ps1"
!F7::Run, powershell.exe -NoProfile -File "%user_scripts_path%llm_sF12_extract_last.ps1"

; --- Direct Function Key Binds ---
F1::Run, notepad.exe "%user_scripts_path%RAM.txt"
F4::Run, filezilla.exe
F5::Run, wt.exe
F6::Run, treesheets.exe
F7::Run, obs64.exe
F8::Run, qmplay2.exe

; --- Direct System Control ---
Home::Run, ShareX.exe -workflow "Region screenshot"
#F1::Run, powershell.exe -NoProfile -File "%user_scripts_path%thermal.ps1"
#F2::Run, wallp.exe "C:\Users\$($env:USERNAME)\Desktop\02-media\pics\wallpaper1.png" Fill
#F9::Run, nircmd.exe mutesysvolume 2
#F10::Run, nircmd.exe changesysvolume -3277
#F11::Run, nircmd.exe changesysvolume 3277

; --- Direct Workspace Switching ---
Numpad1::Run, %komorebi_cli% workspace 0
Numpad2::Run, %komorebi_cli% workspace 1
Numpad3::Run, %komorebi_cli% workspace 2
Numpad4::Run, %komorebi_cli% workspace 3
Numpad5::Run, %komorebi_cli% workspace 4
Numpad6::Run, %komorebi_cli% workspace 5
Numpad7::Run, %komorebi_cli% workspace 6
Numpad8::Run, %komorebi_cli% workspace 7
Numpad9::Run, %komorebi_cli% workspace 8
^1::Run, %komorebi_cli% workspace 0
^2::Run, %komorebi_cli% workspace 1
^3::Run, %komorebi_cli% workspace 2
^4::Run, %komorebi_cli% workspace 3
^5::Run, %komorebi_cli% workspace 4
^6::Run, %komorebi_cli% workspace 5
^7::Run, %komorebi_cli% workspace 6
^8::Run, %komorebi_cli% workspace 7
^9::Run, %komorebi_cli% workspace 8
#^1::Run, %komorebi_cli% move-to-workspace 0
#^2::Run, %komorebi_cli% move-to-workspace 1
#^3::Run, %komorebi_cli% move-to-workspace 2
#^4::Run, %komorebi_cli% move-to-workspace 3
#^5::Run, %komorebi_cli% move-to-workspace 4
#^6::Run, %komorebi_cli% move-to-workspace 5
#^7::Run, %komorebi_cli% move-to-workspace 6
#^8::Run, %komorebi_cli% move-to-workspace 7
#^9::Run, %komorebi_cli% move-to-workspace 8
"@

Set-Content -Path (Join-Path $scriptsPath "MyRatpoisonConfig.ahk") -Value $autoHotkeyConfig -Force
Write-Host "The master AutoHotkey script has been generated at '$($scriptsPath)\MyRatpoisonConfig.ahk'." -ForegroundColor Green


# --- STEP 5: CREATE STARTUP SCRIPT ---

Write-Host "`nStep 5: Creating the final startup script..." -ForegroundColor Cyan

$startupScriptContent = @"
@echo off
REM ==========================================================
REM == Ratpoison Environment Startup Script for Windows
REM == This script launches the core components on user login.
REM ==========================================================
echo Starting Komorebi Tiling Window Manager...
start "" komorebi.exe start

timeout /t 2 /nobreak &gt; nul

echo Starting AutoHotkey for keybindings...
start "" "C:\Program Files\AutoHotkey\AutoHotkey.exe" "$scriptsPath\MyRatpoisonConfig.ahk"

REM ==========================================================
REM == Other startup applications from .ratpoisonrc
REM == Ensure these are installed and in the system PATH
REM ==========================================================
echo Launching background applications...

REM xfce4-power-manager has no direct equivalent, Windows Power Plan is used instead.
REM start "" xfce4-power-manager.exe

REM unclutter has no direct equivalent, this is handled by Windows settings.
REM start "" unclutter.exe --timeout 2 --jitter 5

REM numlockx is handled by Windows registry or BIOS settings.
REM start "" numlockx.exe on

REM OpenVPN should be configured to start with Windows via its own settings.
REM start "" "C:\Program Files\OpenVPN\bin\openvpn-gui.exe" --connect mullvad_us_lax.ovpn

REM Start clipse listener
start "" powershell.exe -NoProfile -File "$scriptsPath\clipse.ps1" -listen
"@
# Replace placeholder with dynamic path
$startupScriptContent = $startupScriptContent.Replace('$scriptsPath', $scriptsPath)

Set-Content -Path (Join-Path $startupPath "StartRatpoisonEnv.bat") -Value $startupScriptContent -Force
Write-Host "Startup script created in '$startupPath'." -ForegroundColor Green


# --- FINAL INSTRUCTIONS ---

Write-Host "`n--- SETUP COMPLETE ---" -ForegroundColor Yellow
Write-Host "What's been done:"
Write-Host "  - Installed Komorebi, PowerToys, and AutoHotkey."
Write-Host "  - Created a robust Komorebi configuration file."
Write-Host "  - Generated a complete, logically-correct AutoHotkey script in '$scriptsPath'."
Write-Host "  - Created a startup script to launch the environment when you log in."
Write-Host ""
Write-Host "ACTION REQUIRED:" -ForegroundColor Red
Write-Host "  1. RESTART your computer for all changes to take effect."
Write-Host "  2. VERIFY application paths inside 'MyRatpoisonConfig.ahk' if programs like"
Write-Host "     'thorium-browser.exe' or 'irfanview.exe' are not in your system PATH."
Write-Host "  3. EDIT the placeholder PowerShell and Python scripts in '$scriptsPath' to"
Write-Host "     add your custom logic. The current files are just empty placeholders."
Write-Host ""
Write-Host "Enjoy your new keyboard-driven tiling experience on Windows!"
Write-Host ""

if ($Host.Name -eq "ConsoleHost") {
    Write-Host "Press any key to exit..."
    $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") | Out-Null
}
</code></pre></div></div>

<h2 id="1-introduction-understanding-the-ratpoison-philosophy-and-windows-11-constraints"><strong>1. Introduction: Understanding the ratpoison Philosophy and Windows 11 Constraints</strong></h2>

<p>The ratpoison window manager, a staple for many Debian Linux users, embodies a philosophy of extreme keyboard-centric control, minimalism, and efficiency. Its core tenets include operation entirely without a mouse, the absence of window decorations (title bars, borders), efficient screen space utilization through tiling, and a modal command system initiated by a prefix key (your configuration uses Super_L, though Ctrl+t or C-t is also common).44 This starkly contrasts with the graphical user interface (GUI) and mouse-driven paradigm inherent to Microsoft Windows 11.</p>

<p>Replicating your specific ratpoison experience on Windows 11 is therefore not a direct port but an exercise in approximation and adaptation. The goal is to achieve a setup that is functionally and philosophically as close as possible to your provided .ratpoisonrc, leveraging third-party tools to bridge the gap between these differing operating system philosophies. This tutorial will detail a step-by-step approach to constructing such an environment, primarily utilizing a dedicated tiling window manager for Windows, the Microsoft PowerToys suite (particularly its FancyZones utility if a simpler approach is desired), and the powerful scripting capabilities of AutoHotkey.</p>

<h2 id="2-core-components-for-emulation"><strong>2. Core Components for Emulation</strong></h2>

<p>To effectively emulate your ratpoison environment on Windows 11, several key software components are necessary. These components will provide the foundational tiling capabilities, the global keyboard control, and the scriptable system interactions that are central to your ratpoison workflow.</p>

<h3 id="a-tiling-window-managers-for-windows-11"><strong>A. Tiling Window Managers for Windows 11</strong></h3>

<p>While Windows offers basic window snapping, it lacks the sophisticated, keyboard-driven tiling capabilities of ratpoison. Therefore, a dedicated tiling window manager (TWM) or a highly configurable zone manager is essential.</p>

<ul>
  <li>FancyWM:<br />
FancyWM is a dynamic tiling window manager designed for Windows 10 and 11.25 It allows users to create dynamic tiling layouts using either the mouse or keyboard. Key features include keyboard-driven window focus movement (e.g., Shift+Win, then →), window swapping (Shift+Win, then Shift+→), and the creation of horizontal, vertical, and stacked (tabbed) panels.25 FancyWM also supports virtual desktops, allowing users to jump to specific desktops (e.g., Shift+Win, then 2) or move focused windows to them. It includes a floating window mode, can auto-float windows that don’t fit tiling layouts, and offers customizable keybindings. Notably, FancyWM aims for low CPU usage (&lt;1%) and provides an option to disable animations.25 Installation can be performed via winget install fancywm or from the Microsoft Store.25 The default activation hotkey for command sequences is Shift+Win, which can be remapped.25</li>
  <li>Komorebi:<br />
Komorebi is another tiling window manager for Windows 10 and above, functioning as an extension to the native Desktop Window Manager.13 It is controlled via a command-line interface (komorebic.exe), which can be integrated with tools like AutoHotkey or whkd (a companion hotkey daemon) for user-defined keyboard shortcuts.13 Komorebi aims for minimal OS modification by default, leaving extensive customization to user configuration files.13 It also includes komorebi-bar.exe, an integrated status bar.13 Installation is available via Scoop (scoop install komorebi whkd) or WinGet.14 For optimal operation, enabling long path support in Windows is recommended before installation.14 Some users have reported positive experiences with Komorebi, highlighting its simplicity, lightweight nature, and effective automatic tiling.45</li>
  <li>GlazeWM:<br />
GlazeWM offers tiling window management with configuration via a simple YAML file.15 It supports multiple monitors and allows customizable rules for specific windows. GlazeWM can be integrated with Zebar, a status bar application.15 While some users have found it functional, others have encountered glitches or issues with certain applications not tiling correctly, leading them to prefer alternatives like Komorebi.45 GlazeWM also provides a JavaScript library for inter-process communication (IPC), allowing programmatic querying of its state and execution of commands.27</li>
  <li>Microsoft PowerToys FancyZones (as a TWM alternative/supplement):<br />
FancyZones, a utility within the Microsoft PowerToys suite, allows users to create complex window layouts and quickly position windows into predefined zones.20 Users can open the FancyZones editor (default: Win+Shift+\``) to define custom layouts or use templates.46 Windows can be snapped into zones by holdingShift(or another configured key) while dragging. FancyZones supports keyboard shortcuts for moving focused windows between zones and cycling between windows in the same zone.46 While useful for organizing windows, FancyZones primarily relies on pre-defined static zones rather than the fluid, dynamic tiling characteristic ofratpoison`.<br />
The choice between a true dynamic TWM (like FancyWM or Komorebi) and a zone-based manager like FancyZones depends on how closely one wishes to emulate ratpoison. For a ratpoison user accustomed to minimal configuration for basic tiling and extensive keyboard control over the tiling structure itself, a dedicated TWM is likely to be a more fitting choice.<br />
<strong>Table 2.1: Comparison of Windows Tiling Solutions for ratpoison Emulation</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Feature</th>
      <th style="text-align: left">FancyWM</th>
      <th style="text-align: left">Komorebi</th>
      <th style="text-align: left">GlazeWM</th>
      <th style="text-align: left">PowerToys FancyZones</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>Tiling Type</strong></td>
      <td style="text-align: left">Dynamic</td>
      <td style="text-align: left">Dynamic</td>
      <td style="text-align: left">Dynamic</td>
      <td style="text-align: left">Zone-based (pre-defined layouts)</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Primary Control</strong></td>
      <td style="text-align: left">Keyboard &amp; Mouse</td>
      <td style="text-align: left">CLI (komorebic.exe), Hotkey Daemon (whkd)</td>
      <td style="text-align: left">Config (YAML), CLI (via IPC)</td>
      <td style="text-align: left">Mouse (drag-to-zone), Keyboard shortcuts</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Configuration</strong></td>
      <td style="text-align: left">GUI Settings</td>
      <td style="text-align: left">JSON config file, whkdrc for hotkeys</td>
      <td style="text-align: left">YAML config file</td>
      <td style="text-align: left">GUI Layout Editor</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Virtual Desktops</strong></td>
      <td style="text-align: left">Supported</td>
      <td style="text-align: left">Via CLI commands</td>
      <td style="text-align: left">Via CLI commands</td>
      <td style="text-align: left">Native Windows support</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Status Bar</strong></td>
      <td style="text-align: left">None explicitly mentioned</td>
      <td style="text-align: left">komorebi-bar.exe (integrated) 13</td>
      <td style="text-align: left">Zebar (integration) 15</td>
      <td style="text-align: left">Windows Taskbar</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Scriptability</strong></td>
      <td style="text-align: left">Key remapping</td>
      <td style="text-align: left">Extensive via komorebic.exe &amp; AHK/whkd 13</td>
      <td style="text-align: left">Extensive via IPC and JS library 27</td>
      <td style="text-align: left">Limited to invoking editor/layouts</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Ease of Setup</strong></td>
      <td style="text-align: left">High (MS Store, winget) 25</td>
      <td style="text-align: left">Medium (Scoop/WinGet, config files) 14</td>
      <td style="text-align: left">Medium (config file) 15</td>
      <td style="text-align: left">High (part of PowerToys) 20</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>ratpoison-like Feel</strong></td>
      <td style="text-align: left">Medium-High</td>
      <td style="text-align: left">High</td>
      <td style="text-align: left">Medium-High</td>
      <td style="text-align: left">Low-Medium</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Pros</strong></td>
      <td style="text-align: left">User-friendly, low CPU, dynamic panels 25</td>
      <td style="text-align: left">Highly scriptable, minimal OS mods, status bar 13</td>
      <td style="text-align: left">YAML config, multi-monitor, IPC 15</td>
      <td style="text-align: left">Easy to use, stable, part of PowerToys</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Cons</strong></td>
      <td style="text-align: left">Less “raw” CLI control than Komorebi</td>
      <td style="text-align: left">Steeper learning curve for full customization</td>
      <td style="text-align: left">Some user reports of glitches 45</td>
      <td style="text-align: left">Not true dynamic tiling</td>
    </tr>
  </tbody>
</table>

<h3 id="b-autohotkey-ahk-for-global-keyboard-control-and-scripting"><strong>B. AutoHotkey (AHK) for Global Keyboard Control and Scripting</strong></h3>

<p>AutoHotkey (AHK) is a free, open-source scripting language for Windows that allows users to automate tasks, remap keys, and create custom hotkeys. For replicating your ratpoison environment, AHK is indispensable for:</p>

<ul>
  <li>Implementing a global prefix key system (your Super_L equivalent).</li>
  <li>Defining custom keyboard shortcuts for window manipulation, application launching (like your exec bindings), and system control.</li>
  <li>Scripting complex behaviors, such as emulating xdotool functionality or custom scripts like rpws.</li>
  <li>Potentially removing window decorations.</li>
</ul>

<p>Users create text files with an .ahk extension to write scripts.2</p>

<h3 id="c-command-line-interface-cli-utilities--windows-equivalents"><strong>C. Command-Line Interface (CLI) Utilities &amp; Windows Equivalents</strong></h3>

<p>To emulate ratpoison’s ability to control system aspects via keyboard commands, a collection of CLI utilities and knowledge of Windows equivalents is beneficial:</p>

<ul>
  <li><strong>NirCmd</strong> by NirSoft: For system control like volume (changesysvolume, setsysvolume, mutesysvolume, changeappvolume).37</li>
  <li><strong>ControlMyMonitor</strong> by NirSoft: For monitor settings like brightness (if DDC/CI supported).40</li>
  <li><strong>ShareX:</strong> For scriptable screenshots, replacing scrot functionality.20</li>
  <li><strong>WallP:</strong> For command-line wallpaper changes, replacing hsetroot or xsetroot -name for basic wallpaper setting.41</li>
  <li><strong>Windows Built-in Tools:</strong> PowerShell for various tasks, reg.exe for registry modifications.</li>
  <li><strong>Application Equivalents:</strong> For tools like pcmanfm-qt, viewnior, bpytop, etc., you’ll need to find Windows equivalents or ensure the Linux versions have Windows ports. These can then be launched via AHK’s Run command.</li>
</ul>

<h2 id="3-implementing-ratpoison-style-keyboard-control-with-autohotkey"><strong>3. Implementing ratpoison-style Keyboard Control with AutoHotkey</strong></h2>

<p>The cornerstone of ratpoison interaction is its prefix key (your escape Super_L), followed by a command key.</p>

<h3 id="a-the-prefix-key-super_l-equivalent"><strong>A. The Prefix Key (Super_L Equivalent)</strong></h3>

<p>Your .ratpoisonrc specifies escape Super_L. In AutoHotkey, Super_L is typically represented as LWin (Left Windows key).13 We’ll use the AHK Input command for its suitability in capturing subsequent keystrokes with timeouts and specific end keys.1</p>

<p>AutoHotkey</p>

<p>; -– In your AutoHotkey script -–<br />
global MyRatpoisonPrefixKey := “LWin” ; Your Super_L<br />
global MyRatpoisonPrefixTimeout := 2000 ; 2 seconds, adjust as needed</p>

<p>Hotkey MyRatpoisonPrefixKey, HandleRatpoisonPrefix</p>

<p>HandleRatpoisonPrefix() {<br />
    global ; Make global variables accessible<br />
    local next_key_pressed, command_was_executed := false</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; Options: L1 (one char), T\&lt;ms\&gt; (timeout), M (modified keys like Ctrl+C), V (visible input)  
; EndKeys: {Esc} to cancel prefix mode  
Input next\_key\_pressed, "L1 T". MyRatpoisonPrefixTimeout. " M V", "{Esc}"  
  
if (ErrorLevel \= "Timeout" |   | ErrorLevel \= "EndKey:Escape" |   | next\_key\_pressed \= "") {  
    ; If timed out, Esc pressed, or no valid key, send the original prefix key.  
    ; This allows LWin to still function (e.g., open Start Menu) if no command follows.  
    SendInput "{". MyRatpoisonPrefixKey. "}"  
    return  
}

; \--- Branch based on 'next\_key\_pressed' (translate your.ratpoisonrc binds here) \---  
if (next\_key\_pressed \= "s") { ; Example: Super\_L then s  
    ; Check for s-s (Shift+s) if your TWM handles splits that way or if you script it  
    ; For now, let's assume 's' maps to hsplit  
    ; For Komorebi: Run "komorebic.exe layout split horizontal 0.5"  
    ; For FancyWM (default Shift+Win+H): SendInput "+\#h"   
    MsgBox "Command: Horizontal Split (s)"  
    command\_was\_executed := true  
} else if (next\_key\_pressed \= "w") { ; Example: Super\_L then w (for launching thorium-browser)  
    Run "thorium-browser.exe" ; Ensure thorium-browser is in PATH or use full path  
    command\_was\_executed := true  
}  
;... Add many more 'else if' blocks for other ratpoison commands...

if (\!command\_was\_executed) {  
    ; If the pressed key didn't match any defined command,  
    ; send the original prefix and the pressed key.  
    ; The 'V' option in Input should handle passing the key through.  
    ; However, explicitly sending might be needed if LWin was "consumed" by the hotkey.  
    SendInput "{". MyRatpoisonPrefixKey. "}"  
    SendInput "{Text}". next\_key\_pressed ; Use {Text} for reliable character sending  
}   }   Return ; End of auto-execute section
</code></pre></div></div>

<p><strong>Note on Input command options</strong> 1<strong>:</strong></p>

<ul>
  <li>L1: Wait for a single character.</li>
  <li>T&lt;milliseconds&gt;: Timeout (e.g., T2000 for 2 seconds).</li>
  <li>M: Allows modified keystrokes (e.g., Ctrl+C) to be recognized. Ctrl+A through Ctrl+Z correspond to Chr(1) through Chr(26).</li>
  <li>V: Visible - the user’s keystrokes are sent to the active window if not matched by the Input command’s MatchList or EndKeys. This is crucial for allowing non-command keys to pass through naturally after the prefix.</li>
  <li>EndKeys: A list of keys that terminate the input (e.g., {Esc}).</li>
</ul>

<h3 id="b-scripting-core-window-manipulations-examples"><strong>B. Scripting Core Window Manipulations (Examples)</strong></h3>

<ul>
  <li><strong>Focus Switching (Up, Down, Left, Right):</strong>
    <ul>
      <li>TWM-specific: Run “komorebic.exe focus &lt;direction&gt;” or SendInput “+#{ArrowKey}” for FancyWM.</li>
      <li>AHK: ControlFocus, WinActivate.</li>
    </ul>
  </li>
  <li><strong>Moving/Swapping Windows (s-Up, s-x):</strong>
    <ul>
      <li>TWM-specific: Run “komorebic.exe move &lt;direction&gt;” or SendInput “+#+{ArrowKey}” for FancyWM.</li>
      <li>AHK: WinMove.</li>
    </ul>
  </li>
  <li><strong>Resizing (r):</strong>
    <ul>
      <li>TWM-specific commands are best.</li>
      <li>AHK: WinMove with width/height.</li>
    </ul>
  </li>
  <li><strong>Splits (s-s hsplit, minus vsplit, equal hsplit):</strong>
    <ul>
      <li>Highly TWM-dependent. Run “komorebic.exe layout split &lt;axis&gt; &lt;ratio&gt;” or FancyWM’s panel commands (SendInput “+#h” for horizontal, SendInput “+#v” for vertical).25</li>
    </ul>
  </li>
  <li><strong>Killing Windows (q delete, s-Escape kill):</strong>
    <ul>
      <li>AHK: WinClose “A” (for active window).</li>
    </ul>
  </li>
  <li><strong>Virtual Desktops/Workspaces/Groups (rpws commands, KP_1 etc.):</strong>
    <ul>
      <li>Windows 11 native: SendInput “^#{Left/Right}” (switch), SendInput “^#{d}” (create).</li>
      <li>TWMs have their own (e.g., Komorebi: komorebic.exe workspace &lt;index&gt;). Your rpws scripts would need to be translated to call these TWM commands.</li>
    </ul>
  </li>
</ul>

<h3 id="c-removing-window-decorations-set-border-0"><strong>C. Removing Window Decorations (set border 0)</strong></h3>

<p>Your .ratpoisonrc has set border 0. AHK’s WinSet command can attempt to remove standard Windows decorations 43:</p>

<ul>
  <li>WinSet, Style, -0xC00000, A ; Removes title bar (WS_CAPTION)</li>
  <li>WinSet, Style, -0x800000, A ; Removes thin border (WS_BORDER)</li>
  <li>WinSet, Style, -0x40000, A ; Removes sizing border (WS_THICKFRAME/WS_SIZEBOX) <strong>Caveats:</strong> This won’t work for all apps (especially UWP or custom-drawn windows) and can sometimes cause issues. Apply selectively using IfWinActive and Window Spy to get ahk_class. Some TWMs might also offer border management.</li>
</ul>

<h2 id="4-replicating-essential-ratpoisonrc-interactions"><strong>4. Replicating Essential .ratpoisonrc Interactions</strong></h2>

<h3 id="a-application-launcher-s-space-exec-python3dratmenupy"><strong>A. Application Launcher (s-space exec python3…dratmenu.py)</strong></h3>

<p>Your dratmenu.py script acts as a launcher. Windows alternatives include:</p>

<ul>
  <li><strong>Wox:</strong> Extensible with plugins (Python supported, but detailed creation guides were not in provided snippets 6). Default: Alt+Space.</li>
  <li><strong>Ueli:</strong> Cross-platform, features “Workflows” for custom tasks.49 Default: Alt+Space.</li>
  <li><strong>Fluent Search:</strong> Powerful, indexes files, apps, tabs.51</li>
  <li><strong>PowerToys Run:</strong> Part of PowerToys, quick and simple.20 Default: Alt+Space.</li>
</ul>

<p>Your AHK script would map Super_L then Space to trigger your chosen launcher or your Python script (if it’s adapted for Windows):</p>

<p>AutoHotkey</p>

<p>; Inside HandleRatpoisonPrefix()<br />
else if (next_key_pressed = “ “) { ; Super_L then Space<br />
    ; Option 1: Run a Windows launcher<br />
    ; SendInput “!{Space}” ; If launcher uses Alt+Space<br />
    ; Option 2: Run your Python script (ensure Python is in PATH)<br />
    Run “python.exe C:\path\to\your\dratmenu.py”<br />
    command_was_executed := true<br />
}</p>

<p>For the most dmenu-like scriptability, Wox or Ueli are strong candidates.</p>

<p>Table 4.1: Windows Application Launcher Comparison<br />
(Refer to Table 4.1 in the original response, it remains largely accurate.)</p>

<h3 id="b-status-bar-information-exec-env-homehome-rpbar-addhook-exec-rpbarsend"><strong>B. Status Bar Information (exec env HOME=$HOME rpbar, addhook… exec rpbarsend)</strong></h3>

<p>Your setup uses rpbar, updated by hooks.28</p>

<ul>
  <li><strong>Komorebi:</strong> Includes komorebi-bar.exe.13 This is the closest to an integrated solution.</li>
  <li><strong>GlazeWM:</strong> Integrates with Zebar.15</li>
  <li><strong>Windows Taskbar:</strong> Can be auto-hidden and minimally configured 53, but not a true rpbar replacement.</li>
  <li><strong>AHK GUI:</strong> A custom AHK GUI is possible but a very advanced project.</li>
</ul>

<p>If using Komorebi, its bar might suffice. Otherwise, this is hard to replicate faithfully. The addhook commands in your .ratpoisonrc that call rpbarsend would need to be mapped to AHK’s ShellHook or timer-based checks that then update whatever status display you choose/create, or rely on the TWM’s bar updating itself.</p>

<h3 id="c-clipboard-management-clipse-related-bind-v-meta-s-insert"><strong>C. Clipboard Management (clipse related, bind v meta S-Insert)</strong></h3>

<p>Your config mentions clipse and a paste binding.</p>

<ul>
  <li><strong>Windows Clipboard History:</strong> Win+V (stores last 25 items, can sync).54 Can be cleared via Settings or PowerShell (with limitations for ::ClearHistory() 17). Get-Clipboard can retrieve content.56</li>
  <li><strong>Ditto:</strong> Powerful open-source manager with CLI options like Ditto.exe /Open, Ditto.exe /Paste:(clip_id) 16, making it scriptable.</li>
  <li><strong>PasteBar:</strong> Organizes clips, supports Markdown.57 Your bind v meta S-Insert likely pastes from clipse. In AHK, Super_L then v could be:</li>
</ul>

<p>AutoHotkey</p>

<p>; Inside HandleRatpoisonPrefix()<br />
else if (next_key_pressed = “v”) {<br />
    ; This emulates Shift+Insert, a common paste shortcut<br />
    SendInput “+{Insert}”<br />
    ; If ‘clipse’ has a Windows CLI for pasting, use that:<br />
    ; Run “clipse.exe --paste” ; Hypothetical command<br />
    command_was_executed := true<br />
}</p>

<h3 id="d-xdotool-emulation-bind-m-1-exec-xdotool-key---repeat-6-dead_grave"><strong>D. xdotool Emulation (bind M-1 exec xdotool key --repeat 6 dead_grave)</strong></h3>

<p>Windows does not have xdotool. AutoHotkey’s Send / SendInput commands are the primary way to simulate keyboard input.<br />
Your binding bind M-1 exec xdotool key --repeat 6 dead_grave could translate to:</p>

<p>AutoHotkey</p>

<p>; This is a direct hotkey, not part of the prefix system, as M-1 is Alt+1<br />
!1:: ; Alt+1<br />
Loop 6 {<br />
    SendInput “{`}” ; Sends a backtick. Adjust if ‘dead_grave’ is different.<br />
    ; Or, for specific ASCII/Unicode: SendInput “{ASC 096}” or SendInput “{U+0060}”<br />
}<br />
return</p>

<p>Similarly for M-2, M-3, M-4. You’ll need to find the correct AHK syntax for dead_tilde, quotedbl, and apostrophe.</p>

<h3 id="e-custom-scripts-rpws-llm_sh-split1sh-thermalsh"><strong>E. Custom Scripts (rpws, llm_*.sh, split1.sh, thermal.sh)</strong></h3>

<p>Scripts like rpws init 9, rpws dump, llm_scrot.sh are custom.</p>

<ul>
  <li>rpws (RatPoison WorkSpace) commands manage workspaces. These would need to be rewritten as AHK functions or external scripts that call your chosen TWM’s CLI for workspace management (e.g., komorebic.exe workspace &lt;ID&gt;, komorebic.exe move-to-workspace &lt;ID&gt;).</li>
  <li>Shell scripts (.sh) need to be ported to Windows batch, PowerShell, or rewritten in a language available on Windows (like Python, if your dratmenu.py is an example).</li>
  <li>AHK can then Run these Windows-compatible scripts. For example, bind s-u exec /usr/bin/rpws restore… becomes an AHK hotkey calling the translated rpws restore logic.</li>
</ul>

<h2 id="5-system-control-via-keyboard-scripting-with-ahk-and-cli-tools"><strong>5. System Control via Keyboard (Scripting with AHK and CLI Tools)</strong></h2>

<p>Your .ratpoisonrc includes bindings for volume, screenshots, etc.</p>

<h3 id="a-volume-control-s-f9-toggle-s-f10-5--s-f11-5"><strong>A. Volume Control (s-F9 toggle, s-F10 5%-, s-F11 5%+)</strong></h3>

<ul>
  <li><strong>nircmd.exe:</strong>
    <ul>
      <li>nircmd.exe changesysvolume 3276 (approx 5% of 65535).37</li>
      <li>nircmd.exe mutesysvolume 2 (toggle).37</li>
      <li>App-specific: nircmd.exe changeappvolume focused 0.05 (increase focused app volume by 5%).39</li>
    </ul>
  </li>
  <li><strong>PowerShell:</strong> Can mimic media keys or use COM objects.37</li>
  <li><strong>vccli.exe:</strong> Dedicated app-specific volume CLI.58</li>
</ul>

<p>AHK example for s-F11 (assuming s- means Super_L or Win key):</p>

<p>AutoHotkey</p>

<p>#F11::Run “nircmd.exe changesysvolume 3276” ; Win+F11<br />
#F10::Run “nircmd.exe changesysvolume -3276” ; Win+F10<br />
#F9::Run “nircmd.exe mutesysvolume 2”      ; Win+F9</p>

<h3 id="b-screen-brightness-your-config-doesnt-show-explicit-brightness-binds-but-its-a-common-need"><strong>B. Screen Brightness (Your config doesn’t show explicit brightness binds, but it’s a common need)</strong></h3>

<ul>
  <li><strong>ControlMyMonitor.exe:</strong> ControlMyMonitor.exe /ChangeValue Primary 10 5 (increase by 5%).40 Requires DDC/CI.</li>
  <li><strong>PowerShell:</strong> (Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightnessMethods).WmiSetBrightness(1, &lt;level_0_to_100&gt;) (often for built-in displays).59</li>
</ul>

<h3 id="c-screenshots-home-exec-scrot--s-definekey-top-print-exec-xfce4-screenshooter"><strong>C. Screenshots (Home exec scrot -s…, definekey top Print exec xfce4-screenshooter)</strong></h3>

<ul>
  <li><strong>ShareX:</strong> Highly scriptable.20
    <ul>
      <li>ShareX.exe -RectangleRegion: Interactive region selection.</li>
      <li>Your scrot -s -e ‘xclip…’ command captures a selection and copies to clipboard. ShareX can do this with a configured “After capture” task to “Copy image to clipboard.” AHK:</li>
    </ul>
  </li>
</ul>

<p>AutoHotkey<br />
#Home::Run “ShareX.exe -RectangleRegion” ; Win+Home for region, then configure ShareX task<br />
PrintScreen::Run “ShareX.exe -PrintScreen” ; Or use xfce4-screenshooter if available on Win</p>

<ul>
  <li><strong>Windows Snipping Tool:</strong> Win+Shift+S for region to clipboard.18</li>
</ul>

<h3 id="d-wallpaper-management-s-f2-exec-hsetroot--fill-s-f3-exec-xsetroot--name"><strong>D. Wallpaper Management (s-F2 exec hsetroot -fill…, s-F3 exec xsetroot -name…)</strong></h3>

<ul>
  <li><strong>WallP.exe:</strong> WallP.exe 0 “C:\Path\To\Image.jpg” Fill.41</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><strong>AHK/reg.exe:</strong> Modify HKCU\Control Panel\Desktop keys (Wallpaper, WallpaperStyle, TileWallpaper) then call DllCall(“SystemParametersInfo”, “UInt”, 20, “UInt”, 0, “Ptr”, 0, “UInt”, 0x01</td>
          <td>0x02) to refresh.24 xsetroot -name functionality (setting root window name) doesn’t directly translate; status information would be handled by the chosen status bar.</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>AHK for s-F2:</p>

<p>AutoHotkey</p>

<p>#F2::Run “WallP.exe 0 ““C:\home\linaro\Desktop\02-media\pics\wallpaper1.png”” Fill” ; Win+F2</p>

<h2 id="6-step-by-step-implementation-guide"><strong>6. Step-by-Step Implementation Guide</strong></h2>

<h3 id="a-pre-requisites-and-initial-setup"><strong>A. Pre-requisites and Initial Setup</strong></h3>

<ol>
  <li><strong>Install a Tiling Window Manager:</strong> Choose from Section 2.A (e.g., Komorebi for deeper scripting, FancyWM for ease of use). Follow their specific installation instructions.25</li>
  <li><strong>Install AutoHotkey:</strong> Download from <a href="https://autohotkey.com">autohotkey.com</a> (v1 recommended for these examples). Create MyRatpoisonConfig.ahk.2</li>
  <li><strong>Install Application Launcher:</strong> Choose from Section 4.A (e.g., Wox, Ueli).</li>
  <li><strong>Download CLI Utilities:</strong> NirCmd, ControlMyMonitor, ShareX, WallP. Place them in a folder (e.g., C:\Utils) and add this folder to your system PATH.</li>
  <li><strong>Install Your Applications:</strong> Ensure Windows versions or equivalents of thorium-browser, pcmanfm-qt, bpytop, etc., are installed.</li>
</ol>

<h3 id="b-basic-configuration-of-the-window-manager"><strong>B. Basic Configuration of the Window Manager</strong></h3>

<ul>
  <li>Consult the chosen TWM’s documentation to set basic preferences (gaps, initial layouts, focus behavior). Komorebi uses komorebi.json 14, GlazeWM uses config.yaml.15 FancyWM has GUI settings.25</li>
</ul>

<h3 id="c-creating-the-initial-autohotkey-script-myratpoisonconfigahk"><strong>C. Creating the Initial AutoHotkey Script (MyRatpoisonConfig.ahk)</strong></h3>

<p>AutoHotkey</p>

<p>#SingleInstance force<br />
#Persistent<br />
SetWorkingDir A_ScriptDir</p>

<p>; -– Global definition for the ratpoison prefix key -–<br />
global rp_prefix_key_ahk_notation := “LWin” ; Your Super_L from ‘escape Super_L’<br />
global rp_prefix_timeout_ms := 2000</p>

<p>; -– Assign the prefix key to its handler function -–<br />
Hotkey rp_prefix_key_ahk_notation, RatpoisonPrefixHandler</p>

<p>RatpoisonPrefixHandler() {<br />
    global<br />
    local next_key, command_executed := false, input_options</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input\_options := "L1 T". rp\_prefix\_timeout\_ms. " M V"  
Input next\_key, input\_options, "{Esc}"  
  
if (ErrorLevel \= "Timeout" |   | ErrorLevel \= "EndKey:Escape" |   | next\_key \= "") {  
    SendInput "{". rp\_prefix\_key\_ahk\_notation. "}"  
    return  
}

; \--- Translate.ratpoisonrc 'bind' commands here \---  
if (next\_key \= "w") { ; Super\_L then w \-\&gt; launch thorium-browser  
    Run "thorium-browser.exe" ; Ensure it's in PATH or use full path  
    command\_executed := true  
} else if (next\_key \= "h") { ; Super\_L then h \-\&gt; launch bpytop  
    Run "x-terminal-emulator.exe \-e bpytop" ; Assuming x-terminal-emulator is configured  
                                            ; Or directly Run "bpytop.exe" if it's a Windows native app  
    command\_executed := true  
} else if (next\_key \= "q") { ; Super\_L then q \-\&gt; delete (close window)  
    WinClose "A"  
    command\_executed := true  
} else if (next\_key \= "s") { ; Super\_L then s (from 'bind s-s hsplit')  
    ; This is a bit ambiguous with 'bind s-s hsplit' vs 'bind equal hsplit'  
    ; Assuming 's' after prefix is for hsplit  
    ; For Komorebi: Run "komorebic.exe layout split horizontal 0.5"  
    ; For FancyWM: SendInput "+\#h"  
    MsgBox "Temp: Horizontal Split" ; Replace with actual TWM command  
    command\_executed := true  
} else if (next\_key \= " ") { ; Super\_L then Space \-\&gt; dratmenu.py  
    Run "python.exe C:\\home\\linaro\\.local\\bin\\dratmenu.py" ; Use correct Windows path  
    command\_executed := true  
}  
;... Add more 'else if' blocks from your 'bind' commands...  
; Example for a command that was 'bind s-k someaction' (Super\_L \+ Shift \+ k)  
; The 'M' option in Input should make next\_key 'K' if Shift+k is pressed.  
else if (next\_key \= "K") { ; Super\_L then Shift+k  
    MsgBox "Action for Super\_L then Shift+K"  
    command\_executed := true  
}

if (\!command\_executed) {  
    SendInput "{". rp\_prefix\_key\_ahk\_notation. "}"  
    SendInput "{Text}". next\_key  
}  
return   }
</code></pre></div></div>

<p>; -– Translate direct ‘bind’ commands (not needing prefix) -–<br />
; Example for: bind M-1 exec xdotool key --repeat 6 dead_grave<br />
!1:: ; Alt+1<br />
Loop 6 {<br />
    SendInput “{`}” ; Backtick for dead_grave, adjust if needed<br />
}<br />
return</p>

<p>; Example for: bind Home exec scrot -s -e ‘xclip…’<br />
#Home::Run “ShareX.exe -RectangleRegion” ; Win+Home. Configure ShareX to copy to clipboard.</p>

<p>; Example for: bind s-F11 exec amixer set Master 5%+<br />
#F11::Run “nircmd.exe changesysvolume 3276” ; Win+F11 for vol up ~5%</p>

<p>;… Add other direct binds (s-F10, s-F9, s-F1, s-F2, s-F3 etc.)…<br />
; For s-F1 exec thermal.sh -&gt; #F1::Run “C:\path\to\thermal.bat_or_ps1” (ported script)<br />
; For s-F2 exec hsetroot… -&gt; #F2::Run “WallP.exe 0 ““C:\home\linaro\Desktop\02-media\pics\wallpaper1.png”” Fill”<br />
; For s-F3 exec xsetroot -name “$wspl” -&gt; This is for status bar, handle with TWM’s bar or AHK GUI.</p>

<p>; -– Startup commands from ‘exec’ lines at the end of.ratpoisonrc -–<br />
; Run “alttab.exe” ; If alttab is a specific program<br />
Run “xfce4-power-manager.exe” ; If available and needed on Windows<br />
Run “unclutter.exe --timeout 2 --jitter 5” ; If available<br />
; Run “rpws init 9” ; This would be part of TWM setup or an AHK function call at start<br />
Run “nm-applet.exe” ; If needed<br />
; Run “env HOME=$HOME/.config rpbar” ; Start your status bar if using Komorebi/Zebar or custom<br />
Run “brightnessctl.exe s 7” ; If brightnessctl has a Windows version or use NirCmd/ControlMyMonitor<br />
Run “numlockx.exe” ; If needed<br />
; Run “sh -c ‘nohup sudo openvpn…’” ; Needs specific Windows OpenVPN client setup &amp; CLI<br />
; Run “sh -c ‘nohup /home/linaro/.local/bin/clipse -listen…’” ; Needs clipse ported/configured</p>

<p>; -– Hooks (‘addhook’) -–<br />
; For hooks like ‘addhook switchwin exec rpbarsend’, you’d use AHK’s ShellHook or SetTimer<br />
; to monitor window events and then call the equivalent of ‘rpbarsend’ if you have a custom bar.<br />
; If using Komorebi’s bar, it should update automatically.</p>

<p>Return ; End of auto-execute section</p>

<p>Error Handling Note: For Run commands, consider wrapping them in Try…Catch blocks if the target might not exist or fail, e.g.:<br />
Try Run “nonexistent.exe”<br />
Catch { MsgBox “Failed to run nonexistent.exe” } 31<br />
<strong>Admin Privileges:</strong> If scripts or commands require admin rights, you might need to run the entire AHK script as administrator, or use Run *RunAs path\to\program.exe within the script for specific commands.</p>

<h3 id="d-setting-up-application-launcher-and-status-bar"><strong>D. Setting up Application Launcher and Status Bar</strong></h3>

<ul>
  <li>Configure your chosen launcher and status bar (if not using Windows Taskbar).</li>
  <li>Ensure AHK triggers them correctly.</li>
</ul>

<h3 id="e-configuring-tools-and-ahk-script-to-run-on-startup"><strong>E. Configuring Tools and AHK Script to Run on Startup</strong></h3>

<ul>
  <li>Place shortcuts to your TWM, AHK script (MyRatpoisonConfig.ahk), launcher, and status bar executables into the Startup folder (shell:startup).61</li>
  <li>You can compile your AHK script to an .exe using Ahk2Exe.47</li>
</ul>

<h2 id="7-fine-tuning-troubleshooting-and-adapting-your-ratpoisonrc-logic"><strong>7. Fine-Tuning, Troubleshooting, and Adapting Your ratpoisonrc Logic</strong></h2>

<h3 id="a-addressing-common-issues-with-specific-applications"><strong>A. Addressing Common Issues with Specific Applications</strong></h3>

<ul>
  <li>Use TWM rules (floating/ignore) for problematic apps (Java, Electron, UWP, games).25</li>
  <li>Use AHK’s Window Spy (right-click AHK tray icon) to get ahk_class or window titles for specific IfWinActive conditions or TWM rules.</li>
</ul>

<h3 id="b-tips-for-translating-logic-from-your-ratpoisonrc"><strong>B. Tips for Translating Logic from Your ratpoisonrc</strong></h3>

<ul>
  <li><strong>set variable value:</strong> AHK variables (myVar := “value”) or TWM settings.</li>
  <li><strong>addhook:</strong> AHK SetTimer for polling or ShellHook for event-driven actions. TWMs like Komorebi or GlazeWM might have their own event systems.27</li>
  <li><strong>unmanage rpbar:</strong> Your TWM should have a way to ignore your status bar window if it’s a separate application.</li>
</ul>

<p><strong>Table 7.1: ratpoisonrc to Windows/AHK/TWM Mapping Quick Reference</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">ratpoisonrc Command</th>
      <th style="text-align: left">Windows/AHK/TWM Equivalent</th>
      <th style="text-align: left">Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">escape Super_L</td>
      <td style="text-align: left">AHK: rp_prefix_key_ahk_notation := “LWin”</td>
      <td style="text-align: left">Define your prefix key</td>
    </tr>
    <tr>
      <td style="text-align: left">bind key action</td>
      <td style="text-align: left">AHK: if (next_key = “key”) { TWM_Cmd / AHK_Action }</td>
      <td style="text-align: left">Inside prefix handler function</td>
    </tr>
    <tr>
      <td style="text-align: left">bind modifier-key action</td>
      <td style="text-align: left">AHK: Direct hotkey, e.g., !1:: action (for Alt+1)</td>
      <td style="text-align: left">Outside prefix handler</td>
    </tr>
    <tr>
      <td style="text-align: left">exec program args</td>
      <td style="text-align: left">AHK: Run “program.exe args” or AHK function call</td>
      <td style="text-align: left">Ensure program/script is Windows compatible and in PATH or use full path</td>
    </tr>
    <tr>
      <td style="text-align: left">set variable value</td>
      <td style="text-align: left">AHK: variable := value or TWM configuration file setting</td>
      <td style="text-align: left">For behavior, colors, fonts, gaps - often TWM specific</td>
    </tr>
    <tr>
      <td style="text-align: left">set border 0</td>
      <td style="text-align: left">TWM config or AHK: WinSet, Style, -0xStyleValue, WinTitle</td>
      <td style="text-align: left">e.g., WinSet, Style, -0x800000, A (removes WS_BORDER) 43</td>
    </tr>
    <tr>
      <td style="text-align: left">addhook event cmd</td>
      <td style="text-align: left">AHK: SetTimer, ShellHook, or TWM’s event system</td>
      <td style="text-align: left">For reacting to window creation, focus changes, etc.</td>
    </tr>
    <tr>
      <td style="text-align: left">unmanage window_name</td>
      <td style="text-align: left">TWM: Configuration rules to float or ignore specific windows</td>
      <td style="text-align: left">Based on window title or class</td>
    </tr>
    <tr>
      <td style="text-align: left">definekey top key action</td>
      <td style="text-align: left">AHK: Direct hotkey, e.g., PrintScreen:: action</td>
      <td style="text-align: left">For keys that don’t use the ratpoison prefix</td>
    </tr>
    <tr>
      <td style="text-align: left">xdotool…</td>
      <td style="text-align: left">AHK: SendInput, SendPlay, ControlSend with loops/counts</td>
      <td style="text-align: left">AHK is the Windows equivalent for input automation</td>
    </tr>
    <tr>
      <td style="text-align: left">Custom shell scripts</td>
      <td style="text-align: left">Port to Batch, PowerShell, Python on Windows, or AHK functions</td>
      <td style="text-align: left">Call via Run</td>
    </tr>
  </tbody>
</table>

<h3 id="c-performance-considerations"><strong>C. Performance Considerations</strong></h3>

<ul>
  <li>Optimize complex AHK scripts; prefer event-driven over polling.</li>
  <li>Most TWMs are lightweight.25 Disable system/TWM animations if needed.14</li>
</ul>

<h3 id="d-debugging"><strong>D. Debugging</strong></h3>

<ul>
  <li>AHK: MsgBox, ToolTip, ListVars, OutputDebug, main window’s key history.13</li>
  <li>TWMs: Check for logs or debug modes.13</li>
  <li>Launchers: May have debug options.50</li>
</ul>

<h2 id="8-conclusion-your-ratpoison-inspired-windows-11-desktop"><strong>8. Conclusion: Your ratpoison-inspired Windows 11 Desktop</strong></h2>

<p>By combining a Windows TWM, AutoHotkey, a suitable launcher, and CLI tools, you can build a Windows 11 environment that strongly emulates your ratpoison setup’s functionality and keyboard-centric nature. This involves translating your .ratpoisonrc logic into AHK scripts and TWM configurations.</p>

<p>Perfect replication is impossible due to OS differences, but a high degree of functional similarity is achievable. This guide provides the foundational blocks and strategies. The process will be iterative as you fine-tune your AHK scripts and TWM settings to match your workflow as closely as possible. Your detailed .ratpoisonrc provides an excellent blueprint for this customization.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Convert everything to readable PDFs</title><link href="https://ib.bsb.br/convert-everything-to-readable-pdfs/" rel="alternate" type="text/html" title="Convert everything to readable PDFs" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T15:03:29+00:00</updated><id>https://ib.bsb.br/convert-everything-to-readable-pdfs</id><content type="html" xml:base="https://ib.bsb.br/convert-everything-to-readable-pdfs/"><![CDATA[<section class="code-block-container" role="group" aria-label="Bash Code Block" data-filename="bash_code_block.sh" data-code="#!/bin/bash
# enhanced_batch_convert_to_pdf.sh
# Converts diverse files to PDFs with readable text, metadata, or hex dumps.

# --- Configuration ---
# Optional: Set a common path prefix to strip from input file paths when creating output subdirectories.
# If your files are in /mnt/data/project1/docs and you set this to /mnt/data/project1,
# output for /mnt/data/project1/docs/file.txt will be in converted_pdfs/docs/file.pdf.
# If empty or not set, full paths (minus leading /) will be used for subdirectory structure.
COMMON_PREFIX_TO_STRIP=&quot;/mnt/mSATA/linaro/Desktop/00-TEMP/TCC/unique&quot;

# How to handle binary/unconvertible files:
# &quot;metadata&quot;: Create a PDF with file info (name, type, size).
# &quot;hex&quot;: Create a PDF with a hex dump of the file.
# &quot;strings&quot;: Create a PDF with printable strings from the file.
DEFAULT_BINARY_HANDLING=&quot;strings&quot;

# Force OCR on all existing PDFs, even if they seem to have a text layer.
# If false, OCRs only if no text layer is detected or if it&#39;s an image-to-PDF conversion.
FORCE_OCR_ALL_EXISTING_PDFS=false

# For images converted to PDF, should OCR be attempted?
OCR_IMAGES_TO_PDF=true

OUTPUT_DIR_BASE=&quot;converted_pdfs&quot; # All output will go into subdirectories here
LOG_FILE=&quot;conversion_log_enhanced.txt&quot;

# --- Helper Functions ---

# Function to log messages
log_msg() {
    echo &quot;$(date &#39;+%Y-%m-%d %H:%M:%S&#39;) - $1&quot; &gt;&gt; &quot;$LOG_FILE&quot;
}

# Check for required commands
check_commands() {
    local missing_cmds=0
    local cmds_to_check=(
        &quot;file&quot; &quot;libreoffice&quot; &quot;pandoc&quot; &quot;pdflatex&quot; &quot;convert&quot; &quot;jq&quot; &quot;enscript&quot;
        &quot;ps2pdf&quot; &quot;pdffonts&quot; &quot;ocrmypdf&quot; &quot;xxd&quot; &quot;man&quot; &quot;realpath&quot; &quot;mktemp&quot; &quot;dirname&quot; &quot;basename&quot;
    )
    log_msg &quot;INFO: Checking for required commands...&quot;
    for cmd in &quot;${cmds_to_check[@]}&quot;; do
        if ! command -v &quot;$cmd&quot; &amp;&gt; /dev/null; then
            log_msg &quot;ERROR: Required command &#39;$cmd&#39; not found. Please install it.&quot;
            echo &quot;ERROR: Required command &#39;$cmd&#39; not found. Please install it.&quot; &gt;&amp;2
            missing_cmds=$((missing_cmds + 1))
        fi
    done
    if [[ $missing_cmds -gt 0 ]]; then
        log_msg &quot;FATAL: $missing_cmds required command(s) are missing. Exiting.&quot;
        echo &quot;FATAL: $missing_cmds required command(s) are missing. Exiting.&quot; &gt;&amp;2
        exit 1
    fi
    log_msg &quot;INFO: All required commands found.&quot;
}

# Check for embedded text in PDF
has_text_layer() {
    # Returns 0 if text layer exists, 1 if not or error
    if ! pdffonts &quot;$1&quot; &amp;&gt;/dev/null; then return 1; fi # pdffonts error
    if [[ $(pdffonts &quot;$1&quot; | awk &#39;NR&gt;2 {if ($NF != &quot;no&quot;) c++} END{print c+0}&#39;) -gt 0 ]]; then
        return 0 # Has text
    else
        return 1 # No text
    fi
}

# Normalize extension to lowercase
normalize_ext() {
    local filename=$(basename &quot;$1&quot;)
    local ext=&quot;${filename##*.}&quot;
    if [[ &quot;$ext&quot; == &quot;$filename&quot; ]]; then # No extension
        echo &quot;&quot;
    else
        echo &quot;${ext}&quot; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;
    fi
}

# Create placeholder PDF with metadata
create_metadata_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local reason=&quot;$5&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1) # Size in bytes

    log_msg &quot;INFO: Creating metadata PDF for &#39;$infile&#39;. Reason: $reason&quot;
    (
        echo &quot;File Information&quot;
        echo &quot;----------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Reason for this Metadata PDF:&quot;
        echo &quot;$reason&quot;
        echo &quot;The content of the original file could not be meaningfully rendered as a standard document.&quot;
    ) | enscript -B --font=Courier10 --word-wrap --margins=50:50:50:50 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
    if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Metadata PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Metadata PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}

# Create hex dump PDF
create_hexdump_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1)

    log_msg &quot;INFO: Creating hex dump PDF for &#39;$infile&#39;.&quot;
    (
        echo &quot;File Information &amp; Hex Dump&quot;
        echo &quot;---------------------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Hex Dump (first 1MB or full file if smaller):&quot;
        xxd -l 1048576 &quot;$infile&quot; # Limit to 1MB to avoid huge PDFs
    ) | enscript -B --font=Courier8 --word-wrap --margins=50:50:50:50 -r -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 # -r for landscape
     if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Hex dump PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Hex dump PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}

# Create strings PDF
create_strings_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1)

    log_msg &quot;INFO: Creating extracted strings PDF for &#39;$infile&#39;.&quot;
     (
        echo &quot;File Information &amp; Extracted Strings&quot;
        echo &quot;------------------------------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Extracted Printable Strings (UTF-8, min length 4):&quot;
        strings -n 4 -a -t d --encoding=S &quot;$infile&quot; # Show offset, include all file
    ) | enscript -B --font=Courier10 --word-wrap --margins=50:50:50:50 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
    if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Strings PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Strings PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}


# --- Main Conversion Function ---
convert_file() {
    local infile=&quot;$1&quot;
    local binary_handling_method=&quot;$2&quot;
    local conversion_done=false

    # Determine output path
    local relative_path_to_input=&quot;$infile&quot;
    if [[ -n &quot;$COMMON_PREFIX_TO_STRIP&quot; ]]; then
        # Ensure prefix ends with / if it&#39;s not empty and doesn&#39;t have one, for clean stripping
        local temp_prefix=&quot;$COMMON_PREFIX_TO_STRIP&quot;
        [[ &quot;${temp_prefix: -1}&quot; != &quot;/&quot; &amp;&amp; -n &quot;$temp_prefix&quot; ]] &amp;&amp; temp_prefix=&quot;$temp_prefix/&quot;
        
        # Strip prefix if infile starts with it
        if [[ &quot;$infile&quot; == &quot;$temp_prefix&quot;* ]]; then
             relative_path_to_input=&quot;${infile#&quot;$temp_prefix&quot;}&quot;
        else # Prefix not found, use infile as is (minus leading / for safety with mkdir -p)
            relative_path_to_input=&quot;${infile#/}&quot;
        fi
    else # No prefix to strip, use infile as is (minus leading /)
        relative_path_to_input=&quot;${infile#/}&quot;
    fi
    
    local out_subdir=&quot;$OUTPUT_DIR_BASE/$relative_path_to_input&quot;
    out_subdir=$(dirname &quot;$out_subdir&quot;) # Get directory part for output
    mkdir -p &quot;$out_subdir&quot;

    local in_filename=$(basename &quot;$infile&quot;)
    local in_base=&quot;${in_filename%.*}&quot;
    # If filename has no extension, in_base becomes in_filename
    if [[ &quot;$in_filename&quot; == &quot;$in_base&quot; ]]; then
        in_base=&quot;$in_filename&quot;
    fi
    local outfile=&quot;$out_subdir/$in_base.pdf&quot;
    
    # Handle cases where infile itself is already $outfile (e.g. input is a.pdf, output is a.pdf)
    # or if infile is foo and outfile becomes foo.pdf, this is fine.
    # If infile is foo.txt and outfile is foo.pdf, this is fine.
    # If infile is foo.pdf and outfile is foo.pdf, this is fine.
    # The main concern is overwriting source if $infile == $outfile AND it&#39;s not a PDF already.
    # This is unlikely given $outfile always gets .pdf extension.
    # However, if $infile is /path/foo and $outfile is /path/foo.pdf, this is the desired outcome.

    local ext=$(normalize_ext &quot;$in_filename&quot;)
    local mimetype=$(file -b --mime-type &quot;$infile&quot; | cut -d&#39;;&#39; -f1) # Remove charset
    local filedesc=$(file -b &quot;$infile&quot;)

    log_msg &quot;-----------------------------------------------------&quot;
    log_msg &quot;START Processing: &#39;$infile&#39;&quot;
    log_msg &quot;INFO: MIME=&#39;$mimetype&#39;, Ext=&#39;$ext&#39;, Desc=&#39;$filedesc&#39;, OutFile=&#39;$outfile&#39;&quot;

    if [[ -f &quot;$outfile&quot; &amp;&amp; &quot;$outfile&quot; -nt &quot;$infile&quot; ]]; then
        log_msg &quot;SKIP: Output &#39;$outfile&#39; exists and is newer than &#39;$infile&#39;.&quot;
        return 0 # Indicate skipped
    fi

    case &quot;$mimetype&quot; in
        application/pdf)
            if $FORCE_OCR_ALL_EXISTING_PDFS; then
                log_msg &quot;INFO: PDF &#39;$infile&#39; - OCR FORCED.&quot;
                ocrmypdf --force-ocr &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            elif ! has_text_layer &quot;$infile&quot;; then
                log_msg &quot;INFO: PDF &#39;$infile&#39; needs OCR (no text layer detected).&quot;
                ocrmypdf &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 # Default: adds layer if missing
            else
                log_msg &quot;INFO: PDF &#39;$infile&#39; has text layer. Copying.&quot;
                cp &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                if [[ $? -eq 0 ]]; then conversion_done=true; else log_msg &quot;ERROR: Failed to copy PDF &#39;$infile&#39;.&quot;; fi
            fi
            if [[ -f &quot;$outfile&quot; &amp;&amp; $? -eq 0 ]]; then # Check if ocrmypdf or cp succeeded
                log_msg &quot;OK: PDF &#39;$infile&#39; processed to &#39;$outfile&#39;.&quot;
                conversion_done=true
            elif [[ ! -f &quot;$outfile&quot; ]]; then # If ocrmypdf failed and didn&#39;t create outfile
                log_msg &quot;ERROR: Processing PDF &#39;$infile&#39; failed. Output file not created.&quot;
            fi
            ;;

        application/msword|application/vnd.ms-word*|\
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|\
        application/vnd.oasis.opendocument.text*|application/rtf|\
        application/vnd.ms-excel*|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\
        application/vnd.oasis.opendocument.spreadsheet*)
            log_msg &quot;INFO: Office document &#39;$infile&#39;. Converting with LibreOffice.&quot;
            # LibreOffice --convert-to pdf uses the input filename with .pdf extension in the --outdir
            local lo_expected_out_name=&quot;$out_subdir/$in_base.pdf&quot; # This should match $outfile
            libreoffice --headless --convert-to pdf &quot;$infile&quot; --outdir &quot;$out_subdir&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            if [[ -f &quot;$lo_expected_out_name&quot; ]]; then
                 # If $lo_expected_out_name is different from $outfile (e.g. due to sanitization or complex base name)
                 # This should not happen if $outfile is correctly constructed as $out_subdir/$in_base.pdf
                if [[ &quot;$lo_expected_out_name&quot; != &quot;$outfile&quot; ]]; then
                    log_msg &quot;WARN: LibreOffice output &#39;$lo_expected_out_name&#39; differs from expected &#39;$outfile&#39;. Moving.&quot;
                    mv &quot;$lo_expected_out_name&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                fi
                log_msg &quot;OK: &#39;$infile&#39; converted via LibreOffice to &#39;$outfile&#39;.&quot;
                conversion_done=true
            else
                log_msg &quot;ERROR: LibreOffice conversion FAILED for &#39;$infile&#39;. Output &#39;$lo_expected_out_name&#39; not found.&quot;
            fi
            ;;

        text/csv|text/tab-separated-values)
            log_msg &quot;INFO: CSV/TSV &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --from=csv --toc --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: Pandoc (CSV) FAILED for &#39;$infile&#39;.&quot;
            ;;

        text/markdown)
            log_msg &quot;INFO: Markdown &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: Pandoc (Markdown) FAILED for &#39;$infile&#39;.&quot;
            ;;
        
        application/json)
            log_msg &quot;INFO: JSON &#39;$infile&#39;. Attempting pretty-print with jq then Pandoc.&quot;
            local tmp_json_pretty=$(mktemp &quot;$out_subdir/json_pretty_XXXXXX.json&quot;)
            if jq . &quot;$infile&quot; &gt; &quot;$tmp_json_pretty&quot; 2&gt;/dev/null; then
                pandoc &quot;$tmp_json_pretty&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (pretty JSON) converted via Pandoc.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (pretty JSON) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (JSON) converted via enscript fallback.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for JSON &#39;$infile&#39; FAILED.&quot;; }
            else
                log_msg &quot;WARN: jq failed for &#39;$infile&#39;. Trying Pandoc on raw, then enscript.&quot;
                pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (raw JSON) converted via Pandoc.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (raw JSON) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (JSON) converted via enscript fallback.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for JSON &#39;$infile&#39; FAILED.&quot;; }
            fi
            rm -f &quot;$tmp_json_pretty&quot;
            ;;

        image/png|image/jpeg|image/gif|image/bmp|image/tiff|image/webp)
            log_msg &quot;INFO: Image &#39;$infile&#39;.&quot;
            if $OCR_IMAGES_TO_PDF &amp;&amp; command -v ocrmypdf &amp;&gt; /dev/null; then
                log_msg &quot;Attempting OCR with ocrmypdf for image &#39;$infile&#39;.&quot;
                ocrmypdf &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; OCR&#39;d via ocrmypdf to &#39;$outfile&#39;.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: ocrmypdf FAILED for image &#39;$infile&#39;. Falling back to ImageMagick&#39;s convert.&quot;;
                         convert &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; converted via ImageMagick (no OCR).&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: ImageMagick&#39;s convert also FAILED for &#39;$infile&#39;.&quot;; }
            else
                log_msg &quot;Converting image &#39;$infile&#39; with ImageMagick&#39;s convert (no OCR).&quot;
                convert &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; converted via ImageMagick.&quot;; conversion_done=true; } \
                    || log_msg &quot;ERROR: ImageMagick&#39;s convert FAILED for &#39;$infile&#39;.&quot;
            fi
            ;;

        application/x-tex|text/x-tex|application/x-latex)
            if [[ &quot;$ext&quot; == &quot;cls&quot; || &quot;$ext&quot; == &quot;sty&quot; ]]; then # LaTeX class/style files
                log_msg &quot;INFO: LaTeX Class/Style file &#39;$infile&#39;. Converting as syntax-highlighted text.&quot;
                pandoc &quot;$infile&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc (as LaTeX source).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (LaTeX source) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 --highlight=latex -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (highlighted LaTeX).&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript (highlighted LaTeX) FAILED for &#39;$infile&#39;.&quot;; }
            else # Regular .tex files
                log_msg &quot;INFO: LaTeX document &#39;$infile&#39;. Compiling with pdflatex.&quot;
                local temp_tex_dir=$(mktemp -d &quot;$out_subdir/tex_compile_XXXXXX&quot;)
                cp &quot;$infile&quot; &quot;$temp_tex_dir/&quot; # Copy tex file to temp dir
                # If there are associated .bib files or images, they&#39;d need to be copied too or paths adjusted.
                # This simplified version assumes self-contained .tex or resolvable paths from temp_tex_dir.
                
                local tex_filename_only=$(basename &quot;$infile&quot;)
                (cd &quot;$temp_tex_dir&quot; &amp;&amp; \
                 pdflatex -interaction=nonstopmode &quot;$tex_filename_only&quot; &amp;&amp; \
                 pdflatex -interaction=nonstopmode &quot;$tex_filename_only&quot;) &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                
                local compiled_pdf_base=&quot;${tex_filename_only%.*}&quot;
                local compiled_pdf_path=&quot;$temp_tex_dir/$compiled_pdf_base.pdf&quot;

                if [[ -f &quot;$compiled_pdf_path&quot; ]]; then
                    mv &quot;$compiled_pdf_path&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                        &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; compiled via pdflatex to &#39;$outfile&#39;.&quot;; conversion_done=true; } \
                        || log_msg &quot;ERROR: pdflatex compiled &#39;$infile&#39;, but FAILED to move to &#39;$outfile&#39;.&quot;
                else
                    log_msg &quot;ERROR: pdflatex compilation FAILED for &#39;$infile&#39;. Output PDF not found in &#39;$temp_tex_dir&#39;.&quot;
                fi
                rm -rf &quot;$temp_tex_dir&quot;
            fi
            ;;
        
        application/x-bibtex|text/x-bibtex)
            log_msg &quot;INFO: BibTeX file &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; --standalone -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || { log_msg &quot;ERROR: Pandoc (BibTeX) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                     enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                        &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (BibTeX) converted as plain text via enscript.&quot;; conversion_done=true; } \
                        || log_msg &quot;ERROR: enscript fallback for BibTeX &#39;$infile&#39; FAILED.&quot;; }
            ;;

        application/x-troff-man|text/troff) # Man pages
            log_msg &quot;INFO: Man page &#39;$infile&#39;. Converting with &#39;man&#39;.&quot;
            man -Tpdf &quot;$infile&quot; &gt; &quot;$outfile&quot; 2&gt;&gt; &quot;$LOG_FILE&quot; # man outputs errors to stderr
            if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
                log_msg &quot;OK: &#39;$infile&#39; converted via &#39;man -Tpdf&#39;.&quot;
                conversion_done=true
            else
                log_msg &quot;WARN: &#39;man -Tpdf&#39; FAILED for &#39;$infile&#39;. Trying Pandoc.&quot;
                pandoc &quot;$infile&quot; --standalone -f man -t pdf -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc (man).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (man) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (man page) converted as text via enscript.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for man page &#39;$infile&#39; FAILED.&quot;; }
            fi
            ;;

        text/x-python|text/x-shellscript|application/x-perl|application/x-ruby|\
        text/x-csrc|text/x-chdr|text/x-c++src|text/x-java|text/html|text/css|application/javascript|application/xml|text/xml) # Code, XML, HTML
            log_msg &quot;INFO: Code/Markup file &#39;$infile&#39; ($mimetype). Converting with Pandoc (syntax highlighting).&quot;
            # Determine Pandoc format based on extension if possible for better highlighting
            local pandoc_format_opt=&quot;&quot;
            case &quot;$ext&quot; in
                py) pandoc_format_opt=&quot;python&quot; ;;
                sh|bash) pandoc_format_opt=&quot;bash&quot; ;;
                pl) pandoc_format_opt=&quot;perl&quot; ;;
                rb) pandoc_format_opt=&quot;ruby&quot; ;;
                c|h) pandoc_format_opt=&quot;c&quot; ;;
                cpp|hpp|cxx) pandoc_format_opt=&quot;cpp&quot; ;;
                java) pandoc_format_opt=&quot;java&quot; ;;
                html|htm) pandoc_format_opt=&quot;html&quot; ;;
                css) pandoc_format_opt=&quot;css&quot; ;;
                js) pandoc_format_opt=&quot;javascript&quot; ;;
                xml|bcf|run.xml) pandoc_format_opt=&quot;xml&quot; ;; # .bcf (Biber control file), .run.xml
            esac
            
            if [[ -n &quot;$pandoc_format_opt&quot; ]]; then
                pandoc &quot;$infile&quot; --from=&quot;$pandoc_format_opt&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            else # Default to Pandoc auto-detection or plain text
                pandoc &quot;$infile&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            fi

            if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
                log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc with highlighting.&quot;
                conversion_done=true
            else
                log_msg &quot;WARN: Pandoc with highlighting FAILED for &#39;$infile&#39;. Trying enscript.&quot;
                local enscript_hl_opt=&quot;&quot;
                [[ -n &quot;$ext&quot; ]] &amp;&amp; enscript_hl_opt=&quot;--highlight=$ext&quot;
                enscript &quot;$infile&quot; --font=Courier10 $enscript_hl_opt -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript.&quot;; conversion_done=true; } \
                    || log_msg &quot;ERROR: enscript fallback for &#39;$infile&#39; FAILED.&quot;
            fi
            ;;
        
        text/*) # Generic text files (.log, .txt, .bak, .aux, .synctex, .blg, .info, .lst, .conf etc.)
            log_msg &quot;INFO: Generic text file &#39;$infile&#39; ($mimetype, ext: .$ext). Converting with enscript.&quot;
            enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: enscript FAILED for &#39;$infile&#39;.&quot;
            ;;

        application/octet-stream|application/x-dosexec|application/x-sharedlib|\
        application/x-object|application/x-executable|application/x-sqlite3|inode/x-empty|\
        application/x-archive|application/zip|application/gzip|application/x-bzip2|application/x-xz)
            log_msg &quot;INFO: Binary/Archive/Empty/Unknown file &#39;$infile&#39; (MIME: $mimetype, Desc: $filedesc).&quot;
            if [[ &quot;$mimetype&quot; == &quot;inode/x-empty&quot; ]]; then
                create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;File is empty.&quot;
                conversion_done=true
            # Heuristic: if &#39;filedesc&#39; suggests text despite octet-stream, try enscript
            elif [[ &quot;$filedesc&quot; == *&quot;text&quot;* || &quot;$filedesc&quot; == *&quot;script&quot;* || &quot;$filedesc&quot; == *&quot;ASCII text&quot;* || &quot;$filedesc&quot; == *&quot;UTF-8 Unicode text&quot;* ]]; then
                log_msg &quot;INFO: MIME is &#39;$mimetype&#39;, but filedesc suggests text (&#39;$filedesc&#39;). Trying enscript.&quot;
                enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (heuristic).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: enscript (heuristic) FAILED for &#39;$infile&#39;. Using binary handling.&quot;;
                         if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Binary or undetermined content type ($mimetype).&quot;; fi
                         conversion_done=true; # Placeholder PDF is a form of &quot;done&quot;
                       }
            else # Standard binary handling
                if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Binary, archive, or undetermined content type ($mimetype).&quot;; fi
                conversion_done=true; # Placeholder PDF is a form of &quot;done&quot;
            fi
            ;;
        
        *) # Fallback for truly unrecognized/unhandled MIME types
            log_msg &quot;WARN: Unhandled MIME type &#39;$mimetype&#39; for &#39;$infile&#39;. File description: &#39;$filedesc&#39;.&quot;
            if [[ &quot;$filedesc&quot; == *&quot;text&quot;* || &quot;$filedesc&quot; == *&quot;script&quot;* || &quot;$filedesc&quot; == *&quot;ASCII text&quot;* || &quot;$filedesc&quot; == *&quot;UTF-8 Unicode text&quot;* ]]; then
                log_msg &quot;INFO: Unhandled MIME, but filedesc suggests text (&#39;$filedesc&#39;). Trying enscript.&quot;
                enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (heuristic for unhandled MIME).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: enscript (heuristic for unhandled MIME) FAILED for &#39;$infile&#39;. Using binary handling.&quot;;
                         if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Unhandled MIME type ($mimetype) and not clearly text.&quot;; fi
                         conversion_done=true;
                       }
            else
                log_msg &quot;INFO: Unhandled MIME type &#39;$mimetype&#39; for &#39;$infile&#39;. Using configured binary handling.&quot;
                if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Unhandled MIME type ($mimetype).&quot;; fi
                conversion_done=true;
            fi
            ;;
    esac

    if ! $conversion_done &amp;&amp; [[ ! -f &quot;$outfile&quot; ]]; then
        log_msg &quot;FALLBACK: No conversion method succeeded and no output file created for &#39;$infile&#39;. Creating placeholder.&quot;
        create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;No applicable conversion rule or all attempts failed.&quot;
    elif ! $conversion_done &amp;&amp; [[ -f &quot;$outfile&quot; ]]; then
        log_msg &quot;WARN: Conversion logic did not explicitly set &#39;done&#39; flag, but output file &#39;$outfile&#39; exists. Assuming prior step handled it.&quot;
    fi
    log_msg &quot;END Processing: &#39;$infile&#39;&quot;
    [[ -f &quot;$outfile&quot; ]] &amp;&amp; return 0 || return 1 # Return 0 if output exists, 1 otherwise
}

# --- Script Main Logic ---

# Argument Parsing
if [[ &quot;$#&quot; -lt 1 || &quot;$#&quot; -gt 4 ]]; then
    echo &quot;Usage: $0 &lt;listfile.txt&gt; [common_prefix_to_strip] [binary_handling: metadata|hex|strings] [force_ocr_all_pdfs: true|false]&quot;
    echo &quot;Example: $0 myfiles.txt \&quot;/mnt/mydata\&quot; hex true&quot;
    exit 1
fi

INPUT_LIST_FILE=&quot;$1&quot;
[[ -n &quot;$2&quot; ]] &amp;&amp; COMMON_PREFIX_TO_STRIP=&quot;$2&quot;
[[ -n &quot;$3&quot; ]] &amp;&amp; BINARY_HANDLING_USER_CHOICE=&quot;$3&quot; || BINARY_HANDLING_USER_CHOICE=&quot;$DEFAULT_BINARY_HANDLING&quot;
[[ -n &quot;$4&quot; ]] &amp;&amp; FORCE_OCR_ALL_PDFS_USER_CHOICE=&quot;$4&quot;

# Validate binary handling choice
case &quot;$BINARY_HANDLING_USER_CHOICE&quot; in
    metadata|hex|strings) BINARY_HANDLING=&quot;$BINARY_HANDLING_USER_CHOICE&quot; ;;
    *) log_msg &quot;WARN: Invalid binary_handling option &#39;$BINARY_HANDLING_USER_CHOICE&#39;. Defaulting to &#39;$DEFAULT_BINARY_HANDLING&#39;.&quot;; BINARY_HANDLING=&quot;$DEFAULT_BINARY_HANDLING&quot; ;;
esac

# Validate force OCR choice
if [[ -n &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; ]]; then
    if [[ &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; == &quot;true&quot; ]]; then
        FORCE_OCR_ALL_EXISTING_PDFS=true
    elif [[ &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; == &quot;false&quot; ]]; then
        FORCE_OCR_ALL_EXISTING_PDFS=false
    else
        log_msg &quot;WARN: Invalid force_ocr_all_pdfs option &#39;$FORCE_OCR_ALL_PDFS_USER_CHOICE&#39;. Using default ($FORCE_OCR_ALL_EXISTING_PDFS).&quot;
    fi
fi

# Initialize Log File
echo &quot;Conversion process started at $(date)&quot; &gt; &quot;$LOG_FILE&quot;
log_msg &quot;INFO: Input List File: &#39;$INPUT_LIST_FILE&#39;&quot;
log_msg &quot;INFO: Common Prefix to Strip: &#39;$COMMON_PREFIX_TO_STRIP&#39;&quot;
log_msg &quot;INFO: Binary File Handling: &#39;$BINARY_HANDLING&#39;&quot;
log_msg &quot;INFO: Force OCR All Existing PDFs: $FORCE_OCR_ALL_EXISTING_PDFS&quot;
log_msg &quot;INFO: OCR Images to PDF: $OCR_IMAGES_TO_PDF&quot;
log_msg &quot;INFO: Output Base Directory: &#39;$OUTPUT_DIR_BASE&#39;&quot;

check_commands # Check for essential tools

# Prepare clean file list (robust URL decoding)
CLEANED_LIST_FOR_PROCESSING_INTERNAL=&quot;cleaned_input_list_internal.tmp&quot;
log_msg &quot;INFO: Preparing clean file list from &#39;$INPUT_LIST_FILE&#39;...&quot;
if python3 -c &#39;import sys, urllib.parse; [print(urllib.parse.unquote(line.strip())) for line in sys.stdin if line.strip()]&#39; &lt; &quot;$INPUT_LIST_FILE&quot; &gt; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot;; then
    log_msg &quot;INFO: Clean file list created successfully using Python.&quot;
else
    log_msg &quot;WARN: Python URL decoding failed (Python 3 not found or error). Using original list (may have issues with URL-encoded names).&quot;
    cp &quot;$INPUT_LIST_FILE&quot; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot; # Fallback
fi

# Create output base directory
mkdir -p &quot;$OUTPUT_DIR_BASE&quot;
log_msg &quot;INFO: Ensured output base directory &#39;$OUTPUT_DIR_BASE&#39; exists.&quot;

# Process the list
total_files=0
successful_conversions=0
failed_conversions=0
skipped_up_to_date=0

while IFS= read -r file_to_process || [[ -n &quot;$file_to_process&quot; ]]; do
    # Skip empty or comment lines from the (cleaned) list
    [[ -z &quot;$file_to_process&quot; || &quot;$file_to_process&quot; =~ ^# ]] &amp;&amp; continue

    total_files=$((total_files + 1))
    if [[ ! -e &quot;$file_to_process&quot; ]]; then # Use -e to check if path exists (file or dir)
        log_msg &quot;ERROR: File or directory &#39;$file_to_process&#39; from list NOT FOUND. Skipping.&quot;
        failed_conversions=$((failed_conversions + 1))
        continue
    fi
    if [[ -d &quot;$file_to_process&quot; ]]; then
        log_msg &quot;SKIP: Path &#39;$file_to_process&#39; is a DIRECTORY. Skipping.&quot;
        # Consider if directories should be counted as skipped or failed. For now, just log.
        continue
    fi
     if [[ ! -f &quot;$file_to_process&quot; ]]; then
        log_msg &quot;SKIP: Path &#39;$file_to_process&#39; is NOT A REGULAR FILE. Skipping.&quot;
        continue
    fi
    if [[ ! -r &quot;$file_to_process&quot; ]]; then
        log_msg &quot;ERROR: File &#39;$file_to_process&#39; is NOT READABLE. Skipping.&quot;
        failed_conversions=$((failed_conversions + 1))
        continue
    fi

    # The up-to-date check is now inside convert_file, which returns 0 for success/skipped-up-to-date
    convert_file &quot;$file_to_process&quot; &quot;$BINARY_HANDLING&quot;
    status=$?
    
    # Crude status check based on return value (0 for success/skipped, 1 for failure)
    # A more refined check would involve parsing the log for &quot;SKIP&quot; vs &quot;OK&quot;
    if [[ $status -eq 0 ]]; then
        # This counts files where an output PDF was created OR skipped because it was up-to-date.
        # To differentiate, we&#39;d need more complex return codes or log parsing.
        # For now, if convert_file returns 0, it means no critical error in its own execution.
        # The actual &quot;success&quot; of conversion is in the log.
        : # Not incrementing success here, summary is tricky.
    else
        failed_conversions=$((failed_conversions + 1))
    fi
done &lt; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot;

rm -f &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot; # Clean up temp list

# Final Summary (approximated from log counts for more detail)
successful_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - OK:&quot; &quot;$LOG_FILE&quot;)
error_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - ERROR:&quot; &quot;$LOG_FILE&quot;)
skipped_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - SKIP:&quot; &quot;$LOG_FILE&quot;) # Includes up-to-date and non-file skips

log_msg &quot;-----------------------------------------------------&quot;
log_msg &quot;Conversion process completed at $(date)&quot;
log_msg &quot;SUMMARY: Total items from list processed: $total_files&quot;
log_msg &quot;SUMMARY: Successful operations (OK): $successful_ops&quot;
log_msg &quot;SUMMARY: Errored operations (ERROR): $error_ops&quot;
log_msg &quot;SUMMARY: Skipped operations (SKIP/NOT FOUND/DIR): $skipped_ops (includes up-to-date, not found, directories)&quot;
log_msg &quot;INFO: Detailed log written to &#39;$LOG_FILE&#39;&quot;
log_msg &quot;INFO: Output PDFs are in subdirectories under &#39;$OUTPUT_DIR_BASE&#39;&quot;

echo &quot;Conversion complete. Log: $LOG_FILE. Output in $OUTPUT_DIR_BASE.&quot;" data-download-link="" data-download-label="Download Bash">
  <code class="language-bash">#!/bin/bash
# enhanced_batch_convert_to_pdf.sh
# Converts diverse files to PDFs with readable text, metadata, or hex dumps.

# --- Configuration ---
# Optional: Set a common path prefix to strip from input file paths when creating output subdirectories.
# If your files are in /mnt/data/project1/docs and you set this to /mnt/data/project1,
# output for /mnt/data/project1/docs/file.txt will be in converted_pdfs/docs/file.pdf.
# If empty or not set, full paths (minus leading /) will be used for subdirectory structure.
COMMON_PREFIX_TO_STRIP=&quot;/mnt/mSATA/linaro/Desktop/00-TEMP/TCC/unique&quot;

# How to handle binary/unconvertible files:
# &quot;metadata&quot;: Create a PDF with file info (name, type, size).
# &quot;hex&quot;: Create a PDF with a hex dump of the file.
# &quot;strings&quot;: Create a PDF with printable strings from the file.
DEFAULT_BINARY_HANDLING=&quot;strings&quot;

# Force OCR on all existing PDFs, even if they seem to have a text layer.
# If false, OCRs only if no text layer is detected or if it&#39;s an image-to-PDF conversion.
FORCE_OCR_ALL_EXISTING_PDFS=false

# For images converted to PDF, should OCR be attempted?
OCR_IMAGES_TO_PDF=true

OUTPUT_DIR_BASE=&quot;converted_pdfs&quot; # All output will go into subdirectories here
LOG_FILE=&quot;conversion_log_enhanced.txt&quot;

# --- Helper Functions ---

# Function to log messages
log_msg() {
    echo &quot;$(date &#39;+%Y-%m-%d %H:%M:%S&#39;) - $1&quot; &gt;&gt; &quot;$LOG_FILE&quot;
}

# Check for required commands
check_commands() {
    local missing_cmds=0
    local cmds_to_check=(
        &quot;file&quot; &quot;libreoffice&quot; &quot;pandoc&quot; &quot;pdflatex&quot; &quot;convert&quot; &quot;jq&quot; &quot;enscript&quot;
        &quot;ps2pdf&quot; &quot;pdffonts&quot; &quot;ocrmypdf&quot; &quot;xxd&quot; &quot;man&quot; &quot;realpath&quot; &quot;mktemp&quot; &quot;dirname&quot; &quot;basename&quot;
    )
    log_msg &quot;INFO: Checking for required commands...&quot;
    for cmd in &quot;${cmds_to_check[@]}&quot;; do
        if ! command -v &quot;$cmd&quot; &amp;&gt; /dev/null; then
            log_msg &quot;ERROR: Required command &#39;$cmd&#39; not found. Please install it.&quot;
            echo &quot;ERROR: Required command &#39;$cmd&#39; not found. Please install it.&quot; &gt;&amp;2
            missing_cmds=$((missing_cmds + 1))
        fi
    done
    if [[ $missing_cmds -gt 0 ]]; then
        log_msg &quot;FATAL: $missing_cmds required command(s) are missing. Exiting.&quot;
        echo &quot;FATAL: $missing_cmds required command(s) are missing. Exiting.&quot; &gt;&amp;2
        exit 1
    fi
    log_msg &quot;INFO: All required commands found.&quot;
}

# Check for embedded text in PDF
has_text_layer() {
    # Returns 0 if text layer exists, 1 if not or error
    if ! pdffonts &quot;$1&quot; &amp;&gt;/dev/null; then return 1; fi # pdffonts error
    if [[ $(pdffonts &quot;$1&quot; | awk &#39;NR&gt;2 {if ($NF != &quot;no&quot;) c++} END{print c+0}&#39;) -gt 0 ]]; then
        return 0 # Has text
    else
        return 1 # No text
    fi
}

# Normalize extension to lowercase
normalize_ext() {
    local filename=$(basename &quot;$1&quot;)
    local ext=&quot;${filename##*.}&quot;
    if [[ &quot;$ext&quot; == &quot;$filename&quot; ]]; then # No extension
        echo &quot;&quot;
    else
        echo &quot;${ext}&quot; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;
    fi
}

# Create placeholder PDF with metadata
create_metadata_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local reason=&quot;$5&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1) # Size in bytes

    log_msg &quot;INFO: Creating metadata PDF for &#39;$infile&#39;. Reason: $reason&quot;
    (
        echo &quot;File Information&quot;
        echo &quot;----------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Reason for this Metadata PDF:&quot;
        echo &quot;$reason&quot;
        echo &quot;The content of the original file could not be meaningfully rendered as a standard document.&quot;
    ) | enscript -B --font=Courier10 --word-wrap --margins=50:50:50:50 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
    if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Metadata PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Metadata PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}

# Create hex dump PDF
create_hexdump_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1)

    log_msg &quot;INFO: Creating hex dump PDF for &#39;$infile&#39;.&quot;
    (
        echo &quot;File Information &amp; Hex Dump&quot;
        echo &quot;---------------------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Hex Dump (first 1MB or full file if smaller):&quot;
        xxd -l 1048576 &quot;$infile&quot; # Limit to 1MB to avoid huge PDFs
    ) | enscript -B --font=Courier8 --word-wrap --margins=50:50:50:50 -r -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 # -r for landscape
     if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Hex dump PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Hex dump PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}

# Create strings PDF
create_strings_pdf() {
    local infile=&quot;$1&quot;
    local outfile=&quot;$2&quot;
    local detected_mimetype=&quot;$3&quot;
    local file_description=&quot;$4&quot;
    local filesize=$(du -b &quot;$infile&quot; | cut -f1)

    log_msg &quot;INFO: Creating extracted strings PDF for &#39;$infile&#39;.&quot;
     (
        echo &quot;File Information &amp; Extracted Strings&quot;
        echo &quot;------------------------------------&quot;
        echo &quot;Original Filename: $(basename &quot;$infile&quot;)&quot;
        echo &quot;Full Path: $infile&quot;
        echo &quot;Detected MIME Type: $detected_mimetype&quot;
        echo &quot;File Command Description: $file_description&quot;
        echo &quot;Size: $filesize bytes ($(du -h &quot;$infile&quot; | cut -f1))&quot;
        echo &quot;Modification Date: $(date -r &quot;$infile&quot;)&quot;
        echo &quot;&quot;
        echo &quot;Extracted Printable Strings (UTF-8, min length 4):&quot;
        strings -n 4 -a -t d --encoding=S &quot;$infile&quot; # Show offset, include all file
    ) | enscript -B --font=Courier10 --word-wrap --margins=50:50:50:50 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
    if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
        log_msg &quot;OK: Strings PDF created for &#39;$infile&#39; at &#39;$outfile&#39;.&quot;
    else
        log_msg &quot;ERROR: Strings PDF creation FAILED for &#39;$infile&#39;.&quot;
    fi
}


# --- Main Conversion Function ---
convert_file() {
    local infile=&quot;$1&quot;
    local binary_handling_method=&quot;$2&quot;
    local conversion_done=false

    # Determine output path
    local relative_path_to_input=&quot;$infile&quot;
    if [[ -n &quot;$COMMON_PREFIX_TO_STRIP&quot; ]]; then
        # Ensure prefix ends with / if it&#39;s not empty and doesn&#39;t have one, for clean stripping
        local temp_prefix=&quot;$COMMON_PREFIX_TO_STRIP&quot;
        [[ &quot;${temp_prefix: -1}&quot; != &quot;/&quot; &amp;&amp; -n &quot;$temp_prefix&quot; ]] &amp;&amp; temp_prefix=&quot;$temp_prefix/&quot;
        
        # Strip prefix if infile starts with it
        if [[ &quot;$infile&quot; == &quot;$temp_prefix&quot;* ]]; then
             relative_path_to_input=&quot;${infile#&quot;$temp_prefix&quot;}&quot;
        else # Prefix not found, use infile as is (minus leading / for safety with mkdir -p)
            relative_path_to_input=&quot;${infile#/}&quot;
        fi
    else # No prefix to strip, use infile as is (minus leading /)
        relative_path_to_input=&quot;${infile#/}&quot;
    fi
    
    local out_subdir=&quot;$OUTPUT_DIR_BASE/$relative_path_to_input&quot;
    out_subdir=$(dirname &quot;$out_subdir&quot;) # Get directory part for output
    mkdir -p &quot;$out_subdir&quot;

    local in_filename=$(basename &quot;$infile&quot;)
    local in_base=&quot;${in_filename%.*}&quot;
    # If filename has no extension, in_base becomes in_filename
    if [[ &quot;$in_filename&quot; == &quot;$in_base&quot; ]]; then
        in_base=&quot;$in_filename&quot;
    fi
    local outfile=&quot;$out_subdir/$in_base.pdf&quot;
    
    # Handle cases where infile itself is already $outfile (e.g. input is a.pdf, output is a.pdf)
    # or if infile is foo and outfile becomes foo.pdf, this is fine.
    # If infile is foo.txt and outfile is foo.pdf, this is fine.
    # If infile is foo.pdf and outfile is foo.pdf, this is fine.
    # The main concern is overwriting source if $infile == $outfile AND it&#39;s not a PDF already.
    # This is unlikely given $outfile always gets .pdf extension.
    # However, if $infile is /path/foo and $outfile is /path/foo.pdf, this is the desired outcome.

    local ext=$(normalize_ext &quot;$in_filename&quot;)
    local mimetype=$(file -b --mime-type &quot;$infile&quot; | cut -d&#39;;&#39; -f1) # Remove charset
    local filedesc=$(file -b &quot;$infile&quot;)

    log_msg &quot;-----------------------------------------------------&quot;
    log_msg &quot;START Processing: &#39;$infile&#39;&quot;
    log_msg &quot;INFO: MIME=&#39;$mimetype&#39;, Ext=&#39;$ext&#39;, Desc=&#39;$filedesc&#39;, OutFile=&#39;$outfile&#39;&quot;

    if [[ -f &quot;$outfile&quot; &amp;&amp; &quot;$outfile&quot; -nt &quot;$infile&quot; ]]; then
        log_msg &quot;SKIP: Output &#39;$outfile&#39; exists and is newer than &#39;$infile&#39;.&quot;
        return 0 # Indicate skipped
    fi

    case &quot;$mimetype&quot; in
        application/pdf)
            if $FORCE_OCR_ALL_EXISTING_PDFS; then
                log_msg &quot;INFO: PDF &#39;$infile&#39; - OCR FORCED.&quot;
                ocrmypdf --force-ocr &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            elif ! has_text_layer &quot;$infile&quot;; then
                log_msg &quot;INFO: PDF &#39;$infile&#39; needs OCR (no text layer detected).&quot;
                ocrmypdf &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 # Default: adds layer if missing
            else
                log_msg &quot;INFO: PDF &#39;$infile&#39; has text layer. Copying.&quot;
                cp &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                if [[ $? -eq 0 ]]; then conversion_done=true; else log_msg &quot;ERROR: Failed to copy PDF &#39;$infile&#39;.&quot;; fi
            fi
            if [[ -f &quot;$outfile&quot; &amp;&amp; $? -eq 0 ]]; then # Check if ocrmypdf or cp succeeded
                log_msg &quot;OK: PDF &#39;$infile&#39; processed to &#39;$outfile&#39;.&quot;
                conversion_done=true
            elif [[ ! -f &quot;$outfile&quot; ]]; then # If ocrmypdf failed and didn&#39;t create outfile
                log_msg &quot;ERROR: Processing PDF &#39;$infile&#39; failed. Output file not created.&quot;
            fi
            ;;

        application/msword|application/vnd.ms-word*|\
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|\
        application/vnd.oasis.opendocument.text*|application/rtf|\
        application/vnd.ms-excel*|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\
        application/vnd.oasis.opendocument.spreadsheet*)
            log_msg &quot;INFO: Office document &#39;$infile&#39;. Converting with LibreOffice.&quot;
            # LibreOffice --convert-to pdf uses the input filename with .pdf extension in the --outdir
            local lo_expected_out_name=&quot;$out_subdir/$in_base.pdf&quot; # This should match $outfile
            libreoffice --headless --convert-to pdf &quot;$infile&quot; --outdir &quot;$out_subdir&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            if [[ -f &quot;$lo_expected_out_name&quot; ]]; then
                 # If $lo_expected_out_name is different from $outfile (e.g. due to sanitization or complex base name)
                 # This should not happen if $outfile is correctly constructed as $out_subdir/$in_base.pdf
                if [[ &quot;$lo_expected_out_name&quot; != &quot;$outfile&quot; ]]; then
                    log_msg &quot;WARN: LibreOffice output &#39;$lo_expected_out_name&#39; differs from expected &#39;$outfile&#39;. Moving.&quot;
                    mv &quot;$lo_expected_out_name&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                fi
                log_msg &quot;OK: &#39;$infile&#39; converted via LibreOffice to &#39;$outfile&#39;.&quot;
                conversion_done=true
            else
                log_msg &quot;ERROR: LibreOffice conversion FAILED for &#39;$infile&#39;. Output &#39;$lo_expected_out_name&#39; not found.&quot;
            fi
            ;;

        text/csv|text/tab-separated-values)
            log_msg &quot;INFO: CSV/TSV &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --from=csv --toc --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: Pandoc (CSV) FAILED for &#39;$infile&#39;.&quot;
            ;;

        text/markdown)
            log_msg &quot;INFO: Markdown &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: Pandoc (Markdown) FAILED for &#39;$infile&#39;.&quot;
            ;;
        
        application/json)
            log_msg &quot;INFO: JSON &#39;$infile&#39;. Attempting pretty-print with jq then Pandoc.&quot;
            local tmp_json_pretty=$(mktemp &quot;$out_subdir/json_pretty_XXXXXX.json&quot;)
            if jq . &quot;$infile&quot; &gt; &quot;$tmp_json_pretty&quot; 2&gt;/dev/null; then
                pandoc &quot;$tmp_json_pretty&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (pretty JSON) converted via Pandoc.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (pretty JSON) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (JSON) converted via enscript fallback.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for JSON &#39;$infile&#39; FAILED.&quot;; }
            else
                log_msg &quot;WARN: jq failed for &#39;$infile&#39;. Trying Pandoc on raw, then enscript.&quot;
                pandoc &quot;$infile&quot; -o &quot;$outfile&quot; --standalone &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (raw JSON) converted via Pandoc.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (raw JSON) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (JSON) converted via enscript fallback.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for JSON &#39;$infile&#39; FAILED.&quot;; }
            fi
            rm -f &quot;$tmp_json_pretty&quot;
            ;;

        image/png|image/jpeg|image/gif|image/bmp|image/tiff|image/webp)
            log_msg &quot;INFO: Image &#39;$infile&#39;.&quot;
            if $OCR_IMAGES_TO_PDF &amp;&amp; command -v ocrmypdf &amp;&gt; /dev/null; then
                log_msg &quot;Attempting OCR with ocrmypdf for image &#39;$infile&#39;.&quot;
                ocrmypdf &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; OCR&#39;d via ocrmypdf to &#39;$outfile&#39;.&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: ocrmypdf FAILED for image &#39;$infile&#39;. Falling back to ImageMagick&#39;s convert.&quot;;
                         convert &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; converted via ImageMagick (no OCR).&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: ImageMagick&#39;s convert also FAILED for &#39;$infile&#39;.&quot;; }
            else
                log_msg &quot;Converting image &#39;$infile&#39; with ImageMagick&#39;s convert (no OCR).&quot;
                convert &quot;$infile&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: Image &#39;$infile&#39; converted via ImageMagick.&quot;; conversion_done=true; } \
                    || log_msg &quot;ERROR: ImageMagick&#39;s convert FAILED for &#39;$infile&#39;.&quot;
            fi
            ;;

        application/x-tex|text/x-tex|application/x-latex)
            if [[ &quot;$ext&quot; == &quot;cls&quot; || &quot;$ext&quot; == &quot;sty&quot; ]]; then # LaTeX class/style files
                log_msg &quot;INFO: LaTeX Class/Style file &#39;$infile&#39;. Converting as syntax-highlighted text.&quot;
                pandoc &quot;$infile&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc (as LaTeX source).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (LaTeX source) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 --highlight=latex -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (highlighted LaTeX).&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript (highlighted LaTeX) FAILED for &#39;$infile&#39;.&quot;; }
            else # Regular .tex files
                log_msg &quot;INFO: LaTeX document &#39;$infile&#39;. Compiling with pdflatex.&quot;
                local temp_tex_dir=$(mktemp -d &quot;$out_subdir/tex_compile_XXXXXX&quot;)
                cp &quot;$infile&quot; &quot;$temp_tex_dir/&quot; # Copy tex file to temp dir
                # If there are associated .bib files or images, they&#39;d need to be copied too or paths adjusted.
                # This simplified version assumes self-contained .tex or resolvable paths from temp_tex_dir.
                
                local tex_filename_only=$(basename &quot;$infile&quot;)
                (cd &quot;$temp_tex_dir&quot; &amp;&amp; \
                 pdflatex -interaction=nonstopmode &quot;$tex_filename_only&quot; &amp;&amp; \
                 pdflatex -interaction=nonstopmode &quot;$tex_filename_only&quot;) &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
                
                local compiled_pdf_base=&quot;${tex_filename_only%.*}&quot;
                local compiled_pdf_path=&quot;$temp_tex_dir/$compiled_pdf_base.pdf&quot;

                if [[ -f &quot;$compiled_pdf_path&quot; ]]; then
                    mv &quot;$compiled_pdf_path&quot; &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                        &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; compiled via pdflatex to &#39;$outfile&#39;.&quot;; conversion_done=true; } \
                        || log_msg &quot;ERROR: pdflatex compiled &#39;$infile&#39;, but FAILED to move to &#39;$outfile&#39;.&quot;
                else
                    log_msg &quot;ERROR: pdflatex compilation FAILED for &#39;$infile&#39;. Output PDF not found in &#39;$temp_tex_dir&#39;.&quot;
                fi
                rm -rf &quot;$temp_tex_dir&quot;
            fi
            ;;
        
        application/x-bibtex|text/x-bibtex)
            log_msg &quot;INFO: BibTeX file &#39;$infile&#39;. Converting with Pandoc.&quot;
            pandoc &quot;$infile&quot; --standalone -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc.&quot;; conversion_done=true; } \
                || { log_msg &quot;ERROR: Pandoc (BibTeX) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                     enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                        &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (BibTeX) converted as plain text via enscript.&quot;; conversion_done=true; } \
                        || log_msg &quot;ERROR: enscript fallback for BibTeX &#39;$infile&#39; FAILED.&quot;; }
            ;;

        application/x-troff-man|text/troff) # Man pages
            log_msg &quot;INFO: Man page &#39;$infile&#39;. Converting with &#39;man&#39;.&quot;
            man -Tpdf &quot;$infile&quot; &gt; &quot;$outfile&quot; 2&gt;&gt; &quot;$LOG_FILE&quot; # man outputs errors to stderr
            if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
                log_msg &quot;OK: &#39;$infile&#39; converted via &#39;man -Tpdf&#39;.&quot;
                conversion_done=true
            else
                log_msg &quot;WARN: &#39;man -Tpdf&#39; FAILED for &#39;$infile&#39;. Trying Pandoc.&quot;
                pandoc &quot;$infile&quot; --standalone -f man -t pdf -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc (man).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: Pandoc (man) FAILED for &#39;$infile&#39;. Trying enscript.&quot;;
                         enscript &quot;$infile&quot; --font=Courier10 -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                            &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; (man page) converted as text via enscript.&quot;; conversion_done=true; } \
                            || log_msg &quot;ERROR: enscript fallback for man page &#39;$infile&#39; FAILED.&quot;; }
            fi
            ;;

        text/x-python|text/x-shellscript|application/x-perl|application/x-ruby|\
        text/x-csrc|text/x-chdr|text/x-c++src|text/x-java|text/html|text/css|application/javascript|application/xml|text/xml) # Code, XML, HTML
            log_msg &quot;INFO: Code/Markup file &#39;$infile&#39; ($mimetype). Converting with Pandoc (syntax highlighting).&quot;
            # Determine Pandoc format based on extension if possible for better highlighting
            local pandoc_format_opt=&quot;&quot;
            case &quot;$ext&quot; in
                py) pandoc_format_opt=&quot;python&quot; ;;
                sh|bash) pandoc_format_opt=&quot;bash&quot; ;;
                pl) pandoc_format_opt=&quot;perl&quot; ;;
                rb) pandoc_format_opt=&quot;ruby&quot; ;;
                c|h) pandoc_format_opt=&quot;c&quot; ;;
                cpp|hpp|cxx) pandoc_format_opt=&quot;cpp&quot; ;;
                java) pandoc_format_opt=&quot;java&quot; ;;
                html|htm) pandoc_format_opt=&quot;html&quot; ;;
                css) pandoc_format_opt=&quot;css&quot; ;;
                js) pandoc_format_opt=&quot;javascript&quot; ;;
                xml|bcf|run.xml) pandoc_format_opt=&quot;xml&quot; ;; # .bcf (Biber control file), .run.xml
            esac
            
            if [[ -n &quot;$pandoc_format_opt&quot; ]]; then
                pandoc &quot;$infile&quot; --from=&quot;$pandoc_format_opt&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            else # Default to Pandoc auto-detection or plain text
                pandoc &quot;$infile&quot; --standalone --highlight-style=kate -o &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1
            fi

            if [[ $? -eq 0 &amp;&amp; -s &quot;$outfile&quot; ]]; then
                log_msg &quot;OK: &#39;$infile&#39; converted via Pandoc with highlighting.&quot;
                conversion_done=true
            else
                log_msg &quot;WARN: Pandoc with highlighting FAILED for &#39;$infile&#39;. Trying enscript.&quot;
                local enscript_hl_opt=&quot;&quot;
                [[ -n &quot;$ext&quot; ]] &amp;&amp; enscript_hl_opt=&quot;--highlight=$ext&quot;
                enscript &quot;$infile&quot; --font=Courier10 $enscript_hl_opt -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript.&quot;; conversion_done=true; } \
                    || log_msg &quot;ERROR: enscript fallback for &#39;$infile&#39; FAILED.&quot;
            fi
            ;;
        
        text/*) # Generic text files (.log, .txt, .bak, .aux, .synctex, .blg, .info, .lst, .conf etc.)
            log_msg &quot;INFO: Generic text file &#39;$infile&#39; ($mimetype, ext: .$ext). Converting with enscript.&quot;
            enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript.&quot;; conversion_done=true; } \
                || log_msg &quot;ERROR: enscript FAILED for &#39;$infile&#39;.&quot;
            ;;

        application/octet-stream|application/x-dosexec|application/x-sharedlib|\
        application/x-object|application/x-executable|application/x-sqlite3|inode/x-empty|\
        application/x-archive|application/zip|application/gzip|application/x-bzip2|application/x-xz)
            log_msg &quot;INFO: Binary/Archive/Empty/Unknown file &#39;$infile&#39; (MIME: $mimetype, Desc: $filedesc).&quot;
            if [[ &quot;$mimetype&quot; == &quot;inode/x-empty&quot; ]]; then
                create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;File is empty.&quot;
                conversion_done=true
            # Heuristic: if &#39;filedesc&#39; suggests text despite octet-stream, try enscript
            elif [[ &quot;$filedesc&quot; == *&quot;text&quot;* || &quot;$filedesc&quot; == *&quot;script&quot;* || &quot;$filedesc&quot; == *&quot;ASCII text&quot;* || &quot;$filedesc&quot; == *&quot;UTF-8 Unicode text&quot;* ]]; then
                log_msg &quot;INFO: MIME is &#39;$mimetype&#39;, but filedesc suggests text (&#39;$filedesc&#39;). Trying enscript.&quot;
                enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (heuristic).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: enscript (heuristic) FAILED for &#39;$infile&#39;. Using binary handling.&quot;;
                         if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Binary or undetermined content type ($mimetype).&quot;; fi
                         conversion_done=true; # Placeholder PDF is a form of &quot;done&quot;
                       }
            else # Standard binary handling
                if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Binary, archive, or undetermined content type ($mimetype).&quot;; fi
                conversion_done=true; # Placeholder PDF is a form of &quot;done&quot;
            fi
            ;;
        
        *) # Fallback for truly unrecognized/unhandled MIME types
            log_msg &quot;WARN: Unhandled MIME type &#39;$mimetype&#39; for &#39;$infile&#39;. File description: &#39;$filedesc&#39;.&quot;
            if [[ &quot;$filedesc&quot; == *&quot;text&quot;* || &quot;$filedesc&quot; == *&quot;script&quot;* || &quot;$filedesc&quot; == *&quot;ASCII text&quot;* || &quot;$filedesc&quot; == *&quot;UTF-8 Unicode text&quot;* ]]; then
                log_msg &quot;INFO: Unhandled MIME, but filedesc suggests text (&#39;$filedesc&#39;). Trying enscript.&quot;
                enscript &quot;$infile&quot; --font=Courier10 --word-wrap -p - -o - | ps2pdf - &quot;$outfile&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 \
                    &amp;&amp; { log_msg &quot;OK: &#39;$infile&#39; converted via enscript (heuristic for unhandled MIME).&quot;; conversion_done=true; } \
                    || { log_msg &quot;ERROR: enscript (heuristic for unhandled MIME) FAILED for &#39;$infile&#39;. Using binary handling.&quot;;
                         if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                         else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Unhandled MIME type ($mimetype) and not clearly text.&quot;; fi
                         conversion_done=true;
                       }
            else
                log_msg &quot;INFO: Unhandled MIME type &#39;$mimetype&#39; for &#39;$infile&#39;. Using configured binary handling.&quot;
                if [[ &quot;$binary_handling_method&quot; == &quot;hex&quot; ]]; then create_hexdump_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                elif [[ &quot;$binary_handling_method&quot; == &quot;strings&quot; ]]; then create_strings_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot;;
                else create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;Unhandled MIME type ($mimetype).&quot;; fi
                conversion_done=true;
            fi
            ;;
    esac

    if ! $conversion_done &amp;&amp; [[ ! -f &quot;$outfile&quot; ]]; then
        log_msg &quot;FALLBACK: No conversion method succeeded and no output file created for &#39;$infile&#39;. Creating placeholder.&quot;
        create_metadata_pdf &quot;$infile&quot; &quot;$outfile&quot; &quot;$mimetype&quot; &quot;$filedesc&quot; &quot;No applicable conversion rule or all attempts failed.&quot;
    elif ! $conversion_done &amp;&amp; [[ -f &quot;$outfile&quot; ]]; then
        log_msg &quot;WARN: Conversion logic did not explicitly set &#39;done&#39; flag, but output file &#39;$outfile&#39; exists. Assuming prior step handled it.&quot;
    fi
    log_msg &quot;END Processing: &#39;$infile&#39;&quot;
    [[ -f &quot;$outfile&quot; ]] &amp;&amp; return 0 || return 1 # Return 0 if output exists, 1 otherwise
}

# --- Script Main Logic ---

# Argument Parsing
if [[ &quot;$#&quot; -lt 1 || &quot;$#&quot; -gt 4 ]]; then
    echo &quot;Usage: $0 &lt;listfile.txt&gt; [common_prefix_to_strip] [binary_handling: metadata|hex|strings] [force_ocr_all_pdfs: true|false]&quot;
    echo &quot;Example: $0 myfiles.txt \&quot;/mnt/mydata\&quot; hex true&quot;
    exit 1
fi

INPUT_LIST_FILE=&quot;$1&quot;
[[ -n &quot;$2&quot; ]] &amp;&amp; COMMON_PREFIX_TO_STRIP=&quot;$2&quot;
[[ -n &quot;$3&quot; ]] &amp;&amp; BINARY_HANDLING_USER_CHOICE=&quot;$3&quot; || BINARY_HANDLING_USER_CHOICE=&quot;$DEFAULT_BINARY_HANDLING&quot;
[[ -n &quot;$4&quot; ]] &amp;&amp; FORCE_OCR_ALL_PDFS_USER_CHOICE=&quot;$4&quot;

# Validate binary handling choice
case &quot;$BINARY_HANDLING_USER_CHOICE&quot; in
    metadata|hex|strings) BINARY_HANDLING=&quot;$BINARY_HANDLING_USER_CHOICE&quot; ;;
    *) log_msg &quot;WARN: Invalid binary_handling option &#39;$BINARY_HANDLING_USER_CHOICE&#39;. Defaulting to &#39;$DEFAULT_BINARY_HANDLING&#39;.&quot;; BINARY_HANDLING=&quot;$DEFAULT_BINARY_HANDLING&quot; ;;
esac

# Validate force OCR choice
if [[ -n &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; ]]; then
    if [[ &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; == &quot;true&quot; ]]; then
        FORCE_OCR_ALL_EXISTING_PDFS=true
    elif [[ &quot;$FORCE_OCR_ALL_PDFS_USER_CHOICE&quot; == &quot;false&quot; ]]; then
        FORCE_OCR_ALL_EXISTING_PDFS=false
    else
        log_msg &quot;WARN: Invalid force_ocr_all_pdfs option &#39;$FORCE_OCR_ALL_PDFS_USER_CHOICE&#39;. Using default ($FORCE_OCR_ALL_EXISTING_PDFS).&quot;
    fi
fi

# Initialize Log File
echo &quot;Conversion process started at $(date)&quot; &gt; &quot;$LOG_FILE&quot;
log_msg &quot;INFO: Input List File: &#39;$INPUT_LIST_FILE&#39;&quot;
log_msg &quot;INFO: Common Prefix to Strip: &#39;$COMMON_PREFIX_TO_STRIP&#39;&quot;
log_msg &quot;INFO: Binary File Handling: &#39;$BINARY_HANDLING&#39;&quot;
log_msg &quot;INFO: Force OCR All Existing PDFs: $FORCE_OCR_ALL_EXISTING_PDFS&quot;
log_msg &quot;INFO: OCR Images to PDF: $OCR_IMAGES_TO_PDF&quot;
log_msg &quot;INFO: Output Base Directory: &#39;$OUTPUT_DIR_BASE&#39;&quot;

check_commands # Check for essential tools

# Prepare clean file list (robust URL decoding)
CLEANED_LIST_FOR_PROCESSING_INTERNAL=&quot;cleaned_input_list_internal.tmp&quot;
log_msg &quot;INFO: Preparing clean file list from &#39;$INPUT_LIST_FILE&#39;...&quot;
if python3 -c &#39;import sys, urllib.parse; [print(urllib.parse.unquote(line.strip())) for line in sys.stdin if line.strip()]&#39; &lt; &quot;$INPUT_LIST_FILE&quot; &gt; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot;; then
    log_msg &quot;INFO: Clean file list created successfully using Python.&quot;
else
    log_msg &quot;WARN: Python URL decoding failed (Python 3 not found or error). Using original list (may have issues with URL-encoded names).&quot;
    cp &quot;$INPUT_LIST_FILE&quot; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot; # Fallback
fi

# Create output base directory
mkdir -p &quot;$OUTPUT_DIR_BASE&quot;
log_msg &quot;INFO: Ensured output base directory &#39;$OUTPUT_DIR_BASE&#39; exists.&quot;

# Process the list
total_files=0
successful_conversions=0
failed_conversions=0
skipped_up_to_date=0

while IFS= read -r file_to_process || [[ -n &quot;$file_to_process&quot; ]]; do
    # Skip empty or comment lines from the (cleaned) list
    [[ -z &quot;$file_to_process&quot; || &quot;$file_to_process&quot; =~ ^# ]] &amp;&amp; continue

    total_files=$((total_files + 1))
    if [[ ! -e &quot;$file_to_process&quot; ]]; then # Use -e to check if path exists (file or dir)
        log_msg &quot;ERROR: File or directory &#39;$file_to_process&#39; from list NOT FOUND. Skipping.&quot;
        failed_conversions=$((failed_conversions + 1))
        continue
    fi
    if [[ -d &quot;$file_to_process&quot; ]]; then
        log_msg &quot;SKIP: Path &#39;$file_to_process&#39; is a DIRECTORY. Skipping.&quot;
        # Consider if directories should be counted as skipped or failed. For now, just log.
        continue
    fi
     if [[ ! -f &quot;$file_to_process&quot; ]]; then
        log_msg &quot;SKIP: Path &#39;$file_to_process&#39; is NOT A REGULAR FILE. Skipping.&quot;
        continue
    fi
    if [[ ! -r &quot;$file_to_process&quot; ]]; then
        log_msg &quot;ERROR: File &#39;$file_to_process&#39; is NOT READABLE. Skipping.&quot;
        failed_conversions=$((failed_conversions + 1))
        continue
    fi

    # The up-to-date check is now inside convert_file, which returns 0 for success/skipped-up-to-date
    convert_file &quot;$file_to_process&quot; &quot;$BINARY_HANDLING&quot;
    status=$?
    
    # Crude status check based on return value (0 for success/skipped, 1 for failure)
    # A more refined check would involve parsing the log for &quot;SKIP&quot; vs &quot;OK&quot;
    if [[ $status -eq 0 ]]; then
        # This counts files where an output PDF was created OR skipped because it was up-to-date.
        # To differentiate, we&#39;d need more complex return codes or log parsing.
        # For now, if convert_file returns 0, it means no critical error in its own execution.
        # The actual &quot;success&quot; of conversion is in the log.
        : # Not incrementing success here, summary is tricky.
    else
        failed_conversions=$((failed_conversions + 1))
    fi
done &lt; &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot;

rm -f &quot;$CLEANED_LIST_FOR_PROCESSING_INTERNAL&quot; # Clean up temp list

# Final Summary (approximated from log counts for more detail)
successful_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - OK:&quot; &quot;$LOG_FILE&quot;)
error_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - ERROR:&quot; &quot;$LOG_FILE&quot;)
skipped_ops=$(grep -cE &quot;^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - SKIP:&quot; &quot;$LOG_FILE&quot;) # Includes up-to-date and non-file skips

log_msg &quot;-----------------------------------------------------&quot;
log_msg &quot;Conversion process completed at $(date)&quot;
log_msg &quot;SUMMARY: Total items from list processed: $total_files&quot;
log_msg &quot;SUMMARY: Successful operations (OK): $successful_ops&quot;
log_msg &quot;SUMMARY: Errored operations (ERROR): $error_ops&quot;
log_msg &quot;SUMMARY: Skipped operations (SKIP/NOT FOUND/DIR): $skipped_ops (includes up-to-date, not found, directories)&quot;
log_msg &quot;INFO: Detailed log written to &#39;$LOG_FILE&#39;&quot;
log_msg &quot;INFO: Output PDFs are in subdirectories under &#39;$OUTPUT_DIR_BASE&#39;&quot;

echo &quot;Conversion complete. Log: $LOG_FILE. Output in $OUTPUT_DIR_BASE.&quot;</code>
</section>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Disable Tracker processes on linux</title><link href="https://ib.bsb.br/disable-tracker-processes-on-linux/" rel="alternate" type="text/html" title="Disable Tracker processes on linux" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T14:57:03+00:00</updated><id>https://ib.bsb.br/disable-tracker-processes-on-linux</id><content type="html" xml:base="https://ib.bsb.br/disable-tracker-processes-on-linux/"><![CDATA[<section class="code-block-container" role="group" aria-label="Bash Code Block" data-filename="bash_code_block.sh" data-code="#!/bin/bash
set -euo pipefail
# -----------------------------------------------------------------------------
# Script Name: disable_tracker.sh
# Purpose   : Disable Tracker processes on Debian 11 (Bullseye) for ARM64 RK3588
#	      This script appends &quot;Hidden=true&quot; to tracker-related autostart files,
#	      updates Tracker settings via gsettings to disable file crawling and
#	      monitoring, and resets the Tracker database.
#
# WARNING   : This operation modifies system autostart files and resets the Tracker
#	      database. If you rely on Tracker for desktop search or metadata indexing,
#	      this action will disable those functions. It is recommended you backup any
#	      critical data/configuration before proceeding.
#
# Usage	    : Run this script from your home directory. You must have sudo privileges.
# -----------------------------------------------------------------------------

# Prompt for explicit user confirmation before proceeding.
read -r -p &quot;WARNING: This will disable Tracker processes by modifying system autostart files and resetting the Tracker database. This may affect desktop search functionality. Do you want to continue? (yes/NO): &quot; confirmation
if [[ &quot;$confirmation&quot; != &quot;yes&quot; ]]; then
    echo &quot;Operation cancelled by user.&quot; &gt;&amp;2
    exit 1
fi

# Define an array of Tracker autostart file paths.
autostart_files=(
    &quot;/etc/xdg/autostart/tracker-extract.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-apps.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-fs.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-user-guides.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-store.desktop&quot;
)

echo &quot;Starting Tracker disabling procedure...&quot;

# Iterate over each autostart file and append &quot;Hidden=true&quot; if not already set.
for file in &quot;${autostart_files[@]}&quot;; do
    echo &quot;Processing file: ${file}&quot;
    if [[ -f &quot;$file&quot; ]]; then
	if grep -q -E &#39;^[[:space:]]*Hidden=true&#39; &quot;$file&quot;; then
	    echo &quot;-&gt; &#39;Hidden=true&#39; already present in ${file}. Skipping.&quot;
	else
	    echo -e &quot;\nHidden=true\n&quot; | sudo tee --append &quot;$file&quot; &gt; /dev/null || {
		echo &quot;Error: Failed to modify ${file}.&quot; &gt;&amp;2
		exit 1
	    }
	    echo &quot;-&gt; Appended &#39;Hidden=true&#39; to ${file}.&quot;
	fi
    else
	echo &quot;-&gt; Warning: File ${file} does not exist. Skipping.&quot;
    fi
done

# Update Tracker settings using gsettings.
echo &quot;Disabling Tracker file crawling...&quot;
if ! gsettings set org.freedesktop.Tracker.Miner.Files crawling-interval -2; then
    echo &quot;Error: Failed to set crawling-interval to -2 via gsettings.&quot; &gt;&amp;2
    exit 1
fi
echo &quot;-&gt; Set crawling-interval to -2.&quot;

echo &quot;Disabling Tracker file monitors...&quot;
if ! gsettings set org.freedesktop.Tracker.Miner.Files enable-monitors false; then
    echo &quot;Error: Failed to disable file monitors via gsettings.&quot; &gt;&amp;2
    exit 1
fi
echo &quot;-&gt; File monitors disabled.&quot;

# Reset the Tracker database.
reset_cmd=&quot;&quot;
if command -v tracker3 &gt;/dev/null 2&gt;&amp;1; then
    reset_cmd=&quot;tracker3 reset --filesystem --rss&quot;
elif command -v tracker &gt;/dev/null 2&gt;&amp;1; then
    reset_cmd=&quot;tracker reset --hard&quot;
else
    echo &quot;Warning: Neither &#39;tracker3&#39; nor &#39;tracker&#39; is available. Skipping Tracker database reset.&quot; &gt;&amp;2
fi

if [[ -n &quot;${reset_cmd}&quot; ]]; then
    echo &quot;Resetting Tracker database with: ${reset_cmd}&quot;
    if ! ${reset_cmd}; then
	echo &quot;Error: Failed to reset Tracker database.&quot; &gt;&amp;2
	exit 1
    fi
    echo &quot;-&gt; Tracker database has been reset.&quot;
fi

echo &quot;Tracker disabling procedure completed successfully.&quot;
exit 0" data-download-link="" data-download-label="Download Bash">
  <code class="language-bash">#!/bin/bash
set -euo pipefail
# -----------------------------------------------------------------------------
# Script Name: disable_tracker.sh
# Purpose   : Disable Tracker processes on Debian 11 (Bullseye) for ARM64 RK3588
#	      This script appends &quot;Hidden=true&quot; to tracker-related autostart files,
#	      updates Tracker settings via gsettings to disable file crawling and
#	      monitoring, and resets the Tracker database.
#
# WARNING   : This operation modifies system autostart files and resets the Tracker
#	      database. If you rely on Tracker for desktop search or metadata indexing,
#	      this action will disable those functions. It is recommended you backup any
#	      critical data/configuration before proceeding.
#
# Usage	    : Run this script from your home directory. You must have sudo privileges.
# -----------------------------------------------------------------------------

# Prompt for explicit user confirmation before proceeding.
read -r -p &quot;WARNING: This will disable Tracker processes by modifying system autostart files and resetting the Tracker database. This may affect desktop search functionality. Do you want to continue? (yes/NO): &quot; confirmation
if [[ &quot;$confirmation&quot; != &quot;yes&quot; ]]; then
    echo &quot;Operation cancelled by user.&quot; &gt;&amp;2
    exit 1
fi

# Define an array of Tracker autostart file paths.
autostart_files=(
    &quot;/etc/xdg/autostart/tracker-extract.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-apps.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-fs.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-miner-user-guides.desktop&quot;
    &quot;/etc/xdg/autostart/tracker-store.desktop&quot;
)

echo &quot;Starting Tracker disabling procedure...&quot;

# Iterate over each autostart file and append &quot;Hidden=true&quot; if not already set.
for file in &quot;${autostart_files[@]}&quot;; do
    echo &quot;Processing file: ${file}&quot;
    if [[ -f &quot;$file&quot; ]]; then
	if grep -q -E &#39;^[[:space:]]*Hidden=true&#39; &quot;$file&quot;; then
	    echo &quot;-&gt; &#39;Hidden=true&#39; already present in ${file}. Skipping.&quot;
	else
	    echo -e &quot;\nHidden=true\n&quot; | sudo tee --append &quot;$file&quot; &gt; /dev/null || {
		echo &quot;Error: Failed to modify ${file}.&quot; &gt;&amp;2
		exit 1
	    }
	    echo &quot;-&gt; Appended &#39;Hidden=true&#39; to ${file}.&quot;
	fi
    else
	echo &quot;-&gt; Warning: File ${file} does not exist. Skipping.&quot;
    fi
done

# Update Tracker settings using gsettings.
echo &quot;Disabling Tracker file crawling...&quot;
if ! gsettings set org.freedesktop.Tracker.Miner.Files crawling-interval -2; then
    echo &quot;Error: Failed to set crawling-interval to -2 via gsettings.&quot; &gt;&amp;2
    exit 1
fi
echo &quot;-&gt; Set crawling-interval to -2.&quot;

echo &quot;Disabling Tracker file monitors...&quot;
if ! gsettings set org.freedesktop.Tracker.Miner.Files enable-monitors false; then
    echo &quot;Error: Failed to disable file monitors via gsettings.&quot; &gt;&amp;2
    exit 1
fi
echo &quot;-&gt; File monitors disabled.&quot;

# Reset the Tracker database.
reset_cmd=&quot;&quot;
if command -v tracker3 &gt;/dev/null 2&gt;&amp;1; then
    reset_cmd=&quot;tracker3 reset --filesystem --rss&quot;
elif command -v tracker &gt;/dev/null 2&gt;&amp;1; then
    reset_cmd=&quot;tracker reset --hard&quot;
else
    echo &quot;Warning: Neither &#39;tracker3&#39; nor &#39;tracker&#39; is available. Skipping Tracker database reset.&quot; &gt;&amp;2
fi

if [[ -n &quot;${reset_cmd}&quot; ]]; then
    echo &quot;Resetting Tracker database with: ${reset_cmd}&quot;
    if ! ${reset_cmd}; then
	echo &quot;Error: Failed to reset Tracker database.&quot; &gt;&amp;2
	exit 1
    fi
    echo &quot;-&gt; Tracker database has been reset.&quot;
fi

echo &quot;Tracker disabling procedure completed successfully.&quot;
exit 0</code>
</section>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>