<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-04-01T17:46:42+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Matthias Steiner lift</title><link href="https://ib.bsb.br/steiner-lift/" rel="alternate" type="text/html" title="Matthias Steiner lift" /><published>2025-04-01T00:00:00+00:00</published><updated>2025-04-01T08:36:45+00:00</updated><id>https://ib.bsb.br/steiner-lift</id><content type="html" xml:base="https://ib.bsb.br/steiner-lift/"><![CDATA[<video controls="">
  <source src="https://cdn.jsdelivr.net/gh/ib-bsb-br/ib-bsb-br.github.io@main/assets/steiner's-lift.mp4" type="video/mp4" />
  Seu navegador não suporta a reprodução de vídeos.
</video>]]></content><author><name></name></author><category term="assistir" /></entry><entry><title type="html">to boot multiple operating systems portably using ventoy</title><link href="https://ib.bsb.br/to-boot-multiple-operating-systems-portably-using-ventoy/" rel="alternate" type="text/html" title="to boot multiple operating systems portably using ventoy" /><published>2025-04-01T00:00:00+00:00</published><updated>2025-04-01T17:44:08+00:00</updated><id>https://ib.bsb.br/to-boot-multiple-operating-systems-portably-using-ventoy</id><content type="html" xml:base="https://ib.bsb.br/to-boot-multiple-operating-systems-portably-using-ventoy/"><![CDATA[<ul>
  <li><strong>How it Works:</strong> You install Ventoy onto the external drive once. It creates boot partitions and leaves the remaining space as a large data partition (usually exFAT or NTFS). You then simply copy your OS installer <code class="language-plaintext highlighter-rouge">*.iso</code> files, WinPE images (<code class="language-plaintext highlighter-rouge">*.iso</code> or <code class="language-plaintext highlighter-rouge">*.wim</code>), and even full Windows installations packaged in virtual hard disk files (<code class="language-plaintext highlighter-rouge">*.vhd</code> or <code class="language-plaintext highlighter-rouge">*.vhdx</code>) onto this data partition. When you boot from the Ventoy drive, it scans the data partition and presents a menu listing all compatible files, allowing you to boot directly from them.</li>
  <li><strong>Pros:</strong>
    <ul>
      <li>Extremely easy to set up and manage – just copy/delete files to add/remove OS options.</li>
      <li>No complex manual partitioning required for each OS.</li>
      <li>Excellent compatibility with UEFI (including Secure Boot) and Legacy BIOS modes.</li>
      <li>Supports a wide variety of image types (<code class="language-plaintext highlighter-rouge">.iso</code>, <code class="language-plaintext highlighter-rouge">.wim</code>, <code class="language-plaintext highlighter-rouge">.img</code>, <code class="language-plaintext highlighter-rouge">.vhd</code>, <code class="language-plaintext highlighter-rouge">.vhdx</code>).</li>
      <li>Supports persistence for many Linux live ISOs (saving changes across boots, requires creating a persistence file).</li>
      <li>Can directly boot full Windows installations from VHD(x) files.</li>
    </ul>
  </li>
  <li><strong>Cons:</strong>
    <ul>
      <li>Slight boot overhead compared to a direct installation (usually negligible).</li>
      <li>Performance of OSs running from VHD(x) depends on the VHD type (fixed vs. dynamic), the underlying drive speed, and the USB connection.</li>
      <li>While compatibility is high, rare niche ISOs might have issues.</li>
    </ul>
  </li>
  <li><strong>Setup Steps:</strong>
    <ol>
      <li>Download the Ventoy tool from the official website.</li>
      <li>Run the tool and install Ventoy onto your 1TB external HDD (this will erase the drive initially!). Choose the desired partition scheme (MBR for legacy, GPT for UEFI recommended).</li>
      <li>Once Ventoy is installed, the drive will appear with a large partition. Copy your desired files onto this partition:
        <ul>
          <li>Linux ISOs (e.g., <code class="language-plaintext highlighter-rouge">ubuntu-lts.iso</code>)</li>
          <li>Windows Installer ISOs (e.g., <code class="language-plaintext highlighter-rouge">windows11.iso</code>, <code class="language-plaintext highlighter-rouge">windows81.iso</code>)</li>
          <li>WinPE ISOs or WIMs.</li>
          <li><strong>For full Windows installs (Win 11/8.1 To Go style):</strong> Create a VHD(x) file first:
            <ul>
              <li><strong>Method A (Recommended): Install directly to VHD:</strong>
                <ul>
                  <li>Use <code class="language-plaintext highlighter-rouge">Disk Management</code> (diskmgmt.msc) in Windows to create a new VHD(x) file (choose VHDX, Fixed size for better performance, allocate sufficient space like 64GB+).</li>
                  <li>Attach the created VHD(x) file in Disk Management (it will appear as a new uninitialized disk). Initialize it (GPT recommended) and create a simple volume (format NTFS).</li>
                  <li>Boot your computer using a standard Windows Installer USB/ISO (you can even boot the Windows ISO via Ventoy itself).</li>
                  <li>At the “Where do you want to install Windows?” screen, press <code class="language-plaintext highlighter-rouge">Shift+F10</code> to open Command Prompt. Use <code class="language-plaintext highlighter-rouge">diskpart</code> commands to list volumes (<code class="language-plaintext highlighter-rouge">list volume</code>) identify the drive letter of your attached VHD, and select the correct partition.</li>
                  <li>Proceed with the installation, selecting the partition on the attached VHD as the target.</li>
                  <li>After installation completes <em>inside the VHD</em>, detach the VHD in Disk Management.</li>
                </ul>
              </li>
              <li><strong>Method B (Capture Existing):</strong> Use a tool like <code class="language-plaintext highlighter-rouge">disk2vhd</code> (from Microsoft Sysinternals) to capture an existing Windows installation into a VHD(x) file.</li>
              <li>Copy the final <code class="language-plaintext highlighter-rouge">*.vhdx</code> file onto the Ventoy data partition.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Safely eject the drive. Boot your target computer from the USB drive. Ventoy’s menu should appear, allowing you to select and boot your desired OS image or VHD.</li>
    </ol>
  </li>
</ul>]]></content><author><name></name></author><category term="maybe" /></entry><entry><title type="html">ext4 filesystem backup script</title><link href="https://ib.bsb.br/ext4-filesystem-backup-script/" rel="alternate" type="text/html" title="ext4 filesystem backup script" /><published>2025-03-27T00:00:00+00:00</published><updated>2025-03-27T13:25:04+00:00</updated><id>https://ib.bsb.br/ext4-filesystem-backup-script</id><content type="html" xml:base="https://ib.bsb.br/ext4-filesystem-backup-script/"><![CDATA[<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>  <span class="c"># Exit on any error</span>

<span class="c"># Configuration</span>
<span class="nv">DATE</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y-%m-%d<span class="si">)</span>
<span class="nv">BACKUP_DEVICE</span><span class="o">=</span><span class="s2">"/dev/sda1"</span>  <span class="c"># Change to your external drive</span>
<span class="nv">MOUNT_POINT</span><span class="o">=</span><span class="s2">"/mnt/backup"</span>
<span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">/opensuse_backups/</span><span class="nv">$DATE</span><span class="s2">"</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">"/var/log/opensuse-backup.log"</span>
<span class="nv">RETENTION_COUNT</span><span class="o">=</span>4  <span class="c"># Number of backups to keep</span>

<span class="c"># Ensure log directory exists</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>

<span class="c"># Redirect all output to log and console</span>
<span class="nb">exec</span> <span class="o">&gt;</span> <span class="o">&gt;(</span><span class="nb">tee</span> <span class="nt">-a</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span><span class="o">)</span> 2&gt;&amp;1
<span class="nb">echo</span> <span class="s2">"===== Backup started at </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2"> ====="</span>

<span class="c"># Check if backup device exists</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-b</span> <span class="s2">"</span><span class="nv">$BACKUP_DEVICE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"ERROR: Backup device </span><span class="nv">$BACKUP_DEVICE</span><span class="s2"> not found"</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Create mount point if needed</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span>

<span class="c"># Check if already mounted</span>
<span class="k">if</span> <span class="o">!</span> mountpoint <span class="nt">-q</span> <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Mounting backup device..."</span>
    mount <span class="s2">"</span><span class="nv">$BACKUP_DEVICE</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span> <span class="o">||</span> <span class="o">{</span>
        <span class="nb">echo</span> <span class="s2">"ERROR: Failed to mount backup device"</span>
        <span class="nb">exit </span>1
    <span class="o">}</span>
    <span class="nv">MOUNTED</span><span class="o">=</span><span class="nb">true
</span><span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Backup device already mounted"</span>
    <span class="nv">MOUNTED</span><span class="o">=</span><span class="nb">false
</span><span class="k">fi</span>

<span class="c"># Create backup directory</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>

<span class="c"># Check available space (need at least 10GB free)</span>
<span class="nv">AVAILABLE_SPACE</span><span class="o">=</span><span class="si">$(</span><span class="nb">df</span> <span class="nt">-BG</span> <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'NR==2 {print $4}'</span> | <span class="nb">sed</span> <span class="s1">'s/G//'</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$AVAILABLE_SPACE</span><span class="s2">"</span> <span class="nt">-lt</span> 10 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"ERROR: Not enough space on backup device (</span><span class="k">${</span><span class="nv">AVAILABLE_SPACE</span><span class="k">}</span><span class="s2">GB available, need at least 10GB)"</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Perform backup with resource constraints</span>
<span class="nb">echo</span> <span class="s2">"Starting backup to </span><span class="nv">$BACKUP_DIR</span><span class="s2">..."</span>
ionice <span class="nt">-c</span> 3 <span class="nb">nice</span> <span class="nt">-n</span> 19 rsync <span class="nt">-aAXHSv</span> <span class="nt">--numeric-ids</span> <span class="nt">--delete</span> <span class="nt">--delete-excluded</span> <span class="se">\</span>
  <span class="nt">--bwlimit</span><span class="o">=</span>10000 <span class="nt">--info</span><span class="o">=</span>progress2 <span class="se">\</span>
  <span class="nt">--exclude</span><span class="o">={</span><span class="s2">"/dev/*"</span>,<span class="s2">"/proc/*"</span>,<span class="s2">"/sys/*"</span>,<span class="s2">"/tmp/*"</span>,<span class="s2">"/run/*"</span>,<span class="s2">"/mnt/*"</span>,<span class="s2">"/media/*"</span>,<span class="s2">"/lost+found"</span>,<span class="s2">"/var/cache/*"</span>,<span class="s2">"/var/tmp/*"</span>,<span class="s2">"*.iso"</span>,<span class="s2">"*.tmp"</span><span class="o">}</span> <span class="se">\</span>
  / <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/"</span> 2&gt;&amp;1

<span class="c"># Capture rsync exit code</span>
<span class="nv">RSYNC_EXIT_CODE</span><span class="o">=</span><span class="k">${</span><span class="nv">PIPESTATUS</span><span class="p">[0]</span><span class="k">}</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$RSYNC_EXIT_CODE</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"ERROR: Backup failed with exit code </span><span class="nv">$RSYNC_EXIT_CODE</span><span class="s2">"</span>
    
    <span class="c"># Cleanup if we mounted the device</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$MOUNTED</span><span class="s2">"</span> <span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Unmounting backup device..."</span>
        umount <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span>
    <span class="k">fi
    
    </span><span class="nb">exit</span> <span class="nv">$RSYNC_EXIT_CODE</span>
<span class="k">fi</span>

<span class="c"># Verify backup integrity</span>
<span class="nb">echo</span> <span class="s2">"Verifying backup integrity..."</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/etc/fstab"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/etc/passwd"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"ERROR: Critical system files missing from backup"</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Rotate backups - keep only the last N</span>
<span class="nb">echo</span> <span class="s2">"Rotating backups..."</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">/opensuse_backups"</span>
<span class="nv">BACKUPS</span><span class="o">=</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">-1tr</span> | <span class="nb">head</span> <span class="nt">-n</span> -<span class="nv">$RETENTION_COUNT</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$BACKUPS</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$BACKUPS</span><span class="s2">"</span> | xargs <span class="nb">rm</span> <span class="nt">-rf</span>
    <span class="nb">echo</span> <span class="s2">"Removed old backups: </span><span class="nv">$BACKUPS</span><span class="s2">"</span>
<span class="k">fi</span>

<span class="c"># Cleanup</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$MOUNTED</span><span class="s2">"</span> <span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Unmounting backup device..."</span>
    umount <span class="s2">"</span><span class="nv">$MOUNT_POINT</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"===== Backup completed successfully at </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2"> ====="</span>
</code></pre></div></div>

<p>And here are the systemd service and timer files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># /etc/systemd/system/backup-opensuse.service
[Unit]
Description=Backup OpenSUSE to external drive
After=network-online.target local-fs.target
Wants=network-online.target
RequiresMountsFor=/mnt

[Service]
Type=oneshot
ExecStart=/usr/local/bin/backup-opensuse.sh
# Resource constraints - removed problematic CPU scheduling
IOSchedulingClass=idle
IOSchedulingPriority=7
Nice=19
# Timeout after 12 hours
TimeoutStartSec=12h
# Restart on failure, but not too aggressively
RestartSec=30min
Restart=on-failure
# Security hardening
ProtectSystem=strict
ReadWritePaths=/mnt /var/log
PrivateTmp=true
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># /etc/systemd/system/backup-opensuse.timer
[Unit]
Description=Weekly backup of OpenSUSE

[Timer]
# Run at 2:00 AM on Sundays
OnCalendar=Sun *-*-* 02:00:00
# If system was off when timer should have triggered, run it when system starts
Persistent=true
# Add randomized delay to avoid resource contention
RandomizedDelaySec=30min
# Don't run immediately after boot
AccuracySec=1min

[Install]
WantedBy=timers.target
</code></pre></div></div>

<p>To implement this solution:</p>

<ol>
  <li>Save the backup script as <code class="language-plaintext highlighter-rouge">/usr/local/bin/backup-opensuse.sh</code></li>
  <li>Make it executable: <code class="language-plaintext highlighter-rouge">sudo chmod +x /usr/local/bin/backup-opensuse.sh</code></li>
  <li>Save the service file as <code class="language-plaintext highlighter-rouge">/etc/systemd/system/backup-opensuse.service</code></li>
  <li>Save the timer file as <code class="language-plaintext highlighter-rouge">/etc/systemd/system/backup-opensuse.timer</code></li>
  <li>Enable and start the timer:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl daemon-reload
sudo systemctl enable backup-opensuse.timer
sudo systemctl start backup-opensuse.timer
</code></pre></div>    </div>
  </li>
  <li>Verify the timer is active:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl list-timers backup-opensuse.timer
</code></pre></div>    </div>
  </li>
  <li>Test the backup manually:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl start backup-opensuse.service
</code></pre></div>    </div>
  </li>
  <li>Monitor the backup progress:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo journalctl -fu backup-opensuse.service
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">raspberry pi 3B /boot/firmware/config.txt</title><link href="https://ib.bsb.br/raspberry-pi-3b-bootfirmwareconfigtxt/" rel="alternate" type="text/html" title="raspberry pi 3B /boot/firmware/config.txt" /><published>2025-03-27T00:00:00+00:00</published><updated>2025-03-27T10:15:56+00:00</updated><id>https://ib.bsb.br/raspberry-pi-3b-bootfirmwareconfigtxt</id><content type="html" xml:base="https://ib.bsb.br/raspberry-pi-3b-bootfirmwareconfigtxt/"><![CDATA[<section data-filename="_code-block.txt" data-code="[all]
# Basic System Settings
disable_overscan=1
disable_splash=1
auto_initramfs=1
# Display Settings
dtoverlay=vc4-kms-v3d
max_framebuffers=2
disable_fw_kms_setup=1
# Balanced Overclock Settings
arm_freq=1350       # More conservative but still +12.5% performance
core_freq=500       # Reasonable GPU/core boost
sdram_freq=500      # Safer memory frequency
over_voltage=4      # Moderate voltage increase
# force_turbo=0     # Remove line or set to 0 to allow dynamic scaling
# arm_boost removed as it's non-essential
# Safety Parameters
temp_limit=80       # Lower throttling temperature for better protection
# Camera Settings (choose one approach)
camera_auto_detect=0
# start_x=0         # Use only if you need legacy camera support
# GPU Memory
gpu_mem=64         # Good baseline for general use" data-download-link="" data-download-link-label="Download "><code class="language-">[all]
# Basic System Settings
disable_overscan=1
disable_splash=1
auto_initramfs=1
# Display Settings
dtoverlay=vc4-kms-v3d
max_framebuffers=2
disable_fw_kms_setup=1
# Balanced Overclock Settings
arm_freq=1350       # More conservative but still +12.5% performance
core_freq=500       # Reasonable GPU/core boost
sdram_freq=500      # Safer memory frequency
over_voltage=4      # Moderate voltage increase
# force_turbo=0     # Remove line or set to 0 to allow dynamic scaling
# arm_boost removed as it's non-essential
# Safety Parameters
temp_limit=80       # Lower throttling temperature for better protection
# Camera Settings (choose one approach)
camera_auto_detect=0
# start_x=0         # Use only if you need legacy camera support
# GPU Memory
gpu_mem=64         # Good baseline for general use
</code></section>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">deploying Flask applications on DirectAdmin</title><link href="https://ib.bsb.br/deploying-flask-applications-on-directadmin/" rel="alternate" type="text/html" title="deploying Flask applications on DirectAdmin" /><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T10:16:30+00:00</updated><id>https://ib.bsb.br/deploying-flask-applications-on-directadmin</id><content type="html" xml:base="https://ib.bsb.br/deploying-flask-applications-on-directadmin/"><![CDATA[<p>This guide provides a comprehensive workflow for deploying a Flask application on DirectAdmin using Nginx Unit, with an emphasis on security and production best practices.</p>

<h2 id="1-understanding-nginx-unit-in-directadmin">1. Understanding Nginx Unit in DirectAdmin</h2>

<p>DirectAdmin integrates Nginx Unit as a polyglot application server that supports multiple languages and their versions. According to the <a href="https://docs.directadmin.com/webservices/nginx_unit/">DirectAdmin documentation</a>, you can access Nginx Unit functionality through:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User level → Advanced Features → Nginx unit
</code></pre></div></div>

<h2 id="2-creating-a-flask-application-structure">2. Creating a Flask Application Structure</h2>

<p>Let’s create a production-ready Flask application structure:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/app
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/app/static
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/app/templates
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/app/models
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/app/views
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/logs
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/username/domains/example.com/public_html/flask_app/instance
</code></pre></div></div>

<p>This structure follows Flask best practices with separation of concerns and a dedicated instance folder for configuration files that shouldn’t be in version control.</p>

<h2 id="3-flask-application-files">3. Flask Application Files</h2>

<h3 id="wsgipy-entry-point">wsgi.py (Entry Point)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">create_app</span>

<span class="c1"># Load configuration based on environment
</span><span class="n">config_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">FLASK_CONFIG</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">production</span><span class="sh">'</span><span class="p">)</span>
<span class="n">application</span> <span class="o">=</span> <span class="nf">create_app</span><span class="p">(</span><span class="n">config_name</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">application</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="appinitpy">app/<strong>init</strong>.py</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">logging.handlers</span> <span class="kn">import</span> <span class="n">RotatingFileHandler</span>
<span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="k">def</span> <span class="nf">create_app</span><span class="p">(</span><span class="n">config_name</span><span class="p">):</span>
    <span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">,</span> <span class="n">instance_relative_config</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Load default configuration
</span>    <span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_object</span><span class="p">(</span><span class="sh">'</span><span class="s">config.default</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># Load environment specific configuration
</span>    <span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_object</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">config.</span><span class="si">{</span><span class="n">config_name</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># Load instance configuration if it exists
</span>    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">instance_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">config.py</span><span class="sh">'</span><span class="p">)):</span>
        <span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_pyfile</span><span class="p">(</span><span class="sh">'</span><span class="s">config.py</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># Set up logging
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">app</span><span class="p">.</span><span class="n">debug</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">app</span><span class="p">.</span><span class="n">testing</span><span class="p">:</span>
        <span class="n">log_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">instance_path</span><span class="p">),</span> <span class="sh">'</span><span class="s">logs</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">log_dir</span><span class="p">):</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">log_dir</span><span class="p">)</span>
            
        <span class="n">file_handler</span> <span class="o">=</span> <span class="nc">RotatingFileHandler</span><span class="p">(</span>
            <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">log_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">flask_app.log</span><span class="sh">'</span><span class="p">),</span>
            <span class="n">maxBytes</span><span class="o">=</span><span class="mi">10240</span><span class="p">,</span>
            <span class="n">backupCount</span><span class="o">=</span><span class="mi">10</span>
        <span class="p">)</span>
        <span class="n">file_handler</span><span class="p">.</span><span class="nf">setFormatter</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="nc">Formatter</span><span class="p">(</span>
            <span class="sh">'</span><span class="s">%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]</span><span class="sh">'</span>
        <span class="p">))</span>
        <span class="n">file_handler</span><span class="p">.</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
        <span class="n">app</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">addHandler</span><span class="p">(</span><span class="n">file_handler</span><span class="p">)</span>
        <span class="n">app</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
        <span class="n">app</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Flask application startup</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># Register blueprints
</span>    <span class="kn">from</span> <span class="n">app.views.main</span> <span class="kn">import</span> <span class="n">main</span> <span class="k">as</span> <span class="n">main_blueprint</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">register_blueprint</span><span class="p">(</span><span class="n">main_blueprint</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">app</span>
</code></pre></div></div>

<h3 id="appviewsmainpy">app/views/main.py</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Blueprint</span><span class="p">,</span> <span class="n">render_template</span>

<span class="n">main</span> <span class="o">=</span> <span class="nc">Blueprint</span><span class="p">(</span><span class="sh">'</span><span class="s">main</span><span class="sh">'</span><span class="p">,</span> <span class="n">__name__</span><span class="p">)</span>

<span class="nd">@main.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">index.html</span><span class="sh">'</span><span class="p">)</span>

<span class="nd">@main.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/about</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">about</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">about.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="configdefaultpy">config/default.py</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">Config</span><span class="p">:</span>
    <span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">SECRET_KEY</span><span class="sh">'</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">hard-to-guess-string</span><span class="sh">'</span>
    <span class="n">STATIC_FOLDER</span> <span class="o">=</span> <span class="sh">'</span><span class="s">static</span><span class="sh">'</span>
    <span class="n">TEMPLATES_FOLDER</span> <span class="o">=</span> <span class="sh">'</span><span class="s">templates</span><span class="sh">'</span>

<span class="k">class</span> <span class="nc">DevelopmentConfig</span><span class="p">(</span><span class="n">Config</span><span class="p">):</span>
    <span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">ProductionConfig</span><span class="p">(</span><span class="n">Config</span><span class="p">):</span>
    <span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">TestingConfig</span><span class="p">(</span><span class="n">Config</span><span class="p">):</span>
    <span class="n">TESTING</span> <span class="o">=</span> <span class="bp">True</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">development</span><span class="sh">'</span><span class="p">:</span> <span class="n">DevelopmentConfig</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">production</span><span class="sh">'</span><span class="p">:</span> <span class="n">ProductionConfig</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">testing</span><span class="sh">'</span><span class="p">:</span> <span class="n">TestingConfig</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">default</span><span class="sh">'</span><span class="p">:</span> <span class="n">DevelopmentConfig</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="requirementstxt">requirements.txt</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flask==2.3.3
Werkzeug==2.3.7
Jinja2==3.1.2
MarkupSafe==2.1.3
itsdangerous==2.1.2
click==8.1.7
python-dotenv==1.0.0
</code></pre></div></div>

<h2 id="4-setting-up-python-virtual-environment">4. Setting Up Python Virtual Environment</h2>

<p>Create a virtual environment and install dependencies:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /home/username/domains/example.com/public_html/flask_app
python3 <span class="nt">-m</span> venv venv
<span class="nb">source </span>venv/bin/activate
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
deactivate
</code></pre></div></div>

<h2 id="5-environment-variables-management">5. Environment Variables Management</h2>

<p>For production environments, sensitive information should be managed securely. Create a <code class="language-plaintext highlighter-rouge">.env</code> file in the instance directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /home/username/domains/example.com/public_html/flask_app/instance
<span class="nb">touch</span> .env
<span class="nb">chmod </span>600 .env  <span class="c"># Only owner can read/write</span>
</code></pre></div></div>

<p>Add environment variables to <code class="language-plaintext highlighter-rouge">.env</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FLASK_APP=wsgi.py
FLASK_CONFIG=production
SECRET_KEY=your-secure-secret-key
DATABASE_URL=mysql://user:password@localhost/dbname
</code></pre></div></div>

<p>Then create a custom <code class="language-plaintext highlighter-rouge">config.py</code> in the instance directory to load these variables:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>

<span class="c1"># Load environment variables from .env file
</span><span class="nf">load_dotenv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="sh">'</span><span class="s">.env</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="6-security-focused-file-permissions">6. Security-Focused File Permissions</h2>

<p>Setting proper permissions is crucial for security:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /home/username/domains/example.com/public_html
find flask_app <span class="nt">-type</span> d <span class="nt">-exec</span> <span class="nb">chmod </span>755 <span class="o">{}</span> <span class="se">\;</span>  <span class="c"># Directories</span>
find flask_app <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">chmod </span>644 <span class="o">{}</span> <span class="se">\;</span>  <span class="c"># Regular files</span>
<span class="nb">chmod </span>755 flask_app/wsgi.py  <span class="c"># Application entry point</span>
<span class="nb">chmod </span>700 flask_app/instance  <span class="c"># Instance directory with sensitive configuration</span>
<span class="nb">chmod </span>700 flask_app/logs  <span class="c"># Log directory</span>
</code></pre></div></div>

<h2 id="7-enabling-nginx-unit-in-directadmin">7. Enabling Nginx Unit in DirectAdmin</h2>

<p>If Nginx Unit isn’t already enabled:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/local/directadmin/custombuild
./build <span class="nb">set </span>unit <span class="nb">yes</span>
./build unit
</code></pre></div></div>

<h2 id="8-creating-the-application-in-directadmin-ui">8. Creating the Application in DirectAdmin UI</h2>

<ol>
  <li>Log in to DirectAdmin with your username and password</li>
  <li>Navigate to <strong>Advanced Features → Nginx Unit</strong></li>
  <li>Click <strong>Create Application</strong></li>
  <li>Fill in the following details:
    <ul>
      <li><strong>Name</strong>: <code class="language-plaintext highlighter-rouge">flask_app</code></li>
      <li><strong>Type</strong>: <code class="language-plaintext highlighter-rouge">python 3.9</code> (or your Python version)</li>
      <li><strong>Path</strong>: <code class="language-plaintext highlighter-rouge">/home/username/domains/example.com/public_html/flask_app</code></li>
      <li><strong>Module</strong>: <code class="language-plaintext highlighter-rouge">wsgi</code></li>
      <li><strong>Callable</strong>: <code class="language-plaintext highlighter-rouge">application</code></li>
      <li><strong>Environment Variables</strong>:
        <ul>
          <li>FLASK_CONFIG: <code class="language-plaintext highlighter-rouge">production</code></li>
          <li>FLASK_APP: <code class="language-plaintext highlighter-rouge">wsgi.py</code></li>
          <li>PYTHONPATH: <code class="language-plaintext highlighter-rouge">/home/username/domains/example.com/public_html/flask_app</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Click <strong>Save</strong></li>
</ol>

<h2 id="9-enhanced-security-with-filesystem-isolation">9. Enhanced Security with Filesystem Isolation</h2>

<p>Nginx Unit provides filesystem isolation via the <code class="language-plaintext highlighter-rouge">rootfs</code> option. This feature restricts your application’s access to only the specified directory, enhancing security.</p>

<p>While the DirectAdmin UI may not expose all isolation options directly, you can update the configuration using the API. Here’s an example of how to add filesystem isolation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT <span class="nt">--unix-socket</span> /var/run/unit/control.sock <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{
    "isolation": {
      "rootfs": "/home/username/domains/example.com/public_html/flask_app",
      "namespaces": {
        "mount": true
      }
    }
  }'</span> <span class="se">\</span>
  http://localhost/config/applications/flask_app/
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">namespaces.mount</code> set to <code class="language-plaintext highlighter-rouge">true</code> enhances security by using <code class="language-plaintext highlighter-rouge">pivot_root</code> instead of <code class="language-plaintext highlighter-rouge">chroot</code>, preventing common chroot escape techniques.</p>

<h2 id="10-creating-route-in-directadmin-ui">10. Creating Route in DirectAdmin UI</h2>

<ol>
  <li>From the Nginx Unit page, click <strong>Create Route</strong></li>
  <li>Fill in the following details:
    <ul>
      <li><strong>Domain</strong>: <code class="language-plaintext highlighter-rouge">example.com</code></li>
      <li><strong>Application</strong>: <code class="language-plaintext highlighter-rouge">flask_app</code></li>
      <li><strong>Add Static Files Route</strong>: Check this option</li>
      <li><strong>Static Files Path</strong>: <code class="language-plaintext highlighter-rouge">/home/username/domains/example.com/public_html/flask_app/app/static</code></li>
      <li><strong>Static Files URI</strong>: <code class="language-plaintext highlighter-rouge">/static/*</code></li>
    </ul>
  </li>
  <li>Click <strong>Save</strong></li>
</ol>

<h2 id="11-understanding-nginx-unit-configuration-json">11. Understanding Nginx Unit Configuration JSON</h2>

<p>DirectAdmin generates Nginx Unit configuration in JSON format. Here’s what a complete configuration might look like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"listeners"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"*:80"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"pass"</span><span class="p">:</span><span class="w"> </span><span class="s2">"routes"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"match"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/static/*"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"share"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/home/username/domains/example.com/public_html/flask_app/app/static$uri"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"pass"</span><span class="p">:</span><span class="w"> </span><span class="s2">"applications/flask_app"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"applications"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"flask_app"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"python 3.9"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/home/username/domains/example.com/public_html/flask_app"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"wsgi"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"callable"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"FLASK_CONFIG"</span><span class="p">:</span><span class="w"> </span><span class="s2">"production"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"FLASK_APP"</span><span class="p">:</span><span class="w"> </span><span class="s2">"wsgi.py"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"PYTHONPATH"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/home/username/domains/example.com/public_html/flask_app"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"isolation"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"rootfs"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/home/username/domains/example.com/public_html/flask_app"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"namespaces"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"mount"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="12-configuring-logging">12. Configuring Logging</h2>

<p>Nginx Unit logs application errors to its own log file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /var/log/unit/unit.log
</code></pre></div></div>

<p>For Flask application-specific logs, check:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /home/username/domains/example.com/public_html/flask_app/logs/flask_app.log
</code></pre></div></div>

<h2 id="13-testing-your-deployment">13. Testing Your Deployment</h2>

<p>Access your application by visiting your domain in a web browser:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/
</code></pre></div></div>

<h2 id="14-production-security-best-practices">14. Production Security Best Practices</h2>

<ol>
  <li>
    <p><strong>Use HTTPS</strong>: Configure LetsEncrypt SSL certificates through DirectAdmin.</p>
  </li>
  <li>
    <p><strong>Web Application Firewall</strong>: Consider adding ModSecurity or similar WAF.</p>
  </li>
  <li><strong>Content Security Policy</strong>: Add appropriate headers:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.after_request</span>
<span class="k">def</span> <span class="nf">add_security_headers</span><span class="p">(</span><span class="n">response</span><span class="p">):</span>
    <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Content-Security-Policy</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">default-src </span><span class="sh">'</span><span class="s">self</span><span class="sh">'"</span>
    <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">X-Content-Type-Options</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">nosniff</span><span class="sh">'</span>
    <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">X-Frame-Options</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">SAMEORIGIN</span><span class="sh">'</span>
    <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">X-XSS-Protection</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">1; mode=block</span><span class="sh">'</span>
    <span class="k">return</span> <span class="n">response</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Rate Limiting</strong>: Implement rate limiting for API endpoints.</p>
  </li>
  <li><strong>CSRF Protection</strong>: Ensure Flask-WTF CSRF protection is enabled:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask_wtf.csrf</span> <span class="kn">import</span> <span class="n">CSRFProtect</span>
<span class="n">csrf</span> <span class="o">=</span> <span class="nc">CSRFProtect</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Dependency Scanning</strong>: Regularly scan dependencies for vulnerabilities:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>safety
safety check <span class="nt">-r</span> requirements.txt
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="15-troubleshooting-guide">15. Troubleshooting Guide</h2>

<h3 id="404-not-found-errors">404 Not Found Errors</h3>
<ul>
  <li><strong>Check if routes were created properly</strong> in DirectAdmin UI</li>
  <li><strong>Verify Nginx Unit configuration</strong> using:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--unix-socket</span> /var/run/unit/control.sock http://localhost/config/
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="500-internal-server-error">500 Internal Server Error</h3>
<ul>
  <li><strong>Check application logs</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /home/username/domains/example.com/public_html/flask_app/logs/flask_app.log
</code></pre></div>    </div>
  </li>
  <li><strong>Check Nginx Unit logs</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /var/log/unit/unit.log
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="permission-issues">Permission Issues</h3>
<ul>
  <li><strong>Verify file ownership</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-la</span> /home/username/domains/example.com/public_html/flask_app
</code></pre></div>    </div>
  </li>
  <li><strong>Check if Nginx Unit can access your application files</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-u</span> www-data <span class="nb">test</span> <span class="nt">-r</span> /home/username/domains/example.com/public_html/flask_app/wsgi.py <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"Readable"</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"Not readable"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="environment-variables-not-available">Environment Variables Not Available</h3>
<ul>
  <li><strong>Verify environment variables in configuration</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--unix-socket</span> /var/run/unit/control.sock http://localhost/config/applications/flask_app/environment
</code></pre></div>    </div>
  </li>
  <li><strong>Check if <code class="language-plaintext highlighter-rouge">.env</code> file is being loaded properly</strong> in your application</li>
</ul>

<h2 id="16-updating-your-application">16. Updating Your Application</h2>

<p>To update your Flask application:</p>

<ol>
  <li>Deploy new code to your application directory</li>
  <li>Update dependencies if needed:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /home/username/domains/example.com/public_html/flask_app
<span class="nb">source </span>venv/bin/activate
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
deactivate
</code></pre></div>    </div>
  </li>
  <li>Reload the application configuration if necessary:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT <span class="nt">--unix-socket</span> /var/run/unit/control.sock <span class="nt">-d</span> <span class="s1">'{}'</span> http://localhost/config/applications/flask_app
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="17-monitoring-your-application">17. Monitoring Your Application</h2>

<p>For production deployments, consider setting up monitoring:</p>

<ol>
  <li><strong>Application Monitoring</strong>: Integrate with Flask-Monitoring-Dashboard or similar</li>
  <li><strong>Performance Monitoring</strong>: Consider New Relic or Datadog</li>
  <li><strong>Error Tracking</strong>: Integrate with Sentry for automatic error reporting:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sentry_sdk</span>
<span class="kn">from</span> <span class="n">sentry_sdk.integrations.flask</span> <span class="kn">import</span> <span class="n">FlaskIntegration</span>

<span class="n">sentry_sdk</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span>
    <span class="n">dsn</span><span class="o">=</span><span class="sh">"</span><span class="s">your-sentry-dsn</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">integrations</span><span class="o">=</span><span class="p">[</span><span class="nc">FlaskIntegration</span><span class="p">()]</span>
<span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">adfron</title><link href="https://ib.bsb.br/adfron/" rel="alternate" type="text/html" title="adfron" /><published>2025-03-23T00:00:00+00:00</published><updated>2025-03-23T20:46:28+00:00</updated><id>https://ib.bsb.br/adfron</id><content type="html" xml:base="https://ib.bsb.br/adfron/"><![CDATA[<p>Tabatinga AM 4.5
S 25
Guajará-Mirim RO
4
S 20
Epitaciolândia AC
4
S 18
Oiapoque AP 4.5
S 17
Cruzeiro do Sul AC
4
S 15
Manaus AM
2 14
Pacaraima RR 4.5
S 13
Altamira PA
4
S 13
Cuiabá MT 1.5 11
Imperatriz MA 2.5
J 10
Ji-Paraná RO
4
S
9
Marabá PA
3
9
Redenção PA
4
S
8
Santarém PA
3
7
Rio Branco AC
3
S
6
Palmas TO
2
5
Boa Vista RR
3
S
4
Cáceres MT
4
S
3
Corumbá MS
3
S
3
Belém PA 1.5
3
Vilhena RO
4
S
1
Uruguaiana RS
4
S
Naviraí MS
4
S
Guaíra PR
4
S
Ponta Porã MS
4
S
Jaguarão RS
3
S
Macapá AP
3
S
Barra do Garças MT
3
S
Rondonópolis MT
3
S
Sinop MT
3
S
Porto Velho RO
3
S
Chuí RS
3
S
São Borja RS
3
S
Dionísio Cerqueira SC
3
S
Araguaína TO
3
S
Salgueiro PE
3
Sant’Ana do Livramento RS 2.5
S
Dourados MS 2.5
S
Foz do Iguaçu PR 2.5
S
Bagé RS 2.5
S
Porto Seguro BA 2.5
Jataí GO 2.5
Caxias MA
2
S
Cascavel PR
2
S
Rio Grande RS
2
S
Chapecó SC</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Backing up Windows machines using rsync and ssh</title><link href="https://ib.bsb.br/backing-up-windows-machines-using-rsync-and-ssh/" rel="alternate" type="text/html" title="Backing up Windows machines using rsync and ssh" /><published>2025-03-23T00:00:00+00:00</published><updated>2025-03-23T20:21:26+00:00</updated><id>https://ib.bsb.br/backing-up-windows-machines-using-rsync-and-ssh</id><content type="html" xml:base="https://ib.bsb.br/backing-up-windows-machines-using-rsync-and-ssh/"><![CDATA[<p>Markdown Content:
Economical backup solution: rsync and ssh
—————————————–</p>

<p>As all other unix tricks this is also the result of laziness and the need. I wanted to backup data on my windows laptop to a central linux/unix server. I didn’t want all the features of available expensive backup solutions. Just a simple updated copy of my data on a central machine which is backed up to the tape daily. rsync is known for fast incremental transfer and was an obvious choice for the purpose.</p>

<p>We have a unix machine at our workplace which has a directory structure /backup/username allocated for backing up user data. rsync has a client/server architecture, where rsync client talks to an rsync daemon at the server side (This statement may not be completely true. I am not sure and don’t care also. You can refer to rsync manpage for complete discussion over rsync.). rsync client can connect to rsync server directly or through other remote transport programs like rsh, ssh etc. I decided to use ssh for transport for security and simplicity.</p>

<p>rsync daemon requires a configuration file rsyncd.conf. For my use, I have set it up like this:</p>

<p>[manu@amusbocldmon01 ~]$ cat rsyncd.conf
use chroot = no
[backup]
        path = /backup
        read only = no
        comment = backup area</p>

<p>This says,</p>

<p>-do no chroot (required because I’ll run it as a non-root user)<br />
-[backup] specifies a module named backup.<br />
-/backup is the path to backup module on filesystem</p>

<p>That’s all we need at the server side. We don’t need to keep rsync deamon running on the server. We’ll start rsync daemon from the client using ssh before starting the backup.</p>

<p>At Windows side, we need rsync and some ssh client. rsync is available for windows through cygwin port. You can download cygwin from <a href="http://www.cygwin.com/">http://www.cygwin.com/</a>. While installing cygwin, remember to select rsync. For ssh client, you can either use ssh that comes with cygwin or plink command line tool that comes with putty. Since, I have already set up my putty for password-less authentication using public/private key pair and pageant, I’ll demonstrate this solution using plink. However you can use any other ssh client too. You can download putty and plink from <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/.</a> You can find much information about ssh password less authentication on the web. To keep commands short, add rsync and plink to Windows path. Let’s start our backup now.</p>

<p>First, we need to start rsync daemon at the server. It can be started from the client using following command:</p>

<p>plink -v -t -l manu fileserver.local.com rsync –daemon –port=1873 –config=$HOME/rsyncd.conf</p>

<p>where, fileserver.local.com is the central server where we are going to store our data. This logs in user ‘manu’ on fileserver and starts a rsync daemon there at the port 1873. rsync goes to the background and plink returns immediately.</p>

<p>Next we need to setup an ssh transport tunnel using plink:</p>

<p>plink -v -N -L 873:localhost:1873 -l manu fileserver.local.com</p>

<p>This sets up the local port forwarding – forwarding local port 873 to port 1873 on the remote server.</p>

<p>After running this, we have port 873 on our windows box connected to the port 1873 on the fileserver on which rsync daemon is listening. So, now we just need to run rsync on windows machine with localhost as the target server:</p>

<p>rsync -av src 127.0.0.1::backup/manu</p>

<p>This command copies file or dir ‘<code class="language-plaintext highlighter-rouge">src</code>’ incrementally to directory ‘<code class="language-plaintext highlighter-rouge">manu</code>’ inside ‘backup’ module. Since this rsync is the one that comes with cygwin, it understand only cygwin paths for the files. For that reason, ‘src’ needs to be specified in cygwin terms. For example, <code class="language-plaintext highlighter-rouge">D:\project </code>becomes <code class="language-plaintext highlighter-rouge">/cygdrive/d/project</code> in cygwin terms.</p>

<h2 id="putting-it-all-in-scripts">Putting it all in scripts:</h2>

<p>This trick is not much handy, unless you put it in the scripts and make it easy to run. To automate the process, I created 2 small scripts:</p>

<p>plink_rsync.bat: (To start plink for rsync)</p>

<p>REM Start rsync daemon the server
plink -v -t %* rsync –daemon –port=1873 –config=$HOME/rsyncd.conf
REM Setup ssh transport tunnel.
plink -v -N -L 873:localhost:1873 %*</p>

<p>runrsync.bat: (Main script - calls plink_rsync.bat and starts rsync)</p>

<p>REM Start plink_rsync.bat
START /MIN “PLINK_FOR_RSYNC” plink_rsync.bat -l manu fileserver.local.com
REM Sleep for 15 seconds to give plink enough time to finish
sleep 15
REM Iterate through filenames in filelist.txt and rsync them
for /F “delims=” %%i in (filelist.txt) do rsync -av %%i 127.0.0.1::backup/manu
REM Kill plink_rsync.bat window
TASKKILL /T /F /FI “WINDOWTITLE eq PLINK_FOR_RSYNC *”
REM Kill remote rsync daemon
plink -l manu fileserver.local.com pkill rsync</p>

<p>The main script starts <code class="language-plaintext highlighter-rouge">plink_rsync.bat</code> in another window and sleeps for 15 seconds to make sure that connection is set up. Then it runs rsync over the files and directories list in<code class="language-plaintext highlighter-rouge"> filelist.txt</code>. After rsyncing is done, it kills <code class="language-plaintext highlighter-rouge">plink_rsync.bat</code> window and kills rsync daemon on the remote server by running pkill though plink.</p>

<p>filelist.txt contains the list of files and directories that you want to take backup of. For example, my <code class="language-plaintext highlighter-rouge">filelist.txt</code> contains:</p>

<p>filelist.txt:</p>

<p>“/cygdrive/d/Documents and Settings/501106700/My Documents/project”
“/cygdrive/d/Documents and Settings/501106700/My Documents/Outlook”
“/cygdrive/c/Program Files/Lotus/Sametime Client/Chat Transcripts”</p>

<p>You can schedule runrsync.bat to run everyday or every week depending on your requirement.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">using openSUSE uboot/grub to dualboot raspberry pi</title><link href="https://ib.bsb.br/using-opensuse-ubootgrub-to-dualboot-raspberry-pi/" rel="alternate" type="text/html" title="using openSUSE uboot/grub to dualboot raspberry pi" /><published>2025-03-23T00:00:00+00:00</published><updated>2025-03-23T10:57:05+00:00</updated><id>https://ib.bsb.br/using-opensuse-ubootgrub-to-dualboot-raspberry-pi</id><content type="html" xml:base="https://ib.bsb.br/using-opensuse-ubootgrub-to-dualboot-raspberry-pi/"><![CDATA[<p>──────────────────────────────</p>
<ol>
  <li>BACK UP AND PREPARE</li>
</ol>

<p> • Before you begin, back up your current SD card image. Use a tool such as dd or a disk imaging utility on your desktop so you can revert to a known–good state if something goes wrong.</p>

<p> • Make sure you have a working Linux system (or live USB) with partitioning tools (like fdisk, gdisk, or the graphical tool GParted) and text editors.</p>

<p>──────────────────────────────</p>
<ol>
  <li>UNDERSTANDING THE DEFAULT PARTITION SCHEME</li>
</ol>

<p>openSUSE Tumbleweed for the Raspberry Pi typically uses a partition layout similar to:</p>

<p> – An EFI System Partition (ESP) formatted as FAT32; usually between 100 MB and 500 MB in size.<br />
 – A root filesystem partition (often Btrfs or ext4) that holds the operating system.<br />
 – Optionally, a separate /home partition if you chose a custom install.</p>

<p>It is essential that you keep the ESP intact because the boot chain (U‑Boot loads the EFI bootloader, which then invokes GRUB) resides there. (See discussion on recommended EFI sizes in <a href="https://www.reddit.com/r/openSUSE/comments/1ddf3dx/efi_partition_size_and_other_things/">Reddit</a>.)</p>

<p>──────────────────────────────</p>
<ol>
  <li>PLANNING THE DUAL-BOOT SETUP</li>
</ol>

<p>Decide how you want to install the second OS. Your options include:</p>

<p> a. Shrinking the existing root (or /home) partition to make space for a new “root” partition for the second OS.<br />
 b. Using an SD card with extra physical space so you can create a new partition(s) for the second OS.</p>

<p>Because the ESP is shared, you’ll be adding the new OS’s boot files (or chainloader entry) to the same ESP without overwriting openSUSE’s files. (For strategy ideas, see <a href="https://en.opensuse.org/HCL:Raspberry_Pi4">HCL:Raspberry_Pi4</a>.)</p>

<p>──────────────────────────────</p>
<ol>
  <li>MODIFYING THE PARTITION LAYOUT</li>
</ol>

<p>Step 4.1. Examine your current partitions<br />
 Open a terminal and use, for example:</p>

<p>  # lsblk<br />
  # fdisk -l /dev/mmcblk0</p>

<p>You should see something like:<br />
  • /dev/mmcblk0p1 – EFI partition (FAT32)<br />
  • / dev/mmcblk0p2 – root partition (Btrfs/ext4)</p>

<p>Step 4.2. Resize the existing partition(s)<br />
 • Unmount the partition(s) that need resizing. If your root is mounted, you may need to use a live USB environment.<br />
 • Launch GParted or use command-line tools (e.g., parted) to shrink the root partition. For example, in GParted:<br />
  – Select the root partition, choose “Resize/Move”, and shrink it to leave free space at the end of the SD card.<br />
 • Apply the changes and note the new free (unallocated) space.</p>

<p>Step 4.3. Create a new partition for the second OS<br />
 • Within the unallocated space, create a new primary partition. (For Linux, you can choose ext4 or Btrfs as desired.)<br />
 • Label it (for example, “SECOND_OS_ROOT”) so that you can identify it later.</p>

<p>Note: Always verify the partition table (using fdisk or GParted preview) so that the ESP remains unaltered.</p>

<p>──────────────────────────────</p>
<ol>
  <li>INSTALLING THE SECOND OS INTO THE NEW PARTITION</li>
</ol>

<p>There are several ways to install the second OS onto the new partition. One common method is:</p>

<p> a. Prepare an installation image (or manually extract the OS root filesystem) for the second OS on your desktop.<br />
 b. Mount the new partition and extract/copy the OS files. For example:</p>

<p>  # mkdir /mnt/second_os<br />
  # mount /dev/mmcblk0p3 /mnt/second_os<br />
  # rsync -aHAX –exclude={“/dev/<em>”,”/proc/</em>”,”/sys/<em>”,”/tmp/</em>”,”/run/*”} /path/to/second_os_root/ /mnt/second_os/</p>

<p> c. Make sure that the new OS’s fstab (or boot configuration) points to the correct partitions (using UUIDs is recommended) and that it has its own bootable kernel and initrd available.</p>

<p>──────────────────────────────</p>
<ol>
  <li>THE BOOT CHAIN: U‑BOOT, EFI, GRUB, AND UEFI WORKAROUND</li>
</ol>

<p>openSUSE on the Pi uses a U‑Boot binary (often named u-boot.bin) stored in the EFI partition. Under certain conditions (or known bugs), you might need to replace this file with an updated version from a mirror (see <a href="https://linuxkamarada.com/en/2020/12/26/tumbleweed-needs-a-workaround-to-boot-on-the-raspberry-pi-4/">Linux Kamarada’s guide</a>). If you notice boot issues (for example, “Waiting for PHY auto negotiation…” messages), then:</p>

<p> • Download the updated u-boot.bin (from a reliable source such as the openSUSE ARM mailing list archives).<br />
 • Mount the ESP (if not already mounted, for example, as /boot/efi):</p>

<p>  # mount /dev/mmcblk0p1 /boot/efi</p>

<p> • Backup the original and copy the new file:</p>

<p>  # cp /boot/efi/u-boot.bin /boot/efi/u-boot.bin.bak<br />
  # cp /path/to/new/u-boot.bin /boot/efi/u-boot.bin</p>

<p> Make sure that after the boot, openSUSE still boots normally before proceeding with GRUB changes.</p>

<p>──────────────────────────────</p>
<ol>
  <li>CONFIGURING GRUB FOR DUAL-BOOT</li>
</ol>

<p>Now you must modify GRUB’s configuration so that when the Pi boots, you can choose which OS to start.</p>

<p>Step 7.1. Identify the kernel and initrd files for the second OS<br />
 Place these files on a location accessible via the EFI partition if needed or directly from the new root partition (it’s common to store the second OS’s boot files in its own /boot folder).</p>

<p>Step 7.2. Edit GRUB’s custom configuration<br />
 In openSUSE, you can add a manual menu entry in “/etc/grub.d/40_custom” (or a similar custom script file). For example, add the following entry:</p>

<p>  —————————————-
  menuentry “Second OS” {
   insmod part_gpt
   insmod fat
   # If your second OS kernel and initrd are stored in the new partition mounted at /boot/second_os,
   # adjust the search command to match the UUID or label of that partition.
   search –no-floppy –fs-uuid –set=root YOUR_SECOND_OS_UUID
   echo “Loading second OS kernel…”
   linux /boot/second_os/vmlinuz root=UUID=YOUR_SECOND_OS_ROOT_UUID ro quiet
   echo “Loading second OS initrd…”
   initrd /boot/second_os/initrd.img
  }
  —————————————-</p>

<p> Here, replace YOUR_SECOND_OS_UUID and YOUR_SECOND_OS_ROOT_UUID with the correct UUIDs. To find a partition’s UUID, run:</p>

<p>  # blkid /dev/mmcblk0p3</p>

<p>Step 7.3. Update the GRUB configuration file<br />
 After saving your custom entry, update GRUB:</p>

<p>  # grub2-mkconfig -o /boot/grub2/grub.cfg</p>

<p> (Depending on your system, you may use “grub2-mkconfig” or “update-grub”.) This command scans the system and integrates the custom menu entry into GRUB.</p>

<p>──────────────────────────────</p>
<ol>
  <li>FINAL STEPS AND TESTING</li>
</ol>

<p> • Reboot your Raspberry Pi. At the GRUB menu, you should now see an entry for “Second OS”. Using a keyboard (or if you’ve enabled network/serial access), select it.</p>

<p> • Test booting into both operating systems. If you experience issues:
  – Revisit the UUIDs in the GRUB entry.<br />
  – Ensure that the second OS’s kernel and initrd files are correctly referenced.<br />
  – Check boot logs (from both GRUB and systemd) for errors.</p>

<p> • If necessary, adjust parameters (such as removing “quiet” or adding “console=ttyAMA0” for serial debug messages) to help troubleshoot any boot issues.</p>

<p>──────────────────────────────</p>
<ol>
  <li>TROUBLESHOOTING AND NOTES</li>
</ol>

<p> • If the Pi does not boot without an HDMI display (a common quirk), add the following line to the ESP’s config.txt (found in /boot/efi on the FAT32 partition):</p>

<p>  hdmi_force_hotplug=1</p>

<p> • Be mindful that modifications to the EFI partition affect both OS’s boot processes. Always back up the entire ESP before making changes.</p>

<p> • Dual-booting on embedded systems may require iterative debugging. Tools such as a serial console can be invaluable, and reviewing messages from GRUB or U-Boot is essential.</p>

<p>──────────────────────────────
SUMMARY</p>

<p>This tutorial outlined how to:
 1. Back up your existing installation.
 2. Assess and shrink your partition layout while preserving the EFI System Partition.
 3. Create a new partition and install a second OS by copying its root filesystem.
 4. Replace or update u-boot.bin (if needed) in the EFI partition.
 5. Manually add a GRUB menuentry (in /etc/grub.d/40_custom) referencing your second OS’s kernel, initrd, and root partition.
 6. Update GRUB and test your dual-boot configuration.</p>

<p>By following these steps carefully, you can maintain openSUSE Tumbleweed’s native boot chain while adding support for another OS.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Combining If-Then Planning with GTD</title><link href="https://ib.bsb.br/combining-if-then-planning-with-gtd/" rel="alternate" type="text/html" title="Combining If-Then Planning with GTD" /><published>2025-03-22T00:00:00+00:00</published><updated>2025-03-22T12:48:21+00:00</updated><id>https://ib.bsb.br/combining-if-then-planning-with-gtd</id><content type="html" xml:base="https://ib.bsb.br/combining-if-then-planning-with-gtd/"><![CDATA[<ol>
  <li>
    <p>Introduction and Background
If-then planning (also known as implementation intentions) derives from the work of psychologist Peter Gollwitzer. His research shows that specifying goal-directed behaviors in an “If [situation], then [response]” format enhances follow-through and bridges the intention-behavior gap.<br />
David Allen’s “Getting Things Done” (GTD) methodology is a widely recognized productivity system emphasizing five core phases: Capture, Clarify, Organize, Reflect, and Engage. By merging if-then planning with GTD, you can create a powerful structure for capturing and implementing your goals seamlessly.</p>
  </li>
  <li>
    <p>Overview of the Integrated Framework
The synergy between if-then planning and GTD emerges from how GTD systematically manages tasks while if-then planning automates follow-through on specific goal steps. Below is a refined guide to weaving these concepts together:</p>
  </li>
</ol>

<p>────────────────────────────────────────────────────────</p>

<p>PHASE 1: CAPTURE<br />
• GTD Aim: Offload every idea, commitment, and project into a trusted external system.<br />
• If-Then Integration:<br />
  – “If I encounter a new task or idea, then I will immediately record it in my inbox (notebook or digital app).”<br />
Why It Helps:<br />
  – Minimizes forgetting and mental clutter by instantly capturing new responsibilities and ideas.</p>

<p>PHASE 2: CLARIFY<br />
• GTD Aim: Decide whether each captured item is actionable, and if so, determine the specific next step.<br />
• If-Then Integration:<br />
  – “If I open my inbox to process items, then I will convert each item into a clear next action or outcome.”<br />
Why It Helps:<br />
  – Eliminates ambiguity. By defining exact next steps, you reduce the mental load of deciding what to do each time you see the task.</p>

<p>PHASE 3: ORGANIZE<br />
• GTD Aim: Categorize actions and projects into appropriate lists (e.g., @Home, @Office, @Errands, Calendar, etc.).<br />
• If-Then Integration:<br />
  – “If a next action relates to phone calls, then I will move it to my @Calls list immediately.”<br />
Why It Helps:<br />
  – Quick categorization keeps tasks in the right place so they’re easy to retrieve and act upon.</p>

<p>PHASE 4: REFLECT<br />
• GTD Aim: Conduct reviews (weekly or otherwise) to confirm all tasks and projects are current and aligned with priorities.<br />
• If-Then Integration:<br />
  – “If it is Friday at 4 PM, then I will do my GTD weekly review to update or reorganize tasks and projects.”<br />
Why It Helps:<br />
  – Encourages consistent reflection rituals, ensuring that incomplete items or new tasks are promptly addressed.</p>

<p>PHASE 5: ENGAGE<br />
• GTD Aim: Choose which task to do at any given moment based on context, time available, energy, and priority.<br />
• If-Then Integration:<br />
  – “If I find a free 30-minute block at the office, then I will pick a task from my @Office list that matches the available time.”<br />
Why It Helps:<br />
  – Leverages context-based lists and if-then trigger cues to transition smoothly into action, avoiding procrastination or indecision.</p>

<p>────────────────────────────────────────────────────────</p>

<ol>
  <li>
    <p>Practical Application Example
Imagine you have a recurring weekly report due each Friday:<br />
• Capture: “If Friday’s deadline is set, then I will add ‘Weekly Report’ to my inbox.”<br />
• Clarify: “If I see ‘Weekly Report’ in my inbox, then I will define the first step (e.g., ‘Gather Data for Report’).”<br />
• Organize: “If my next action is research, then I place it under @Computer for supply gathering.”<br />
• Reflect: “If it’s Wednesday afternoon, then I review tasks to ensure progress and reorganize if necessary.”<br />
• Engage: “If it’s Thursday at 9 AM, then I open my document and start drafting.”</p>
  </li>
  <li>
    <p>Summarizing the Synergy
By combining if-then planning with GTD, you:<br />
• Make capturing and processing tasks automatic, reducing cognitive load.<br />
• Strengthen each GTD phase with concrete triggers for action.<br />
• Protect your workflow from procrastination and indecision by specifying precise cues and behaviors.</p>
  </li>
  <li>
    <p>Additional Tips and References<br />
• Gollwitzer, P. M. (1999). Implementation intentions: Strong effects of simple plans. American Psychologist, 54(7), 493–503.<br />
• Allen, D. (2001). Getting Things Done: The Art of Stress-Free Productivity. Penguin Books.</p>
  </li>
</ol>

<p>Conclusion<br />
This integrated framework weaves if-then planning seamlessly into GTD so you not only capture and clarify tasks but also have concrete mental triggers that propel you to act on them in the moment. By specifying cues and linking them to precise actions, you minimize effortful deliberation and maximize consistent follow-through across all five GTD stages.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">`If-Then Planning` within GTD</title><link href="https://ib.bsb.br/if-then-planning-within-gtd/" rel="alternate" type="text/html" title="`If-Then Planning` within GTD" /><published>2025-03-22T00:00:00+00:00</published><updated>2025-03-22T12:49:55+00:00</updated><id>https://ib.bsb.br/if-then-planning-within-gtd</id><content type="html" xml:base="https://ib.bsb.br/if-then-planning-within-gtd/"><![CDATA[<p>Introduction:
David Allen’s “Getting Things Done” (GTD) is a productivity methodology emphasizing systematic task management through five phases: Capture, Clarify, Organize, Reflect, and Engage. Peter Gollwitzer’s “Implementation Intentions” (if-then planning) enhances goal achievement by linking specific situational cues (“if”) to desired actions (“then”). Integrating these two approaches can significantly improve productivity by automating task execution and reducing cognitive load.</p>

<p>Phase-by-Phase Integration:</p>

<ol>
  <li>Capture:
Purpose: Record all tasks and ideas immediately.
    <ul>
      <li>If-Then Plan: “If I think of a task or idea, then I will immediately record it in my GTD inbox.”</li>
      <li>Example: “If someone assigns me a task during a meeting, then I will immediately note it in my notebook.”</li>
    </ul>
  </li>
  <li>Clarify:
Purpose: Clearly define actionable next steps.
    <ul>
      <li>If-Then Plan: “If I process my inbox daily at 5 PM, then I will define the next action for each item.”</li>
      <li>Example: “If a task takes less than two minutes, then I will complete it immediately (Allen’s two-minute rule).”</li>
    </ul>
  </li>
  <li>Organize:
Purpose: Categorize tasks into contexts and lists.
    <ul>
      <li>If-Then Plan: “If I clarify a task, then I will immediately assign it to the appropriate context list.”</li>
      <li>Example: “If a task requires a phone call, then I will place it on my ‘@calls’ list.”</li>
    </ul>
  </li>
  <li>Reflect:
Purpose: Regularly review tasks and projects.
    <ul>
      <li>If-Then Plan: “If it is Friday at 4 PM, then I will conduct my weekly GTD review.”</li>
      <li>Example: “If I complete a major milestone, then I will immediately review the project to identify next actions.”</li>
    </ul>
  </li>
  <li>Engage:
Purpose: Execute tasks effectively.
    <ul>
      <li>Contextual If-Then Plan: “If I arrive at my office, then I will review my ‘@office’ list.”</li>
      <li>Time-Based If-Then Plan: “If it is 9 AM, then I will begin one hour of deep-focus work.”</li>
      <li>Emotional If-Then Plan: “If I feel overwhelmed, then I will pause and review my next-action list for clarity.”</li>
    </ul>
  </li>
</ol>

<p>Potential Challenges and Solutions:</p>
<ul>
  <li>Challenge: Overlapping contexts and triggers may cause confusion.</li>
  <li>Solution: Regularly review and refine if-then plans during weekly GTD reviews to ensure clarity and effectiveness.</li>
</ul>

<p>Conclusion:
Integrating if-then planning within GTD enhances productivity by automating task initiation and reducing decision fatigue. Regular reflection and refinement ensure the system remains effective and adaptable.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>