<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ib.bsb.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ib.bsb.br/" rel="alternate" type="text/html" /><updated>2025-05-09T11:42:26+00:00</updated><id>https://ib.bsb.br/feed.xml</id><title type="html">infoBAG</title><entry><title type="html">Dynamic Performance Governor Management Script with Systemd</title><link href="https://ib.bsb.br/dynamic-performance-governor-management-script-with-systemd/" rel="alternate" type="text/html" title="Dynamic Performance Governor Management Script with Systemd" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-09T09:31:31+00:00</updated><id>https://ib.bsb.br/dynamic-performance-governor-management-script-with-systemd</id><content type="html" xml:base="https://ib.bsb.br/dynamic-performance-governor-management-script-with-systemd/"><![CDATA[<p>This guide presents a comprehensive, single approach to managing CPU, GPU, NPU, and DMC frequency governors on Linux systems, particularly for devices like the RK3588, by setting them to “performance” mode. This method emphasizes robustness, dynamic discovery of hardware, state persistence for reversibility, and proper integration with systemd. It combines the best practices from various methods into one refined solution.</p>

<p>While the context often mentions RK3588, the script and systemd service are designed to be generally applicable to Linux systems, though specific sysfs paths for governors can vary if not covered by the general patterns.</p>

<p>This solution consists of a powerful Bash script that handles the logic of discovering, setting, and restoring governors, and a systemd service unit to manage this script at boot and allow system-level control.</p>

<p><strong>1. The Bash Script: <code class="language-plaintext highlighter-rouge">/usr/local/bin/performance_governors.sh</code></strong></p>

<p>This script is the core of the solution. Its key features include:</p>
<ul>
  <li><strong>Root Privilege Check:</strong> Ensures it’s run with necessary permissions.</li>
  <li><strong>Robust Scripting:</strong> Uses <code class="language-plaintext highlighter-rouge">set -euo pipefail</code> for strict error handling and <code class="language-plaintext highlighter-rouge">IFS=$’\n\t’</code> for safer processing of paths.</li>
  <li><strong>Variable Protection:</strong> Uses <code class="language-plaintext highlighter-rouge">readonly</code> for global configuration variables (<code class="language-plaintext highlighter-rouge">STATE_DIR</code>, <code class="language-plaintext highlighter-rouge">STATE_FILE</code>, <code class="language-plaintext highlighter-rouge">GOV_PATTERNS</code>) to prevent accidental modification within the script, enhancing robustness.</li>
  <li><strong>Dynamic Governor Discovery:</strong> Automatically finds relevant <code class="language-plaintext highlighter-rouge">cpufreq</code> (CPU) and <code class="language-plaintext highlighter-rouge">devfreq</code> (GPU, NPU, DMC, etc.) governor files using general patterns, making it adaptable to different hardware configurations.</li>
  <li><strong>State Management:</strong> Before setting governors to “performance,” it saves the current (default) governor for each device to a state file (<code class="language-plaintext highlighter-rouge">/var/lib/performance_governors/default_gov.txt</code>). This allows for a clean restoration of previous settings.</li>
  <li><strong>Comprehensive Actions:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">start</code>: Saves current governors and sets all discovered ones to “performance.”</li>
      <li><code class="language-plaintext highlighter-rouge">stop</code>: Restores the saved governors from the state file.</li>
      <li><code class="language-plaintext highlighter-rouge">restart</code>: Performs a <code class="language-plaintext highlighter-rouge">stop</code> then <code class="language-plaintext highlighter-rouge">start</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">status</code>: Displays the current governor and the saved (default) governor for each discovered path.</li>
    </ul>
  </li>
  <li><strong>Systemd-Aware Logging:</strong> Uses <code class="language-plaintext highlighter-rouge">systemd-cat</code> for logging if available, providing integration with the system journal; otherwise, falls back to the standard <code class="language-plaintext highlighter-rouge">logger</code> utility.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="c"># ——————————————————————————</span>
<span class="c"># performance_governors.sh</span>
<span class="c"># Unified script to manage CPU/GPU/NPU/DMC frequency governors.</span>
<span class="c"># Targets devices like RK3588 but designed for general Linux applicability.</span>
<span class="c"># - Requires root (CAP_SYS_ADMIN)</span>
<span class="c"># - Depends on ‘util-linux’ (for logger) and systemd (for systemd-cat)</span>
<span class="c"># ——————————————————————————</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">IFS</span><span class="o">=</span><span class="nv">$’</span><span class="se">\n\t</span>’ <span class="c"># Set Internal Field Separator to newline and tab for safer loops.</span>

<span class="c">### Verify running as root</span>
<span class="k">if</span> <span class="o">[</span> “<span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>” <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> “ERROR: Must be run as root.” <span class="o">&gt;</span>&amp;2
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Location to save/restore default governors</span>
<span class="nb">readonly </span><span class="nv">STATE_DIR</span><span class="o">=</span>“/var/lib/performance_governors”
<span class="nb">readonly </span><span class="nv">STATE_FILE</span><span class="o">=</span>“<span class="nv">$STATE_DIR</span>/default_gov.txt”

<span class="c"># General patterns covering cpufreq (CPU) and devfreq (other devices) governors</span>
<span class="nb">readonly </span><span class="nv">GOV_PATTERNS</span><span class="o">=(</span>
  “/sys/devices/system/cpu/cpufreq/policy<span class="k">*</span>/scaling_governor” <span class="c"># For CPU cores</span>
  “/sys/class/devfreq/<span class="k">*</span>/governor”                             <span class="c"># For GPU, NPU, DMC, etc.</span>
<span class="o">)</span>

<span class="c"># Log function: prefers systemd-cat for journal integration, else falls back to logger.</span>
log<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">level</span><span class="o">=</span>“<span class="nv">$1</span>”<span class="p">;</span> <span class="nb">shift
  local </span><span class="nv">msg</span><span class="o">=</span>“<span class="nv">$*</span>”
  <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> systemd-cat &amp;&gt;/dev/null<span class="p">;</span> <span class="k">then</span>
    <span class="c"># Pipe to systemd-cat to log with specified level and tag</span>
    <span class="nb">printf</span> ‘%s<span class="se">\n</span>’ “<span class="nv">$msg</span>” | systemd-cat <span class="nt">-t</span> performance_governors <span class="nt">-p</span> “<span class="nv">$level</span>”
  <span class="k">else</span>
    <span class="c"># Fallback to logger if systemd-cat is not available</span>
    logger <span class="nt">-t</span> performance_governors <span class="nt">-p</span> “user.<span class="nv">$level</span>” — “<span class="nv">$msg</span>”
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Discover all existing governor file paths based on GOV_PATTERNS.</span>
discover_paths<span class="o">()</span> <span class="o">{</span>
  <span class="k">for </span>patt <span class="k">in</span> “<span class="k">${</span><span class="nv">GOV_PATTERNS</span><span class="p">[@]</span><span class="k">}</span>”<span class="p">;</span> <span class="k">do</span>
    <span class="c"># $patt is intentionally unquoted to allow shell pathname expansion (globbing).</span>
    <span class="c"># The shell first performs word splitting on $patt (if it contained IFS characters;</span>
    <span class="c"># current IFS is newline/tab). Then, pathname expansion (globbing, e.g., ‘*’)</span>
    <span class="c"># is attempted on each resulting word. For the defined GOV_PATTERNS, which are</span>
    <span class="c"># single “words” without internal IFS characters, this robustly expands the globs.</span>
    <span class="k">for </span>f <span class="k">in</span> <span class="nv">$patt</span><span class="p">;</span> <span class="k">do</span>
      <span class="c"># Check if the glob expansion resulted in an actual existing file</span>
      <span class="o">[</span> <span class="nt">-f</span> “<span class="nv">$f</span>” <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> ‘%s<span class="se">\n</span>’ “<span class="nv">$f</span>”
    <span class="k">done
  done</span>
<span class="o">}</span>

<span class="c"># Action: Save current governors and set all to ‘performance’.</span>
cmd_start<span class="o">()</span> <span class="o">{</span>
  log info “START: Saving default governors and forcing ‘performance’ mode.”
  <span class="nb">mkdir</span> <span class="nt">-p</span> “<span class="nv">$STATE_DIR</span>” <span class="c"># Ensure state directory exists</span>
  : <span class="o">&gt;</span> “<span class="nv">$STATE_FILE</span>”     <span class="c"># Truncate/create state file</span>

  <span class="c"># Read each discovered governor path</span>
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> path<span class="p">;</span> <span class="k">do
    </span><span class="nv">current_governor</span><span class="o">=</span><span class="si">$(</span>&lt;“<span class="nv">$path</span>”<span class="si">)</span> <span class="c"># Read current governor</span>
    <span class="nb">printf</span> ‘%s<span class="se">\t</span>%s<span class="se">\n</span>’ “<span class="nv">$path</span>” “<span class="nv">$current_governor</span>” <span class="o">&gt;&gt;</span>”<span class="nv">$STATE_FILE</span>” <span class="c"># Save path and current governor</span>

    <span class="c"># Attempt to set to ‘performance’</span>
    <span class="k">if </span><span class="nb">echo </span>performance <span class="o">&gt;</span>”<span class="nv">$path</span>”<span class="p">;</span> <span class="k">then
      </span>log info “Successfully <span class="nb">set</span> ‘performance’ <span class="k">for</span>: <span class="nv">$path</span>”
    <span class="k">else
      </span>log err  “FAILED to <span class="nb">set</span> ‘performance’ <span class="k">for</span>: <span class="nv">$path</span>”
    <span class="k">fi
  done</span> &lt; &lt;<span class="o">(</span>discover_paths<span class="o">)</span> <span class="c"># Process substitution feeds paths from discover_paths</span>

  log info “START <span class="nb">command </span>complete.”
<span class="o">}</span>

<span class="c"># Action: Restore governors to their saved default states.</span>
cmd_stop<span class="o">()</span> <span class="o">{</span>
  log info “STOP: Restoring saved default governors.”
  <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-r</span> “<span class="nv">$STATE_FILE</span>” <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>log warning “State file <span class="o">(</span><span class="nv">$STATE_FILE</span><span class="o">)</span> not found or not readable. Skipping restore.”
    <span class="k">return </span>1 <span class="c"># Indicate issue if state file is missing</span>
  <span class="k">fi</span>

  <span class="c"># Read path and old governor from state file</span>
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span><span class="nv">$’</span><span class="se">\t</span>’ <span class="nb">read</span> <span class="nt">-r</span> path old_governor<span class="p">;</span> <span class="k">do
    if</span> <span class="o">[</span> <span class="nt">-f</span> “<span class="nv">$path</span>” <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># Check if path still exists</span>
      <span class="k">if </span><span class="nb">echo</span> “<span class="nv">$old_governor</span>” <span class="o">&gt;</span>”<span class="nv">$path</span>”<span class="p">;</span> <span class="k">then
        </span>log info “Restored ‘<span class="nv">$old_governor</span>’ to: <span class="nv">$path</span>”
      <span class="k">else
        </span>log err  “FAILED to restore ‘<span class="nv">$old_governor</span>’ to: <span class="nv">$path</span>”
      <span class="k">fi
    else
      </span>log warning “Path no longer exists, cannot restore <span class="k">for</span>: <span class="nv">$path</span>”
    <span class="k">fi
  done</span> &lt;“<span class="nv">$STATE_FILE</span>”

  log info “STOP <span class="nb">command </span>complete.”
<span class="o">}</span>

<span class="c"># Action: Display current and saved governors.</span>
cmd_status<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> “Governor Status <span class="o">(</span>Current Governor → Saved Default Governor<span class="o">)</span>:”
  <span class="nb">declare</span> <span class="nt">-A</span> saved_governors <span class="c"># Associative array to hold saved states</span>

  <span class="c"># Populate saved_governors from state file if it exists</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nt">-r</span> “<span class="nv">$STATE_FILE</span>” <span class="o">]</span><span class="p">;</span> <span class="k">then
    while </span><span class="nv">IFS</span><span class="o">=</span><span class="nv">$’</span><span class="se">\t</span>’ <span class="nb">read</span> <span class="nt">-r</span> path old_governor<span class="p">;</span> <span class="k">do
      </span>saved_governors[“<span class="nv">$path</span>”]<span class="o">=</span>“<span class="nv">$old_governor</span>”
    <span class="k">done</span> &lt;“<span class="nv">$STATE_FILE</span>”
  <span class="k">fi</span>

  <span class="c"># Display status for each discovered governor path</span>
  <span class="nb">local </span><span class="nv">found_any</span><span class="o">=</span>0
  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> path<span class="p">;</span> <span class="k">do
    </span><span class="nv">found_any</span><span class="o">=</span>1
    <span class="nv">current_governor</span><span class="o">=</span><span class="si">$(</span>&lt;“<span class="nv">$path</span>”<span class="si">)</span>
    <span class="nv">default_governor</span><span class="o">=</span>“<span class="k">${</span><span class="nv">saved_governors</span><span class="p">[</span><span class="nv">$path</span><span class="p">]</span><span class="k">:-</span><span class="p">&lt;not_saved&gt;</span><span class="k">}</span>” <span class="c"># Use &lt;not_saved&gt; if not in state file</span>
    <span class="nb">printf</span> ‘%-65s : %-15s → %s<span class="se">\n</span>’ “<span class="nv">$path</span>” “<span class="nv">$current_governor</span>” “<span class="nv">$default_governor</span>”
  <span class="k">done</span> &lt; &lt;<span class="o">(</span>discover_paths<span class="o">)</span>

  <span class="k">if</span> <span class="o">[</span> “<span class="nv">$found_any</span>” <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> “No governor paths found.”
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Display usage instructions.</span>
usage<span class="o">()</span> <span class="o">{</span>
  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
Usage: </span><span class="nv">$0</span><span class="sh"> {start|stop|restart|status}
  start      Saves current governor settings and sets all to ‘performance’.
  stop       Restores previously saved governor settings.
  restart    Executes ‘stop’ then ‘start’.
  status     Displays current vs. saved governor settings for all discovered paths.
</span><span class="no">EOF
</span>  <span class="nb">exit </span>1
<span class="o">}</span>

<span class="c"># Main command dispatcher.</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># Show usage if no arguments</span>
  usage
<span class="k">fi

case</span> “<span class="nv">$1</span>” <span class="k">in
  </span>start<span class="p">)</span>   cmd_start   <span class="p">;;</span>
  stop<span class="p">)</span>    cmd_stop    <span class="p">;;</span>
  restart<span class="p">)</span> cmd_stop<span class="p">;</span> cmd_start <span class="p">;;</span> <span class="c"># Simple restart: stop then start</span>
  status<span class="p">)</span>  cmd_status  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>       usage       <span class="p">;;</span> <span class="c"># Show usage for unknown commands</span>
<span class="k">esac</span>
</code></pre></div></div>

<p><strong>2. The Systemd Service Unit: <code class="language-plaintext highlighter-rouge">/etc/systemd/system/performance_governors.service</code></strong></p>

<p>This service file allows systemd to manage the script.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Type=oneshot</code>: Indicates the script runs once and exits.</li>
  <li><code class="language-plaintext highlighter-rouge">RemainAfterExit=yes</code>: Tells systemd to consider the service “active” even after the <code class="language-plaintext highlighter-rouge">ExecStart</code> process finishes, as the script’s effects (changed governors) persist.</li>
  <li><code class="language-plaintext highlighter-rouge">ExecStart</code>, <code class="language-plaintext highlighter-rouge">ExecStop</code>, <code class="language-plaintext highlighter-rouge">ExecReload</code>: Map directly to the script’s <code class="language-plaintext highlighter-rouge">start</code>, <code class="language-plaintext highlighter-rouge">stop</code>, and <code class="language-plaintext highlighter-rouge">restart</code> actions.</li>
  <li>Dependencies (<code class="language-plaintext highlighter-rouge">After</code>, <code class="language-plaintext highlighter-rouge">Wants</code>): Ensures the service starts at an appropriate time during boot.</li>
  <li><code class="language-plaintext highlighter-rouge">Restart=no</code>: The <code class="language-plaintext highlighter-rouge">Restart=no</code> directive ensures that if the script fails during startup (e.g., cannot set a governor), systemd will not attempt to restart it automatically. This is generally preferred for configuration services where a failure might indicate a deeper issue requiring manual investigation rather than repeated, potentially problematic, attempts.</li>
</ul>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">Performance Governors Management (CPU/GPU/NPU/DMC)</span>
<span class="py">Documentation</span><span class="p">=</span><span class="s">man:performance_governors.sh # Assuming script could have a man page</span>
<span class="py">After</span><span class="p">=</span><span class="s">multi-user.target</span>
<span class="py">Wants</span><span class="p">=</span><span class="s">network-online.target # Optional: if any governor settings depend on network state</span>

<span class="nn">[Service]</span>
<span class="py">Type</span><span class="p">=</span><span class="s">oneshot</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh start</span>
<span class="py">ExecStop</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh stop</span>
<span class="py">ExecReload</span><span class="p">=</span><span class="s">/usr/local/bin/performance_governors.sh restart</span>
<span class="py">RemainAfterExit</span><span class="p">=</span><span class="s">yes</span>
<span class="c"># On failure, log and stay failed. Use ‘systemctl reset-failed performance_governors.service’ to clear.
</span><span class="py">Restart</span><span class="p">=</span><span class="s">no </span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target</span>
</code></pre></div></div>

<p><strong>3. Installation and Management Instructions</strong></p>

<ol>
  <li><strong>Install Prerequisites</strong> (if not already present):
The script uses standard utilities. <code class="language-plaintext highlighter-rouge">util-linux</code> (for <code class="language-plaintext highlighter-rouge">logger</code>) and <code class="language-plaintext highlighter-rouge">systemd</code> (for <code class="language-plaintext highlighter-rouge">systemd-cat</code> and service management) are typically core components of modern Linux distributions.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># On Debian/Ubuntu based systems, these are usually pre-installed.</span>
<span class="c"># sudo apt update</span>
<span class="c"># sudo apt install -y util-linux systemd </span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Save the Bash Script:</strong>
Copy the script code above and save it as <code class="language-plaintext highlighter-rouge">performance_governors.sh</code> in a temporary location.</p>
  </li>
  <li><strong>Install the Bash Script:</strong>
Move it to <code class="language-plaintext highlighter-rouge">/usr/local/bin/</code> and make it executable:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp </span>performance_governors.sh /usr/local/bin/performance_governors.sh
<span class="nb">sudo chmod </span>755 /usr/local/bin/performance_governors.sh
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Save the Systemd Service Unit:</strong>
Copy the systemd unit content above and save it as <code class="language-plaintext highlighter-rouge">performance_governors.service</code> in a temporary location.</p>
  </li>
  <li><strong>Install the Systemd Service Unit:</strong>
Move it to <code class="language-plaintext highlighter-rouge">/etc/systemd/system/</code>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp </span>performance_governors.service /etc/systemd/system/performance_governors.service
</code></pre></div>    </div>
  </li>
  <li><strong>Reload Systemd, Enable and Start the Service:</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">daemon-reload</code>: Makes systemd aware of the new service file.</li>
      <li><code class="language-plaintext highlighter-rouge">enable</code>: Ensures the service starts automatically on boot.</li>
      <li><code class="language-plaintext highlighter-rouge">start</code>: Starts the service immediately for the current session.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>performance_governors.service
<span class="nb">sudo </span>systemctl start performance_governors.service
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Verify Operation:</strong>
Check the service status and the governor settings:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status performance_governors.service
<span class="nb">sudo</span> /usr/local/bin/performance_governors.sh status
</code></pre></div>    </div>
    <p>You can also check individual governor files, e.g., <code class="language-plaintext highlighter-rouge">cat /sys/devices/system/cpu/cpufreq/policy0/scaling_governor</code>.</p>
  </li>
</ol>

<p><strong>4. Using the Script Manually</strong></p>

<p>Once installed, you can also manage the governors manually using the script:</p>
<ul>
  <li><strong>Set to performance:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh start</code></li>
  <li><strong>Restore defaults:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh stop</code></li>
  <li><strong>Check status:</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh status</code></li>
  <li><strong>Restart (stop then start):</strong> <code class="language-plaintext highlighter-rouge">sudo /usr/local/bin/performance_governors.sh restart</code></li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Ratpoison WM</title><link href="https://ib.bsb.br/ratpoison-wm/" rel="alternate" type="text/html" title="Ratpoison WM" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-09T11:32:43+00:00</updated><id>https://ib.bsb.br/ratpoison-wm</id><content type="html" xml:base="https://ib.bsb.br/ratpoison-wm/"><![CDATA[<h3 id="step-1-install-ratpoison-and-essential-tools"><strong>Step 1: Install Ratpoison and Essential Tools</strong></h3>

<p>First, update your package lists and install Ratpoison. The rpws (Ratpoison Workspace System) script is included with the ratpoison package in Debian Bullseye. Consider installing dmenu for application launching and a basic terminal like xterm or rxvt-unicode.<br />
<code class="language-plaintext highlighter-rouge">sudo apt update</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt upgrade</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt install ratpoison dmenu xterm # Or rxvt-unicode, etc.</code><br />
<code class="language-plaintext highlighter-rouge"># Install other optional utilities you might find useful:</code><br />
<code class="language-plaintext highlighter-rouge"># sudo apt install alsamixergui bpytop brightnessctl catfish dialog gmrun gsimplecal neofetch </code><br />
<code class="language-plaintext highlighter-rouge"># python3-psutil unclutter viewnior xdotool scrot </code><br />
<code class="language-plaintext highlighter-rouge"># fonts-dejavu fonts-terminus nitrogen picom # (nitrogen for wallpaper, picom for compositing)</code></p>

<h3 id="step-2-create-a-ratpoison-session-file-for-lightdm"><strong>Step 2: Create a Ratpoison Session File for LightDM</strong></h3>

<p>LightDM uses .desktop files located in /usr/share/xsessions/ to identify available sessions. Create one for Ratpoison:<br />
<code class="language-plaintext highlighter-rouge">sudo nano /usr/share/xsessions/ratpoison.desktop</code></p>

<p>Add the following content:<br />
<code class="language-plaintext highlighter-rouge">[Desktop Entry]</code><br />
<code class="language-plaintext highlighter-rouge">Version=1.0</code><br />
<code class="language-plaintext highlighter-rouge">Encoding=UTF-8</code><br />
<code class="language-plaintext highlighter-rouge">Name=Ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">Comment=Minimalist Tiling Window Manager</code><br />
<code class="language-plaintext highlighter-rouge">Exec=ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">TryExec=ratpoison</code><br />
<code class="language-plaintext highlighter-rouge">Icon=</code><br />
<code class="language-plaintext highlighter-rouge">Type=XSession</code></p>

<p>Save and close the file (e.g., Ctrl+X, then Y, then Enter in nano).</p>

<h3 id="step-3-configure-lightdm-for-ratpoison-autologin"><strong>Step 3: Configure LightDM for Ratpoison Autologin</strong></h3>

<p>To ensure LightDM launches Ratpoison for the autologin user, you need to update its configuration. Debian best practices suggest using configuration snippets in /etc/lightdm/lightdm.conf.d/. If you already have an autologin configuration file there (e.g., 50-autologin.conf), modify it. Otherwise, you can edit /etc/lightdm/lightdm.conf directly or create a new snippet.</p>

<ol>
  <li><strong>Edit or Create LightDM Configuration:</strong> For example, to create/edit a dedicated snippet:<br />
<code class="language-plaintext highlighter-rouge">sudo nano /etc/lightdm/lightdm.conf.d/60-autologin-ratpoison.conf</code><br />
Ensure the configuration specifies linaro and sets autologin-session to ratpoison. The autologin-session value should match the filename of the .desktop file created in Step 2 (without the .desktop extension).<br />
<code class="language-plaintext highlighter-rouge">[Seat:*]</code><br />
<code class="language-plaintext highlighter-rouge">autologin-user=linaro</code><br />
<code class="language-plaintext highlighter-rouge">autologin-user-timeout=0</code><br />
<code class="language-plaintext highlighter-rouge">autologin-session=ratpoison</code><br />
If you are editing an existing file that previously specified autologin-session=xfce (or similar), change it to ratpoison. Adding this line explicitly makes the autologin deterministic.</li>
  <li><strong>Note on Session Selection:</strong> While LightDM can sometimes remember the last session selected at the greeter, for an autologin setup, explicitly defining autologin-session is the most reliable method.</li>
</ol>

<h3 id="step-4-configure-ratpoison-ratpoisonrc"><strong>Step 4: Configure Ratpoison (~/.ratpoisonrc)</strong></h3>

<p>Create and configure the ~/.ratpoisonrc file in the home directory of the autologin user (i.e., /home/linaro/.ratpoisonrc). This file controls Ratpoison’s behavior, keybindings, and startup applications.<br />
<code class="language-plaintext highlighter-rouge"># Ensure you are the user ‘linaro’ or adjust path accordingly</code><br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.ratpoisonrc</code></p>

<p>Here’s a comprehensive example configuration:<br />
<code class="language-plaintext highlighter-rouge"># ~/.ratpoisonrc for linaro</code></p>
<section class="code-block-container" role="group" aria-label=" Code Block" data-filename="_code_block.txt" data-code="set fgcolor black
set bgcolor silver
set framesels 123456789
set font &quot;Intel One Mono:size=13&quot;
set border 0
set barborder 0
set barpadding 0 0
set winname title
set winfmt %n %s %c
set winliststyle column
set wingravity n 
set gravity center 
set transgravity center
set bargravity ne
set waitcursor 1
set padding 0 0 0 24
# leave space for bars, 24 for desktop 39 for laptop

startup_message off
escape Super_L
banish
unmanage rpbar

exec xrdb -merge /home/linaro/.Xresources
exec brightnessctl s 7
exec unclutter
exec rpws init 9 -k
exec rpbar
exec nm-applet &amp;

addhook switchwin exec rpbarsend
addhook switchframe exec rpbarsend
addhook switchgroup exec rpbarsend
addhook deletewindow exec rpbarsend
addhook titlechanged exec rpbarsend
addhook newwindow exec rpbarsend

definekey top M-Tab next
definekey top M-ISO_Left_Tab prev
definekey top S-Shift-1 exec rpws move1
definekey top S-Shift-2 exec rpws move2
definekey top S-Shift-3 exec rpws move3
definekey top S-Shift-4 exec rpws move4
definekey top S-Shift-5 exec rpws move5
definekey top S-Shift-6 exec rpws move6

# bind apostrophe exec zutty -saveLines 50000 -border 0 -font 10x20
# bind s-apostrophe exec zutty -saveLines 50000 -border 0 -font 12x24
# bind i exec zutty -saveLines 50000 -border 0 -font 10x20 -e wifish
# bind b exec zutty -saveLines 50000 -border 0 -font 10x20 -e bpytop
bind apostrophe exec x-terminal-emulator
bind s-apostrophe eval
bind i exec x-terminal-emulator -e wifish
bind b exec x-terminal-emulator -e bpytop
bind F1 only
bind F2 hsplit
bind F3 vsplit
bind F4 resize
bind e exec xnedit
bind s-e exec xnc
bind f exec thorium-browser
bind h exec menu
bind g exec gsimplecal
bind c exec write_clipboard_to_file.sh
bind s-c exec galculator
bind p exec xfce4-screenshooter
bind s-p exec scrot -s -e &#39;xclip -selection clipboard -t image/png -i $f &amp;&amp; rm $f&#39;
bind Prior exec thermal.sh
bind Next exec reverse-thermal.sh
bind r remove
bind t exec pcmanfm-qt --daemon-mode
bind v exec paste_clipboard_from_file.sh
bind s-v exec viewnior
bind w exec ratpoison -c &quot;select `ratpoison -c &quot;windows&quot; | dmenu | awk &#39;{print $1}&#39;`&quot;
bind z nextscreen
bind s-b exec vorta
bind s-k kill
bind s-x fselect
bind BackSpace undo
bind s-BackSpace redo
bind s-Down exchangedown
bind s-Up exchangeup
bind s-Left exchangeleft
bind s-Right exchangeright
bind s-Return prev
bind s-Tab focuslast
bind Tab focus
bind Escape abort
bind space exec dmenu_run
bind F9 exec amixer set Master 0
bind F10 exec amixer set Master 25%-
bind F11 exec amixer set Master 25%+
bind KP_0 exec xdotool key apostrophe key apostrophe key apostrophe
bind KP_Separator exec xdotool key quotedbl key quotedbl key quotedbl
bind KP_1 exec rpws 1
bind KP_2 exec rpws 2
bind KP_3 exec rpws 3
bind KP_4 exec rpws 4
bind KP_5 exec rpws 5
bind KP_6 exec rpws 6
bind KP_7 exec rpws 7
bind KP_8 exec rpws 8
bind KP_9 exec rpws 9
bind Home exec flatpak run com.github.tenderowl.frog
bind s-1 exec flatpak run org.telegram.desktop
bind s-2 exec flatpak run com.strlen.TreeSheets
bind s-3 exec flatpak run io.github.zaps166.QMPlay2
bind s-4 exec flatpak run com.github.ryonakano.reco" data-download-link="" data-download-label="Download ">
  <code class="language-">set fgcolor black
set bgcolor silver
set framesels 123456789
set font &quot;Intel One Mono:size=13&quot;
set border 0
set barborder 0
set barpadding 0 0
set winname title
set winfmt %n %s %c
set winliststyle column
set wingravity n 
set gravity center 
set transgravity center
set bargravity ne
set waitcursor 1
set padding 0 0 0 24
# leave space for bars, 24 for desktop 39 for laptop

startup_message off
escape Super_L
banish
unmanage rpbar

exec xrdb -merge /home/linaro/.Xresources
exec brightnessctl s 7
exec unclutter
exec rpws init 9 -k
exec rpbar
exec nm-applet &amp;

addhook switchwin exec rpbarsend
addhook switchframe exec rpbarsend
addhook switchgroup exec rpbarsend
addhook deletewindow exec rpbarsend
addhook titlechanged exec rpbarsend
addhook newwindow exec rpbarsend

definekey top M-Tab next
definekey top M-ISO_Left_Tab prev
definekey top S-Shift-1 exec rpws move1
definekey top S-Shift-2 exec rpws move2
definekey top S-Shift-3 exec rpws move3
definekey top S-Shift-4 exec rpws move4
definekey top S-Shift-5 exec rpws move5
definekey top S-Shift-6 exec rpws move6

# bind apostrophe exec zutty -saveLines 50000 -border 0 -font 10x20
# bind s-apostrophe exec zutty -saveLines 50000 -border 0 -font 12x24
# bind i exec zutty -saveLines 50000 -border 0 -font 10x20 -e wifish
# bind b exec zutty -saveLines 50000 -border 0 -font 10x20 -e bpytop
bind apostrophe exec x-terminal-emulator
bind s-apostrophe eval
bind i exec x-terminal-emulator -e wifish
bind b exec x-terminal-emulator -e bpytop
bind F1 only
bind F2 hsplit
bind F3 vsplit
bind F4 resize
bind e exec xnedit
bind s-e exec xnc
bind f exec thorium-browser
bind h exec menu
bind g exec gsimplecal
bind c exec write_clipboard_to_file.sh
bind s-c exec galculator
bind p exec xfce4-screenshooter
bind s-p exec scrot -s -e &#39;xclip -selection clipboard -t image/png -i $f &amp;&amp; rm $f&#39;
bind Prior exec thermal.sh
bind Next exec reverse-thermal.sh
bind r remove
bind t exec pcmanfm-qt --daemon-mode
bind v exec paste_clipboard_from_file.sh
bind s-v exec viewnior
bind w exec ratpoison -c &quot;select `ratpoison -c &quot;windows&quot; | dmenu | awk &#39;{print $1}&#39;`&quot;
bind z nextscreen
bind s-b exec vorta
bind s-k kill
bind s-x fselect
bind BackSpace undo
bind s-BackSpace redo
bind s-Down exchangedown
bind s-Up exchangeup
bind s-Left exchangeleft
bind s-Right exchangeright
bind s-Return prev
bind s-Tab focuslast
bind Tab focus
bind Escape abort
bind space exec dmenu_run
bind F9 exec amixer set Master 0
bind F10 exec amixer set Master 25%-
bind F11 exec amixer set Master 25%+
bind KP_0 exec xdotool key apostrophe key apostrophe key apostrophe
bind KP_Separator exec xdotool key quotedbl key quotedbl key quotedbl
bind KP_1 exec rpws 1
bind KP_2 exec rpws 2
bind KP_3 exec rpws 3
bind KP_4 exec rpws 4
bind KP_5 exec rpws 5
bind KP_6 exec rpws 6
bind KP_7 exec rpws 7
bind KP_8 exec rpws 8
bind KP_9 exec rpws 9
bind Home exec flatpak run com.github.tenderowl.frog
bind s-1 exec flatpak run org.telegram.desktop
bind s-2 exec flatpak run com.strlen.TreeSheets
bind s-3 exec flatpak run io.github.zaps166.QMPlay2
bind s-4 exec flatpak run com.github.ryonakano.reco</code>
</section>

<h3 id="step-5-configure-user-specific-x-settings-xsessionrc"><strong>Step 5: Configure User-Specific X Settings (~/.xsessionrc)</strong></h3>

<p>The ~/.xsessionrc file (in /home/linaro/) is executed when your X session starts via LightDM. It’s useful for setting environment variables or running commands like xrandr before Ratpoison loads. This file must be executable.<br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.xsessionrc</code></p>

<p>Add your configurations, for example:<br />
<code class="language-plaintext highlighter-rouge">#!/bin/sh</code><br />
<code class="language-plaintext highlighter-rouge"># ~/.xsessionrc for linaro</code></p>

<p><code class="language-plaintext highlighter-rouge"># Exit immediately if a command exits with a non-zero status.</code><br />
<code class="language-plaintext highlighter-rouge">set -e</code></p>

<p><code class="language-plaintext highlighter-rouge"># Example: Set screen resolution with xrandr</code><br />
<code class="language-plaintext highlighter-rouge"># xrandr —output DP-1 —mode 1920x1080 —rate 60</code><br />
<code class="language-plaintext highlighter-rouge"># xrandr —output HDMI-1 —primary —mode 2560x1080 —above DP-1</code></p>

<p><code class="language-plaintext highlighter-rouge"># Example: Start a key remapper or other background utility</code><br />
<code class="language-plaintext highlighter-rouge"># xmodmap /home/linaro/.Xmodmap</code></p>

<p><code class="language-plaintext highlighter-rouge"># Example: Set an environment variable</code><br />
<code class="language-plaintext highlighter-rouge"># export QT_QPA_PLATFORMTHEME=qt5ct</code></p>

<p>Make it executable:<br />
<code class="language-plaintext highlighter-rouge">chmod +x /home/linaro/.xsessionrc</code></p>

<h3 id="step-6-optional-but-recommended-remove-xfce4"><strong>Step 6: (Optional but Recommended) Remove XFCE4</strong></h3>

<p>If you no longer need XFCE4 and want to free up disk space, you can remove its packages. <strong>Be cautious</strong> and review the packages to be removed before confirming.<br />
<code class="language-plaintext highlighter-rouge"># Identify XFCE4 meta-packages and components</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt purge xfce4 xfce4-goodies libxfce4ui-utils xfce4-panel xfce4-session xfce4-settings xfconf xfdesktop4 xfwm4 thunar mousepad parole ristretto</code><br />
<code class="language-plaintext highlighter-rouge"># This list might need adjustment based on your specific XFCE4 installation.</code><br />
<code class="language-plaintext highlighter-rouge"># Always review the list of packages apt proposes to remove.</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt autoremove</code><br />
<code class="language-plaintext highlighter-rouge">sudo apt clean</code></p>

<h3 id="step-7-verify-the-setup"><strong>Step 7: Verify the Setup</strong></h3>

<p>Reboot your system or restart LightDM to apply changes:<br />
<code class="language-plaintext highlighter-rouge">sudo systemctl restart lightdm</code></p>

<p>Your system should automatically log in linaro directly into a Ratpoison session.<br />
<strong>Troubleshooting:</strong></p>

<ul>
  <li>LightDM logs: /var/log/lightdm/lightdm.log and seat-specific logs (e.g., /var/log/lightdm/seat0-greeter.log).</li>
  <li>Xorg logs: ~/.local/share/xorg/Xorg.0.log (for user sessions) or /var/log/Xorg.0.log.</li>
  <li>Session errors: Check ~/.xsession-errors (in /home/linaro/) for issues from ~/.xsessionrc or session startup.</li>
</ul>

<h3 id="alternative-manual-start-with-startx-if-not-using-lightdm"><strong>Alternative: Manual Start with startx (If Not Using LightDM)</strong></h3>

<p>If you choose not to use LightDM or wish to start Ratpoison manually from a TTY (console login):</p>

<ol>
  <li>Ensure xinit is installed: sudo apt install xinit.</li>
  <li>
    <p>Create or edit ~/.xinitrc (in /home/linaro/.xinitrc):<br />
<code class="language-plaintext highlighter-rouge">nano /home/linaro/.xinitrc</code><br />
Add:<br />
<code class="language-plaintext highlighter-rouge">#!/bin/sh</code><br />
<code class="language-plaintext highlighter-rouge"># ~/.xinitrc for linaro</code></p>

    <p><code class="language-plaintext highlighter-rouge"># Source user-specific X settings if desired (contents similar to .xsessionrc)</code><br />
<code class="language-plaintext highlighter-rouge"># if [ -f /home/linaro/.xprofile_custom ]; then</code><br />
<code class="language-plaintext highlighter-rouge">#  . /home/linaro/.xprofile_custom</code><br />
<code class="language-plaintext highlighter-rouge"># fi</code><br />
<code class="language-plaintext highlighter-rouge"># For xrandr, etc., you might call them directly here or source .xsessionrc</code><br />
<code class="language-plaintext highlighter-rouge"># if [ -f /home/linaro/.xsessionrc ]; then</code><br />
<code class="language-plaintext highlighter-rouge">#   . /home/linaro/.xsessionrc</code><br />
<code class="language-plaintext highlighter-rouge"># fi</code></p>

    <p><code class="language-plaintext highlighter-rouge">exec ratpoison</code></p>
  </li>
  <li>Make it executable: chmod +x /home/linaro/.xinitrc.</li>
  <li>Log in to a TTY as linaro and run startx.</li>
</ol>

<p>This approach bypasses LightDM. The primary focus of this guide is the LightDM autologin method.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">installing Incus OS</title><link href="https://ib.bsb.br/installing-incus-os/" rel="alternate" type="text/html" title="installing Incus OS" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T10:27:34+00:00</updated><id>https://ib.bsb.br/installing-incus-os</id><content type="html" xml:base="https://ib.bsb.br/installing-incus-os/"><![CDATA[<p><strong>I. Introduction to Incus OS and Intel N97 Deployment</strong></p>

<p>Incus OS is a minimal, immutable operating system designed specifically for running Incus instances (virtual machines and system containers). It prioritizes security through features like UEFI Secure Boot integration, dm-verity for disk integrity, TPM-based disk encryption, and an A/B update mechanism. Incus, a modern system container and virtual machine manager, offers a powerful platform for developing and hosting applications. Deploying Incus OS directly onto bare metal ensures maximum performance and control, transforming the host into a dedicated Incus appliance. Incus OS is designed to take advantage of these hardware security mechanisms to create a “locked down environment”.<code class="language-plaintext highlighter-rouge">2</code></p>

<p>The Intel N97 processor, part of the Alder Lake-N series, is a 64-bit, quad-core CPU with features suitable for lightweight server tasks, including virtualization.<code class="language-plaintext highlighter-rouge">1</code> Its low power consumption (12W TDP) makes it an attractive option for always-on home servers or small-scale deployments.<code class="language-plaintext highlighter-rouge">1</code> This guide focuses on a bare-metal x64 host system with an Intel N97 processor.</p>

<p><strong>II. Crucial Preliminary Considerations</strong></p>

<ul>
  <li><strong>Experimental Stage:</strong> Incus OS is in early development. Users should expect potential rough edges and be prepared for troubleshooting. This guide is primarily for testing and evaluation purposes.</li>
  <li><strong>Hardware Requirements:</strong>
    <ul>
      <li><strong>x64 Architecture:</strong> The Intel N97 meets this.</li>
      <li><strong>TPM (Trusted Platform Module) 2.0:</strong> This is <strong>mandatory</strong>. A critical point is that systems without a TPM will be flagged by the Incus OS UI, and installation may fail or result in a non-functional state.</li>
      <li><strong>UEFI Firmware:</strong> Incus OS is designed for UEFI systems.</li>
      <li><strong>RAM and Storage:</strong> A minimum of 8GB RAM is recommended (as used in a VM test); 16GB or more for multiple or larger instances. An NVMe or SATA SSD is recommended for the target disk. A separate USB drive is needed for installation media.</li>
    </ul>
  </li>
  <li><strong>Backup Existing Data:</strong> The installation process will erase the target disk. <strong>Ensure all important data from the target N97 machine is backed up before proceeding.</strong></li>
  <li><strong>Separate Linux Machine:</strong> Needed for preparing the USB installation media and seed configuration files.</li>
  <li><strong>Flasher Tool:</strong> A “flasher tool” to simplify image writing and seed creation is reportedly planned but may not yet be available. This guide describes the manual method.</li>
</ul>

<p><strong>III. Phase 1: Host System UEFI/BIOS Configuration (Intel N97)</strong></p>

<p>Correct BIOS/UEFI configuration is paramount for a successful Incus OS installation and for enabling its security and virtualization features.</p>

<ul>
  <li><strong>Understanding the Intel N97 Platform for Incus OS:</strong>
Before proceeding with the installation, it is crucial to understand the capabilities and potential limitations of the Intel N97 platform in the context of running Incus OS.
    <ul>
      <li><strong>Key Intel N97 Features Relevant to Virtualization and Security:</strong> The Intel N97 processor incorporates several hardware features that are essential or beneficial for running a secure and efficient virtualization host with Incus OS. These are foundational to the secure “enclosure” concept.
        <ul>
          <li><strong>Table 1: Intel N97 Key Virtualization and Security Features</strong>
| Feature Name                                            | Status on Intel N97 (Source) | Criticality/Role for Incus OS Deployment                                                                                                     |
| :—————————————————— | :————————— | :——————————————————————————————————————————————- |
| Intel® Virtualization Technology (VT-x)                 | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Essential for all virtualization; enables the CPU to run multiple operating systems (VMs) and enhances container isolation.                  |
| Intel® Virtualization Technology for Directed I/O (VT-d) | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Crucial for PCI device passthrough to Incus virtual machines, allowing VMs direct access to hardware like GPUs, network cards, or storage controllers. |
| Intel® VT-x with Extended Page Tables (EPT)             | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Enhances VM memory management performance by reducing hypervisor overhead, leading to more efficient virtualization.                         |
| Intel® Boot Guard                                       | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Provides hardware-based boot integrity, forming a root of trust. This is a foundational element for Secure Boot, which Incus OS is designed to leverage.<code class="language-plaintext highlighter-rouge">2</code> |
| Intel® OS Guard                                         | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Protects the operating system kernel from modification by malicious software, contributing to the overall security of the Incus OS environment. |
| TPM 2.0 Support                                         | Typically present <code class="language-plaintext highlighter-rouge">3</code>        | Used by Incus OS for features like measured boot (verifying boot components) and TPM-backed full-disk encryption, enhancing system security.<code class="language-plaintext highlighter-rouge">2</code> |
| 64-bit Instruction Set                                  | Yes <code class="language-plaintext highlighter-rouge">1</code>                      | Mandatory for running modern operating systems, including Incus OS and the guest operating systems within Incus instances.                   |
The presence of these features, confirmed by Intel’s official specifications <code class="language-plaintext highlighter-rouge">1</code> and motherboard documentation (e.g., ASRock NUC-N97 indicating “TPM 2.0 onboard IC” <code class="language-plaintext highlighter-rouge">3</code>), ensures that the N97 CPU meets the fundamental hardware requirements for a robust Incus OS deployment.</li>
        </ul>
      </li>
      <li><strong>Potential Performance Considerations and Platform Variability:</strong>
        <ul>
          <li><strong>Single-Channel Memory Architecture:</strong> The Intel N97 processor supports only a single memory channel.<code class="language-plaintext highlighter-rouge">1</code> Motherboards based on this CPU, such as the ASRock NUC-N97, also specify single-channel DDR4 3200 MHz technology.<code class="language-plaintext highlighter-rouge">3</code> This could be a performance bottleneck for memory-bandwidth intensive Incus workloads. Using the fastest supported RAM type available for the specific N97 board can help maximize available bandwidth.</li>
          <li><strong>“Embedded” Nature and BIOS Variability:</strong> The Intel N97 is categorized under “Intel® Processor N-series” with a “Vertical Segment” of “Embedded”.<code class="language-plaintext highlighter-rouge">1</code> This can lead to greater variability in BIOS/UEFI implementations across different N97-based systems. User experiences with GMKtec N97 Mini PCs, for instance, have highlighted issues with BIOS interfaces and USB boot behavior.<code class="language-plaintext highlighter-rouge">4</code> The low power consumption, however, is a significant advantage.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Accessing BIOS/UEFI Setup:</strong>
This is typically done by pressing a specific key (commonly F2, Delete, ESC, or F10 <code class="language-plaintext highlighter-rouge">6</code>) immediately after powering on the system. The exact key can vary. For instance, the ASRock NUC-N97 motherboard manual outlines its BIOS structure.<code class="language-plaintext highlighter-rouge">3</code></p>
  </li>
  <li><strong>Essential Settings to Configure:</strong>
Once inside the BIOS/UEFI setup utility, several settings must be verified and adjusted.
    <ul>
      <li><strong>Table 2: Recommended BIOS/UEFI Settings for Incus OS on Intel N97</strong>
| Setting Category      | Typical Setting Name(s) in BIOS (and common variations)        | Recommended Value for Incus OS                                              | Rationale &amp; Importance                                                                                                                               |
| :——————– | :————————————————————- | :————————————————————————– | :————————————————————————————————————————————————— |
| Load Defaults         | Load Optimized Defaults, Load UEFI Defaults                    | Execute this first                                                          | Establishes a clean, known baseline. Intel NUCs often use F9 for this.<code class="language-plaintext highlighter-rouge">6</code>                                                                              |
| Virtualization        | Intel® Virtualization Technology, VT-x, Virtualization, SVM Mode | Enabled                                                                     | Core requirement for Incus. Found in “CPU Configuration”.<code class="language-plaintext highlighter-rouge">3</code> N97 supports VT-x.<code class="language-plaintext highlighter-rouge">1</code>                                                                      |
| I/O Virtualization    | Intel® VT-d, Directed I/O, IOMMU                               | Enabled                                                                     | Essential for PCIe device passthrough. Often in “Chipset Configuration.” N97 supports VT-d.<code class="language-plaintext highlighter-rouge">1</code>                                                         |
| TPM                   | Trusted Platform Module, TPM Device, Security Chip, fTPM       | Enabled &amp; Activated (or “Available” / “Owned” depending on BIOS)            | Crucial for Incus OS security (measured boot, disk encryption).<code class="language-plaintext highlighter-rouge">2</code> Look for “Trusted Computing”.<code class="language-plaintext highlighter-rouge">3</code> ASRock NUC-N97 has onboard TPM 2.0 IC.<code class="language-plaintext highlighter-rouge">3</code>          |
| Secure Boot           | Secure Boot Control, Secure Boot                               | Enabled (with keys cleared for “Setup Mode”)                                | Incus OS leverages Secure Boot.<code class="language-plaintext highlighter-rouge">2</code> For first boot, system must be in “Setup Mode” for key enrollment. Found in “Security” or “Boot” sections.<code class="language-plaintext highlighter-rouge">3</code> |
| CSM                   | Compatibility Support Module                                   | Disabled                                                                    | Ensure pure UEFI mode.                                                                                                                               |
| Boot Priority / Order | Boot Option #1, Fixed Boot Order Priorities, Boot Sequence     | 1st: USB Drive (for installation), Then: Internal SSD/NVMe (for installed OS) | To boot from installer, then installed system. N97 USB Boot Quirks: Some N97 BIOSes may require disabling boot priority options to recognize USB.<code class="language-plaintext highlighter-rouge">5</code> |
| Hyper-Threading       | Intel® Hyper-Threading Technology, Logical Processor           | N/A or Disabled/Auto                                                        | Intel N97 does not support Hyper-Threading.<code class="language-plaintext highlighter-rouge">1</code>                                                                                                        |
| Intel SGX             | Intel® Software Guard Extensions                               | Disabled or Default                                                         | Generally not required for Incus OS.                                                                                                                 |</li>
      <li><strong>Detailed Configuration Steps:</strong>
        <ol>
          <li><strong>Load Optimized Defaults:</strong> Navigate to “Exit” or “Save &amp; Exit” and select “Load Optimized Defaults.” Intel NUC systems often use F9.<code class="language-plaintext highlighter-rouge">6</code></li>
          <li><strong>Enable Intel® Virtualization Technology (VT-x):</strong> Critical. Typically under “CPU Configuration” or “Advanced.” Set to <code class="language-plaintext highlighter-rouge">Enabled</code>. The Intel N97 supports VT-x.<code class="language-plaintext highlighter-rouge">1</code></li>
          <li><strong>Enable Intel® VT-d (Virtualization Technology for Directed I/O):</strong> If separate, also set to <code class="language-plaintext highlighter-rouge">Enabled</code>. Vital for PCIe passthrough. The N97 supports VT-d.<code class="language-plaintext highlighter-rouge">1</code></li>
          <li><strong>Enable and Configure TPM (Trusted Platform Module):</strong> Locate “TPM” or “Trusted Computing” settings.<code class="language-plaintext highlighter-rouge">3</code> Ensure TPM 2.0 is <code class="language-plaintext highlighter-rouge">Enabled</code> and <code class="language-plaintext highlighter-rouge">Activated</code>. For Incus OS, it must be available for the OS to utilize for features like “TPM measured” boot and “storage encrypted using that TPM state”.<code class="language-plaintext highlighter-rouge">2</code></li>
          <li><strong>Configure Secure Boot:</strong> Find “Secure Boot” options.<code class="language-plaintext highlighter-rouge">3</code> Set Secure Boot to <code class="language-plaintext highlighter-rouge">Enabled</code>. <strong>Crucially, for the initial installation, set Secure Boot to “Setup Mode.”</strong> This often involves an option to “Clear Secure Boot Keys,” “Delete All Secure Boot Variables,” or “Reset to Setup Mode.” This allows Incus OS to enroll its own keys on first boot, as stated in its <code class="language-plaintext highlighter-rouge">README.md</code>: “On first boot, it will automatically add the relevant Secure Boot key (requires the system be in setup mode).”</li>
          <li><strong>Disable CSM (Compatibility Support Module):</strong> Ensure the system is in pure UEFI mode, not legacy BIOS compatibility mode.</li>
          <li><strong>Set Boot Order/Priority (Addressing N97 USB Boot Issues):</strong> Configure the USB drive as the primary boot device for installation.
            <ul>
              <li><strong>Common N97 USB Boot Challenges:</strong> Users of N97-based systems have reported difficulties booting from USB.<code class="language-plaintext highlighter-rouge">5</code></li>
              <li><strong>Troubleshooting USB Boot:</strong> First, try setting USB as the first boot option. If it fails, use the system’s boot menu (often F7, F10, F11, F12, or ESC – F7 noted for a GMKtec N97 <code class="language-plaintext highlighter-rouge">5</code>). A specific N97 workaround involved setting both boot priority options to “disabled” to allow USB boot.<code class="language-plaintext highlighter-rouge">5</code></li>
            </ul>
          </li>
          <li><strong>Review Conflicting/Unnecessary Settings:</strong>
            <ul>
              <li><strong>Virtualization MUST Be Enabled:</strong> Advice to “disable Virtualization - potential for attack”<code class="language-plaintext highlighter-rouge">8</code> is incorrect for an Incus host. VT-x and VT-d are fundamental.</li>
              <li><strong>Hyper-Threading:</strong> N/A for Intel N97.<code class="language-plaintext highlighter-rouge">1</code></li>
              <li><strong>Intel SGX:</strong> Leaving at default (often disabled or auto) is appropriate.</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li><strong>Saving Changes:</strong>
Navigate to “Exit” or “Save &amp; Exit,” select “Save Changes and Exit.” Intel NUCs typically use F10.<code class="language-plaintext highlighter-rouge">6</code></li>
</ul>

<p><strong>IV. Phase 2: Preparing Incus OS Installation Media &amp; Seed Configuration (on Separate Linux Machine)</strong></p>

<ul>
  <li><strong>Downloading the Official Incus OS Image:</strong>
    <ol>
      <li>Obtain the official Incus OS installation image from trusted sources, typically the official Incus project website or the Incus GitHub repository’s “Releases” section.<code class="language-plaintext highlighter-rouge">2</code> Download the latest raw disk image for x86-64 (e.g., <code class="language-plaintext highlighter-rouge">IncusOS_VERSION.raw.gz</code>).</li>
      <li>Decompress the image:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">gzip</span> <span class="nt">-d</span> IncusOS_VERSION.raw.gz
</code></pre></div>        </div>
        <p>This results in a <code class="language-plaintext highlighter-rouge">.raw</code> file (e.g., <code class="language-plaintext highlighter-rouge">IncusOS_VERSION.raw</code>). For clarity, this guide may refer to it as <code class="language-plaintext highlighter-rouge">incus-os-installer.raw</code>.</p>
      </li>
      <li><strong>(Recommended) Verifying Image Integrity:</strong> If checksums (e.g., SHA256) are provided, download the checksum file and verify the downloaded image using a utility like <code class="language-plaintext highlighter-rouge">sha256sum incus-os-installer.raw</code> and comparing the output.</li>
    </ol>
  </li>
  <li><strong>Preparing the USB Installation Drive:</strong>
    <ol>
      <li><strong>USB Drive Selection (Size):</strong> Use a USB drive of <strong>at least 64GB</strong>. This recommendation stems from observations that the Incus OS installer (specifically components like <code class="language-plaintext highlighter-rouge">systemd-repart</code>) might have expectations about minimum media size for its partitioning operations, beyond just fitting the OS image itself.</li>
      <li><strong>Identify USB Device Name:</strong> Insert the USB drive. Identify its device name (e.g., <code class="language-plaintext highlighter-rouge">/dev/sdb</code>, <code class="language-plaintext highlighter-rouge">/dev/sdc</code>) using <code class="language-plaintext highlighter-rouge">lsblk</code> or <code class="language-plaintext highlighter-rouge">sudo fdisk -l</code>. <strong>Be extremely careful to choose the correct device, as the next step will overwrite it.</strong></li>
      <li><strong>Writing the Image to USB Drive:</strong>
        <ul>
          <li><strong>Using <code class="language-plaintext highlighter-rouge">dd</code> (Linux/macOS - Use with Extreme Caution):</strong>
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>incus-os-installer.raw <span class="nv">of</span><span class="o">=</span>/dev/sdX <span class="nv">bs</span><span class="o">=</span>4M <span class="nv">status</span><span class="o">=</span>progress <span class="nv">conv</span><span class="o">=</span>fsync
</code></pre></div>            </div>
            <p>Replace <code class="language-plaintext highlighter-rouge">/dev/sdX</code> with your USB device path.</p>
          </li>
          <li><strong>Using Graphical Tools:</strong> Balena Etcher (cross-platform) or Rufus (Windows) <code class="language-plaintext highlighter-rouge">5</code> are user-friendly alternatives. For Rufus, ensure “Partition scheme” is “GPT” and “Target system” is “UEFI (non CSM)”.</li>
        </ul>
      </li>
      <li><strong>(Optional) <code class="language-plaintext highlighter-rouge">truncate</code> Raw Image (Primarily for VM testing):</strong> In some VM test scenarios where the <code class="language-plaintext highlighter-rouge">.raw</code> file itself acts as the disk, if boot errors related to partition fitting occurred, truncating the <code class="language-plaintext highlighter-rouge">.raw</code> file to a larger size (e.g., 50GB) <em>before</em> writing it to the virtual disk was a workaround. This is less common for physical USB preparation if the USB stick itself is sufficiently large.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># truncate -s 50G incus-os-installer.raw # Optional, context-dependent</span>
</code></pre></div>        </div>
      </li>
      <li><strong>(Optional) GPT Table Relocation for Large USBs:</strong> If the USB is much larger than the image, and boot issues occur, the backup GPT table might be misplaced. Use <code class="language-plaintext highlighter-rouge">sgdisk</code> on the USB drive (<code class="language-plaintext highlighter-rouge">x</code> then <code class="language-plaintext highlighter-rouge">e</code> then <code class="language-plaintext highlighter-rouge">w</code>) to relocate it to the end of the physical device.</li>
    </ol>
  </li>
  <li><strong>Creating Seed Configuration Files:</strong>
Incus OS uses a seed configuration (a tarball) to automate setup. The exact filenames expected within the tarball (<code class="language-plaintext highlighter-rouge">install.yaml</code>, <code class="language-plaintext highlighter-rouge">incus.yaml</code>, <code class="language-plaintext highlighter-rouge">network.yaml</code>) should be verified against the official Incus OS documentation for the specific version you are installing, as these can be implementation details.
    <ol>
      <li><strong>Create <code class="language-plaintext highlighter-rouge">install.yaml</code> (Installer Options):</strong>
        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># install.yaml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1.0"</span> 
<span class="na">force_install</span><span class="pi">:</span> <span class="kc">true</span> 
<span class="na">force_reboot</span><span class="pi">:</span> <span class="kc">false</span> 
<span class="c1"># target: </span>
<span class="c1">#   id: "ata-YOUR_DISK_MODEL_SERIAL" </span>
</code></pre></div>        </div>
      </li>
      <li><strong>Create <code class="language-plaintext highlighter-rouge">incus.yaml</code> (Incus Daemon Configuration):</strong>
```yaml
        <h1 id="incusyaml">incus.yaml</h1>
        <p>version: “1.0” 
apply_defaults: true 
certificates:</p>
        <ul>
          <li>name: “my-remote-admin-client” 
type: “client”
certificate: |
  YOUR_SINGLE_LINE_BASE64_ENCODED_DER_CERTIFICATE_CONTENT_HERE
description: “Certificate for my remote admin machine”
```</li>
          <li><strong>Generating Client Certificate in Correct Format (CRITICAL):</strong>
The certificate content must be <strong>Base64 encoded DER format, WITHOUT PEM headers/footers</strong>.
To convert a PEM client certificate (e.g., <code class="language-plaintext highlighter-rouge">client.crt</code>):
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 <span class="nt">-in</span> client.crt <span class="nt">-outform</span> DER | <span class="nb">base64</span> <span class="nt">-w0</span>
</code></pre></div>            </div>
            <p>Paste the resulting single line of Base64 text into the <code class="language-plaintext highlighter-rouge">certificate:</code> field.</p>
          </li>
        </ul>
      </li>
      <li><strong>(Optional) Create <code class="language-plaintext highlighter-rouge">network.yaml</code> (Static Network Configuration):</strong>
If omitted, Incus OS attempts DHCP. Example:
```yaml
        <h1 id="networkyaml">network.yaml</h1>
        <p>version: “1.0”
dns:
  hostname: “incus-n97”
interfaces:</p>
        <ul>
          <li>name: “br0” 
hwaddr: “XX:XX:XX:XX:XX:XX” # Physical NIC MAC
addresses: [“192.168.1.50/24”] 
routes:
            <ul>
              <li>to: “0.0.0.0/0” 
via: “192.168.1.1”
```</li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
  <li><strong>Packaging Seed Data and Writing to USB Media:</strong>
    <ol>
      <li><strong>Create Tarball:</strong> A common name for the tarball in test scripts is <code class="language-plaintext highlighter-rouge">seed.install.tar</code>.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-cvf</span> seed.install.tar install.yaml incus.yaml <span class="c"># Add network.yaml if used</span>
</code></pre></div>        </div>
      </li>
      <li><strong>Write the Seed Tarball to the USB Drive:</strong>
This uses a specific offset. Build scripts often use an offset of <code class="language-plaintext highlighter-rouge">4196352</code> with a block size of <code class="language-plaintext highlighter-rouge">512</code>. This offset, derived from project build scripts, typically places the seed data at the beginning of a dedicated seed partition located after the ESP (often 2GB in size).
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>seed.install.tar <span class="nv">of</span><span class="o">=</span>/dev/sdX <span class="nv">seek</span><span class="o">=</span>4196352 <span class="nv">bs</span><span class="o">=</span>512 <span class="nv">conv</span><span class="o">=</span>notrunc
</code></pre></div>        </div>
        <p>(Replace <code class="language-plaintext highlighter-rouge">/dev/sdX</code> with your USB device name). <code class="language-plaintext highlighter-rouge">conv=notrunc</code> is vital.</p>
      </li>
    </ol>
  </li>
</ul>

<p><strong>V. Phase 3: Incus OS Installation on the Target Host (Intel N97)</strong></p>

<ul>
  <li>
    <p><strong>Final UEFI/BIOS Boot Configuration for USB Boot:</strong>
Ensure the USB drive is the primary boot device, Secure Boot is enabled and in Setup Mode, and TPM 2.0 is enabled.</p>
  </li>
  <li>
    <p><strong>Booting from USB and Secure Boot Enrollment:</strong>
The system should boot from the USB. On first boot with Secure Boot in Setup Mode, Incus OS will attempt to enroll its Secure Boot keys. This might involve one or two automatic reboots.</p>
  </li>
  <li>
    <p><strong>Navigating the Incus OS Installer:</strong>
A TUI will likely appear. The installer reads the seed data, identifies the target disk, partitions it, and copies OS files automatically. It’s expected to handle full-disk encryption (leveraging TPM <code class="language-plaintext highlighter-rouge">2</code>) and dm-verity <code class="language-plaintext highlighter-rouge">2</code> automatically.</p>
  </li>
  <li>
    <p><strong>Installation Process Details:</strong>
The installer partitions and formats the target disk, copies Incus OS system files, installs the bootloader to the ESP, and configures the base system, potentially interacting with the TPM and enrolling Secure Boot keys.<code class="language-plaintext highlighter-rouge">2</code></p>
  </li>
  <li>
    <p><strong>Completion and Reboot:</strong>
Upon completion, a message will prompt for media removal (unless <code class="language-plaintext highlighter-rouge">force_reboot: true</code>). Remove the USB installation drive. Reboot manually if needed.</p>
  </li>
</ul>

<p><strong>VI. Phase 4: First Boot, System Verification, and Initial Incus Setup</strong></p>

<ul>
  <li>
    <p><strong>First Boot into Installed Incus OS:</strong>
(Optional: Enter UEFI/BIOS and set your internal disk as primary boot device). The system boots from the internal disk. <code class="language-plaintext highlighter-rouge">incus-osd</code> (the Incus OS daemon) starts and applies the seed configuration. If <code class="language-plaintext highlighter-rouge">apply_defaults: true</code> was set, it initializes ZFS, default Incus networking, and trusts your client certificate. If no <code class="language-plaintext highlighter-rouge">network.yaml</code> was provided, Incus OS itself attempts DHCP. It may download applications like Incus itself.</p>
  </li>
  <li><strong>Retrieving and Storing Disk Encryption Recovery Key (Vital):</strong>
The root filesystem is encrypted. Retrieve the recovery key.
From your remote client (after establishing access):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus query my-n97-incus-os:/1.0/system/encryption
</code></pre></div>    </div>
    <p>The JSON output will contain <code class="language-plaintext highlighter-rouge">config.recovery_keys</code>. <strong>Store these keys securely offline.</strong> A TUI warning on the console may persist until retrieved.</p>
  </li>
  <li><strong>Verifying Incus Remote Access:</strong>
Find the Incus OS host’s IP. From your client machine:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus remote add my-n97-incus-os &lt;IP_OF_INCUS_OS_HOST&gt;:8443
<span class="c"># You will likely be prompted to accept the server's certificate fingerprint.</span>
incus list my-n97-incus-os:
</code></pre></div>    </div>
  </li>
  <li><strong>Verifying Incus Service Status:</strong>
<code class="language-plaintext highlighter-rouge">incus-osd</code> is the Incus OS management daemon, which in turn manages the main <code class="language-plaintext highlighter-rouge">incus</code> service. Check the status of the primary Incus service (e.g., <code class="language-plaintext highlighter-rouge">incus.service</code> or <code class="language-plaintext highlighter-rouge">incusd.service</code> - consult Incus OS documentation for the exact name):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status incus.service <span class="c"># Or the appropriate service name</span>
<span class="c"># Check logs if needed:</span>
<span class="nb">sudo </span>journalctl <span class="nt">-u</span> incus.service <span class="c"># Or the appropriate service name</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Initializing the Incus Service (Relationship to Seed):</strong>
If <code class="language-plaintext highlighter-rouge">apply_defaults: true</code> was used in <code class="language-plaintext highlighter-rouge">incus.yaml</code> and the seed was processed successfully, the Incus daemon (storage pools, default network, etc.) should be automatically configured. In this case, running <code class="language-plaintext highlighter-rouge">sudo incus admin init</code> is generally <strong>not required</strong> for the initial setup.
The <code class="language-plaintext highlighter-rouge">incus admin init</code> command is used for:
    <ul>
      <li>Manual initial configuration if <code class="language-plaintext highlighter-rouge">apply_defaults: false</code> was set or if the seed was not used/failed.</li>
      <li>Reconfiguring an existing Incus setup.</li>
      <li>Advanced or custom setups beyond the seed defaults.
If needed, <code class="language-plaintext highlighter-rouge">sudo incus admin init</code> interactively configures clustering, storage pools (ZFS, Btrfs, etc.), network bridges, and remote access settings.</li>
    </ul>
  </li>
</ul>

<p><strong>VII. Phase 5: Extended Verification - Launching Your First Incus Instance</strong></p>

<ul>
  <li><strong>Listing Available Images:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus image list images: <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Launching Test Instances:</strong>
    <ul>
      <li><strong>System Container:</strong> <code class="language-plaintext highlighter-rouge">incus launch images:alpine/edge test-alpine-container -r my-n97-incus-os</code></li>
      <li><strong>OCI Container:</strong> <code class="language-plaintext highlighter-rouge">incus launch oci-docker:nginx nginx-oci-test -r my-n97-incus-os</code></li>
      <li><strong>Virtual Machine:</strong> <code class="language-plaintext highlighter-rouge">incus launch images:ubuntu/22.04 test-ubuntu-vm --vm -r my-n97-incus-os</code></li>
    </ul>
  </li>
  <li><strong>Checking Instance Status:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus list <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Accessing Instances:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus <span class="nb">exec </span>test-alpine-container <span class="nt">--</span> sh <span class="nt">-r</span> my-n97-incus-os
</code></pre></div>    </div>
  </li>
  <li><strong>Basic Network Test from Within an Instance:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping <span class="nt">-c</span> 3 google.com
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>VIII. Phase 6: Troubleshooting</strong></p>

<ul>
  <li><strong>TPM Mandatory:</strong> No TPM 2.0 will lead to failure or a non-functional state.</li>
  <li><strong>Secure Boot Setup Mode:</strong> Essential for initial key enrollment.</li>
  <li><strong>Seed File Errors:</strong> YAML syntax (indentation) and certificate format (Base64 DER) are common pitfalls.</li>
  <li><strong>USB Boot Problems:</strong>
    <ul>
      <li>Check BIOS boot order, try boot menu (F7, F10, etc.).<code class="language-plaintext highlighter-rouge">5</code></li>
      <li>N97 specific: Try setting boot priority options to “disabled” in BIOS.<code class="language-plaintext highlighter-rouge">5</code></li>
      <li>Recreate USB media, try different tools.</li>
      <li>For very large USBs, consider <code class="language-plaintext highlighter-rouge">sgdisk</code> to relocate backup GPT.</li>
      <li>Installer might not clean up USB stick partitions after an install (re-image USB for new attempt).</li>
    </ul>
  </li>
  <li><strong>Image Size Issues:</strong>
    <ul>
      <li>USB stick must be large enough (&gt;=64GB recommended due to installer repart behavior).</li>
      <li>Target internal disk should be sufficiently large (e.g., 50GB+).</li>
    </ul>
  </li>
  <li><strong>GitHub Rate Limiting:</strong> During first boot, Incus OS might download components. Repeated attempts from the same IP can hit rate limits.</li>
  <li><strong>System Overheating (N97 Mini PCs):</strong> Ensure adequate ventilation. Check for BIOS updates for thermal management.<code class="language-plaintext highlighter-rouge">4</code></li>
  <li><strong>Installer Failures:</strong> Check disk/network connections. Try DHCP if static IP fails. Consult Incus OS release notes.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">incusd</code> Service Failures:</strong> Check logs. Review seed files or <code class="language-plaintext highlighter-rouge">incus admin init</code> choices.</li>
  <li><strong>Cannot Launch Instances:</strong> Check storage pool, network, image integrity, host resources, instance logs.</li>
  <li><strong>BIOS Version Issues:</strong> Outdated BIOS can cause instability.<code class="language-plaintext highlighter-rouge">4, 6</code> Check manufacturer for updates.</li>
</ul>

<p><strong>IX. Phase 7: Conclusion and Next Steps</strong></p>

<p>Successfully installing and configuring Incus OS on an Intel N97 bare-metal host establishes a robust, secure, and minimal platform for Incus containers and virtual machines.</p>

<ul>
  <li><strong>Pointers for Further Learning:</strong>
    <ul>
      <li><strong>Official Incus Documentation:</strong> The primary resource (typically on <code class="language-plaintext highlighter-rouge">linuxcontainers.org</code>).</li>
      <li><strong>Community Resources:</strong> Linux Containers Forum,<code class="language-plaintext highlighter-rouge">9</code> Incus Subreddit.<code class="language-plaintext highlighter-rouge">11</code></li>
      <li><strong>Advanced Incus Features:</strong> Profiles, snapshots, device passthrough (utilizing N97’s VT-d <code class="language-plaintext highlighter-rouge">1</code>), clustering,<code class="language-plaintext highlighter-rouge">2</code> alternative storage backends (Linstor <code class="language-plaintext highlighter-rouge">9</code>), OCI container management.<code class="language-plaintext highlighter-rouge">2</code></li>
      <li><strong>Automation Tools:</strong> <code class="language-plaintext highlighter-rouge">incus-deploy</code> <code class="language-plaintext highlighter-rouge">2</code> (Ansible/Terraform scripts), IncusScripts <code class="language-plaintext highlighter-rouge">10</code> (community scripts).</li>
    </ul>
  </li>
  <li><strong>Maintaining Your Incus OS Deployment:</strong>
    <ul>
      <li><strong>Regular Updates:</strong> Incus OS (via its A/B mechanism) and the Incus package itself (Incus has monthly feature releases and LTS versions <code class="language-plaintext highlighter-rouge">2</code>).</li>
      <li><strong>System Monitoring:</strong> Host resources and Incus pool usage. Review Incus logs.</li>
      <li><strong>Backup Strategy:</strong> Incus configuration and instance data.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">How to run `.qcow2` from Fedora CoreOS + Podman + Incus</title><link href="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/" rel="alternate" type="text/html" title="How to run `.qcow2` from Fedora CoreOS + Podman + Incus" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T19:14:50+00:00</updated><id>https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus</id><content type="html" xml:base="https://ib.bsb.br/how-to-run-qcow2-from-fedora-coreos-podman-incus/"><![CDATA[<p><strong>Understanding the Core Technology</strong></p>

<ul>
  <li><strong>Incus:</strong> Your custom OS includes Incus, a powerful system container and virtual machine manager. For VMs, Incus utilizes QEMU/KVM.</li>
  <li><strong>QEMU/KVM:</strong>
    <ul>
      <li><strong>QEMU:</strong> An open-source machine emulator and virtualizer.</li>
      <li><strong>KVM (Kernel-based Virtual Machine):</strong> A Linux kernel module that enables QEMU to use hardware virtualization extensions (Intel VT-x or AMD-V), providing near-native performance. Fedora CoreOS includes KVM support.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code>:</strong> This is a disk image format commonly used by QEMU, supporting features like copy-on-write and snapshots.</li>
</ul>

<p><strong>Methods to Run a <code class="language-plaintext highlighter-rouge">.qcow2</code> Image with Incus</strong></p>

<p>Here are a few methods, ranging from a quick one-off boot to creating a reusable Incus image:</p>

<p><strong>Prerequisites for all methods:</strong></p>

<ol>
  <li><strong>Hardware Virtualization:</strong> Ensure Intel VT-x or AMD-V is enabled in your machine’s BIOS/UEFI.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">.qcow2</code> File:</strong> The bootable <code class="language-plaintext highlighter-rouge">.qcow2</code> file must be accessible on your custom OS’s filesystem (e.g., copied to your home directory or another accessible path).</li>
  <li><strong>Incus Initialization (One-time):</strong> If you haven’t used Incus before, you might need to initialize it. This typically involves setting up a default profile and a storage pool.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>incus admin init
</code></pre></div>    </div>
    <p>Follow the prompts. For simplicity, you can often accept the defaults. This might create a storage pool (e.g., named <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>User Permissions:</strong> While <code class="language-plaintext highlighter-rouge">incus admin init</code> requires <code class="language-plaintext highlighter-rouge">sudo</code>, many subsequent <code class="language-plaintext highlighter-rouge">incus</code> commands can be run by a user added to the <code class="language-plaintext highlighter-rouge">incus-admin</code> group (or <code class="language-plaintext highlighter-rouge">lxd</code> if you had a previous LXD installation and it was migrated). If your user is not in this group, you may need to prefix <code class="language-plaintext highlighter-rouge">incus</code> commands with <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
</ol>

<hr />

<p><strong>Method 1: Direct Boot by Attaching <code class="language-plaintext highlighter-rouge">.qcow2</code> as a Disk (Recommended for Quick/One-Off Use)</strong></p>

<p>This method is often the most straightforward for booting an existing <code class="language-plaintext highlighter-rouge">.qcow2</code> file without converting it into a formal Incus image, especially if your Incus storage pool is of type <code class="language-plaintext highlighter-rouge">dir</code>.</p>

<ol>
  <li><strong>Create a VM Instance (without a standard root disk initially):</strong>
It’s often easiest to launch a minimal VM instance using a placeholder image (like a minimal cloud image if you have one aliased, or even a standard image whose disk you’ll immediately replace).
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Launch a VM; 'images:alpine/edge' is just a small image to create the VM config.</span>
<span class="c"># We will replace its disk.</span>
incus launch images:alpine/edge my-qcow-vm <span class="nt">--vm</span> 
</code></pre></div>    </div>
    <p><em>Note: If you have a very minimal image alias or a profile designed for “empty” VMs, you can use that instead.</em></p>
  </li>
  <li><strong>Stop the VM:</strong>
The VM will likely start automatically. Stop it to modify its disk configuration.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus stop my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Remove the Default Root Disk:</strong>
The VM was created with a root disk from the placeholder image. Remove it.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device remove my-qcow-vm root
</code></pre></div>    </div>
  </li>
  <li><strong>Add Your <code class="language-plaintext highlighter-rouge">.qcow2</code> File as the New Root Disk:</strong>
This command tells Incus to use your <code class="language-plaintext highlighter-rouge">.qcow2</code> file as the primary bootable disk for the VM.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus config device add my-qcow-vm root disk <span class="nb">source</span><span class="o">=</span>/path/to/your/image.qcow2 boot.priority<span class="o">=</span>1
</code></pre></div>    </div>
    <p>Replace <code class="language-plaintext highlighter-rouge">/path/to/your/image.qcow2</code> with the actual path to your file.</p>
    <ul>
      <li><strong>Storage Pool Consideration:</strong> This method works best if your Incus storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>) is of type <code class="language-plaintext highlighter-rouge">dir</code>. For block-based pools (LVM, ZFS, Ceph), Incus might try to import the <code class="language-plaintext highlighter-rouge">.qcow2</code> content into a new volume in its native format, which is usually fine.</li>
    </ul>
  </li>
  <li><strong>Start the VM:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus start my-qcow-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-qcow-vm
</code></pre></div>    </div>
    <p>Press <code class="language-plaintext highlighter-rouge">Ctrl+a q</code> (or <code class="language-plaintext highlighter-rouge">Ctrl+a c</code> then <code class="language-plaintext highlighter-rouge">q</code>) to detach from the console.</p>
  </li>
</ol>

<hr />

<p><strong>Method 2: Importing <code class="language-plaintext highlighter-rouge">.qcow2</code> into a Custom Storage Volume (More Robust for Block-Based Pools)</strong></p>

<p>If your storage pool is block-based (e.g., LVM, ZFS), or you want Incus to manage the disk image as a distinct volume, this method is more appropriate. It involves converting the <code class="language-plaintext highlighter-rouge">.qcow2</code> to a raw format and importing that.</p>

<ol>
  <li><strong>Identify Your Storage Pool:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage list
</code></pre></div>    </div>
    <p>Note the name of your desired storage pool (e.g., <code class="language-plaintext highlighter-rouge">default</code>).</p>
  </li>
  <li><strong>Convert <code class="language-plaintext highlighter-rouge">.qcow2</code> to Raw Format (if needed):</strong>
Incus’s volume import often works best with raw image files.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img convert <span class="nt">-f</span> qcow2 <span class="nt">-O</span> raw /path/to/your/image.qcow2 /tmp/image.raw
</code></pre></div>    </div>
    <p>Replace paths as necessary. Ensure you have enough space in <code class="language-plaintext highlighter-rouge">/tmp</code> or choose another location.</p>
  </li>
  <li><strong>Import the Raw Image into an Incus Custom Storage Volume:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import &lt;your-pool-name&gt; /tmp/image.raw &lt;name-for-your-volume&gt;
</code></pre></div>    </div>
    <p>For example:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus storage volume import default /tmp/image.raw my-custom-boot-volume
</code></pre></div>    </div>
    <p>This creates an Incus storage volume containing the content of your bootable image.</p>
  </li>
  <li><strong>Clean up the temporary raw file:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> /tmp/image.raw
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM Using the Custom Volume:</strong>
You’ll create a VM instance and tell it to use this custom volume as its root disk.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a VM instance (similar to Method 1, using a placeholder)</span>
incus launch images:alpine/edge my-custom-vol-vm <span class="nt">--vm</span>
incus stop my-custom-vol-vm
incus config device remove my-custom-vol-vm root

<span class="c"># Add the custom volume as the root disk</span>
incus config device add my-custom-vol-vm root disk <span class="nv">pool</span><span class="o">=</span>&lt;your-pool-name&gt; <span class="nb">source</span><span class="o">=</span>&lt;name-for-your-volume&gt; boot.priority<span class="o">=</span>1
<span class="c"># Example:</span>
<span class="c"># incus config device add my-custom-vol-vm root disk pool=default source=my-custom-boot-volume boot.priority=1</span>

incus start my-custom-vol-vm
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-custom-vol-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Method 3: Creating a Reusable Incus Image from <code class="language-plaintext highlighter-rouge">.qcow2</code> (For Frequent Use)</strong></p>

<p>If you plan to launch multiple VMs from this same <code class="language-plaintext highlighter-rouge">.qcow2</code> image, creating a proper Incus image is efficient.</p>

<ol>
  <li><strong>Prepare a <code class="language-plaintext highlighter-rouge">metadata.yaml</code> File:</strong>
This file describes your image to Incus. Create a file named <code class="language-plaintext highlighter-rouge">metadata.yaml</code> in the same directory as your <code class="language-plaintext highlighter-rouge">.qcow2</code> file (or a temporary directory where you copy the <code class="language-plaintext highlighter-rouge">.qcow2</code>):
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">architecture</span><span class="pi">:</span> <span class="s">x86_64</span>  <span class="c1"># Or your image's architecture (e.g., aarch64)</span>
<span class="na">creation_date</span><span class="pi">:</span> <span class="s">$(date +%s)</span> <span class="c1"># This will be replaced by actual date in next step</span>
<span class="na">properties</span><span class="pi">:</span>
  <span class="na">os</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyQcow2OS"</span> <span class="c1"># A friendly name for the OS</span>
  <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Bootable</span><span class="nv"> </span><span class="s">qcow2</span><span class="nv"> </span><span class="s">image"</span>
  <span class="na">architecture</span><span class="pi">:</span> <span class="s2">"</span><span class="s">x86_64"</span> <span class="c1"># Repeat architecture here</span>
<span class="c1"># Add other properties if known, like 'release', 'variant', etc.</span>
</code></pre></div>    </div>
    <p>You can generate the <code class="language-plaintext highlighter-rouge">creation_date</code> dynamically:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; metadata.yaml
architecture: </span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh"> # Or specify explicitly e.g. x86_64
creation_date: </span><span class="si">$(</span><span class="nb">date</span> +%s<span class="si">)</span><span class="sh">
properties:
  os: "MyQcow2OS"
  description: "My custom bootable qcow2"
  architecture: "</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="sh">" # Or specify explicitly
</span><span class="no">EOF
</span></code></pre></div>    </div>
  </li>
  <li><strong>Create a Tarball:</strong>
Package the <code class="language-plaintext highlighter-rouge">.qcow2</code> file (e.g., <code class="language-plaintext highlighter-rouge">my-image.qcow2</code>) and <code class="language-plaintext highlighter-rouge">metadata.yaml</code> into a <code class="language-plaintext highlighter-rouge">.tar.gz</code> file. The <code class="language-plaintext highlighter-rouge">.qcow2</code> file should be named <code class="language-plaintext highlighter-rouge">root.img</code> or <code class="language-plaintext highlighter-rouge">disk.img</code> inside the tarball for some Incus versions, or more generally, Incus will pick up the largest file as the root disk if it’s a qcow2. For simplicity, let’s assume your qcow2 is <code class="language-plaintext highlighter-rouge">my-os.qcow2</code>. You might need to rename it to <code class="language-plaintext highlighter-rouge">root.qcow2</code> or ensure it’s the clear candidate.
A common practice is to name the image file <code class="language-plaintext highlighter-rouge">root.qcow2</code> within the tarball.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming your qcow2 is my-os.qcow2</span>
<span class="nb">cp</span> /path/to/your/my-os.qcow2 <span class="nb">.</span> <span class="c"># Copy to current directory</span>
<span class="nb">mv </span>my-os.qcow2 root.qcow2      <span class="c"># Rename for clarity within tarball</span>
<span class="nb">tar</span> <span class="nt">-czvf</span> my-incus-image.tar.gz root.qcow2 metadata.yaml
</code></pre></div>    </div>
  </li>
  <li><strong>Import the Tarball as an Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus image import my-incus-image.tar.gz <span class="nt">--alias</span> my-bootable-qcow-image
</code></pre></div>    </div>
    <p>This makes the image available in your local Incus image store.</p>
  </li>
  <li><strong>Clean up Temporary Files:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm </span>root.qcow2 metadata.yaml my-incus-image.tar.gz
</code></pre></div>    </div>
  </li>
  <li><strong>Launch a VM from the New Incus Image:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus launch my-bootable-qcow-image my-new-vm <span class="nt">--vm</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Access the VM Console:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incus console my-new-vm
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<p><strong>Alternative: Direct QEMU/KVM (Bypassing Incus Management)</strong></p>

<p>While Incus is the recommended and integrated way on your custom OS, you <em>could</em> use QEMU/KVM directly. This gives raw access but lacks Incus’s management features (networking, storage, snapshots, etc.).</p>

<ol>
  <li><strong>Ensure QEMU/KVM Utilities are Installed:</strong>
On Fedora CoreOS, if not already present as a dependency of Incus, you might need to install them:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>rpm-ostree <span class="nb">install </span>qemu-system-x86 <span class="c"># For x86_64</span>
<span class="c"># May require a reboot</span>
<span class="c"># sudo systemctl reboot</span>
</code></pre></div>    </div>
    <p>However, <code class="language-plaintext highlighter-rouge">incus</code> typically pulls in <code class="language-plaintext highlighter-rouge">qemu-kvm</code> or similar packages.</p>
  </li>
  <li><strong>Run with <code class="language-plaintext highlighter-rouge">qemu-system-x86_64</code>:</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="se">\</span>
    <span class="nt">-enable-kvm</span> <span class="se">\</span>
    <span class="nt">-m</span> 2048 <span class="se">\</span>
    <span class="nt">-smp</span> 2 <span class="se">\</span>
    <span class="nt">-hda</span> /path/to/your/image.qcow2 <span class="se">\</span>
    <span class="nt">-boot</span> d <span class="se">\</span>
    <span class="nt">-vga</span> std <span class="se">\</span>
    <span class="nt">-net</span> nic <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::2222-:22 <span class="c"># Example networking</span>
</code></pre></div>    </div>
    <p>This is more manual and generally not preferred if Incus is available.</p>
  </li>
</ol>

<p><strong>Podman’s Role</strong></p>

<p>Podman is for managing OCI/Docker-compatible <em>containers</em>, not full virtual machines from <code class="language-plaintext highlighter-rouge">.qcow2</code> images. It operates at a different level of virtualization (OS-level virtualization, sharing the host kernel) compared to the hardware virtualization used by Incus for VMs.</p>

<p><strong>Conclusion</strong></p>

<p>Your Fedora CoreOS + Podman + Incus system is well-equipped to run <code class="language-plaintext highlighter-rouge">.qcow2</code> Linux images. <strong>Using Incus (Method 1 or 2 for direct use, Method 3 for reusability) is the most integrated and recommended approach.</strong> It provides a robust management layer over QEMU/KVM, allowing you to easily launch and manage these VMs right after your system boots.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Linux Home Networking</title><link href="https://ib.bsb.br/linux-home-networking/" rel="alternate" type="text/html" title="Linux Home Networking" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T21:31:32+00:00</updated><id>https://ib.bsb.br/linux-home-networking</id><content type="html" xml:base="https://ib.bsb.br/linux-home-networking/"><![CDATA[<p>This page provides a brief introduction on how to network two Linux computers together so you can share files between machines.</p>

<p>While these techniques can be used to set up regular file sharing, a quick temporary network can be particularly useful when moving files from an old machine to a new machine when you wish to avoid the possible security threats of using intermediate cloud storage.</p>

<h2 id="connectivity">Connectivity</h2>

<p>Your first step is getting some kind of network connectivity between two machines. You have numerous options with contemporary hardware.</p>

<h3 id="wireless-router">Wireless Router</h3>

<p>If you already are networked through a wireless router, you will simply need to run <em>ifconfig</em> on both machines to get the IP addresses they got from the router.</p>

<p>$ sudo ifconfig</p>

<p>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet <strong>73.45.140.138</strong>  netmask 255.255.254.0  broadcast 255.255.255.255
        inet6 fe80::6a45:f1ff:fe6f:7b1a  prefixlen 64  scopeid 0x20
        ether 68:45:f1:6f:7b:1a  txqueuelen 1000  (Ethernet)
        RX packets 5242077  bytes 5089202364 (4.7 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3554290  bytes 1467295701 (1.3 GiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 16  memory 0xb1100000-b1120000</p>

<p>Configuration of wireless interfaces via the <a href="https://michaelminn.com/linux/home_network/#command-line-wireless">comman line is described further below.</a></p>

<p>If you are setting up a file server that you will be using on a regular basis, you will want to find a way to set the file server machine to a manual, fixed IP address that does not rely on DHCP.</p>

<h3 id="ad-hoc-wireless-network">Ad-Hoc Wireless Network</h3>

<p>If you don’t have a wireless router, you can create an <a href="https://help.ubuntu.com/community/WifiDocs/Adhoc">“Ad-Hoc” wireless network</a> to interconnect the two machines.</p>

<p>You should first find the names of the interfaces on both machines. They are usually <em>wlp1s0</em> or <em>wlp2s0</em> on contemporary machines.</p>

<p>$ sudo iw dev</p>

<p>phy#0
        Interface wlp1s0
                ifindex 3
                wdev 0x1
                addr 3c:9c:0f:46:65:3b
                type managed
                txpower 0.00 dBm</p>

<p>The following instructions should be executed on both machines to set the card into ad-hoc mode, specify a frequency, set the network name and set a WEP encryption key.</p>

<p>Note that encryption keys specified as ASCII strings (s:) <a href="http://permalink.gmane.org/gmane.linux.nernel.wireless.general/44915">must be exactly 5 or 13 characters</a>:</p>

<p>$ sudo iwconfig wlp1s0 mode Ad-Hoc
$ sudo iwconfig wlp1s0 channel 4
$ sudo iwconfig wlp1s0 essid omega
$ sudo iwconfig wlp1s0 key s:alpha</p>

<p>On the server machine, bring the interface up with the server address:</p>

<p>$ sudo ifconfig wlp1s0 192.168.1.1</p>

<p>On the client machine, bring the interface up with the client address and ping the server to verify connectivity</p>

<p>$ sudo ifconfig wlp1s0 192.168.1.2</p>

<p>$ ping 192.168.1.1</p>

<p>PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=2.21 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.445 ms</p>

<h3 id="crossover-cable">Crossover Cable</h3>

<p>You can connect two machines directly together through their ethernet ports. However, you will will need to get a <strong>crossover cable</strong>, which appears identical to a regular Ethernet cable, the connectors are wired so the outputs of one machine go to the inputs of the other. A regular ethernet cable is inappropriate for this task.</p>

<p>Once connected, you should manually set the IP addresses on the two different machines and then <em>ping</em> the opposite machine to test the connection.</p>

<p>Server machine:</p>

<p>$ sudo ifconfig eth0 192.168.1.1</p>

<p>Client machine:</p>

<p>$ sudo ifconfig eth0 192.168.1.2</p>

<p>$ ping 192.168.1.1</p>

<p>PING 192.168.1.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=0.053 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.066 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=0.071 ms</p>

<h3 id="physical-router">Physical Router</h3>

<p>It is also possible to connect multiple machines together with a physical router, although such techniques have largely been supplanted by wireless.</p>

<p>The interface configuration would be the same as with a crossover cable configuration above.</p>

<p><img src="https://michaelminn.com/linux/home_network/2021-12-22_08-25-00-thumbnail.jpg" alt="Image 1" /></p>

<p>Interconnection with a physical router</p>

<h2 id="nfs">NFS</h2>

<p>The Network File System (NFS) is the standard Linux file server.</p>

<p>Files under Network File System (NFS) are served by a server and accessed by a client.</p>

<p>If you want to provide mutual access to files between two machines you will need to set both machines up as NFS servers and clients. If only one machine is being used for file storage, you only need NFS server on the source machine and the NFS client software on the other machine.</p>

<h3 id="packages">Packages</h3>

<p>You will need two packages:</p>

<p>$ sudo apt-get install nfs-kernel-server rpcbind</p>

<p>$ sudo /etc/init.d/rpcbind start</p>

<p>$ sudo /etc/init.d/nfs-kernel-server start</p>

<h3 id="nfs-exports">NFS Exports</h3>

<p>The /etc/exports file tells NFS which directories to make visible to network systems. To make the /home directory visible to all machines with the IP addresses given above, the /etc/exports file on both machines would have one line:</p>

<p>/home 192.168.1.0/255.255.255.0(rw)</p>

<p>Export these file systems after modifying /etc/exports. The file systems will subsequently be exported each time the server is reloaded.</p>

<p>$ sudo exportfs -a -v</p>

<p>$ sudo /etc/init.d/nfs-kernel-server reload</p>

<h3 id="mount">Mount</h3>

<p>On all machines needing to mount the networked file system, create a mountpoint:</p>

<p>$ sudo mkdir /media/nfs</p>

<p>You can then mount the file system:</p>

<p>$ sudo mount -v 192.168.1.1:/home /media/nfs</p>

<p>$ ls /media/nfs</p>

<p>lost+found  user1   user2   user3</p>

<h3 id="regular-mounting">Regular Mounting</h3>

<p>If you are going to be using the network on a regular basis, you should place an entry in the <em>/etc/fstab</em> file so users will be able to access the file system without having to manually mount.</p>

<p>192.168.1.1:/home	/mnt/nfs	nfs	auto,user,exec,soft	0  0</p>

<h2 id="nfs-debugging">NFS Debugging</h2>

<p>NFS can be a MAJOR pain in the ass to get running, with cryptic error messages and strange freezes. The following are some errors I encountered and potential fixes. Some of these date from a previous experience with Fedora and they remain here for completeness. When all else fails, <a href="http://google.com/">Google</a> is your friend.</p>

<p><strong>Test the Connection</strong>: If mounting of an NFS file system is freezing or failing, you should first verify that you have connectivity to the server using ping.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping 192.168.1.1
</code></pre></div></div>

<p>Should give something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PING 192.168.1.1 (192.168.1.2) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp\_seq=0 ttl=64 time=0.895 ms
64 bytes from 192.168.1.1: icmp\_seq=1 ttl=64 time=0.435 ms
64 bytes from 192.168.1.1: icmp\_seq=2 ttl=64 time=0.430 ms
</code></pre></div></div>

<p>If you do not get ping messages, there’s a problem with the basic connection between the machines. Verify that your cables are connected properly and firmly seated all the way into their sockets. If you are using a switch, make sure it is powered up and the indicator lights confirm connection. If you are using a crossover cable, make sure it is a crossover cable and not a regular Ethernet cable.</p>

<p><strong>NFS Version</strong></p>

<p>The Linux NFS client supposedly supports NFS protocol versions 2, 3, and 4 but the server doesn’t seem quite so robust. nfsvers=2 is used above as the option on the mount command (or in /etc/fstab) to force use of NFS v2. If you fail to use explicit versioning, you may get a message like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount -v 192.168.1.1:/home /mnt/network

mount: no type was given - I'll assume nfs because of the colon
mount.nfs: timeout set for Wed Dec 29 09:20:34 2010
mount.nfs: text-based options: 'addr=192.168.1.1'
mount.nfs: mount(2): Protocol not supported
mount.nfs: trying 192.168.1.1 prog 100003 vers 3 prot UDP port 2049
mount.nfs: mount to NFS server '192.168.1.1:/home' failed: RPC Error: Success
</code></pre></div></div>

<p>By contrast, when you use explicit versioning:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount -o nfsvers=2 192.168.1.1:/home /mnt/network

mount: no type was given - I'll assume nfs because of the colon
mount.nfs: timeout set for Wed Dec 29 09:20:53 2010
mount.nfs: text-based options: 'nfsvers=2,addr=192.168.1.1'
192.168.1.1:/home on /mnt/network type nfs (rw,nfsvers=2)
</code></pre></div></div>

<p><strong>Access denied</strong>: This is likely caused because the directory you are trying to mount is not specified in /etc/exports on the NFS server. You should verify that file contains the correct info as described above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount.nfs: access denied by server while mounting 192.168.1.1:/home
</code></pre></div></div>

<p><strong>RPC Error: Program not registered</strong>: This is likely caused because NFS or rpcbind is not running on the server. Execute “/etc/init.d/unfs3 start” on the server as described above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount.nfs: mount to NFS server '192.168.1.1:/home' failed: 
RPC Error: Program not registered
</code></pre></div></div>

<p><strong>Server Is Down</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount to NFS server 'x.x.x.x' failed: server is down
</code></pre></div></div>

<p>This may, in fact, mean that the server is not running or that you do not have connectivity to the server (see above for ping). It can also be caused if the server does not have an entry in /etc/exports giving you permission to mount the requested resource (see above).</p>

<p>However, this message may also be caused by a NFS protocol version mismatch. You should use NFS version 2 as described above.</p>

<p><strong>Permission denied on mount</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>statd: Could not chdir: Permission denied
mount.nfs: rpc.statd is not running but is required for remote locking.
mount.nfs: Either use '-o nolock' to keep locks local, or start statd.
</code></pre></div></div>

<p>This is a strange one. The easiest solution was to just mount as superuser:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount /mnt/network
</code></pre></div></div>

<p>However, subsequent mounts as non-superuser worked fine, so go figure.</p>

<p><strong>Starting NFS quotas: Cannot register service</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting NFS quotas: Cannot register service: RPC: 
Unable to receive; errno = Connection refused
rpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp).
</code></pre></div></div>

<p>This is a <a href="http://forums.fedoraforum.org/showthread.php?t=186999">mysterious one</a>. Seems to magically go away if you just restart NFS.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/init.d/unfs3 restart
</code></pre></div></div>

<p><strong>Firewall - iptables</strong>: If you are running a non-Ubuntu configuration or you have iptables running as a firewall, it needs to be configured to allow the client machine(s) to access NFS. On both machines, add a new iptables rule that accepts all input on the eth0 interface from the local network (both 192.168.1.1 and 192.168.1.2). List the new table and if everything looks good, save it to the /etc/sysconfig/iptables file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo iptables -I INPUT -p ALL -i eth0 -s 192.168.1.0/255.255.255.0 -j ACCEPT
sudo iptables -L
sudo iptables-save \&gt; /etc/sysconfig/iptables
</code></pre></div></div>

<p><strong>RPC: Port mapper failure - RPC: Unable to receive</strong>: NFS uses TCP/IP port 2049. The default firewalls on many distributions may cause mounting a drive on a remote machine to fail with the message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RPC: Port mapper failure - RPC: Unable to receive
</code></pre></div></div>

<p>Solution is changing the iptable settings as described above.</p>

<p><strong>RPC: Timed out</strong></p>

<p>The firewall settings on the server or client may cause the mount to hang and eventually issue the message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RPC: Timed out
</code></pre></div></div>

<p>Solution is changing the iptable settings as described above.</p>

<p><strong>Debugging - Ports</strong>: NFS uses TCP port 2049. rpcinfo can be used to list available ports. Problems with rpcinfo indicates a machine is not accepting NFS requests.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpcinfo
</code></pre></div></div>

<p>You can also verify open ports with netstat. nfs should be listed for both tcp and udp, although only the tcp port will be in LISTEN state</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># netstat -tul

Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 \*:nfs                   \*:\*                     LISTEN      
tcp        0      0 \*:printer               \*:\*                     LISTEN      
tcp        0      0 \*:676                   \*:\*                     LISTEN      
tcp        0      0 \*:sunrpc                \*:\*                     LISTEN      
tcp        0      0 \*:x11                   \*:\*                     LISTEN      
tcp        0      0 \*:ha-cluster            \*:\*                     LISTEN      
tcp        0      0 \*:32893                 \*:\*                     LISTEN      
tcp        0      0 \*:32894                 \*:\*                     LISTEN      
udp        0      0 \*:nfs                   \*:\*                                 
udp        0      0 \*:32782                 \*:\*                                 
udp        0      0 \*:32783                 \*:\*                                 
udp        0      0 \*:673                   \*:\*                                 
udp        0      0 \*:691                   \*:\*                                 
udp        0      0 \*:bootpc                \*:\*                                 
udp        0      0 \*:727                   \*:\*                                 
udp        0      0 \*:sunrpc                \*:\*     
</code></pre></div></div>

<p><strong>iptables restart</strong>: If all else fails, you can simply stop the firewall.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo service iptables stop
</code></pre></div></div>

<p>If this solves the problem, you should look further into correcting your firewall configuration. Running without a firewall, especially with a connection to the internet exposes your machine to hacking and not recommended.</p>

<p>FYI, an important line in /etc/sysconfig/iptables on some Red Hat configurations may be rejection of port 2049, used by NFS:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-A RH-Lokkit-0-50-INPUT -p udp -m udp --dport 2049 -j REJECT
</code></pre></div></div>

<h2 id="command-line-wireless-configuration">Command Line Wireless Configuration</h2>

<p>I prefer to start and stop my networks manually, and removed the network-manager to avoid conflicts and problems encountered on other machines:</p>

<p>$ sudo apt-get remove network-manager</p>

<p>Wireless interfaces can be started with the <em>ifup</em> command:</p>

<p>$ sudo ifup wlp1s0</p>

<p>The interface can be stopped with the <em>ifdown</em> command:</p>

<p>$ sudo ifdown wlp1s0</p>

<p>Access points can be displayed with the <em>iwlist</em> command:</p>

<p>$ sudo iwlist wlp2s0 scan</p>

<p>Access points can be configured with the <em>iwconfig</em> command:</p>

<p>$ sudo iwconfig wlp2s0 essid &lt;SSID&gt;</p>

<p>If you have an access point that you regulaly connect to, you can configure the SSID and password in the <em>/etc/network/interfaces</em> file:</p>

<p>iface wlp2s0 inet dhcp
wpa-ssid “&lt;SSID&gt;”
wpa-psk “&lt;PASSWORD&gt;”</p>

<p>To have the interface start automatically on boot:</p>

<p>auto wlp2s0
iface wlp2s0 inet dhcp
wpa-ssid “&lt;SSID&gt;”
wpa-psk “&lt;PASSWORD&gt;”</p>

<h2 id="diagnostic-utilities">Diagnostic Utilities</h2>

<p>Networks always have problems and diagnosis of those problems is the primary activity of network administrators. Diagnosing and solving network problems is a black art that can only be covered superficially here, but the following are some basic utilities for diagnosing problems. Many of these programs are mentioned in more detail above and you can get further information on the command line with the “man &lt;command&gt;” command.</p>

<p><strong>ifconfig</strong>: The first step is to verify that the interface you are trying to connect to the network with is up and has a valid IP address. ifconfig with no arguments lists all the network interfaces on a system and allows configuration. If the interface is not displayed or does not have an IP address, your system cannot connect to the network through that interface. The example output given below shows the interface IP address as 192.168.1.47 and, with the given mask, the default gateway is 192.168.1.1. The “RX bytes” and “TX bytes” can be used to determine if there has been any traffic on an interface, implying that it is or was working at some point. lo is the loopback interface on every system that is, in essence, only connected to itself.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eth0      Link encap:Ethernet  HWaddr 00:0F:B0:66:40:C2  
          inet addr:192.168.1.47  Bcast:255.255.255.255  Mask:255.255.255.0
          inet6 addr: fe80::20f:b0ff:fe66:40c2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:29369 errors:0 dropped:0 overruns:0 frame:0
          TX packets:32776 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:20428276 (19.4 Mb)  TX bytes:21405541 (20.4 Mb)
          Interrupt:11 Base address:0x3000

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
     	  RX bytes:592 (592.0 b)  TX bytes:592 (592.0 b)
</code></pre></div></div>

<p><strong>ping</strong> is the second most useful network diagnostic utility. ping allows you to send echo request messages to specific IP addresses and verify that they are up. Generally, in diagnosing a connectivity problem you will first try to ping the interface, then ping the gateway (which can be inferred from the output of ifconfig), and, finally, ping the destination you are trying to reach.</p>

<p><strong>traceroute</strong> lists all the routers between you and a destination. This permits detection of the point in a route where there is a problem.</p>

<p><strong>arp</strong> allows display and modification of the ARP caches on interfaces. If you need to determine if you have the lowest level connectivity to the network, in this case through interface eth0:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/sbin/arp -a -i eth0
</code></pre></div></div>

<p><strong>iwconfig</strong> is a utility for displaying and configuring wireless-specific information that is not part of ifconfig. Looking for the connected access point ESSID (or lack thereof) is a common reason to use iwconfig.</p>

<p><strong>iwlist</strong>: When connecting to an unfamiliar network, you may want to use the iwlist command to see what access points are available. If no access point ESSID is specified, bringing a wireless interface up will connect to the most powerful AP it sees, which may not be the one you want.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/sbin/iwlist wlan0 scan
</code></pre></div></div>

<p><strong>tcpdump</strong> is a program for listing network packets. The output can be rather obtuse to the uninitiated. Useful for diagnosing problems with NFS or authentication issues. For example, to display packets in ASCII that are passing through interface eth0:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	tcpdump -s 1024 -A -i eth0
</code></pre></div></div>

<p>In some configurations the filtering used by tcpdump may be so aggressive that it yields no significant output other than ARP requests. In those cases you may need to specify the specific IP network address of the interface you’re trying to list traffic from:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	tcpdump -A -s 1024 net 192.168.1.1
</code></pre></div></div>

<p><strong>netstat</strong> lists active network connections, routing tables, interface statistics, masquerade connections, and multicast membership</p>

<ul>
  <li>netstat -r: show routing table</li>
  <li>netstat -a: list connections</li>
  <li>netstat -s: list statistics by protocol</li>
  <li>netstat -n: list port numbers</li>
</ul>

<p><strong>host</strong>, <strong>dig</strong> and <strong>nslookup</strong> are DNS lookup utilities, with dig giving the more detailed output of the bunch. If you are having trouble connecting to a named website, you can use these utilities to try to figure out if the name is getting resolved to an IP address. You can also use these utilities to lookup addresses on specific nameservers if your currently configured nameserver is having problems.</p>

<p><strong>route</strong> is a utility to list and/or manipulate the IP routing table. If you’re having problems with a browser not being able to see a network, this will show if there is a problem in your routing table.</p>

<p>Example route output with a DSL modem</p>

<p>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     *               255.255.255.0   U     0      0        0 eth0
169.254.0.0     *               255.255.0.0     U     0      0        0 eth0
default         dslrouter       0.0.0.0         UG    0      0        0 eth0</p>

<p>Example route output with a dialup modem Destination Gateway Genmask Flags Metric Ref Use Iface nas31.newyork1. * 255.255.255.255 UH 0 0 0 ppp0 default nas31.newyork1. 0.0.0.0 UG 0 0 0 ppp0</p>

<p><strong>whois</strong> queries the Internet WhoIs database to find out who a domain name is registered to. Anonymous or third-world registrations often indicate entities that you should have no dealings with. whois can also be used to list to what organization an IP address has been assigned to, although this information will often only lead you to an ISP that controls a block of IP addresses and not to the company or individual who is actually using that IP address.</p>

<p><strong>airsnort</strong>: When you need to connect to an encrypted network but do not have the encryption key, <a href="http://airsnort.shmoo.com/">AirSnort</a> can listen to traffic for a period of time and determine the key.</p>

<p><strong>nmap</strong> is a network exporation tool and security scanner. Lots of options. The -sT option is especially useful for detecting “open ports” that represent potential entry paths for invaders and the results of this scan may indicate unnecessary services you want to shut down or unnecessary permissions in your firewall.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example: scan a local address for open ports
	nmap -sT 192.168.1.1

Example: looks for hosts on a network
	nmap -sP 172.16.1.1-127
</code></pre></div></div>

<p><strong><a href="http://netdisco.org/">Netdisco</a></strong> is an open source web-based network management tool. It’s quite complex and I mention it here only as a suggestion if you’re looking for network discovery software.</p>

<p><strong>nmblookup</strong>, <strong>smbstatus</strong> and <strong>findsmb</strong> are utilities for diagnosing and establishing Samba connections to Windoze systems. They are described earlier in this document.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">How to integrate WiFi support into the SBNB bridge-based networking setup</title><link href="https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup/" rel="alternate" type="text/html" title="How to integrate WiFi support into the SBNB bridge-based networking setup" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T09:14:14+00:00</updated><id>https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup</id><content type="html" xml:base="https://ib.bsb.br/how-to-integrate-wifi-support-into-the-sbnb-bridge-based-networking-setup/"><![CDATA[<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># sbnb-configure-networking.sh (Revised)</span>
<span class="c"># Configures host networking for SBNB, dynamically detecting and supporting</span>
<span class="c"># the first available Ethernet and/or WiFi interface.</span>
<span class="c"># Creates a bridge interface (br0) and attaches detected interfaces.</span>
<span class="c"># Includes WPA Supplicant setup for WiFi.</span>
<span class="c"># Aims for idempotency and provides informative output.</span>
<span class="c">#</span>
<span class="c"># To integrate with SBNB, this script can be added to the ESP partition</span>
<span class="c"># as sbnb-cmds.sh during the SBNB installation process.</span>

<span class="c"># --- Configuration Variables ---</span>
<span class="c"># Adjust if wpa_supplicant is elsewhere or a different group is needed</span>
<span class="nv">WPA_SUPPLICANT_PATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">command</span> <span class="nt">-v</span> wpa_supplicant<span class="si">)</span>
<span class="nv">WPA_CTRL_GROUP</span><span class="o">=</span><span class="s2">"wheel"</span> <span class="c"># Common groups: wheel, netdev. Verify for your system.</span>
<span class="nv">WPA_CONF_DIR</span><span class="o">=</span><span class="s2">"/etc/wpa_supplicant"</span>
<span class="nv">NETWORKD_CONF_DIR</span><span class="o">=</span><span class="s2">"/etc/systemd/network"</span>

<span class="c"># Exit on error, treat unset variables as errors, and ensure pipelines fail on error</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="c"># --- Helper Functions ---</span>
log_info<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[INFO] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

log_warn<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[WARN] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

log_error<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[ERROR] </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">exit </span>1
<span class="o">}</span>

<span class="c"># Function to safely restart or reload systemd services</span>
manage_service<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">action</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="c"># e.g., restart, reload, enable</span>
    <span class="nb">local </span><span class="nv">service</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
    log_info <span class="s2">"Attempting to </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">..."</span>
    <span class="nb">set</span> +e <span class="c"># Temporarily disable exit on error</span>
    systemctl <span class="s2">"</span><span class="nv">$action</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
    <span class="nb">local </span><span class="nv">status</span><span class="o">=</span><span class="nv">$?</span>
    <span class="nb">set</span> <span class="nt">-e</span> <span class="c"># Re-enable exit on error</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$status</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_warn <span class="s2">"Command 'systemctl </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">' failed with status </span><span class="nv">$status</span><span class="s2">. Check logs ('journalctl -u </span><span class="nv">$service</span><span class="s2">')."</span>
    <span class="k">else
        </span>log_info <span class="s2">"Successfully executed 'systemctl </span><span class="nv">$action</span><span class="s2"> </span><span class="nv">$service</span><span class="s2">'."</span>
    <span class="k">fi
    return</span> <span class="nv">$status</span>
<span class="o">}</span>

<span class="c"># --- Main Configuration Logic ---</span>
configure_host_networking<span class="o">()</span> <span class="o">{</span>
    log_info <span class="s2">"Starting SBNB network configuration..."</span>

    <span class="c"># Check prerequisites</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$WPA_SUPPLICANT_PATH</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_error <span class="s2">"wpa_supplicant command not found. Please install it."</span>
    <span class="k">fi
    </span><span class="nb">command</span> <span class="nt">-v</span> ip <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'ip' command not found (iproute2 package?)."</span>
    <span class="nb">command</span> <span class="nt">-v</span> <span class="nb">awk</span> <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'awk' command not found."</span>
    <span class="nb">command</span> <span class="nt">-v</span> <span class="nb">cut</span> <span class="o">&gt;</span>/dev/null <span class="o">||</span> log_error <span class="s2">"'cut' command not found."</span>

    <span class="c"># Ensure configuration directories exist</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$NETWORKD_CONF_DIR</span><span class="s2">"</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$WPA_CONF_DIR</span><span class="s2">"</span>

    <span class="c"># --- Bridge Configuration (br0) ---</span>
    <span class="nb">local </span><span class="nv">bridge_netdev_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.netdev"</span>
    <span class="nb">local </span><span class="nv">bridge_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.network"</span>
    <span class="nb">local </span><span class="nv">bridge_link_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/25-br0.link"</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$bridge_netdev_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"Bridge br0 configuration files already exist. Skipping bridge creation."</span>
    <span class="k">else
        </span>log_info <span class="s2">"Creating bridge br0 configuration files..."</span>
        <span class="c"># systemd-networkd processes files in lexical order. Prefixes ensure correct ordering.</span>
        <span class="c"># 25-* files define the bridge device and its network settings.</span>
        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_netdev_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[NetDev]
Name=br0
Kind=bridge
</span><span class="no">EOF

</span>        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=br0

[Network]
DHCP=yes
# If static IP is needed, comment DHCP=yes and uncomment below:
# Address=192.168.1.100/24
# Gateway=192.168.1.1
# DNS=1.1.1.1
# DNS=8.8.8.8
</span><span class="no">EOF

</span>        <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$bridge_link_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
# Match based on the interface name generated by the .netdev file
OriginalName=br0

[Link]
# MACAddressPolicy=none: Prevent systemd-networkd from assigning a potentially
# unstable MAC based on the bridge name. The bridge will use the MAC of the
# first enslaved interface or remain 00:00:00:00:00:00 until an interface joins.
MACAddressPolicy=none
</span><span class="no">EOF
</span>        log_info <span class="s2">"Bridge br0 configuration files created."</span>
    <span class="k">fi</span>

    <span class="c"># --- Ethernet Interface Configuration ---</span>
    <span class="c"># Find the first available Ethernet interface</span>
    <span class="nv">ETH_INTERFACE</span><span class="o">=</span><span class="si">$(</span>ip <span class="nt">-o</span> <span class="nb">link </span>show <span class="nb">type </span>ether | <span class="nb">awk</span> <span class="s1">'NR==1{print $2}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$ETH_INTERFACE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"Ethernet interface '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' detected."</span>
        <span class="nb">local </span><span class="nv">eth_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/30-</span><span class="k">${</span><span class="nv">ETH_INTERFACE</span><span class="k">}</span><span class="s2">-br0.network"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$eth_network_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Configuring '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' to join bridge br0..."</span>
            <span class="c"># 30-* file attaches the physical interface to the bridge.</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$eth_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=</span><span class="k">${</span><span class="nv">ETH_INTERFACE</span><span class="k">}</span><span class="sh">

[Network]
Bridge=br0
</span><span class="no">EOF
</span>        <span class="k">else
            </span>log_info <span class="s2">"Configuration for '</span><span class="nv">$ETH_INTERFACE</span><span class="s2">' already exists."</span>
        <span class="k">fi
    else
        </span>log_info <span class="s2">"No active Ethernet interface detected."</span>
    <span class="k">fi</span>

    <span class="c"># --- WiFi Interface Configuration ---</span>
    <span class="c"># Find the first available WiFi interface</span>
    <span class="nv">WIFI_INTERFACE</span><span class="o">=</span><span class="si">$(</span>ip <span class="nt">-o</span> <span class="nb">link </span>show <span class="nb">type </span>wlan | <span class="nb">awk</span> <span class="s1">'NR==1{print $2}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_info <span class="s2">"WiFi interface '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' detected."</span>
        log_info <span class="s2">"Note: Ensure necessary WiFi drivers and firmware are loaded for '</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">'."</span>
        log_info <span class="s2">"Check 'dmesg | grep -i firmware' or 'lspci/lsusb' output if issues arise."</span>

        <span class="nb">local </span><span class="nv">wpa_conf_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WPA_CONF_DIR</span><span class="k">}</span><span class="s2">/wpa_supplicant-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.conf"</span>
        <span class="nb">local </span><span class="nv">wpa_service_file</span><span class="o">=</span><span class="s2">"/etc/systemd/system/wpa_supplicant@</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.service"</span>
        <span class="nb">local </span><span class="nv">wifi_network_file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">NETWORKD_CONF_DIR</span><span class="k">}</span><span class="s2">/35-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">-br0.network"</span>

        <span class="c"># Create WPA Supplicant configuration template if not present</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Creating WPA Supplicant configuration template at </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2">..."</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
# Configuration for </span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh"> managed by wpa_supplicant
ctrl_interface=/run/wpa_supplicant
ctrl_interface_group=</span><span class="k">${</span><span class="nv">WPA_CTRL_GROUP</span><span class="k">}</span><span class="sh">
update_config=1

network={
    ssid="YOUR_WIFI_SSID"
    psk="YOUR_WIFI_PASSWORD"
    key_mgmt=WPA-PSK
    # --- Example for WPA2/WPA3 Personal (SAE - optional) ---
    # Adjust key_mgmt as needed, e.g., key_mgmt=WPA-PSK WPA-PSK-SHA256 SAE
    # psk= can be replaced by a passphrase= for WPA3 SAE if supported
    # --- Example for WPA Enterprise (EAP-PEAP/MSCHAPv2) ---
    # For enterprise networks, comment out psk= and key_mgmt= above
    # and add appropriate settings like below (adjust as needed):
    # proto=RSN WPA
    # key_mgmt=WPA-EAP
    # pairwise=CCMP TKIP
    # group=CCMP TKIP
    # eap=PEAP
    # identity="your_username"
    # password="your_password"
    # phase1="peaplabel=0"
    # phase2="auth=MSCHAPV2"
}
</span><span class="no">EOF
</span>            <span class="nb">chmod </span>600 <span class="s2">"</span><span class="nv">$wpa_conf_file</span><span class="s2">"</span>
            log_warn <span class="s2">"IMPORTANT: Edit </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2"> with your actual WiFi credentials."</span>
        <span class="k">else
            </span>log_info <span class="s2">"WPA Supplicant configuration already exists at </span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="s2">."</span>
        <span class="k">fi</span>

        <span class="c"># Configure wlan interface to join bridge br0</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wifi_network_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Configuring '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' to join bridge br0..."</span>
            <span class="c"># 35-* file attaches the WiFi interface to the bridge.</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wifi_network_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Match]
Name=</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">

[Network]
Bridge=br0
</span><span class="no">EOF
</span>        <span class="k">else
            </span>log_info <span class="s2">"Network configuration for '</span><span class="nv">$WIFI_INTERFACE</span><span class="s2">' already exists."</span>
        <span class="k">fi</span>

        <span class="c"># Create systemd service for WPA Supplicant if not present</span>
        <span class="nb">local </span><span class="nv">wpa_service_name</span><span class="o">=</span><span class="s2">"wpa_supplicant@</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="s2">.service"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$wpa_service_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_info <span class="s2">"Creating systemd service file for </span><span class="k">${</span><span class="nv">wpa_service_name</span><span class="k">}</span><span class="s2">..."</span>
            <span class="nb">cat</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$wpa_service_file</span><span class="s2">"</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[Unit]
Description=WPA Supplicant daemon for </span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">
Requires=sys-subsystem-net-devices-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">.device
After=sys-subsystem-net-devices-</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">.device
Before=network.target
Wants=network.target

[Service]
Type=simple
ExecStart=</span><span class="k">${</span><span class="nv">WPA_SUPPLICANT_PATH</span><span class="k">}</span><span class="sh"> -c</span><span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span><span class="sh"> -i</span><span class="k">${</span><span class="nv">WIFI_INTERFACE</span><span class="k">}</span><span class="sh">
Restart=on-failure
RestartSec=1

[Install]
WantedBy=multi-user.target
</span><span class="no">EOF
</span>            systemctl daemon-reload
            manage_service <span class="s2">"enable"</span> <span class="s2">"</span><span class="nv">$wpa_service_name</span><span class="s2">"</span>
        <span class="k">else
            </span>log_info <span class="s2">"Systemd service file for </span><span class="k">${</span><span class="nv">wpa_service_name</span><span class="k">}</span><span class="s2"> already exists."</span>
        <span class="k">fi</span>
        <span class="c"># Always try to restart WPA supplicant if WiFi interface is detected and configured</span>
        manage_service “restart” “<span class="nv">$wpa_service_name</span>”

    <span class="k">else
        </span>log_info “No active WiFi interface detected.”
    <span class="k">fi</span>

    <span class="c"># — Apply Network Configuration —</span>
    log_info “Applying network configuration changes...”
    <span class="c"># Use ‘networkctl reload’ which is often sufficient and less disruptive than restarting the whole service</span>
    networkctl reload <span class="o">||</span> manage_service “restart” “systemd-networkd.service”

    log_info “SBNB network configuration script finished.”
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> “<span class="nv">$WIFI_INTERFACE</span>” <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> “<span class="nv">$wpa_conf_file</span>”.edited <span class="o">]</span><span class="p">;</span> <span class="k">then
         </span>log_warn “Remember to edit ‘<span class="k">${</span><span class="nv">wpa_conf_file</span><span class="k">}</span>’ with your WiFi credentials <span class="k">if </span>you haven’t already.”
         <span class="c"># Simple flag to avoid repeating the warning on subsequent runs</span>
         <span class="nb">touch</span> “<span class="nv">$wpa_conf_file</span>”.edited <span class="o">&gt;</span> /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="nb">true
    </span><span class="k">fi</span>
<span class="o">}</span>

<span class="c"># — Execute Main Logic —</span>
configure_host_networking
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Live Raizo - API_Add-to-GNS3.sh</title><link href="https://ib.bsb.br/live-raizo-api-add-to-gns3sh/" rel="alternate" type="text/html" title="Live Raizo - API_Add-to-GNS3.sh" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T15:15:49+00:00</updated><id>https://ib.bsb.br/live-raizo-api_add-to-gns3sh</id><content type="html" xml:base="https://ib.bsb.br/live-raizo-api-add-to-gns3sh/"><![CDATA[<h2 id="explanations">Explanations</h2>

<ul>
  <li><strong>Add-to-GNS3.sh</strong> : API who uses a disk files from QEmu/Docker/Dynamips/VirtualBox to create VM and to add them to GNS3</li>
</ul>

<hr />

<h2 id="load-the-api">Load the API</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source/opt/raizo/api/Add-to-GNS3.sh
</code></pre></div></div>

<hr />

<h2 id="generic-functions">Generic Functions</h2>

<h2 id="vm">VM</h2>

<h3 id="modify-configvm">Modify-ConfigVM</h3>

<p>To modify the created config of VM</p>

<ul>
  <li>Modify-ConfigVM 1 2 3
    <ul>
      <li>1 : Name of file returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmdocker">Create-VMDocker</a></li>
      <li>2 : Name of the parameter to change</li>
      <li>3 : New value of the parameter to change</li>
    </ul>
  </li>
</ul>

<h3 id="add-configvm-to-gns3">Add-ConfigVM-to-GNS3</h3>

<p>To add config of VM to GNS3</p>

<ul>
  <li>Add-ConfigVM-to-GNS3 1
    <ul>
      <li>1 : Name of file returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a></li>
    </ul>
  </li>
</ul>

<p>You must create the md5sum file of the hard disk before to call Add-ConfigVM-to-GNS3</p>

<h2 id="network">Network</h2>

<h3 id="create-networkconfig">Create-NetworkConfig</h3>

<p>To create a specific network configuration</p>

<ul>
  <li>Create-NetworkConfig 1 2 3
    <ul>
      <li>1 : Number of network card</li>
      <li>2 : Template (example : enp0s)</li>
      <li>3 : Type (example : e1000)</li>
    </ul>
  </li>
  <li>Type : the value must be in $TYPES_NETWORK_CARD<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “e1000”, “i82550”, “i82551”, “i82557a”, “i82557b”, “i82557c”, “i82558a”, “i82558b”, “i82559a”, “i82559b”, “i82559c”, “i82559er”, “i82562”, “i82801”, “ne2k_pci”, “pcnet”, “rtl8139”, “virtio-net-pci”</li>
</ul>

<h3 id="modify-networkconfig">Modify-NetworkConfig</h3>

<p>To modify a specific network configuration created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a></p>

<ul>
  <li>Modify-NetworkConfig 1 2 3 4
    <ul>
      <li>1 : File with config of Network Interfaces (returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a>)</li>
      <li>2 : The network card number : 0 1 …</li>
      <li>3 : Field to modify : examples : port_name / adapter_type</li>
      <li>4 : New value of the field</li>
    </ul>
  </li>
</ul>

<h3 id="add-networkconfig-to-vm">Add-NetworkConfig-to-VM</h3>

<p>To add a specific network configuration created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a> to a VM config created with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmdocker">Create-VMDocker</a></p>

<ul>
  <li>Add-NetworkConfig-to-VM 1 2
    <ul>
      <li>1 : File with config of New VM</li>
      <li>2 : File with config of Network Interfaces (returned by <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-networkconfig">Create-NetworkConfig</a>)</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="qemu">QEmu</h2>

<h2 id="global-variables">Global Variables</h2>

<h3 id="to-change-parameter-of-commands">To change parameter of commands</h3>

<ul>
  <li>TYPE_HARD_DISK : To change the type of the hard disk of VM
    <ul>
      <li>Possibles values in $TYPES_HARD_DISK<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “ide”, “sata”, “scsi”, “sd”, “mtd”, “floppy”, “pflash”, “virtio”, “none”</li>
      <li>Default value in variable : DEFAULT_TYPE_HARD_DISK</li>
      <li>( Default value : sata )</li>
    </ul>
  </li>
  <li>TYPE_NETWORK_CARD : To change the type of the network interfaces of VM
    <ul>
      <li>Possibles values in $TYPES_NETWORK_CARD<a href="https://sourceforge.net/p/live-raizo/wiki/%40">[@]</a> : “e1000”, “i82550”, “i82551”, “i82557a”, “i82557b”, “i82557c”, “i82558a”, “i82558b”, “i82559a”, “i82559b”, “i82559c”, “i82559er”, “i82562”, “i82801”, “ne2k_pci”, “pcnet”, “rtl8139”, “virtio-net-pci”</li>
      <li>Default value in variable : DEFAULT_TYPE_NETWORK_CARD</li>
      <li>( Default value : e1000 )</li>
    </ul>
  </li>
  <li>SYMBOL_QEMU : To change the default symbol of the QEmu device in GNS3
    <ul>
      <li>Default value in variable : DEFAULT_SYMBOL_QEMU</li>
      <li>( Default value : /symbols/qemu_guest.svg )</li>
    </ul>
  </li>
  <li>
    <p>OPTION_QEMU : Option to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#create-vmqemu">Create-VMQEmu</a> : To add options to the QEmu VM</p>

    <ul>
      <li>Default value in variable : DEFAULT_OPTION_QEMU</li>
      <li>( default value : “” )</li>
      <li>Use also the read-only variables :
        <ul>
          <li>OPTION_QEMU_9P_HOSTHOME : configure the share of /home/user with the 9P protocol.</li>
          <li>OPTION_QEMU_VWIFI : configure the VHOST protocol used by vwifi-client of <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>if a variable is unset, the functions initialise it to this default value.</li>
</ul>

<h3 id="to-test-the-success-of-the-commands">To test the success of the commands</h3>

<ul>
  <li>When the commands failed because the parameters used are incorrects
    <ul>
      <li>FAST_ERROR_RAIZO is set to a value different of zero</li>
      <li>FAST_ERROR_RAIZO_LOG contains the message error</li>
    </ul>
  </li>
</ul>

<h2 id="functions">Functions</h2>

<h3 id="create-vmqemu">Create-VMQEmu</h3>

<p>To create the configuration of a Qemu VM</p>

<ul>
  <li>Create-VMQEmu 1 2 3 4 5 [6] [7] [8] [9]
    <ul>
      <li>1 : Name Of VM in GNS3</li>
      <li>2 : Number of network card</li>
      <li>3 : Size of Memory in MB</li>
      <li>4 : Type of Access : telnet / spice / spice+agent / vnc / none</li>
      <li>5 : Shutdown by ACPI : true / false</li>
      <li>6 : If exist, path of the disk file 1</li>
      <li>7 : If exist, path of the disk file 2</li>
      <li>8 : If exist, path of the disk file 3</li>
      <li>9 : If exist, path of the disk file 4</li>
    </ul>
  </li>
</ul>

<p>This function returns the name of the temporary file to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#add-configvm-to-gns3">Add-ConfigVM-to-GNS3</a></p>

<h2 id="examples"><em>Examples</em></h2>

<h3 id="windows-server-2019">Windows Server 2019</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

# Windows Server 2019

SYMBOL_QEMU="/symbols/raizo/microsoft_server.svg"

# On Processor AMD Ryzen, you should perhaps add :
# OPTION_QEMU="-cpu pentium2"

ConfigVM=$(Create-VMQEmuWin201912048spicefalse"${DIR_VDI}/windows-2019-server.vhd")
if[-n"${ConfigVM}"]
then
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<h3 id="windows-10">Windows 10</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

SYMBOL_QEMU="/symbols/raizo/microsoft_guest.svg"

# On Processor AMD Ryzen, you should perhaps add :
# OPTION_QEMU="-cpu pentium2"

ConfigVM=$(Create-VMQEmuWin1011024spicefalse"${DIR_VDI}/windows-10.vdi")
if[-n"${ConfigVM}"]
then
NetworkConfig=$(Create-NetworkConfig1"loc-area-con-"e1000)
Modify-NetworkConfig"${NetworkConfig}"0port_name"loc-area-con-2"
Add-NetworkConfig-to-VM"${ConfigVM}""${NetworkConfig}"

Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<h3 id="kali-linux">Kali Linux</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

SYMBOL_QEMU="/symbols/raizo/hacker.svg"

TYPE_HARD_DISK="IDE"

# OPTION_QEMU_9P_HOSTHOME : Use 9P to share /home/user via hosthome : mount -t 9p hosthome /mnt
# OPTION_QEMU_VWIFI : To use the virtual wifi after installing and running vwifi-client from https://github.com/Raizo62/vwifi
OPTION_QEMU="${OPTION_QEMU_9P_HOSTHOME}${OPTION_QEMU_VWIFI}"

ConfigVM=$(Create-VMQEmuKaliLinux21024spicefalse"${DIR_VDI}/linux-kali-2022.3-amd64.vmdk")
if[-n"${ConfigVM}"]
then
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi

unsetTYPE_HARD_DISKOPTION_QEMUSYMBOL_QEMU
</code></pre></div></div>

<h3 id="asa">ASA</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

DIR_VDI="/media/usb0/vdi"

TYPE_HARD_DISK='ide'
SYMBOL_QEMU='/symbols/asa.svg'
OPTION_QEMU='-no-kvm -icount auto'

ConfigVM=$(Create-VMQEmuASA61024telnetfalse"${DIR_VDI}/ASA/FLASH")
if[-n"${ConfigVM}"]
then
Modify-ConfigVM"${ConfigVM}"initrd"${DIR_VDI}/ASA/asa842-initrd.gz"
Modify-ConfigVM"${ConfigVM}"kernel_command_line'ide_generic.probe_mask=0x01 ide_core.chs=0.0:980,16,32 auto nousb console=ttyS0,9600 bigphysarea=65536 ide1=noprobe no-hlt -net nic'
Modify-ConfigVM"${ConfigVM}"kernel_image"${DIR_VDI}/ASA/asa842-vmlinuz"
Modify-ConfigVM"${ConfigVM}"port_name_format'GigaEthernet{0}'

Modify-ConfigVM"${ConfigVM}"category'firewall'

Add-ConfigVM-to-GNS3"${ConfigVM}"
fi

unsetTYPE_HARD_DISKOPTION_QEMUSYMBOL_QEMU
</code></pre></div></div>

<hr />

<h2 id="docker">Docker</h2>

<h2 id="global-variables-1">Global Variables</h2>

<h3 id="to-change-parameter-of-commands-1">To change parameter of commands</h3>

<ul>
  <li>
    <p>SYMBOL_DOCKER : To change the default symbol of the Docker device in GNS3</p>

    <ul>
      <li>Default value in variable : DEFAULT_SYMBOL_DOCKER</li>
      <li>( Default value : /symbols/docker_guest.svg )</li>
    </ul>
  </li>
  <li>
    <p>if you unset a variable, the functions initialise it to this default value.</p>
  </li>
</ul>

<h3 id="to-test-the-success-of-the-commands-1">To test the success of the commands</h3>

<ul>
  <li>When the commands failed because the parameters used are incorrects
    <ul>
      <li>FAST_ERROR_RAIZO is set to a value different of zero</li>
      <li>FAST_ERROR_RAIZO_LOG contains the message error</li>
    </ul>
  </li>
</ul>

<h2 id="functions-1">Functions</h2>

<h3 id="add-persistentfolder-to-vmdocker">Add-PersistentFolder-to-VMDocker</h3>

<p>To add a folder to the list of persistent folders of the Docker VM</p>

<ul>
  <li>Add-PersistentFolder-to-VMDocker 1 2
    <ul>
      <li>1 : File with config of New VM</li>
      <li>2 : Name of folder to set persistent</li>
    </ul>
  </li>
</ul>

<h3 id="create-vmdocker">Create-VMDocker</h3>

<p>To create the configuration of a Docker VM</p>

<ul>
  <li>Create-VMDocker 1 2 3 4
    <ul>
      <li>1 : Name Of VM in GNS3</li>
      <li>2 : Name of the Docker Image</li>
      <li>3 : Number of network card</li>
      <li>4 : Type of Access : telnet / http / https / vnc / none</li>
    </ul>
  </li>
</ul>

<p>This function returns the name of the temporary file to use with <a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/#add-configvm-to-gns3">Add-ConfigVM-to-GNS3</a></p>

<h2 id="examples-1"><em>Examples</em></h2>

<h3 id="alpine">Alpine</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

# alpine :

dockerpullalpine

SYMBOL_DOCKER="/symbols/computer.svg"

ConfigVM=$(Create-VMDockeralpine"alpine:latest"1telnet)
if[-n"${ConfigVM}"]
then
Add-PersistentFolder-to-VMDocker"${ConfigVM}""/etc/ssl"
Add-ConfigVM-to-GNS3"${ConfigVM}"
fi
</code></pre></div></div>

<hr />

<h2 id="dynamips">Dynamips</h2>

<h2 id="examples-2"><em>Examples</em></h2>

<h3 id="cisco-c7200">Cisco C7200</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash

source/opt/raizo/api/Add-to-GNS3.sh
if(($?))
then
return
fi

cat&gt;"c7200.gns3"&lt;&lt;EOF
        {
            "name": "c7200",
            "default_name_format": "R{0}",
            "usage": "ConsoleType=Cisco",
            "image": "c7200-advipservicesk9-mz.152-4.S5.bin",
            "symbol": ":/symbols/router.svg",
            "category": "router",
            "startup_config": "/opt/raizo/user/Config/GNS3/configs/Raizo_ios_base_startup-config.txt",
            "private_config": "",
            "console_type": "telnet",
            "console_auto_start": false,
            "platform": "c7200",
            "idlepc": "0x62cf0330",
            "idlemax": 500,
            "idlesleep": 30,
            "exec_area": 64,
            "mmap": true,
            "sparsemem": true,
            "ram": 512,
            "nvram": 512,
            "mac_addr": "",
            "disk0": 0,
            "disk1": 0,
            "auto_delete_disks": true,
            "system_id": "FTX0945W0MY",
            "compute_id": "local",
            "slot0": "C7200-IO-FE",
            "slot1": "PA-2FE-TX",
            "slot2": "",
            "slot3": "",
            "slot4": "",
            "slot5": "",
            "slot6": "",
            "midplane": "vxr",
            "npe": "npe-400",
            "template_id": "8b3b55a3-3644-4fc9-a494-b525165a2603",
            "template_type": "dynamips",
            "builtin": false
        }
EOF
cp"c7200.gns3"/tmp/c7200.gns3

Add-ConfigVM-to-GNS3/tmp/c7200.gns3
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Live Raizo - Commands</title><link href="https://ib.bsb.br/live-raizo-commands/" rel="alternate" type="text/html" title="Live Raizo - Commands" /><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T15:21:20+00:00</updated><id>https://ib.bsb.br/live-raizo-commands</id><content type="html" xml:base="https://ib.bsb.br/live-raizo-commands/"><![CDATA[<h2 id="network">Network</h2>

<h2 id="fast-ip">fast-ip</h2>

<ul>
  <li>Configuration of IP address and eventually the gateway.</li>
  <li>fast-ip, fast-dhcp and fast-dns used together enable to setup a dynamic DNS.</li>
  <li>When it sets an interface to vlan, the mother of the interface (if it was down) is set to “manual” mode</li>
  <li>To use it, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis"><em>Synopsis</em></h3>

<ul>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] IP-ADDRESS/NET-MASK [IP-GATEWAY]</li>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] dhcp</li>
  <li>fast-ip [INTERFACE-NAME][INTERFACE-NUMBER][:SUB-INTERFACE][.VLAN-NUMBER] manual</li>
</ul>

<h3 id="examples"><em>Examples</em></h3>

<ul>
  <li>fast-ip 172.16.40.17/24
    <ul>
      <li>enp1s0 : 172.16.40.17/24</li>
    </ul>
  </li>
  <li>fast-ip 1 172.16.40.17/24
    <ul>
      <li>enp1s1 : 172.16.40.17/24</li>
    </ul>
  </li>
  <li>fast-ip 2 172.16.40.17/24 172.16.40.254
    <ul>
      <li>enp1s2 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip 3 dhcp
    <ul>
      <li>enp1s3 requests an IP to a DHCP server</li>
    </ul>
  </li>
  <li>fast-ip 0.10 172.16.40.17/24 172.16.40.254
    <ul>
      <li>vlan 10 on enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip virbr0 172.16.40.17/24 172.16.40.254
    <ul>
      <li>virbr0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
  <li>fast-ip enp1s0.10 172.16.40.17/24 172.16.40.254
    <ul>
      <li>vlan 10 on enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
      <li>if enp1s0 was down, enp1s0 is set to manual mode</li>
    </ul>
  </li>
  <li>fast-ip 0:1 172.16.40.17/24 172.16.40.254
    <ul>
      <li>sub interface 1 of enp1s0 : 172.16.40.17/24 and gateway : 172.16.40.254</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-dhcp">fast-dhcp</h2>

<ul>
  <li>Configuration of a DHCP server based on the IP address of the server.</li>
  <li>fast-dhcp configures the dnsmasq server</li>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-ip">fast-ip</a>, fast-dhcp and <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dns">fast-dns</a> used together enable to setup a dynamic DNS.</li>
  <li>You can change the default domain (domain.lan.) used by fast-dhcp and <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dns">fast-dns</a> by
    <ul>
      <li>modifying the variable FAST_DOMAIN in /opt/raizo/etc/fast.conf</li>
      <li>exporting the variable FAST_DOMAIN :</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportFAST_DOMAIN="yournewdomain.org"
</code></pre></div></div>

<ul>
  <li>To use fast-dhcp, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis-1"><em>Synopsis</em></h3>

<ul>
  <li>fast-dhcp [-g] [-d] [INTERFACE-NAME]INTERFACE-NUMBER[:SUB-INTERFACE][.VLAN-NUMBER] [IP-DNS]
    <ul>
      <li>-g : the dhcp server doesn’t propagate the gateway</li>
      <li>-d : the dhcp server doesn’t propagate the DNS</li>
    </ul>
  </li>
</ul>

<p>By default :</p>

<ul>
  <li>IP-DNS is IP address of nameserver found in /etc/resolv.conf. If it doesn’t find it, it uses the IP address of INTERFACE-NUMBER</li>
  <li>The default gateway of dhcp clients is the default gateway of the network of chosen interface, or IP address of INTERFACE-NUMBER</li>
</ul>

<h3 id="examples-1"><em>Examples</em></h3>

<ul>
  <li>fast-dhcp 2 172.16.4.3
    <ul>
      <li>if IP address of enp1s2 is 192.168.33.17
        <ul>
          <li>create pool of IP addresses : 192.168.33.[10,100]/24</li>
          <li>gateway of dhcp clients can be 192.168.33.17</li>
          <li>DNS of dhcp clients will be 172.16.4.3</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>fast-dhcp enp1s2
    <ul>
      <li>if IP address of enp1s2 is 192.168.33.17
        <ul>
          <li>create pool of IP addresses : 192.168.33.[10,100]/24</li>
          <li>gateway of dhcp clients can be 192.168.33.254</li>
          <li>DNS of dhcp clients will be 192.168.33.17</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-dns">fast-dns</h2>

<ul>
  <li>Configuration of a DNS server.</li>
  <li>fast-dns configures the dnsmasq server</li>
  <li>if name is not ended by a dot, fast-dns adds to name the default domain (domain.lan.)</li>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-ip">fast-ip</a>, <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dhcp">fast-dhcp</a> and fast-dns used together enable to setup a dynamic DNS.</li>
  <li>You can change the default domain (domain.lan.) used by <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-dhcp">fast-dhcp</a> and fast-dns by
    <ul>
      <li>modifying the variable FAST_DOMAIN in /opt/raizo/etc/fast.conf</li>
      <li>exporting the variable FAST_DOMAIN :</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportFAST_DOMAIN="yournewdomain.org"
</code></pre></div></div>

<ul>
  <li>To use fast-dns, you must be root or in the group “sudo”</li>
</ul>

<h3 id="synopsis-2"><em>Synopsis</em></h3>

<ul>
  <li>fast-dns NAME IP [NAME2 IP2 [NAME3 IP3 [NAME4 IP4…]]]
    <ul>
      <li>Creates a DNS server (if necessary), and adds the record for theirs IPs and theirs NAMEs</li>
    </ul>
  </li>
  <li>fast-dns dns
    <ul>
      <li>Clears the previous records of the DNS server and creates a new one.</li>
    </ul>
  </li>
</ul>

<h3 id="examples-2"><em>Examples</em></h3>

<ul>
  <li>fast-dns PC1 10.0.0.1
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1</li>
    </ul>
  </li>
  <li>fast-dns PC2.other.local<strong>.</strong> 10.0.0.2
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1 and PC2.other.local. has the IP 10.0.0.2</li>
    </ul>
  </li>
  <li>fast-dns PC3 10.0.0.3 PC4.other.local<strong>.</strong> 10.0.0.4
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1, PC2.other.local. has the IP 10.0.0.2, PC3.domain.lan. has the IP 10.0.0.3 and PC4.other.local. has the IP 10.0.0.4</li>
    </ul>
  </li>
  <li>fast-dns PC2.other.local<strong>.</strong> 10.0.0.4
    <ul>
      <li>For the server DNS, PC1.domain.lan. has the IP 10.0.0.1, PC2.other.local. has the IP 10.0.0.4, PC3.domain.lan. has the IP 10.0.0.3 and PC4.other.local. has the IP 10.0.0.4</li>
    </ul>
  </li>
  <li>fast-dns dns
    <ul>
      <li>Reset records of the DNS server</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-rip">fast-rip</h2>

<ul>
  <li>RIPv2 router configuration for IPv4 and IPv6</li>
  <li>fast-rip configures the <a href="https://frrouting.org/">FRRouting</a> server</li>
  <li>To use it, you must be root or in the group “sudo”</li>
</ul>

<hr />

<h2 id="fast-proxy-on">fast-proxy-on</h2>

<ul>
  <li>Configure shell variables, sudo config and Docker to use the proxy</li>
  <li>Use configuration of /etc/resolv.conf to exclude networks from proxy</li>
  <li>By default, use the proxy “proxy:8080”</li>
  <li>if user is not root or in sudo group, fast-proxy-on does only the commands that doesn’t need to have root power</li>
</ul>

<h3 id="synopsis-3"><em>Synopsis</em></h3>

<ul>
  <li>fast-proxy-on [IP:PORT]
    <ul>
      <li>[IP:PORT] : use IP:PORT as proxy</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-proxy-off">fast-proxy-off</h2>

<ul>
  <li>Remove configuration of <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-proxy-on">fast-proxy-on</a></li>
  <li>if user is not root or in sudo group, fast-proxy-off does only the commands that doesn’t need to have root power</li>
</ul>

<hr />

<h2 id="fast-http">fast-http</h2>

<ul>
  <li>Start a web server on the port 80 and share a directory (by default : “/home/user”)</li>
  <li>CTRL+C to stop it</li>
</ul>

<h3 id="synopsis-4"><em>Synopsis</em></h3>

<ul>
  <li>fast-http [SharedFolder]
    <ul>
      <li>[SharedFolder] : the folder to share. By default : “/home/user”</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-vwifi">fast-vwifi</h2>

<h3 id="on-liveraizo">On LiveRaizo</h3>

<ul>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Virtual%20WIFI%20802.11/">Enable the virtual wifi 802.11</a></li>
  <li>Use and configure the program <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
  <li>The command must be start on LiveRaizo</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<ul>
  <li>fast-vwifi can’t be use in the same time as <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-wifi-docker">fast-wifi-docker</a></li>
</ul>

<h4 id="synopsis-5"><em>Synopsis</em></h4>

<ul>
  <li>fast-vwifi [NUMBER_WIFI_INTERFACE]
    <ul>
      <li>[NUMBER_WIFI_INTERFACE] : Number of wifi interfaces wlan must be created</li>
    </ul>
  </li>
</ul>

<h3 id="on-debian-vm">On Debian VM</h3>

<ul>
  <li><a href="https://sourceforge.net/p/live-raizo/wiki/Virtual%20WIFI%20802.11/">Enable the virtual wifi 802.11</a></li>
  <li>Use and configure the program <a href="https://github.com/Raizo62/vwifi">vwifi</a></li>
  <li>The command must be start on each VM Debian</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
  <li>with the optional parameter “-s”, you set the IP of vwifi-server, and use the TCP protocol.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<h4 id="synopsis-6"><em>Synopsis</em></h4>

<ul>
  <li>fast-vwifi [NUMBER_WIFI_INTERFACE] -s [IP_SERVER]
    <ul>
      <li>[NUMBER_WIFI_INTERFACE] : Number of wifi interfaces wlan must be created ( &lt;= 10)</li>
      <li>-s [NUMBER_WIFI_INTERFACE] : Set the IP address of server and use the TCP protocol.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-wifi-docker">fast-wifi-docker</h2>

<ul>
  <li>Add a wlan interfaces to Docker VM</li>
  <li>The command must be start on LiveRaizo</li>
  <li>You can change MAC address prefixes by modifying the variable VWIFI_PREFIX_MAC_ADDRESS</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exportVWIFI_PREFIX_MAC_ADDRESS="94:95:96"
</code></pre></div></div>

<ul>
  <li>fast-wifi-docker can’t be use in the same time as <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-vwifi">fast-vwifi</a></li>
</ul>

<h3 id="synopsis-7"><em>Synopsis</em></h3>

<ul>
  <li>fast-wifi-docker [-y] [-a] [-r] [-m] [-n Number] [-c NumberWlanToCreate] [NameOfVM1] [NameOfVM2] [NameOfVM3] [NameOfVM…]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>Y</td>
              <td>o</td>
              <td>O : don’t ask for confirmation from user to add wlan</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>A : select all the VMs</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-r</td>
              <td>R : set a random MAC address to wlan interfaces</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-m</td>
              <td>M : enable the monitor mode for wlan0 of LiveRaizo</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N Number : number of wlan interfaces by VM</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C NumberWlanToCreate : number of wlan interfaces to create, if it is not enough</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-3"><em>Examples</em></h3>

<ul>
  <li>fast-wifi-docker
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-wifi-docker ask for confirmation before to add a wlan interface to the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-wifi-docker do not ask for confirmation to add a wlan interface to the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-wifi-docker AP1
    <ul>
      <li>Ask for confirmation before to add a wlan interface to the Virtual Machine “AP1”.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y Client1
    <ul>
      <li>Add a wlan interface to the Virtual Machine “Client1”.</li>
    </ul>
  </li>
  <li>fast-wifi-docker -Y PC1 PC2 Server5
    <ul>
      <li>Add a wlan interface to the Virtual Machines “PC1”, “PC2” and “Server5”</li>
    </ul>
  </li>
</ul>

<hr />

<hr />

<h2 id="system">System</h2>

<h2 id="fast-rescan-interfaces">fast-rescan-interfaces</h2>

<ul>
  <li>Scan to detect new plugged network interfaces, and update the files /etc/network/interfaces, history of Zsh/Bash</li>
</ul>

<hr />

<h2 id="fast-syslog">fast-syslog</h2>

<ul>
  <li>Displays in color the last 40 lines of the file /var/log/syslog</li>
</ul>

<hr />

<h2 id="fast-mount-usb">fast-mount-usb</h2>

<ul>
  <li>Mount the USB key in the directory /media/usb0. If /mnt/usb0 is already used, fast-mount-usb will use /mnt/usb1, etc</li>
</ul>

<h3 id="synopsis-8"><em>Synopsis</em></h3>

<ul>
  <li>fast-mount-usb [-q]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-q</td>
              <td>Q : quiet mode : show only the mounted point and the label</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-battery">fast-battery</h2>

<ul>
  <li>Display the percentage of energy remaining in the battery.
    <ul>
      <li>Try to bring the console windows to the front if percentage of energy remaining is less of 10%, and if the battery is detected and not charging</li>
    </ul>
  </li>
</ul>

<h3 id="synopsis-9"><em>Synopsis</em></h3>

<ul>
  <li>fast-battery [-i] [-t] [-p] [-u]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-i</td>
              <td>I : checks this percentage every 60 seconds and displays the changes</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : show this percentage in the title bar of xterm</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : do a pause before to stop the program</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-u</td>
              <td>U : test of utility. exit 0 only if usefull : battery detected</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-console-resize">fast-console-resize</h2>

<ul>
  <li>Recalculate the console size</li>
  <li>Useful with DDebian in Web-UI</li>
</ul>

<hr />

<hr />

<h2 id="laboratory">Laboratory</h2>

<h2 id="fast-save-project">fast-save-project</h2>

<ul>
  <li>Asks questions to save a GNS3 project</li>
</ul>

<h3 id="synopsis-10"><em>Synopsis</em></h3>

<ul>
  <li>fast-save-project [-h] [options]
    <ul>
      <li>-h : show usefull parameters of <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
      <li>[options] is totally used with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
    </ul>
  </li>
</ul>

<h3 id="steps"><em>Steps</em></h3>

<ol>
  <li>Show detected projects of GNS3 in /home/user/projects and ask which you want to save. For each project, it shows his current size.</li>
  <li>Launch <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-mount-usb">fast-mount-usb</a> to detect new usb keys connected</li>
  <li>Show destinations where to copy the backup of project
    <ul>
      <li>For each usb key, it shows the free space on the total space.</li>
    </ul>
  </li>
  <li>Do the backup with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a></li>
  <li>Run associated command with destination</li>
  <li>If destination is usb, ask to umount the usb key</li>
</ol>

<h3 id="your-own-commands"><em>Your own commands</em></h3>

<ul>
  <li>You can add your own destination and associated commands in /opt/raizo/etc/cmd-fast-save-project.conf</li>
  <li>Line is commented if it begins with #</li>
  <li>
    <p>Each line must be : <em>title</em> [<em>command</em> <em>options</em>]</p>

    <ul>
      <li>title : title shown by fast-save-project in the step where you must choose the destination</li>
      <li><em>command options</em> : if it is not empty, the command “<em>command options</em>” is launched after the backup</li>
      <li>In <em>command options</em>, use “%f” for name of archive</li>
    </ul>
  </li>
  <li>
    <p>You can use more functionality if title begins with “local:”, “net:” or “usb:”,</p>

    <ul>
      <li>local:<em>directory</em> : Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that <em>directory</em> exists</li>
      <li>net:<em>title</em> : Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that it has an IPv4 address</li>
      <li>usb:<em>mountPoint</em> :
        <ul>
          <li>Before to run <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a>, it verifies that <em>mountPoint</em> is already mounted</li>
          <li>After the backup in <em>mountPoint</em>, fast-save-project asks if it musts unmount <em>mountPoint</em></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Example of /opt/raizo/etc/cmd-fast-save-project.conf</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Copy into /mnt/archive and ask to unmount /mnt/archive
usb:/mnt/archive
# Copy into /tmp and show details on archive
local:/tmpls-l%f
# Copy on the FTPs server : srvftp.domain.local
net:ftpsecho-n"Login : "&amp;&amp;readLOGIN&amp;&amp;lftp-u$LOGIN-e"set ftp:ssl-protect-data true ; put '%f'; exit"srvftp.domain.local
# Copy on the ssh server srvssh.domain.local
net:sshecho-n"Login : "&amp;&amp;readLOGIN&amp;&amp;scp%f${LOGIN}@srvssh.domain.local:
</code></pre></div></div>

<hr />

<h2 id="fast-backup-lab">fast-backup-lab</h2>

<ul>
  <li>Backup of the GNS3 project with configuration of GNS3, Qemu,….</li>
</ul>

<h3 id="synopsis-11"><em>Synopsis</em></h3>

<ul>
  <li>fast-backup-lab [-g] [-p] [-s] [-w] [-d] [-c] [-f] [-l] [-n] [-a] [-t] [-y] [DIRECTORY-PROJECT-GNS3] [DIRECTORY-DESTINATION]
    <ul>
      <li>Creates an archive of the directory “DIRECTORY-PROJECT-GNS3”. This archive is created in the directory “DIRECTORY-DESTINATION”</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-g</td>
              <td>G : exclude the configurations files of GNS3 from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : exclude the GNS3 project from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-s</td>
              <td>S : exclude the Startups files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>w</td>
              <td>W : exclude the backup of the vwifi’s state</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : ADD the Default config of devices</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C : ADD the Capture files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-f</td>
              <td>F : ADD the Firewall rules</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-l</td>
              <td>L : ADD the sysctl config</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N : ADD the network configuration</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>A : ADD the same as : -f -l -n</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : test only the config. Don’t create the archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>Y</td>
              <td>o</td>
              <td>O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-4"><em>Examples</em></h3>

<ul>
  <li>fast-backup-lab TP
    <ul>
      <li>Create an archive TP_backup_20130723_12_20_10.tar.xz</li>
    </ul>
  </li>
  <li>fast-backup-lab TP /media/usb0
    <ul>
      <li>Create an archive /media/usb0/TP_backup_20130723_12_23_05.tar.xz</li>
    </ul>
  </li>
  <li>fast-backup-lab -P<br />
+ Create an archive config_backup_20130723_12_29_43.tar.xz with only the configurations files</li>
</ul>

<hr />

<h2 id="fast-restore-lab">fast-restore-lab</h2>

<ul>
  <li>Restore a GNS3 project, which has been saved with <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-backup-lab">fast-backup-lab</a> or <a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-save-project">fast-save-project</a></li>
  <li>By default, the GNS3 project is restored in the directory /home/user/projects</li>
  <li>fast-restore-lab refuses to restore a saved config of GNS3 if it is incompatible with the installed GNS3. This restriction can be bypassed with the “-g” option</li>
  <li>The existence of the “/opt/raizo/etc/disable_output_log.lock” file automatically activates the “-e” option</li>
</ul>

<h3 id="synopsis-12"><em>Synopsis</em></h3>

<ul>
  <li>fast-restore-lab [-g] [-p] [-s] [-w] [-d] [-c] [-f] [-l] [-n] [-v] BACKUP-PROJECT-GNS3
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-g</td>
              <td>G : don’t extract the configurations files of GNS3 from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-p</td>
              <td>P : don’t extract the GNS3 project from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-s</td>
              <td>S : don’t extract the Startups files from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>w</td>
              <td>W : exclude the startup of vwifi</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : exclude the Default config of devices</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-c</td>
              <td>C : exclude the Captured packets</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-f</td>
              <td>F : exclude the Firewall rules of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-l</td>
              <td>L : exclude the sysctl config of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-n</td>
              <td>N : don’t extract the network files of Live from archive</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-u</td>
              <td>U : use the current directory to receive the GNS3 project</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-e</td>
              <td>E : output only the error messages</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-v</td>
              <td>V : only verify if the current version of VMRaizo is compatible</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="example"><em>Example</em></h3>

<ul>
  <li>fast-restore-lab TP_backup_20130723_12_20_10.tar.xz
    <ul>
      <li>Restores files from the archive TP_backup_20130723_12_20_10.tar.xz</li>
    </ul>
  </li>
  <li>fast-restore-lab -s TP_backup_20130723_12_20_10.tar.xz
    <ul>
      <li>Restores files from the archive TP_backup_20130723_12_20_10.tar.xz, without restoring Startups files</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-reset-vm">fast-reset-vm</h2>

<ul>
  <li>Reset the QEmu devices :
    <ul>
      <li>The Hard Disks of the QEmu device return to their initials states</li>
    </ul>
  </li>
  <li>fast-reset-vm must be used when a project of GNS3 is open</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
</ul>

<h3 id="synopsis-13"><em>Synopsis</em></h3>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>fast-reset-vm [-a] [-y</td>
          <td>-o] [NAME-VM1] [NAME-VM2] [NAME-VM3] [NAME-VM…]</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-a</td>
              <td>-A : Select all the VMs</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>-Y</td>
              <td>-o</td>
              <td>-O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>NAME-VM : reset only the VM “NAME-VM1”, “NAME-VM2”, “NAME-VM3”…</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>fast-reset-vm is case insensitive on the name “NAME-VM” if there are no doubt on the choose.</li>
</ul>

<h3 id="examples-5"><em>Examples</em></h3>

<ul>
  <li>fast-reset-vm
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-reset-vm ask for confirmation before to reset the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y
    <ul>
      <li>Display the VM Devices availables and ask the number of the VM. fast-reset-vm do not ask for confirmation to reset the Virtual Machines selected.</li>
    </ul>
  </li>
  <li>fast-reset-vm Router1
    <ul>
      <li>Ask for confirmation before to reset the Virtual Machine “Router1”.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y Server1
    <ul>
      <li>Reset the Virtual Machine “Server1”.</li>
    </ul>
  </li>
  <li>fast-reset-vm -Y PC1 PC2 Server5
    <ul>
      <li>Reset the Virtual Machines “PC1”, “PC2” and “Server5”</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-clean-crash-gns3">fast-clean-crash-gns3</h2>

<ul>
  <li>Kill all the processes used by GNS3 (in case of a crash for instance).</li>
</ul>

<h3 id="synopsis-14"><em>Synopsis</em></h3>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>fast-clean-crash-gns3 [-y</td>
          <td>-o] [-h]</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-y</td>
              <td>-Y</td>
              <td>-o</td>
              <td>-O : Don’t ask for confirmation from user</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h3 id="examples-6"><em>Examples</em></h3>

<ul>
  <li>fast-clean-crash-gns3
    <ul>
      <li>Ask for confirmation before to kill all the processes used by GNS3.</li>
    </ul>
  </li>
  <li>fast-clean-crash-gns3 -Y
    <ul>
      <li>Kill all the processes used by GNS3.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-nat">fast-nat</h2>

<ul>
  <li>enable IP forwarding, configure an DHCP Server and an DNS Server and use NAT with packets coming out of the virbr0 interface</li>
</ul>

<h3 id="synopsis-15"><em>Synopsis</em></h3>

<ul>
  <li>fast-nat [-d] [-n] [-i] [-s] [IP-ADDRESS]
    <ul>
      <li>-d : disable the DHCP service</li>
      <li>-n : disable the DNS service</li>
      <li>-i : don’t run iptables rules</li>
      <li>-s : don’t start the sysctl config</li>
      <li>if virbr0 has an IP, and IP-ADDRESS is not defined, then fast-nat uses the IP of virbr0</li>
      <li>if virbr0 has no IP, and IP-ADDRESS is not defined, then fast-nat uses the IP 10.145.147.1</li>
      <li>if IP-ADDRESS is defined, then fast-nat uses this IP and modifies with it the IP of virbr0</li>
    </ul>
  </li>
</ul>

<h3 id="example-1"><em>Example</em></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-nat
*fast-ipvirbr010.145.147.1/24
+[/etc/network/interfaces:Addthenewconfigurationforvirbr0]
*sudoifupvirbr0
*fast-dnsdns
+[/etc/Raizo.dnsmasq.hosts:Createthefile]
+[/etc/dnsmasq.d/Raizo.DNS.conf:Configurationoftheserver]
*sudosystemctlstartdnsmasq
*sudosystemctlenablednsmasq
Synchronizingstateofdnsmasq.servicewithSysVservicescriptwith/lib/systemd/systemd-sysv-install.
Executing:/lib/systemd/systemd-sysv-installenablednsmasq
*fast-dhcpvirbr010.145.147.1
# Pool          : 10.145.147.[10,100]/24
# Gateway       : 10.145.147.1
# DNS           : 10.145.147.1
-----------------------------
*sudosystemctlstopdnsmasq
+[/etc/dnsmasq.d/Raizo.DHCP.conf:Addpool10.145.147.[10,100]/24]
*sudosystemctlstartdnsmasq
*sudosysctlnet.ipv4.ip_forward=1
net.ipv4.ip_forward=1
*sudoiptables-tmangle-IPREROUTING-ivirbr0-jMARK--set-mark0xd001
*sudoiptables-tnat-IPOSTROUTING-mmark--mark0xd001-jMASQUERADE
</code></pre></div></div>

<hr />

<h2 id="fast-vwifi-update-gns3">fast-vwifi-update-gns3</h2>

<ul>
  <li>
    <p>Update the server “vwifi” with the geographical coordinates of each VM from GNS3</p>
  </li>
  <li>
    <p>vwifi-server (<a href="https://sourceforge.net/p/live-raizo/wiki/Commands/#fast-vwifi">fast-vwifi</a>) must be started before</p>
  </li>
  <li>fast-vwifi-update-gns3 must be used when a project of GNS3 is open</li>
  <li>fast-vwifi-update-gns3 update only the coordinate of the VMs which use the VHOST protocol</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
</ul>

<hr />

<h2 id="fast-gns3-server">fast-gns3-server</h2>

<ul>
  <li>Start the gns3server.</li>
  <li>Without parameter, gnsserver is started in foreground. CTRL+C to stop it.</li>
  <li>It loads the credential of GNS3 from /opt/raizo/etc/gns3.conf</li>
  <li>If gns3server is already started by gns3-gui, then gns3server becomes accessible from external IPs.</li>
</ul>

<h3 id="synopsis-16"><em>Synopsis</em></h3>

<ul>
  <li>fast-gns3-server [-r] [-s] [-d]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>r</td>
              <td>R : run the service gns3-server (sudo systemctl start gns3-server.service)</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>s</td>
              <td>S : stop the service gns3-server (sudo systemctl stop gns3-server.service)</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-d</td>
              <td>D : display if gns3server is running</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="add-to-gns3sh"><a href="https://sourceforge.net/p/live-raizo/wiki/API_Add-to-GNS3.sh/">Add-to-GNS3.sh</a></h2>

<hr />

<hr />

<h2 id="update">Update</h2>

<h2 id="fast-startup">fast-startup</h2>

<ul>
  <li>Mount automatically the USB key in /media/usb0 (or usb1, usb2..) and processes the script /media/usb0/raizo.sh.</li>
</ul>

<h3 id="synopsis-17"><em>Synopsis</em></h3>

<ul>
  <li>
    <p>fast-startup [NAME-SCRIPT]</p>

    <ul>
      <li>By default, NAME-SCRIPT is raizo.sh. NAME-SCRIPT will always be lowercase before downloading.</li>
      <li>You can modify default values in the file /opt/raizo/etc/fast-startup.conf</li>
      <li>Your script raizo.sh (or NAME-SCRIPT) can affect a value different of zero at the variable FAST_ERROR_RAIZO to indicate an error at fast-startup. You can use the variable FAST_ERROR_RAIZO_LOG to indicate also a message</li>
      <li>You can use the variable MOUNT_KEY to know where the usb key is mounted</li>
    </ul>
  </li>
</ul>

<h3 id="examples-7"><em>Examples</em></h3>

<ul>
  <li>fast-startup
    <ul>
      <li>Mount automatically the USB key in /media/usb0 and processes the script /media/usb0/raizo.sh.</li>
    </ul>
  </li>
  <li>fast-startup US
    <ul>
      <li>Mount automatically the USB key in /media/usb0 and processes the script /media/usb0/us.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="fast-update">fast-update</h2>

<ul>
  <li>Download the file on a web server and processes it.</li>
</ul>

<h3 id="synopsis-18"><em>Synopsis</em></h3>

<ul>
  <li>
    <p>fast-update [-s WEB-SERVER] [NAME-SCRIPT]</p>

    <ul>
      <li>By default, NAME-SCRIPT is raizo.sh. NAME-SCRIPT will always be lowercase before downloading.</li>
      <li>By default, WEB-SERVER is UpdateRaizo.</li>
      <li>You can modify the default values in the file /opt/raizo/etc/fast-startup.conf</li>
      <li>Your script raizo.sh (or NAME-SCRIPT) can affect a value different of zero at the variable FAST_ERROR_RAIZO to indicate an error at fast-update. You can use the variable FAST_ERROR_RAIZO_LOG to indicate also a message.</li>
    </ul>
  </li>
</ul>

<h3 id="examples-8"><em>Examples</em></h3>

<ul>
  <li>fast-update
    <ul>
      <li>Download the file <a href="http://updateraizo/raizo.sh">http://UpdateRaizo/raizo.sh</a> and processes it.</li>
    </ul>
  </li>
  <li>fast-update WIN
    <ul>
      <li>Download the file <a href="http://updateraizo/win">http://UpdateRaizo/win</a> and processes it.</li>
    </ul>
  </li>
  <li>fast-update -s 88.89.90.91 WIN
    <ul>
      <li>Download the file <a href="http://88.89.90.91/win">http://88.89.90.91/win</a> and processes it.</li>
    </ul>
  </li>
</ul>

<hr />

<hr />

<h2 id="helps">Helps</h2>

<h2 id="fast-memo">fast-memo</h2>

<ul>
  <li>Display a reminder</li>
</ul>

<h3 id="synopsis-19"><em>Synopsis</em></h3>

<ul>
  <li>fast-memo [-t] [NAME-MEMO]
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-t</td>
              <td>T : Show the name of memo in the title bare of xterm</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>-h</td>
              <td>H</td>
              <td>? : show this help</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>NAME-MEMO : Show the reminder “NAME-MEMO”. If none NAME-MEMO is indicated then fast-memo shows all reminders available. You must indicate the number of memo that you want display</li>
    </ul>
  </li>
</ul>

<h3 id="keys-to-interact"><em>Keys to interact</em></h3>

<ul>
  <li>“q” to quit (as less command)</li>
  <li>”/” to search a word. It ignores case, except if any uppercase letters appear in the search pattern
    <ul>
      <li>“n” to find the next word</li>
      <li>“shift+n” the find the previous word</li>
    </ul>
  </li>
</ul>

<h3 id="examples-9"><em>Examples</em></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-memo
Availablechoices:
1)*QUIT*24)diff47)mkdir70)sockstat
2)7z25)dig48)mount71)sort
3)ab26)distcc49)mysql72)split
4)apparmor27)emacs50)mysqldump73)ssh
5)apt-cache28)find51)ndiswrapper74)ssh-copy-id
6)apt-get29)gcc52)netcat75)ssh-keygen
7)aptitude30)gdb53)netstat76)stdout
8)asterisk31)git54)nmap77)strace
9)at32)GNS355)notify-send78)systemctl
10)awk33)gpg56)od79)tail
11)bash34)grep57)openssl80)Tap
12)Bridge35)gs58)pdftk81)tar
13)chmod36)head59)php82)tcpdump
14)chown37)history60)ping83)tmux
15)Cisco38)ifconfig61)ps84)top
16)convert39)ip62)python85)truncate
17)crontab40)iptables63)rm86)uname
18)curl41)iwconfig64)Routage87)vim
19)cut42)less65)sam2p88)Vlan
20)date43)ln66)scp89)wget
21)dd44)ls67)screen90)WiFi
22)df45)lsof68)sed
23)dhclient46)MAC69)shred
#?
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;fast-memopi
(Fromcheat/https://github.com/chrisallenlane/cheat)

# ping a host with a total count of 15 packets overall.
ping-c15www.example.com

# ping a host with a total count of 15 packets overall, one every .5 seconds (faster ping).
ping-c15-i.5www.example.com

# test if a packet size of 1500 bytes is supported (to check the MTU for example)
ping-s1500-c10-Mdowww.example.com
</code></pre></div></div>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">BIOS settings for improved performance on GMKtec G5 (Intel N97)</title><link href="https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97/" rel="alternate" type="text/html" title="BIOS settings for improved performance on GMKtec G5 (Intel N97)" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T16:57:38+00:00</updated><id>https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97</id><content type="html" xml:base="https://ib.bsb.br/bios-settings-for-improved-performance-on-gmktec-g5-intel-n97/"><![CDATA[<p>Tuning BIOS settings can potentially enhance performance, but it requires careful adjustments and testing, especially on compact systems like the GMKtec G5 with its Intel N97 processor [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]. Pushing settings too aggressively can lead to instability, overheating, or reduced component lifespan.</p>

<p><strong>Important Disclaimers &amp; Prerequisites:</strong></p>

<ol>
  <li><strong>Risk:</strong> Modifying BIOS settings beyond defaults carries risks. Proceed at your own discretion. Instability might require resetting the BIOS (CMOS clear, possibly via jumper shorting [User Context]).</li>
  <li><strong>Cooling:</strong> These recommendations assume your GMKtec G5 has adequate cooling. Monitor temperatures closely (e.g., using HWiNFO64) during stress tests. If CPU temperatures consistently exceed LEFTPAREN85-90^\circ CRIGHTPAREN, you <em>must</em> relax power limits, voltage offsets, or clock speeds.</li>
  <li><strong>BIOS Version:</strong> Ensure you have the latest GMKtec G5 BIOS installed. Some features, like the 1200 MHz iGPU clock, require specific updates (e.g., build dated May 22 2024 or later [User Context, optimal BIOS settings GMKtec G5 N97 performance: organic[2], optimal BIOS settings GMKtec G5 N97 performance: organic[4]]). Access the BIOS by pressing <code class="language-plaintext highlighter-rouge">Esc</code> during startup [User Context].</li>
  <li><strong>Incremental Changes:</strong> Apply changes incrementally, testing stability (e.g., with Cinebench R23, Prime95 Small FFTs, 3DMark) after each significant adjustment before proceeding.</li>
  <li><strong>Goal:</strong> These settings aim for higher sustained performance and responsiveness, balancing clock speeds with the N97’s thermal and power constraints (12W base TDP [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1], Intel Alder Lake-N N97 CPU BIOS optimization: organic[9]]). They prioritize enabling dynamic boosting mechanisms effectively.</li>
</ol>

<p>Here are the recommended BIOS settings, categorized by section, targeting improved performance on your GMKtec G5 (Intel N97):</p>

<p><strong>1. CPU Settings (Advanced → CPU Configuration)</strong></p>

<ul>
  <li><strong>Turbo Ratio Limits / Performance CPU Ratio:</strong> Ensure Turbo Boost is <strong>Enabled</strong>. If manual ratio control is available, you can <em>try</em> setting the max ratio to <strong>36</strong> (for the N97’s 3.6 GHz max boost [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]). Monitor stability and thermals closely if setting manually. <code class="language-plaintext highlighter-rouge">Auto</code> is safer.</li>
  <li><strong>C-State Control / CPU C-State Support:</strong> <strong>Enabled</strong>. While disabling C-states is common advice for minimizing latency on high-end desktops, a user report for this specific GMKtec G5 N97 suggests enabling C-states is <em>necessary</em> for the CPU to properly reach its turbo boost frequencies [optimal BIOS settings GMKtec G5 N97 performance: organic[1]]. Enabling them allows the CPU to enter low-power states when idle, reducing heat and power consumption, which can paradoxically help sustain boost clocks longer under load in a thermally constrained system.</li>
  <li><strong>Intel SpeedStep Technology (EIST):</strong> <strong>Enabled</strong>. This allows the CPU to dynamically adjust its clock speed based on load, which is essential for managing power consumption and heat. Disabling it forces high clocks constantly, likely leading to faster thermal throttling and potentially <em>lower</em> sustained performance.</li>
  <li><strong>Hyper-Threading Technology:</strong> <strong>Enabled</strong> (The N97 is 4 Cores / 4 Threads, so this specific setting might not be present or applicable as it doesn’t have Hyper-Threading like Core i-series CPUs, but ensure core enablement reflects 4C/4T).</li>
  <li><strong>CPU Voltage Offset:</strong> Start with <strong>Auto</strong> or <strong>0 mV</strong>. If experiencing instability at target clocks/power limits, <em>or</em> if trying to slightly <em>reduce</em> heat, you can cautiously experiment with small offsets <em>if the BIOS permits</em>. Try LEFTPAREN \pm 10 RIGHTPARENmV to LEFTPAREN \pm 25 RIGHTPARENmV increments, testing thoroughly after each change. Positive offset LEFTPAREN (+) RIGHTPAREN <em>might</em> improve stability at higher clocks but increases heat/power. Negative offset LEFTPAREN (-) RIGHTPAREN reduces heat/power but might reduce stability. Granularity might differ from the “±100 MHz” mentioned for frequency [User Context].</li>
  <li><strong>Power Limits (PL1/PL2):</strong> This is critical for performance in thermally limited systems.
    <ul>
      <li><strong>Package Power Limit 2 (PL2):</strong> Set to <strong>15W</strong> to <strong>18W</strong>. This defines the short-term boost power. Start lower (15W) [Intel Alder Lake-N N97 CPU BIOS optimization: organic[2]] and increase only if thermals remain under control during bursts (e.g., application loading, short benchmarks).</li>
      <li><strong>Package Power Limit 1 (PL1):</strong> Set to <strong>12W</strong> to <strong>15W</strong>. This defines the sustained power limit. Matching it to the N97’s base TDP (12W [Intel Alder Lake-N N97 CPU BIOS optimization: organic[1]]) is the safest start. You can try increasing towards your stable PL2 value (e.g., 15W) if cooling allows sustained operation without throttling.</li>
      <li><strong>PL1 Time Window (Tau):</strong> Leave at <strong>Auto</strong> or <strong>28 seconds</strong> if configurable. This determines how long PL2 can be maintained before dropping to PL1.</li>
    </ul>
  </li>
  <li><strong>AVX Ratio Offset:</strong> Set to <strong>0</strong> or <strong>Auto</strong>. Setting 0 ensures AVX workloads run at the full target frequency, but monitor heat as AVX instructions are power-hungry.</li>
</ul>

<p><strong>2. Memory (Advanced → DRAM Configuration)</strong></p>

<ul>
  <li><strong>XMP Profile:</strong> Select <strong>Profile 1</strong> (or the highest available profile) if using compatible DDR5-4800 SODIMMs [User Context] to automatically configure optimal frequency, timings, and voltage (likely 1.1V or slightly higher per XMP spec).</li>
  <li><strong>Memory Frequency:</strong> Ensure it’s running at <strong>DDR5-4800 MHz</strong>. If XMP doesn’t work or isn’t available, set this manually.</li>
  <li><strong>Timings (tCL, tRCD, tRP, tRAS):</strong> Leave on <strong>Auto</strong> or XMP defaults unless you are experienced with manual memory tuning. Tighter timings offer minor gains but risk instability.</li>
  <li><strong>Command Rate:</strong> <strong>Auto</strong> (often defaults to 2T for compatibility, 1T might be slightly faster but harder to stabilize).</li>
</ul>

<p><strong>3. Integrated GPU (Advanced → North Bridge or System Agent Configuration)</strong></p>

<ul>
  <li><strong>iGPU Maximum Frequency Override:</strong> If available and you have the updated BIOS, set to <strong>1200 MHz</strong> [User Context, optimal BIOS settings GMKtec G5 N97 performance: organic[2]]. Leave on Auto if unsure or using an older BIOS.</li>
  <li><strong>DVMT Pre-Allocated:</strong> <strong>Auto</strong> or <strong>256MB</strong>. The operating system will dynamically allocate more memory as needed (up to half the system RAM typically). Setting higher pre-allocation (e.g., 512MB) is usually unnecessary unless specific applications demand it.</li>
  <li><strong>iGPU Power Limit:</strong> If tunable, set to the <strong>Maximum</strong> available setting or leave on <strong>Auto</strong>.</li>
</ul>

<p><strong>4. Storage &amp; I/O (Advanced → Onboard Devices Configuration)</strong></p>

<ul>
  <li><strong>M.2 PCIe Link Speed:</strong> Ensure set to <strong>Gen4 x4</strong> for maximum NVMe SSD performance [User Context].</li>
  <li><strong>SATA Mode Selection:</strong> <strong>AHCI</strong> (unless you specifically set up a RAID array, which is unlikely in this mini-PC).</li>
  <li><strong>USB Port Configuration:</strong> Leave <strong>Enabled</strong> unless you have a specific reason to disable a port. Disabling unused USB 2.0 ports offers negligible performance benefits [Previous Response Analysis].</li>
</ul>

<p><strong>5. Boot (Boot → Boot Configuration)</strong></p>

<ul>
  <li><strong>Fast Boot / Quick Boot:</strong> <strong>Enabled</strong> to speed up POST [User Context].</li>
  <li><strong>CSM (Compatibility Support Module):</strong> <strong>Disabled</strong> for pure UEFI boot (required for features like Secure Boot and generally preferred for modern OSes).</li>
  <li><strong>Boot Order:</strong> Set your primary OS drive (NVMe SSD) as the first boot device.</li>
</ul>

<p><strong>6. Security &amp; Virtualization (Security → Security Settings)</strong></p>

<ul>
  <li><strong>TPM Device Selection / Security Device Support:</strong> <strong>Enabled</strong> (Set to Intel PTT - Platform Trust Technology [User Context]) for Windows 11 compatibility and security features like BitLocker.</li>
  <li><strong>Intel Virtualization Technology (VT-x):</strong> <strong>Enabled</strong> [User Context]. Disabling this offers minimal (if any) power savings [Previous Response Analysis] and prevents running virtual machines or WSL2/Hyper-V. Leave it enabled unless you are certain you will <em>never</em> need virtualization.</li>
</ul>

<p><strong>7. Power Management (Advanced → ACPI Settings or Platform Power Management) (Continued)</strong></p>

<ul>
  <li><strong>ACPI Sleep State / Standby Mode:</strong> Leave at <strong>Auto</strong> or enable <strong>S3 (Suspend to RAM)</strong> or <strong>Modern Standby/S0ix Low Power Idle</strong> if available and desired [User Context]. Disabling sleep states hinders power saving during idle or sleep periods and often has no benefit for peak performance. While disabling might slightly speed up wake times, it comes at the cost of higher power drain when the system is supposed to be sleeping. Keep defaults unless you encounter specific issues with sleep/wake functionality.</li>
  <li><strong>Wake-on-LAN (WOL):</strong> <strong>Disabled</strong> unless you specifically need this feature.</li>
  <li><strong>ErP Ready:</strong> <strong>Disabled</strong> usually allows USB power during S5/S4 states (for charging, etc.). Enable ErP for stricter power saving in off/hibernate states (often disables USB power). Set according to your preference; minimal performance impact.</li>
</ul>

<p><strong>8. Saving, Testing, and Verification</strong></p>

<ul>
  <li><strong>Save Changes:</strong> Once you have configured the settings, navigate to the <strong>Save &amp; Exit</strong> menu, select <strong>Save Changes and Reset</strong> (or similar wording), and confirm. The system will reboot with the new settings applied.</li>
  <li><strong>Stress Testing:</strong> This is crucial. After booting into the OS, run stability tests to ensure the system can handle sustained load with the new settings:
    <ul>
      <li><strong>CPU:</strong> Prime95 (Small FFTs test for maximum heat/power) or Cinebench R23 (multi-core test run for 10-30 minutes).</li>
      <li><strong>GPU:</strong> FurMark or Unigine Heaven/Superposition benchmark loops.</li>
      <li><strong>Combined:</strong> Run a demanding game or application, or a simultaneous CPU and GPU test (though less common).</li>
    </ul>
  </li>
  <li><strong>Monitoring:</strong> While stress testing, use monitoring software like <strong>HWiNFO64</strong> (Sensors window) to watch:
    <ul>
      <li><strong>CPU Temperatures:</strong> Core temperatures should ideally stay below LEFTPAREN85-90^\circ CRIGHTPAREN under sustained load. Consistent temperatures above this indicate inadequate cooling or overly aggressive settings.</li>
      <li><strong>CPU Clock Speeds:</strong> Verify if the CPU reaches and sustains the expected boost clocks (up to 3.6 GHz for brief periods, potentially lower sustained clocks depending on PL1 and thermals).</li>
      <li><strong>Power Consumption:</strong> Observe Package Power to see if it respects the PL1/PL2 limits you set.</li>
      <li><strong>Throttling:</strong> Check for flags indicating Thermal Throttling, Power Limit Throttling (PL1/PL2), or Current/EDP Limit Throttling. If throttling occurs frequently, you may need to lower power limits, reduce voltage offset, or improve cooling.</li>
    </ul>
  </li>
  <li><strong>Troubleshooting:</strong> If the system becomes unstable (crashes, fails to boot):
    <ul>
      <li>Re-enter the BIOS and revert the last change you made.</li>
      <li>If you cannot enter the BIOS, you may need to perform a <strong>CMOS reset</strong>. This usually involves unplugging the PC, removing the small coin-cell battery from the motherboard for a minute, or shorting specific “CMOS_CLR” jumper pins/pads on the motherboard as per the GMKtec G5 manual or documentation [User Context]. This will restore BIOS settings to factory defaults.</li>
    </ul>
  </li>
</ul>

<p>Remember, BIOS tuning is an iterative process. The optimal settings for your specific GMKtec G5 might require some experimentation based on your cooling, silicon lottery, and workload. Start with these recommendations and adjust based on careful testing and monitoring. Good luck!</p>]]></content><author><name></name></author><category term="scratchpad" /></entry><entry><title type="html">Building and deploying a custom site using GitHub Actions and GitHub Pages</title><link href="https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages/" rel="alternate" type="text/html" title="Building and deploying a custom site using GitHub Actions and GitHub Pages" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T01:40:21+00:00</updated><id>https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages</id><content type="html" xml:base="https://ib.bsb.br/building-and-deploying-a-custom-site-using-github-actions-and-github-pages/"><![CDATA[<blockquote>
  <p>also check <code class="language-plaintext highlighter-rouge">https://github.com/simonw/git-scraper-template</code></p>
</blockquote>

<hr />

<p>I figured out a minimal pattern for building a completely custom website using GitHub Actions and deploying the result to GitHub Pages.</p>

<p>First you need to enable GitHub Pages for the repository. Navigate to Settings -&gt; Pages (or visit <code class="language-plaintext highlighter-rouge">$repo/settings/pages</code>) and set the build source to “GitHub Actions”.</p>

<p>Here’s my minimal YAML recipe - save this in a <code class="language-plaintext highlighter-rouge">.github/workflows/publish.yml</code> file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Publish site</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">permissions</span><span class="pi">:</span>
  <span class="na">pages</span><span class="pi">:</span> <span class="s">write</span>
  <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build the site</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">mkdir _site</span>
        <span class="s">echo '&lt;h1&gt;Hello, world!&lt;/h1&gt;' &gt; _site/index.html</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload artifact</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-pages-artifact@v3</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">github-pages</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to GitHub Pages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">deployment</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/deploy-pages@v4</span>
</code></pre></div></div>
<p>Anything that goes in that <code class="language-plaintext highlighter-rouge">_site/</code> directory will be published to the GitHub Pages site.</p>

<p>The <code class="language-plaintext highlighter-rouge">permissions</code> are required - the <code class="language-plaintext highlighter-rouge">pages: write</code> one enables writes to pages and for some reason the <code class="language-plaintext highlighter-rouge">id-token: write</code> one is needed by the <a href="https://github.com/actions/deploy-pages">actions/deploy-pages</a> action.</p>

<p>The default URL for the site will be <code class="language-plaintext highlighter-rouge">https://$GITHUB_USERNAME.github.io/$REPO_NAME/</code>. You can set this to <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">custom domain</a> if you want.</p>

<p><a href="https://github.com/simonw/minimal-github-pages-from-actions/">github.com/simonw/minimal-github-pages-from-actions</a> is an example repository that uses this exact YAML configuration. It publishes a site to <a href="https://simonw.github.io/minimal-github-pages-from-actions/">https://simonw.github.io/minimal-github-pages-from-actions/</a>.</p>

<h2 id="next-steps">Next steps</h2>

<p>You can combine this trick with scheduled workflows and <a href="https://simonwillison.net/2020/Oct/9/git-scraping/">Git scraping</a> to create all sorts of interesting and useful things.</p>

<p>I’m using it to publish <a href="https://simonw.github.io/recent-california-brown-pelicans/atom.xml">an Atom feed</a> of recent California Brown Pelicans sightings on <a href="https://www.inaturalist.org/">iNaturalist</a> in my <a href="https://github.com/simonw/recent-california-brown-pelicans">simonw/recent-california-brown-pelicans</a> repository.</p>

<p>I also use it to publish my <a href="https://tools.simonwillison.net/">tools.simonwillison.net</a> site with a custom <a href="https://tools.simonwillison.net/colophon">colophon</a> page - see <a href="https://simonwillison.net/2025/Mar/11/using-llms-for-code/#a-detailed-example">this post</a> for details.</p>]]></content><author><name></name></author><category term="scratchpad" /></entry></feed>